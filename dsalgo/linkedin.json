[
    {
        "id": "339",
        "title": "Array and Strings",
        "slug": "array-and-strings",
        "items": [
            {
                "id": "2907",
                "title": "Two Sum",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "1",
                    "questionFrontendId": "1",
                    "sessionId": "968792",
                    "questionTitle": "Two Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/two-sum/submit/",
                    "interpretUrl": "/problems/two-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def twoSum(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar twoSum = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer[]}\\ndef two_sum(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func twoSum(nums []int, target int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun twoSum(nums: IntArray, target: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer[]\\n     */\\n    function twoSum($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function twoSum(nums: number[], target: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (two-sum nums target)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\\ntwo_sum(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\\n  def two_sum(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,7,11,15]\n9",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"twoSum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\",\n    \"size\": 2\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
                        "So, if we fix one of the numbers, say <pre>x</pre>, we have to scan the entire array to find the next number <pre>y</pre> which is <pre>value - x</pre> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
                        "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
                    ],
                    "solution": {
                        "title": "Two Sum",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/567281997\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n\r\n---\r\n\r\n#### Approach 1: Brute Force\r\n\r\n**Algorithm**\r\n\r\nThe brute force approach is simple. Loop through each element $$x$$ and find if there is another value that equals to $$target - x$$.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/cvvgJGBX/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"cvvgJGBX\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n^2)$$.\r\nFor each element, we try to find its complement by looping through the rest of the array which takes $$O(n)$$ time. Therefore, the time complexity is $$O(n^2)$$.\r\n\r\n* Space complexity: $$O(1)$$.\r\nThe space required does not depend on the size of the input array, so only constant space is used.\r\n\r\n---\r\n#### Approach 2: Two-pass Hash Table\r\n\r\n**Intuition**\r\n\r\nTo improve our runtime complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to get its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.\r\n\r\nWe can reduce the lookup time from $$O(n)$$ to $$O(1)$$ by trading space for speed. A hash table is well suited for this purpose because it supports fast lookup in *near* constant time. I say \"near\" because if a collision occurred, a lookup could degenerate to $$O(n)$$ time. However, lookup in a hash table should be amortized $$O(1)$$ time as long as the hash function was chosen carefully.\r\n\r\n**Algorithm**\r\n\r\nA simple implementation uses two iterations. In the first iteration, we add each element's value as a key and its index as a value to the hash table. Then, in the second iteration, we check if each element's complement ($$target - nums[i]$$) exists in the hash table. If it does exist, we return current element's index and its complement's index. Beware that the complement must not be $$nums[i]$$ itself!\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/BcoEkYCL/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"BcoEkYCL\"></iframe>  \r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements exactly twice. Since the hash table reduces the lookup time to $$O(1)$$, the overall time complexity is $$O(n)$$.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores exactly $$n$$ elements.\r\n\r\n---\r\n#### Approach 3: One-pass Hash Table\r\n\r\n**Algorithm**\r\n    \r\nIt turns out we can do it in one-pass. While we are iterating and inserting elements into the hash table, we also look back to check if current element's complement already exists in the hash table. If it exists, we have found a solution and return the indices immediately.\r\n\r\n**Implementation**    \r\n    \r\n<iframe src=\"https://leetcode.com/playground/XjHaJQau/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"XjHaJQau\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements only once. Each lookup in the table costs only $$O(1)$$ time.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores at most $$n$$ elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "two-sum",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.737,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1968",
                "title": "Valid Number",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "65",
                    "questionFrontendId": "65",
                    "sessionId": "968792",
                    "questionTitle": "Valid Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-number/submit/",
                    "interpretUrl": "/problems/valid-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isNumber(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isNumber(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isNumber(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isNumber(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isNumber(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsNumber(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isNumber = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef is_number(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isNumber(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isNumber(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isNumber(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isNumber(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_number(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function isNumber($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isNumber(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-number s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_number(S :: unicode:unicode_binary()) -> boolean().\\nis_number(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_number(s :: String.t) :: boolean\\n  def is_number(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"0\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isNumber\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <strong>valid number</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>A <strong>decimal number</strong> or an <strong>integer</strong>.</li>\n\t<li>(Optional) An <code>&#39;e&#39;</code> or <code>&#39;E&#39;</code>, followed by an <strong>integer</strong>.</li>\n</ol>\n\n<p>A <strong>decimal number</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>(Optional) A sign character (either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>).</li>\n\t<li>One of the following formats:\n\t<ol>\n\t\t<li>One or more digits, followed by a dot <code>&#39;.&#39;</code>.</li>\n\t\t<li>One or more digits, followed by a dot <code>&#39;.&#39;</code>, followed by one or more digits.</li>\n\t\t<li>A dot <code>&#39;.&#39;</code>, followed by one or more digits.</li>\n\t</ol>\n\t</li>\n</ol>\n\n<p>An <strong>integer</strong> can be split up into these components (in order):</p>\n\n<ol>\n\t<li>(Optional) A sign character (either <code>&#39;+&#39;</code> or <code>&#39;-&#39;</code>).</li>\n\t<li>One or more digits.</li>\n</ol>\n\n<p>For example, all the following are valid numbers: <code>[&quot;2&quot;, &quot;0089&quot;, &quot;-0.1&quot;, &quot;+3.14&quot;, &quot;4.&quot;, &quot;-.9&quot;, &quot;2e10&quot;, &quot;-90E3&quot;, &quot;3e+7&quot;, &quot;+6e-1&quot;, &quot;53.5e93&quot;, &quot;-123.456e789&quot;]</code>, while the following are not valid numbers: <code>[&quot;abc&quot;, &quot;1a&quot;, &quot;1e&quot;, &quot;e3&quot;, &quot;99e2.5&quot;, &quot;--6&quot;, &quot;-+3&quot;, &quot;95a54e53&quot;]</code>.</p>\n\n<p>Given a string <code>s</code>, return <code>true</code><em> if </em><code>s</code><em> is a <strong>valid number</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;e&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;.1&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>s</code> consists of only English letters (both uppercase and lowercase), digits (<code>0-9</code>), plus <code>&#39;+&#39;</code>, minus <code>&#39;-&#39;</code>, or dot <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Valid Number",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nYou're browsing through LeetCode's problems and notice a problem marked as hard with a 16% acceptance rate, the lowest you've ever seen. What could it be? 4D Dynamic Programming + binary search? An esoteric graph algorithm with a name you can't pronounce?\r\n\r\nActually, it's \"determine if a string is a number\". What gives? In my opinion, the reason this problem is so \"difficult\" isn't necessarily because it is **super** hard. I think it's just really hard to approach the problem in a way that covers *all* possible edge cases - something this problem definitely does not lack. Additionally, this is not your typical LeetCode problem, but a problem that is highly representative of a \"real world\" problem - a seemingly simple task that is frustratingly full of edge cases.\r\n\r\nDon't feel discouraged if you're struggling with this problem. When we solve a lot of problems, we discover common patterns, algorithms, and neat tricks that stick with us. We can then apply this knowledge to solve similar problems in the future. The issue with this problem is that there isn't really any other problem on LeetCode that prepares you for it. The key to solving this problem is to carefully read the problem statement, think about edge cases, and keep your code ***simple***.  \r\n\r\n> **Interview Tip:** Asked a question like this in an interview? Be sure to communicate thoroughly with your interviewer to make sure you're covering all cases.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Follow The Rules!\r\n\r\n**Intuition**\r\n\r\nThe problem statement outlines a very specific set of rules. Let's put all possible characters into groups, and then create a set of rules for each group. Then, we can iterate through the input and evaluate if the characters are following the rules or not.\r\n\r\nWhat are all of the possible character groups, and what can we say about them? Reading through the problem statement **very carefully**, we can ascertain:\r\n\r\n1. Digits (one of `[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]`)\r\n    - Both **decimal numbers** and **integers** must contain at least one digit.\r\n\r\n2. A sign (`\"+\"` or `\"-\"`)\r\n    - Sign characters are optional for both **decimal numbers** and **integers**, but if one is present, it will always be the first character. Note, this means that a sign character can also appear immediately after an exponent.\r\n\r\n3. An exponent (`\"e\"` or `\"E\"`)\r\n    - Exponents are also optional, but if the string contains one then it must be after a **decimal number** or an **integer**.\r\n    - An **integer** must follow the exponent.\r\n\r\n4. A dot (`\".\"`)\r\n    - A **decimal number** should only contain one dot. **Integers** cannot contain dots.\r\n\r\n5. Anything else\r\n    - There will never be anything else in a *valid number*.\r\n\r\nFrom these facts, we can logically determine a set of rules to follow in our algorithm.\r\n\r\n**Rules**\r\n\r\n1. Digits\r\n    - First of all, there must always be at least one digit in the input for it to form a valid number. Let's use a variable `seenDigit` to indicate whether we have seen a digit yet.\r\n\r\n2. Signs\r\n    - If a sign is present, it must be the first character in a **decimal number** or **integer**. In a valid number, there are two possible locations for these signs - at the front of the number, or right after an exponent (`\"e\"` or `\"E\"`) e.g., `-63e+7`. Therefore, if we see a sign, and it is not the first character of the input, and does not come immediately after an exponent (`\"e\"` or `\"E\"`), then we know the number is not valid.\r\n\r\n3. Exponents (`\"e\"` or `\"E\"`)\r\n    - There cannot be more than one exponent in a *valid number*, so we will use a variable `seenExponent` to indicate whether we have already seen an exponent.\r\n    - An exponent must appear after a **decimal number** or an **integer**. This means if we see an exponent, we must have already seen a digit.\r\n\r\n4. Dots\r\n    - There cannot be more than one dot in a *valid number*, since only **integers** are allowed after an exponent, so there cannot be more than one **decimal number**. We will use a variable `seenDot` to indicate whether we have seen a dot.\r\n    - If we see a dot appear after an exponent, the number is not valid, because **integers** cannot have dots.\r\n\r\n5. Anything else\r\n    - Seeing anything else instantly invalidates the input.\r\n\r\n**Algorithm**\r\n\r\nNow that we have laid out the rules, let's iterate over the input. For each character, determine what group it belongs to, and verify that it follows the rules.\r\n\r\n1. Declare 3 variables `seenDigit`, `seenExponent`, and `seenDot`. Set all of them to `false`.\r\n\r\n2. Iterate over the input.\r\n\r\n3. If the character is a digit, set `seenDigit = true`.\r\n\r\n4. If the character is a sign, check if it is either the first character of the input, or if the character before it is an exponent. If not, `return false`.\r\n\r\n5. If the character is an exponent, first check if we have already seen an exponent **or** if we have not yet seen a digit. If either is true, then `return false`. Otherwise, set `seenExponent = true`, and `seenDigit = false`. We need to reset `seenDigit` because after an exponent, we must construct a new **integer**.\r\n\r\n6. If the character is a dot, first check if we have already seen either a dot or an exponent. If so, `return false`. Otherwise, set `seenDot = true`.\r\n\r\n7. If the character is anything else, `return false`.\r\n\r\n8. At the end, return `seenDigit`. This is one reason why we have to reset `seenDigit` after seeing an exponent - otherwise an input like `\"21e\"` would be incorrectly judged as valid.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/KGRm5qDH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KGRm5qDH\"></iframe>\r\n\r\n*\"One day I will find the right words, and they will be simple.\"* - Jack Kerouac\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N)$$, where $$N$$ is the length of `s`.\r\n\r\n   We simply iterate over the input once. The number of operations we perform for each character in the input is _independent_ of the length of the string, and therefore only requires constant time. This results in $$N \\cdot O(1) = O(N)$$.\r\n\r\n* Space complexity: $$O(1)$$.\r\n\r\n    Regardless of the input size, we only store 3 variables, `seenDigit`, `seenExponent`, and `seenDot`.\r\n    \r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: Deterministic Finite Automaton (DFA)\r\n\r\n**Intuition**\r\n\r\nLet's now view Approach 1 from a different angle. There were $$2^3 = 8$$ **states** that the 3 boolean variables could be in. Each time we read a character in the string, we either stayed in the current state (boolean variables stayed the same) or we **transitioned** into a new state (boolean variables changed).\r\nWhat we've described above is a lot like a  [deterministic finite automaton](https://en.wikipedia.org/wiki/Deterministic_finite_automaton). A DFA is a finite number of states, with transition rules to move between them. \r\n> **Never heard of a DFA before?** \r\n>\r\n> DFA's are useful for solving many problems, including advanced dynamic programming problems such as [1411. Number of Ways to Paint N X 3 Grid](https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/). So if you're not yet familiar with them, we recommend that you read up on them. It will be worth it!\r\n>\r\n> DFAs share a lot of similarities with the trie data structure. Recall that a [trie](https://leetcode.com/explore/learn/card/trie/) is used to represent a dictionary of words, in a space-efficient manner.  To check whether or not a word is in the dictionary, we would simultaneously traverse through the word and the trie. If we end at a node that is marked as a valid end-point, then we would return true. Otherwise, if we get \"stuck\", or end at a node that is not an end-point, we would return false. It's the same for a DFA: we start at a \"root\" node, and then check each character one by one, checking whether or not there is a valid transition we can make. \r\n>\r\n> There are a few key differences between DFA's and tries, so keep these in mind while reading through the remainder of this section. \r\n>\r\n> 1. While a trie can only represent a _finite_ number of strings (the given dictionary), a DFA can represent an _infinite_ number of different strings. \r\n> 2. While a trie can only move down the implicit tree, a DFA can essentially \"loopback\" to a higher level, or stay on the same level, or even the same node.\r\n> 3. A trie is a type of tree, and a DFA is a type of directed graph.\r\n>\r\n> Other than that, you can lean on your existing knowledge of tries to wrap your head around this new data structure.\r\n\r\n**Algorithm**\r\n\r\nThe first step is to design our DFA. Picture the DFA as a directed graph, where each node is a state, and each edge is a transition labeled with a character group (digit, exponent, sign, or dot). There are two key steps to designing it.\r\n1. Identify all valid combinations that the aforementioned boolean variables can be in. Each combination is a **state**. Draw a circle for each state, and label what it means.\r\n2. For each **state**, consider what a character from each group would mean in the context of that state. Each group will either cause a **transition** into another state, or it will signify that the string is invalid. For each valid transition, draw a directed arrow between the two states and write the group next to the arrow.\r\n> **Try this on your own before reading any further!** Take a few minutes and try to design the DFA. Keep in mind that a state can point to itself. For example, with the input `\"12345\"`, if we were to use the first approach, after the first character, none of the boolean variables change, so the state should not change. Therefore, the node should have an edge that points to itself, labeled by \"digit\". Another hint: the start node should have 3 outgoing edges labeled \"digit\", \"sign\", and \"dot\".\r\n\r\n<br>\r\n\r\n<img src=\"../Figures/65/dfa.png\" width=\"960\">\r\n\r\n<br><br>\r\n\r\nWith our constructed DFA, our algorithm will be:\r\n\r\n1. Initialize the DFA as an array of hash tables. Each hash table's keys will be a character group, and the values will be the state it should transition to. We can use the indexes of the array to handle state transitions. Set the `currentState = 0`.\r\n\r\n2. Iterate through the input. For each character, first determine what group it belongs to. Then, check if that group exists in the current state's hash table. If it does, transition to the next state. Otherwise, return `false`.\r\n\r\n3. At the end, check if we are currently in a valid end state: 1, 4, or 7.\r\n\r\nIf you're having trouble with your implementation, try to go through your DFA with a complicated case such as `-123.456E+789`. Follow along with your designed DFA, and if there is a bug, check which edge case went wrong and adjust the graph accordingly. Once your DFA is correctly designed, the coding part will be less challenging.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/V8PqNnMB/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"V8PqNnMB\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N)$$, where $$N$$ is the length of `s`.\r\n\r\n   We simply iterate through the input once. The number of operations we perform for each character in the input is _independent_ of the length of the string, and therefore each operation requires constant time. So we get $$N \\cdot O(1) = O(N)$$.\r\n\r\n* Space complexity: $$O(1)$$.\r\n\r\n    We will construct the same DFA regardless of the input size.\r\n    \r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "valid-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.649,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1969",
                "title": "Text Justification",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "68",
                    "questionFrontendId": "68",
                    "sessionId": "968792",
                    "questionTitle": "Text Justification",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/text-justification/submit/",
                    "interpretUrl": "/problems/text-justification/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> fullJustify(vector<string>& words, int maxWidth) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> fullJustify(String[] words, int maxWidth) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def fullJustify(self, words, maxWidth):\\n        \\\"\\\"\\\"\\n        :type words: List[str]\\n        :type maxWidth: int\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** fullJustify(char ** words, int wordsSize, int maxWidth, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> FullJustify(string[] words, int maxWidth) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} words\\n * @param {number} maxWidth\\n * @return {string[]}\\n */\\nvar fullJustify = function(words, maxWidth) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\\n# @param {Integer} max_width\\n# @return {String[]}\\ndef full_justify(words, max_width)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func fullJustify(_ words: [String], _ maxWidth: Int) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fullJustify(words []string, maxWidth int) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def fullJustify(words: Array[String], maxWidth: Int): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun fullJustify(words: Array<String>, maxWidth: Int): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn full_justify(words: Vec<String>, max_width: i32) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param Integer $maxWidth\\n     * @return String[]\\n     */\\n    function fullJustify($words, $maxWidth) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function fullJustify(words: string[], maxWidth: number): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (full-justify words maxWidth)\\n  (-> (listof string?) exact-integer? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec full_justify(Words :: [unicode:unicode_binary()], MaxWidth :: integer()) -> [unicode:unicode_binary()].\\nfull_justify(Words, MaxWidth) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec full_justify(words :: [String.t], max_width :: integer) :: [String.t]\\n  def full_justify(words, max_width) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"fullJustify\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"maxWidth\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of strings <code>words</code> and a width <code>maxWidth</code>, format the text such that each line has exactly <code>maxWidth</code> characters and is fully (left and right) justified.</p>\n\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <code>maxWidth</code> characters.</p>\n\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n\n<p>For the last line of text, it should be left-justified and no extra space is inserted between words.</p>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>A word is defined as a character sequence consisting of non-space characters only.</li>\n\t<li>Each word&#39;s length is guaranteed to be greater than 0 and not exceed maxWidth.</li>\n\t<li>The input array <code>words</code> contains at least one word.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &nbsp;&quot;This &nbsp; &nbsp;is &nbsp; &nbsp;an&quot;,\n&nbsp; &nbsp;&quot;example &nbsp;of text&quot;,\n&nbsp; &nbsp;&quot;justification. &nbsp;&quot;\n]</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16\n<strong>Output:</strong>\n[\n&nbsp; &quot;What &nbsp; must &nbsp; be&quot;,\n&nbsp; &quot;acknowledgment &nbsp;&quot;,\n&nbsp; &quot;shall be &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]\n<strong>Explanation:</strong> Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified becase it contains only one word.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth = 20\n<strong>Output:</strong>\n[\n&nbsp; &quot;Science &nbsp;is &nbsp;what we&quot;,\n  &quot;understand &nbsp; &nbsp; &nbsp;well&quot;,\n&nbsp; &quot;enough to explain to&quot;,\n&nbsp; &quot;a &nbsp;computer. &nbsp;Art is&quot;,\n&nbsp; &quot;everything &nbsp;else &nbsp;we&quot;,\n&nbsp; &quot;do &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&quot;\n]</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>words[i]</code> consists of only English letters and symbols.</li>\n\t<li><code>1 &lt;= maxWidth &lt;= 100</code></li>\n\t<li><code>words[i].length &lt;= maxWidth</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1970",
                "title": "Minimum Window Substring",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "76",
                    "questionFrontendId": "76",
                    "sessionId": "968792",
                    "questionTitle": "Minimum Window Substring",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/minimum-window-substring/submit/",
                    "interpretUrl": "/problems/minimum-window-substring/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string minWindow(string s, string t) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String minWindow(String s, String t) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minWindow(self, s, t):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minWindow(self, s: str, t: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * minWindow(char * s, char * t){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string MinWindow(string s, string t) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {string}\\n */\\nvar minWindow = function(s, t) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} t\\n# @return {String}\\ndef min_window(s, t)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minWindow(_ s: String, _ t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minWindow(s string, t string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minWindow(s: String, t: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minWindow(s: String, t: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_window(s: String, t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $t\\n     * @return String\\n     */\\n    function minWindow($s, $t) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minWindow(s: string, t: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-window s t)\\n  (-> string? string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmin_window(S, T) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\\n  def min_window(s, t) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"ADOBECODEBANC\"\n\"ABC\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"minWindow\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window substring</strong> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window. If there is no such substring</em><em>, return the empty string </em><code>&quot;&quot;</code><em>.</em></p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Use two pointers to create a window of letters in <b>S</b>, which would have all the characters from <b>T</b>.",
                        "Since you have to find the minimum window in <b>S</b> which has all the characters from <b>T</b>, you need to expand and contract the window using the two pointers and keep checking the window for all the characters. This approach is also called Sliding Window Approach.\r\n\r\n<br><br>\r\n<pre>\r\nL ------------------------ R , Suppose this is the window that contains all characters of <b>T</b> \r\n                          \r\n&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp L----------------- R , this is the contracted window. We found a smaller window that still contains all the characters in <b>T</b>\r\n\r\nWhen the window is no longer valid, start expanding again using the right pointer. </pre>"
                    ],
                    "solution": {
                        "title": "Minimum Window Substring",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Sliding Window\n\n**Intuition**\n\nThe question asks us to return the minimum window from the string $$S$$ which has all the characters of the string $$T$$. Let us call a window `desirable` if it has all the characters from $$T$$.\n\nWe can use a simple sliding window approach to solve this problem.\n\nIn any sliding window based problem we have two pointers. One $$right$$ pointer whose job is to expand the current window and then we have the $$left$$ pointer whose job is to contract a given window. At any point in time only one of these pointers move and the other one remains fixed.\n\nThe solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired characters, we contract (if possible) and save the smallest window till now.\n\nThe answer is the smallest desirable window.\n\nFor eg. ` S = \"ABAACBAB\" T = \"ABC\"`. Then our answer window is `\"ACB\"` and shown below is one of the possible desirable windows.\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_1.png\" width=\"500\"/>\n</center>\n<br>\n\n**Algorithm**\n\n1. We start with two pointers, $$left$$ and $$right$$ initially pointing to the first element of the string $$S$$.\n\n2. We use the $$right$$ pointer to expand the window until we get a desirable window i.e. a window that contains all of the characters of $$T$$.\n\n3. Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one we keep on updating the minimum window size.\n\n4. If the window is not desirable any more, we repeat $$step \\; 2$$ onwards.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_2.png\" width=\"500\"/>\n</center>\n\nThe above steps are repeated until we have looked at all the windows. The smallest window is returned.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_3.png\" width=\"500\"/>\n</center>\n<br>\n\n<iframe src=\"https://leetcode.com/playground/XEVk3wZb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XEVk3wZb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$.\nIn the worst case we might end up visiting every element of string $$S$$ twice, once by left pointer and once by right pointer. $$|T|$$ represents the length of string $$T$$.\n\n* Space Complexity: $$O(|S| + |T|)$$. $$|S|$$ when the window size is equal to the entire string $$S$$. $$|T|$$ when $$T$$ has all unique characters.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Optimized Sliding Window\n\n**Intuition**\n\nA small improvement to the above approach can reduce the time complexity of the algorithm to $$O(2*|filtered\\_S| + |S| + |T|)$$, where $$filtered\\_S$$ is the string formed from S by removing all the elements not present in $$T$$.\n\nThis complexity reduction is evident when $$|filtered\\_S| <<< |S|$$.\n\nThis kind of scenario might happen when length of string $$T$$ is way too small than the length of string $$S$$ and string $$S$$ consists of numerous characters which are not present in $$T$$.\n\n**Algorithm**\n\nWe create a list called $$filtered\\_S$$ which has all the characters from string $$S$$ along with their indices in $$S$$, but these characters should be present in $$T$$.\n\n<pre>\n  S = \"ABCDDDDDDEEAFFBC\" T = \"ABC\"\n  filtered_S = [(0, 'A'), (1, 'B'), (2, 'C'), (11, 'A'), (14, 'B'), (15, 'C')]\n  Here (0, 'A') means in string S character A is at index 0.\n</pre>\n\n\nWe can now follow our sliding window approach on the smaller string $$filtered\\_S$$.\n\n<iframe src=\"https://leetcode.com/playground/EyRdt4FZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EyRdt4FZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$. The complexity is same as the previous approach. But in certain cases where $$|filtered\\_S|$$ <<< $$|S|$$, the complexity would reduce because the number of iterations would be $$2*|filtered\\_S| + |S| + |T|$$.\n* Space Complexity : $$O(|S| + |T|)$$.\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "minimum-window-substring",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.441,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1971",
                "title": "Shortest Word Distance",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "243",
                    "questionFrontendId": "243",
                    "sessionId": "968792",
                    "questionTitle": "Shortest Word Distance",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/shortest-word-distance/submit/",
                    "interpretUrl": "/problems/shortest-word-distance/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int shortestDistance(vector<string>& wordsDict, string word1, string word2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int shortestDistance(String[] wordsDict, String word1, String word2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def shortestDistance(self, wordsDict, word1, word2):\\n        \\\"\\\"\\\"\\n        :type wordsDict: List[str]\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def shortestDistance(self, wordsDict: List[str], word1: str, word2: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint shortestDistance(char ** wordsDict, int wordsDictSize, char * word1, char * word2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int ShortestDistance(string[] wordsDict, string word1, string word2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} wordsDict\\n * @param {string} word1\\n * @param {string} word2\\n * @return {number}\\n */\\nvar shortestDistance = function(wordsDict, word1, word2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words_dict\\n# @param {String} word1\\n# @param {String} word2\\n# @return {Integer}\\ndef shortest_distance(words_dict, word1, word2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func shortestDistance(_ wordsDict: [String], _ word1: String, _ word2: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func shortestDistance(wordsDict []string, word1 string, word2 string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def shortestDistance(wordsDict: Array[String], word1: String, word2: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun shortestDistance(wordsDict: Array<String>, word1: String, word2: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn shortest_distance(words_dict: Vec<String>, word1: String, word2: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $wordsDict\\n     * @param String $word1\\n     * @param String $word2\\n     * @return Integer\\n     */\\n    function shortestDistance($wordsDict, $word1, $word2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function shortestDistance(wordsDict: string[], word1: string, word2: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (shortest-distance wordsDict word1 word2)\\n  (-> (listof string?) string? string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec shortest_distance(WordsDict :: [unicode:unicode_binary()], Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\\nshortest_distance(WordsDict, Word1, Word2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec shortest_distance(words_dict :: [String.t], word1 :: String.t, word2 :: String.t) :: integer\\n  def shortest_distance(words_dict, word1, word2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"coding\"\n\"practice\"",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"shortestDistance\",\n  \"params\": [\n    {\n      \"name\": \"wordsDict\",\n      \"type\": \"string[]\"\n    },\n    {\n      \"name\": \"word1\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"word2\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of strings <code>wordsDict</code> and two different strings that already exist in the array <code>word1</code> and <code>word2</code>, return <em>the shortest distance between these two words in the list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;coding&quot;, word2 = &quot;practice&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> wordsDict = [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 = &quot;makes&quot;, word2 = &quot;coding&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordsDict.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsDict[i].length &lt;= 10</code></li>\n\t<li><code>wordsDict[i]</code> consists of lowercase English letters.</li>\n\t<li><code>word1</code> and <code>word2</code> are in <code>wordsDict</code>.</li>\n\t<li><code>word1 != word2</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Shortest Word Distance",
                        "content": "## Solution\n\nThis is a straight-forward coding problem. The distance between any two positions $$i_1$$ and $$i_2$$ in an array is $$|i_1 - i_2|$$. To find the shortest distance between `````word1````` and `````word2`````, we need to traverse the input array and find all occurrences $$i_1$$ and $$i_2$$ of the two words, and check if $$|i_1 - i_2|$$ is less than the minimum distance computed so far.\n\n---\n#### Approach #1 (Brute Force)\n\n**Algorithm**\n\nA naive solution to this problem is to go through the entire array looking for the first word. Every time we find an occurrence of the first word, we search the entire array for the closest occurrence of the second word.\n\n<iframe src=\"https://leetcode.com/playground/eHGZaRje/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"eHGZaRje\"></iframe>\n\n**Complexity Analysis**\n\nThe time complexity is $$O(n^2)$$, since for every occurrence of `word1`, we traverse the entire array in search for the closest occurrence of `word2`.\n\nSpace complexity is $$O(1)$$, since no additional space is used.\n\n---\n#### Approach #2 (One-pass)\n\n**Algorithm**\n\nWe can greatly improve on the brute-force approach by keeping two indices `i1` and `i2` where we store the *most recent* locations of `word1` and `word2`. Each time we find a new occurrence of one of the words, we do not need to search the entire array for the other word, since we already have the index of its most recent occurrence.\n\n<iframe src=\"https://leetcode.com/playground/7JPyupkw/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"7JPyupkw\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(N \\cdot M)$$ where $$N$$ is the number of words in the input list, and $$M$$ is the total length of two input words.\n\n* Space complexity: $$O(1)$$, since no additional space is allocated.\n\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "shortest-word-distance",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.755,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2908",
                "title": "Integer to English Words",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "273",
                    "questionFrontendId": "273",
                    "sessionId": "968792",
                    "questionTitle": "Integer to English Words",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/integer-to-english-words/submit/",
                    "interpretUrl": "/problems/integer-to-english-words/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string numberToWords(int num) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String numberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numberToWords(self, num):\\n        \\\"\\\"\\\"\\n        :type num: int\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numberToWords(self, num: int) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * numberToWords(int num){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string NumberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} num\\n * @return {string}\\n */\\nvar numberToWords = function(num) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\\n# @return {String}\\ndef number_to_words(num)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numberToWords(_ num: Int) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberToWords(num int) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numberToWords(num: Int): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numberToWords(num: Int): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn number_to_words(num: i32) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $num\\n     * @return String\\n     */\\n    function numberToWords($num) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numberToWords(num: number): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (number-to-words num)\\n  (-> exact-integer? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec number_to_words(Num :: integer()) -> unicode:unicode_binary().\\nnumber_to_words(Num) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec number_to_words(num :: integer) :: String.t\\n  def number_to_words(num) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "123",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numberToWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 123\n<strong>Output:</strong> \"One Hundred Twenty Three\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = 12345\n<strong>Output:</strong> \"Twelve Thousand Three Hundred Forty Five\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> num = 1234567\n<strong>Output:</strong> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> num = 1234567891\n<strong>Output:</strong> \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
                        "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
                        "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
                    ],
                    "solution": {
                        "title": "Integer to English Words",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Divide and conquer \n\nLet's simplify the problem by representing it as a set of simple sub-problems.\nOne could split the initial integer `1234567890` on the groups \ncontaining not more than three digits `1.234.567.890`.\nThat results in representation `1 Billion 234 Million 567 Thousand 890` and \nreduces the initial problem to how to convert 3-digit integer to English word. \nOne could split further `234` -> `2 Hundred 34` into two sub-problems :\nconvert 1-digit integer and convert 2-digit integer. The first one is trivial. \nThe second one could be reduced to the first one for all 2-digit integers \nbut the ones from `10` to `19` which should be considered separately.\n\n<!--![LIS](../Figures/273/273_tr.gif)-->\n!?!../Documents/273_LIS.json:1000,632!?!\n\n<iframe src=\"https://leetcode.com/playground/hme62cME/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hme62cME\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity :  $$\\mathcal{O}(N)$$. \nIntuitively the output is proportional\nto the number `N` of digits in the input. \n* Space complexity : $$\\mathcal{O}(1)$$ since the output is just a string.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "integer-to-english-words",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.224,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2909",
                "title": "Find the Celebrity",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "277",
                    "questionFrontendId": "277",
                    "sessionId": "968792",
                    "questionTitle": "Find the Celebrity",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-the-celebrity/submit/",
                    "interpretUrl": "/problems/find-the-celebrity/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/* The knows API is defined for you.\\n      bool knows(int a, int b); */\\n\\nclass Solution {\\npublic:\\n    int findCelebrity(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      boolean knows(int a, int b); */\\n\\npublic class Solution extends Relation {\\n    public int findCelebrity(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The knows API is already defined for you.\\n# @param a, person a\\n# @param b, person b\\n# @return a boolean, whether a knows b\\n# def knows(a, b):\\n\\nclass Solution(object):\\n    def findCelebrity(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# The knows API is already defined for you.\\n# return a bool, whether a knows b\\n# def knows(a: int, b: int) -> bool:\\n\\nclass Solution:\\n    def findCelebrity(self, n: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/* The knows API is defined for you.\\n      bool knows(int a, int b); */\\n\\nint findCelebrity(int n) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/* The Knows API is defined in the parent class Relation.\\n      bool Knows(int a, int b); */\\n\\npublic class Solution : Relation {\\n    public int FindCelebrity(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for knows()\\n * \\n * @param {integer} person a\\n * @param {integer} person b\\n * @return {boolean} whether a knows b\\n * knows = function(a, b) {\\n *     ...\\n * };\\n */\\n\\n/**\\n * @param {function} knows()\\n * @return {function}\\n */\\nvar solution = function(knows) {\\n    /**\\n     * @param {integer} n Total people\\n     * @return {integer} The celebrity\\n     */\\n    return function(n) {\\n        \\n    };\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The knows API is already defined for you.\\n# @param {Integer} person a\\n# @param {Integer} person b\\n# @return {Boolean} whether a knows b\\n# def knows(a, b)\\n\\n# @param {Integer} n\\n# @return {Integer}\\ndef find_celebrity(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class Relation.\\n *     func knows(_ a: Int, _ b: Int) -> Bool;\\n */\\n\\nclass Solution : Relation {\\n    func findCelebrity(_ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * The knows API is already defined for you.\\n *     knows := func(a int, b int) bool\\n */\\nfunc solution(knows func(a int, b int) bool) func(n int) int {\\n    return func(n int) int {\\n        \\n    }\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      def knows(a: Int, b: Int): Boolean = {} */\\n\\nclass Solution extends Relation {\\n    def findCelebrity(n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      fun knows(a: Int, b: Int) : Boolean {} */\\n\\nclass Solution: Relation() {\\n    override fun findCelebrity(n: Int) : Int {\\n        \\n\\t}\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"/* The knows API is defined for you.\\n       knows(a: i32, b: i32)->bool;\\n    to call it use self.knows(a,b)\\n*/\\n\\nimpl Solution {\\n    pub fn find_celebrity(&self, n: i32) -> i32 {\\n \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      public function knows($a, $b){} */\\n\\nclass Solution extends Relation {\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function findCelebrity($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class Relation.\\n * knows(a: number, b: number): boolean {\\n *     ...\\n * };\\n */\\n\\nvar solution = function(knows: any) {\\n\\n    return function(n: number): number {\\n        \\n    };\\n};\"}]",
                    "sampleTestCase": "[[1,1,0],[0,1,0],[1,1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findCelebrity\",\n  \"params\": [\n    {\n      \"name\": \"graph\",\n      \"type\": \"integer[][]\",\n      \"internal\": true\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Suppose you are at a party with <code>n</code> people (labeled from <code>0</code> to <code>n - 1</code>), and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know him/her, but he/she does not know any of them.</p>\n\n<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>\n\n<p>You are given a helper function <code>bool knows(a, b)</code> which tells you whether A knows B. Implement a function <code>int findCelebrity(n)</code>. There will be exactly one celebrity if he/she is in the party. Return the celebrity&#39;s label if there is a celebrity in the party. If there is no celebrity, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/02/277_example_1_bold.PNG\" style=\"width: 186px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,1,0],[0,1,0],[1,1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/02/277_example_2.PNG\" style=\"width: 193px; height: 192px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,0,1],[1,1,0],[0,1,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no celebrity.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>n == graph[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>graph[i][i] == 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If the maximum number of allowed calls to the API <code>knows</code> is <code>3 * n</code>, could you find a solution without exceeding the maximum number of calls?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "The best hint for this problem can be provided by the following figure:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_find_celebrity.png\" width=\"700\"/>",
                        "Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API."
                    ],
                    "solution": {
                        "title": "Find The Celebrity",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/514427854\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nAs per the problem statement, for a given person `i`, we can check whether or not `i` is a celebrity by using the `knows(...)` API to see if everybody knows `i`, and that `i` know nobody.\n\nTherefore, the simplest way of solving this problem is to go through each of the people in turn, and check whether or not they are a celebrity.\n\n**Algorithm**\n\nIt's best to define a separate `isCelebrity(...)` function that takes the id number of a specific person and returns `true` if they are a celebrity and `false` if not. This avoids the need for complex loop-break conditions, thus keeping the code cleaner.\n\nOne edge case we need to be cautious of is not asking person `i` if they know themselves. This can be handled by a check for `i == j` at the start of the main loop of `isCelebrity(...)` and then simply `continue`-ing when it is `true`.\n\n<iframe src=\"https://leetcode.com/playground/B4PHPMAX/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"B4PHPMAX\"></iframe>\n\n**Complexity Analysis**\n\nWe don't know what time and space the `knows(...)` API uses. Because it's not our concern, we'll assume it's $$O(1)$$ for the purpose of analysing our algorithm.\n\n- Time Complexity : $$O(n^2)$$.\n    \n    For each of the $$n$$ people, we need to check whether or not they are a celebrity.\n\n    Checking whether or not somebody is a celebrity requires making $$2$$ API calls for each of the $$n - 1$$ other people, for a total of $$2 \\cdot (n - 1) = 2 \\cdot n - 2$$ calls. In big-oh notation, we drop the constants, leaving $$O(n)$$.\n\n    So each of the $$n$$ celebrity checks will cost $$O(n)$$, giving a total of $$O(n^2)$$.\n\n- Space Complexity : $$O(1)$$.\n\n    Our code only uses constant extra space. The results of the API calls are not saved.\n\n<br />\n\n---\n\n#### Approach 2: Logical Deduction\n\n**Intuition**\n\nWe can do far better than the above approach. Let's start by looking at another way of representing the problem, which is a great way for approaching it in an interview. What we actually have in this problem is a **graph**, where a *directed edge* going from person `A` to person `B` means that we have confirmed that `A knows B`. \n\nFor example, here is a possible graph. Assume that we have made all possible calls to the `knows(...)` API to find these edges. Is there a celebrity here? If so, who is it?\n\n![Introductory example 1](../Figures/277/with_celebrity.png)\n\nWhat about in this graph?\n\n![Introductory example 2](../Figures/277/without_celebrity_1.png)\n\nAnd this one?\n\n![Introductory example 3](../Figures/277/without_celebrity_2.png)\n\nOn the graph representation, a celebrity is a person who has *exactly* `n - 1` directed edges going in (everybody knows them) and `0` edges going out (they know nobody). \n\nOn the first example we looked at above, person `4` is a celebrity because they have `5` directed edges going in, which is `n - 1`. They have no directed edges going out. Note that `3` *is not a celebrity* because they have `5` *outgoing* edges, not `5` ingoing.\n\nOn the second example, there is no celebrity. Person `4` is not a celebrity, because person `2` doesn't know them. There are only `n - 2` directed edges going into `4`.\n\nOn the third example, there is also no celebrity. Person `0` is not a celebrity, because they know person `5`, as represented by the directed edge going from `0` to `5`.\n\nAt the start, we only know the *nodes* of the graph. The *edges* are all hidden. We can \"uncover\" *edges* by making calls to the `knows(...)` API. In the first approach, we uncovered *all* the edges this way. So, the question we need to ask now is... was it actually necessary to uncover *all* of them? A good way to answer this question in an interview is to work through an example on the whiteboard, where you decide which edges you want to ask for, and then draw them as you go.\n\nWhen you do your own example, you'll of course need to know what the full graph behind your example is, or at least the important aspects of it, but you also need to focus on what information you've \"uncovered\" by using the `knows(...)` API. \n\nHere is an animation of an example. To distinguish between `not (A knows B)` and we-haven't-yet-asked if `A knows B`, we use a green solid arrow to show `A knows B`, a red dotted arrow to show `not (A knows B)` and no arrow if we haven't yet asked.\n\n!?!../Documents/277_find_celebrity_experiment.json:960,350!?!\n\nDuring the example in the animation, we asked if `4` knows `6`. Why was this question not necessary to identify the celebrity?\n\n![Asking whether or not 4 knows 6.](../Figures/277/redundant_question.png)\n\nWell, because we already know that both `4` and `6` know at least one other person, this means that neither of them could be the celebrity! Therefore, we've already ruled them out, there was no need to investigate them further.\n\nSo, what can we conclude from the result of an `A knows B` check? If the result was `true`, could `A` be the celebrity? What about `B`?\n\n![A green arrow from A to B.](../Figures/277/a_knows_b.png)\n\nAnd what about if `A knows B` returned `false`? Who couldn't be a celebrity now?\n\n![A red arrow from A to B](../Figures/277/a_doesnt_know_b.png)\n\nIn the first example, we know that `A` can't be a celebrity, because `A` knows somebody, namely `B`. In the second example, we know that `B` can't be a celebrity, because `A`, doesn't know him/her.\n\n> Therefore, with each call to `knows(...)`, we can conclusively determine that exactly **1** of the people is not a celebrity!\n\nThe following algorithm can, therefore, be used to rule out `n - 1` of the people in $$O(n)$$ time. We start by guessing that `0` might be a `celebrityCandidate`, and then we check if `0 knows 1` (within the loop). If `true`, then we know `0` isn't a celebrity (they know somebody), but `1` might be. We update the `celebrityCandidate` variable to `1` to reflect this. Otherwise, we know `1` is not a celebrity (somebody doesn't know them), but we haven't ruled out `0`, yet, so keep them as the `celebrityCandidate`. Whoever we kept is then asked if they know `2`, and so forth.\n\n```python\ncelebrity_candidate = 0\nfor i in range(1, n):\n    if knows(celebrity_candidate, i):\n        celebrity_candidate = i\n```\n\nAt the end, the only person we haven't ruled out is in the `celebrityCandidate` variable.\n\nHere is an animation of the algorithm.\n\n!?!../Documents/277_find_celebrity_candidate.json:960,350!?!\n\nAt the end of the example in the animation, this is how our graph looked. The person who we haven't ruled out is `4`. \n\n![Final slide of the animation, where we identified 4 as the celebrity candidate.](../Figures/277/final_celebrity_candidate.png)\n\nBut do we actually know for *sure* that this person is a celebrity? (Remember, it's possible there's no celebrity, in which case we'd return `-1`).\n\nNope! It's still possible that `0` doesn't know `4`, or perhaps `4` knows `3`. We can't rule these possibilities out from the information we have uncovered so far.\n\nSo, what can we do? We can use our `isCelebrity(...)` function on `4` to check whether or not they are a celebrity. If they are, our function will return `4`. If not, then it should return `-1`.\n\n**Algorithm**\n\nOur algorithm firstly narrows the people down to a single `celebrityCandidate` using the algorithm just above, and then it checks whether or not that candidate is a celebrity using the `isCelebrity(...)`.\n\n<iframe src=\"https://leetcode.com/playground/mUhnT8fb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mUhnT8fb\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n    \n    Our code is split into 2 parts.\n    \n    The first part finds a celebrity candidate. This requires doing $$n - 1$$ calls to `knows(...)` API, and so is $$O(n)$$.\n\n    The second part is the same as before\u2014checking whether or not a given person is a celebrity. We determined that this is $$O(n)$$.\n\n    Therefore, we have a total time complexity of $$O(n + n) = O(n)$$.\n\n- Space Complexity : $$O(1)$$.\n\n    Same as above. We are only using constant extra space.\n\n<br />\n\n---\n\n#### Approach 3: Logical Deduction with Caching\n\n**Intuition**\n\n*You probably won't need to implement this approach in an interview, however, I wouldn't be surprised if discussing these ideas was a follow up question. For that reason, we'll take a quick look at it!*\n\nHave a look at our example from above again. These are the calls to the `knows(...)` API that were made to identify that `4` is a celebrity candidate.\n\n![Final slide of the animation, where we identified 4 as the celebrity candidate.](../Figures/277/final_celebrity_candidate.png)\n\nNow, these are the calls that our Approach 2 would have made in the second phase to check whether or not our celebrity candidate, `4`, actually is a celebrity.\n\n![The 14 calls made to confirm the candidate.](../Figures/277/celebrity_candidate_confirm.png)\n\nAs shown in the above images, we made some of the same calls twice! The lower the number of the celebrity candidate, the more of these duplicated calls there will be, because the celebrity candidate spent longer in the `celebrityCandidate` variable, and so was involved in a lot more of the initial \"questioning\". Is this actually wasteful though?\n\nWe know that the best possible time complexity we could ever achieve in the average/ worst case is $$O(n)$$. The easiest way of proving this to point out that confirming that somebody *is* a celebrity requires $$O(n)$$ checks. There's simply no way around it, if you miss just one of those checks, it could have been the one that showed they were *not*. \n\nSo, because we can never do better than $$O(n)$$ anyway, surely it really doesn't matter?\n\nYes and no! It's possible that calls to the `knows(...)` API could be *really expensive* (i.e. slow). For example, in the scenario presented in the question, you need to ask the question to people and then listen for their answer. This is time consuming! As a computer-based example, what if the `knows(...)` API was retrieving its answers from a really slow web service on the other side of the world? What if somebody was having to sit in front of their computer, waiting patiently for this algorithm to finish running? They would definitely appreciate it taking 5 seconds instead of 10 seconds, even if that difference is constant.\n\nThe cost of this, however, is space. We will now need to store the results of `n - 1` calls the the `knows(...)` API.\n\nThis is similar to how web browsers cache data. Often, the cost of retrieving a page again is considered to more expensive than the cost of caching a page.\n\n**Algorithm**\n\nFor Java and JavaScript, we'll store our cache in a `HashMap`. For Python, we'll use `lru_cache` in the `functools` library. Other than that, the code is the same as\n\n<iframe src=\"https://leetcode.com/playground/iWYC7hdp/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iWYC7hdp\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n\n    The time complexity is still $$O(n)$$. The only difference is that sometimes we're retrieving data from a cache inside our code instead of from the API.\n\n- Space Complexity : $$O(n)$$.\n    \n    We're storing the results of the $$n - 1$$ calls to the `know(...)` API we made while finding a candidate.\n\n    We could optimize the space complexity slightly, by dumping the cached contents each time the `celebrityCandidate` variable changes, which would be $$O(1)$$ in the best case (which happens to be the worst case for reducing number of API calls) but it's still $$O(n)$$ space in the worst case and probably not worth the extra code complexity as the algorithm still ultimately requires the memory/ disk space needed for the worst case.\n\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-the-celebrity",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.87,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1972",
                "title": "Can Place Flowers",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "605",
                    "questionFrontendId": "605",
                    "sessionId": "968792",
                    "questionTitle": "Can Place Flowers",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/can-place-flowers/submit/",
                    "interpretUrl": "/problems/can-place-flowers/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def canPlaceFlowers(self, flowerbed, n):\\n        \\\"\\\"\\\"\\n        :type flowerbed: List[int]\\n        :type n: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} flowerbed\\n * @param {number} n\\n * @return {boolean}\\n */\\nvar canPlaceFlowers = function(flowerbed, n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} flowerbed\\n# @param {Integer} n\\n# @return {Boolean}\\ndef can_place_flowers(flowerbed, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canPlaceFlowers(flowerbed []int, n int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn can_place_flowers(flowerbed: Vec<i32>, n: i32) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $flowerbed\\n     * @param Integer $n\\n     * @return Boolean\\n     */\\n    function canPlaceFlowers($flowerbed, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function canPlaceFlowers(flowerbed: number[], n: number): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (can-place-flowers flowerbed n)\\n  (-> (listof exact-integer?) exact-integer? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec can_place_flowers(Flowerbed :: [integer()], N :: integer()) -> boolean().\\ncan_place_flowers(Flowerbed, N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec can_place_flowers(flowerbed :: [integer], n :: integer) :: boolean\\n  def can_place_flowers(flowerbed, n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,0,0,0,1]\n1",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"canPlaceFlowers\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"flowerbed\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p>\n\n<p>Given an integer array <code>flowerbed</code> containing <code>0</code>&#39;s and <code>1</code>&#39;s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <em>if</em> <code>n</code> new flowers can be planted in the <code>flowerbed</code> without violating the no-adjacent-flowers rule.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 1\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> flowerbed = [1,0,0,0,1], n = 2\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowerbed.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>flowerbed[i]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li>There are no two adjacent flowers in <code>flowerbed</code>.</li>\n\t<li><code>0 &lt;= n &lt;= flowerbed.length</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Can Place Flowers",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Single Scan [Accepted]\n\nThe solution is very simple. We can find out the extra maximum number of flowers, $$count$$, that can be planted for the given $$flowerbed$$ arrangement. To do so, we can traverse over all the elements of the $$flowerbed$$ and find out those elements which are 0(implying an empty position). For every such element, we check if its both adjacent positions are also empty. If so, we can plant a flower at the current position without violating the no-adjacent-flowers-rule. For the first and last elements, we need not check the previous and the next adjacent positions respectively.\n\nIf the $$count$$ obtained is greater than or equal to $$n$$, the required number of flowers to be planted, we can plant $$n$$ flowers in the empty spaces, otherwise not.\n\n<iframe src=\"https://leetcode.com/playground/Dbm5A5CN/shared\" frameBorder=\"0\" name=\"Dbm5A5CN\" width=\"100%\" height=\"292\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. A single scan of the $$flowerbed$$ array of size $$n$$ is done.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n\n---\n#### Approach #2 Optimized [Accepted]\n\n**Algorithm**\n\nInstead of finding the maximum value of $$count$$ that can be obtained, as done in the last approach, we can stop the process of checking the positions for planting the flowers as soon as $$count$$ becomes equal to $$n$$. Doing this leads to an optimization of the first approach. If $$count$$ never becomes equal to $$n$$, $$n$$ flowers can't be planted at the empty positions.\n\n<iframe src=\"https://leetcode.com/playground/GtCBiouS/shared\" frameBorder=\"0\" name=\"GtCBiouS\" width=\"100%\" height=\"326\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. A single scan of the $$flowerbed$$ array of size $$n$$ is done.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "can-place-flowers",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.431,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1999",
                "title": "Isomorphic Strings",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 339,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "205",
                    "questionFrontendId": "205",
                    "sessionId": "968792",
                    "questionTitle": "Isomorphic Strings",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/isomorphic-strings/submit/",
                    "interpretUrl": "/problems/isomorphic-strings/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isIsomorphic(string s, string t) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isIsomorphic(String s, String t) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isIsomorphic(self, s, t):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isIsomorphic(self, s: str, t: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isIsomorphic(char * s, char * t){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsIsomorphic(string s, string t) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isIsomorphic = function(s, t) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} t\\n# @return {Boolean}\\ndef is_isomorphic(s, t)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isIsomorphic(_ s: String, _ t: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isIsomorphic(s string, t string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isIsomorphic(s: String, t: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isIsomorphic(s: String, t: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_isomorphic(s: String, t: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $t\\n     * @return Boolean\\n     */\\n    function isIsomorphic($s, $t) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isIsomorphic(s: string, t: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-isomorphic s t)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_isomorphic(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_isomorphic(S, T) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_isomorphic(s :: String.t, t :: String.t) :: boolean\\n  def is_isomorphic(s, t) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"egg\"\n\"add\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isIsomorphic\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code> and <code>t</code>, <em>determine if they are isomorphic</em>.</p>\n\n<p>Two strings <code>s</code> and <code>t</code> are isomorphic if the characters in <code>s</code> can be replaced to get <code>t</code>.</p>\n\n<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"egg\", t = \"add\"\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"foo\", t = \"bar\"\n<strong>Output:</strong> false\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \"paper\", t = \"title\"\n<strong>Output:</strong> true\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>t.length == s.length</code></li>\n\t<li><code>s</code> and <code>t</code> consist of any valid ascii character.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Isomorphic strings",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nThis is one of those problems where we can come up with a whole suite of different solutions, with similar time and space complexities. The discussion section is filled with various tricks to solve this problem, however, we will stick to a couple of approaches that have the optimal time and space complexity and are reasonably easy to come up with during an interview. Regardless of which approach we use, three conditions must be met for the two strings to be isomorphic:\n\n1. We can map a character only to itself or to one other character.\n2. No two character should map to same character.\n3. Replacing each character in string `s` with the character it is mapped to results in string `t`.\n\nMatching the order will be easy.  Since we will iterate over the two strings and do some sort of comparison from left to right, the task of ensuring that the character order is the same in both strings will take care of itself. Next, we need to somehow maintain a mapping of characters (hint: dictionary) or come up with a way to \"convert\" both of the strings to a common format (think integer assignment to characters) and then check if the converted strings are the same.\n\nThese are the two solutions that we will explore. Again, many other tricks can be used to solve this problem, and thus there are a variety of different solutions.  A compilation of other solutions can be found [here](https://leetcode.com/problems/isomorphic-strings/discuss/57941/Python-different-solutions-(dictionary-etc)), however, some of these solutions would be difficult to come up with during an interview.  So, in this article, we will focus on solutions that are both intuitive and have optimal complexity.\n\n</br>\n\n---\n\n#### Approach 1: Character Mapping with Dictionary\n\n**Intuition**\n\nThe first solution is based on the approach indicated in the problem statement itself. We will process both of the strings from left to right. At each step, we take one character at a time from the two strings and compare them. There are three cases we need to handle here:\n\n1. If the characters don't have a mapping, we add one in the dictionary and move on.\n\n    ![Example for when we don't have a mapping](../Figures/205/img1.png)\n\n    *Figure 1. The first encounter for a new character in both strings which are not yet mapped.*\n\n2. The characters already have a mapping in the dictionary. If that is the case, then we're good to go.\n\n    ![Example for when we have a mapping](../Figures/205/img2.png)\n\n    *Figure 2. Example for when we already had a mapping between the corresponding characters.*\n\n3. The final case is when a mapping already exists for one of the characters but it *doesn't map to the other character at hand*. In this case, we can safely conclude that the given strings are not isomorphic and we can return.\n\nIf at this point you're ready to move on to the algorithm, take a step back and think about the correctness of this solution. The above three cases only care about **one-way-mapping** i.e. mapping characters from the first string to the second one only. Don't we need the mapping from the other side as well? \n\n![Breaking example using our existing 3 cases](../Figures/205/img3.png)\n\n*Figure 3. Example for when a single dictionary implementation breaks.*\n\nWe will need two dictionaries instead of one since we need `one-to-one` mapping from the string `s` to string `t` and vice versa. Let's look at the algorithm to see the modified cases.\n\n**Algorithm**\n\n1. We define a dictionary `mapping_s_t` which will be used to map characters in string `s` to characters in string `t` and another dictionary `mapping_t_s` which will be used to map characters in string `t` to characters in string `s`. \n2. Next, we iterate over the two strings one character at a time.\n3. Let's assume the character in the first string is `c1` and the corresponding character in the second string is `c2`. \n   1. If `c1` does not have a mapping in `mapping_s_t` and `c2` does not have a mapping in `mapping_t_s`, we add the corresponding mappings in both the dictionaries and move on to the next character.\n   2. At this point, we expect both the character mappings to exist in the dictionaries and their values should be `mapping_s_t[c1] = c2` and `mapping_t_s[c2] = c1`. If either of these conditions fails (`c1` is not in the dictionary, `c2` is not in the dictionary, unexpected mapping), we return `false`.\n4. Return `true` once both the strings have been exhausted.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/FKRQbEAk/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"FKRQbEAk\"></iframe>\n\n**Complexity Analysis**\n\nHere $$N$$ is the length of each string (if the strings are not the same length, then they cannot be isomorphic).\n* Time Complexity: $$O(N)$$. We process each character in both the strings exactly once to determine if the strings are isomorphic.\n* Space Complexity: $$O(1)$$ since the size of the ASCII character set is fixed and the keys in our dictionary are all valid ASCII characters according to the problem statement.\n\n</br>\n\n---\n\n#### Approach 2: First occurence transformation\n\n**Intuition**\n\nThis approach is based on the idea that the two given strings, if isomorphic, will in some way be exactly the same. If we have two isomorphic strings, we can replace the characters in the first string with the corresponding mapped characters to get the second string. The idea we explore here is the following:\n\n>Is there any string transformation we can apply to both the strings such that to check for isomorphism, we simply check if their modified versions are ___exactly___ the same?\n\nOne can come up with various such transformations giving us different variations of this solution. We will stick with one such transformations for the official solution. \n\n>For each character in the given string, we replace it with the index of that character's first occurence in the string. \n\nFor a string like `paper`, the transformed string will be `01034`. The character `p` occurs first at the index `0`; so we replace future occurrences of `p` with the index `0`. Similar modifications are made for the other characters. Now let's look at `title`. The transformed string would be `01034` which is the same as that for `paper`. This confirms the isomorphic nature of both the strings.\n\n>However, we should be mindful of transformations that use both one and two-digit numbers.  Under these circumstances, the transformed strings can be misinterpreted.\n\nFor example, `stenographics` and `logarithmsxox` both transform to `123456789110`, yet they are not isomorphic. So what went wrong? Well, the first 10 digits of `stenographics` are unique and the same is true for `logarithmsxox`, so they should be isomorphic up to `0123456789`.  However the $$11^{th}$$ and $$12^{th}$$ characters of `stenographics` map to `11` and `0` while the $$11^{th}$$ and $$12^{th}$$ characters of `logarithmsxox` map to `1` and `10`.  To avoid confusing `11 0` with `1 10` we can add a delimiter to help differentiate the transformed digits.  Thus, by adding spaces we obtain `stenographics = 0 1 2 3 4 5 6 7 8 9 10 11 0` and `logarithmsxox = 0 1 2 3 4 5 6 7 8 9 10 1 10`.  As a side note, this issue can also be resolved by comparing arrays of the transformed digits instead of using strings.\n\n**Algorithm**\n\n1. Define a function called `transform` that takes a string as an input and returns a new string with modifications as explained in the intuition section.\n   1. We maintain a dictionary to store the character to index mapping for the given string.\n   2. For each character, we look up the mapping in the dictionary. If there is a mapping, that means this character already has its first occurrence recorded and we simply use the first occurrence's index in the new string. Otherwise, we use the current index for the first occurrence.\n2. We find the transformed strings for both of our input strings. Let's say the transformed strings are `s1` and `s2` respectively.\n3. If `s1 == s2`, that implies the two input strings are isomorphic. Otherwise, they're not.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/EVPACn9j/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"EVPACn9j\"></iframe>\n\n**Complexity Analysis**\n\nHere $$N$$ is the length of each string (if the strings are not the same length, they cannot be isomorphic).\n\n* Time Complexity: $$O(N)$$. We process each character in both the strings exactly once to determine if they are isomorphic.\n* Space Complexity: $$O(N)$$. We form two new strings returned by our transformation function. The size of ASCII character set is fixed and the keys in our dictionary are valid ASCII characters only. So the size of the map in the transform function doesn't contribute to the space complexity.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "isomorphic-strings",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.482,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "You're gonna be asked Array and String manipulation questions, make sure you got this prepared.\n\nBesides the famous Two Sum problem, another highly recommended question from LinkedIn is the other Two Sum variation that is listed in the Design chapter."
    },
    {
        "id": "341",
        "title": "Trees and Graphs",
        "slug": "trees-and-graphs",
        "items": [
            {
                "id": "1981",
                "title": "Binary Tree Level Order Traversal",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "102",
                    "questionFrontendId": "102",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Level Order Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-level-order-traversal/submit/",
                    "interpretUrl": "/problems/binary-tree-level-order-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrder(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def levelOrder(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<IList<int>> LevelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar levelOrder = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[][]}\\ndef level_order(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc levelOrder(root *TreeNode) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def levelOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun levelOrder(root: TreeNode?): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[][]\\n     */\\n    function levelOrder($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction levelOrder(root: TreeNode | null): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (level-order root)\\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec level_order(Root :: #tree_node{} | null) -> [[integer()]].\\nlevel_order(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec level_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def level_order(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,null,null,15,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"levelOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes&#39; values</em>. (i.e., from left to right, level by level).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[9,20],[15,7]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Level Order Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### How to traverse the tree\n\nThere are two general strategies to traverse a tree:\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n    \nOn the following figure the nodes are numerated in the order you visit them,\nplease follow ```1-2-3-4-5``` to compare different strategies.\n\n![postorder](../Figures/145_transverse.png)\n\nHere the problem is to implement split-level BFS traversal : `[[1], [2, 3], [4, 5]]`.\n<br /> \n<br />\n\n\n---\n#### Approach 1: Recursion\n\n**Algorithm**\n\nThe simplest way to solve the problem is to use a recursion. Let's \nfirst ensure that the tree is not empty, and then call recursively the function \n`helper(node, level)`, which takes the current node and its level as the arguments.\n\nThis function does the following :\n\n- The output list here is called `levels`, and hence the current level is\njust a length of this list `len(levels)`.\nCompare the number of a current level `len(levels)` with a node level `level`.\nIf you're still on the previous level - add the new one by adding a \nnew list into `levels`.\n\n- Append the node value to the last list in `levels`.\n\n- Process recursively child nodes if they are not `None` : \n`helper(node.left / node.right, level + 1)`.\n\n**Implementation**\n\n!?!../Documents/102_LIS.json:1000,509!?!\n\n<iframe src=\"https://leetcode.com/playground/pRYovDJ4/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"pRYovDJ4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is processed\nexactly once.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output structure which\ncontains `N` node values.\n<br />\n<br />\n\n\n---\n#### Approach 2: Iteration\n\n**Algorithm**\n\nThe recursion above could be rewritten in the iteration form.\n\nLet's keep nodes of each tree level in the _queue_ structure,\nwhich typically orders elements in a FIFO (first-in-first-out) manner.\nIn Java one could use [`LinkedList` implementation of the `Queue` interface](https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html).\nIn Python using [`Queue` structure](https://docs.python.org/3/library/queue.html)\nwould be an overkill since it's designed for a safe exchange between multiple threads\nand hence requires locking which leads to a performance loose. \nIn Python the queue implementation with a fast atomic `append()`\nand `popleft()` is [`deque`](https://docs.python.org/3/library/collections.html#collections.deque).\n\nThe zero level contains only one node `root`. The algorithm is simple :\n\n- Initiate queue with a `root` and start from the level number `0` :\n`level = 0`.\n\n- While queue is not empty :\n\n    * Start the current level by adding an empty list into output structure `levels`.\n    \n    * Compute how many elements should be on the current level : it's a \n    queue length.\n    \n    * Pop out all these elements from the queue and add them into the current\n    level.\n    \n    * Push their child nodes into the queue for the next level.\n    \n    * Go to the next level `level++`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/YjxL23CU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"YjxL23CU\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is processed\nexactly once.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output structure which\ncontains `N` node values.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-level-order-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.791,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2918",
                "title": "Maximum Depth of Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "104",
                    "questionFrontendId": "104",
                    "sessionId": "968792",
                    "questionTitle": "Maximum Depth of Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/maximum-depth-of-binary-tree/submit/",
                    "interpretUrl": "/problems/maximum-depth-of-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int maxDepth(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public int maxDepth(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def maxDepth(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def maxDepth(self, root: Optional[TreeNode]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nint maxDepth(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public int MaxDepth(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number}\\n */\\nvar maxDepth = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer}\\ndef max_depth(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func maxDepth(_ root: TreeNode?) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc maxDepth(root *TreeNode) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxDepth(root: TreeNode): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun maxDepth(root: TreeNode?): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn max_depth(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer\\n     */\\n    function maxDepth($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction maxDepth(root: TreeNode | null): number {\\n\\n};\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_depth(Root :: #tree_node{} | null) -> integer().\\nmax_depth(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_depth(root :: TreeNode.t | nil) :: integer\\n  def max_depth(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,null,null,15,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxDepth\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>its maximum depth</em>.</p>\n\n<p>A binary tree&#39;s <strong>maximum depth</strong>&nbsp;is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg\" style=\"width: 400px; height: 277px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Maximum Depth of Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\n**Tree definition**\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use.\n\n<iframe src=\"https://leetcode.com/playground/4PUaBALP/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"4PUaBALP\"></iframe>\n<br />\n<br />\n\n\n---\n#### Approach 1: Recursion\n\n**Intuition**\nBy definition, the maximum depth of a binary tree is the maximum number of steps to reach a leaf node from the root node.\n\n>From the definition, an intuitive idea would be to traverse the tree and record the maximum depth during the traversal. \n\n**Algorithm**\n\n<!--![LIS](../Figures/104/104_tr.gif)-->\n!?!../Documents/104_LIS.json:1000,500!?!\n\nOne could traverse the tree either by Depth-First Search (DFS) strategy or Breadth-First Search (BFS) strategy.\nFor this problem, either way would do.\nHere we demonstrate a solution that is implemented with the **DFS** strategy and **recursion**.\n\n<iframe src=\"https://leetcode.com/playground/oZkJPDBk/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"oZkJPDBk\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity : we visit each node exactly once, \nthus the time complexity is $$\\mathcal{O}(N)$$,\nwhere $$N$$ is the number of nodes.\n\n* Space complexity : in the worst case, the tree is completely unbalanced,\n*e.g.* each node has only left child node, the recursion call would occur\n $$N$$ times (the height of the tree), \n therefore the storage to keep the call stack would be $$\\mathcal{O}(N)$$.\n But in the best case (the tree is completely balanced), \n the height of the tree would be $$\\log(N)$$.\n Therefore, the space complexity in this case would be $$\\mathcal{O}(\\log(N))$$.\n<br />\n<br />\n\n---\n#### Approach 2: Tail Recursion + BFS\n\nOne might have noticed that the above recursion solution is probably not the most optimal one in terms of the space complexity, and in the extreme case the overhead of call stack might even lead to *stack overflow*.\n\nTo address the issue, one can tweak the solution a bit to make it **tail recursion**, which is a specific form of recursion where the recursive call is the last action in the function. \n\nThe benefit of having tail recursion, is that for certain programming languages (*e.g.* `C++`) the compiler could optimize the memory allocation of call stack by reusing the same space for every recursive call, rather than creating the space for each one. As a result, one could obtain the constant space complexity $$\\mathcal{O}(1)$$ for the overhead of the recursive calls.\n\nHere is a sample solution. Note that the optimization of tail recursion is not supported by Python or Java.\n\n<iframe src=\"https://leetcode.com/playground/EUN4sJ4X/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EUN4sJ4X\"></iframe>\n\n\n**Complexity analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$, still we visit each node once and only once.\n\n* Space complexity : $$\\mathcal{O}(2^{(log_2N-1)})=\\mathcal{O}(N/2)=\\mathcal{O}(N)$$, *i.e.* the maximum number of nodes at the same level (the number of leaf nodes in a full binary tree), since we traverse the tree in the **BFS** manner.\n \nAs one can see, this probably is not the best example to apply the *tail recursion* technique. Because though we did gain the constant space complexity for the recursive calls, we pay the price of $$\\mathcal{O}(N)$$ complexity to maintain the state information for recursive calls. This defeats the purpose of applying tail recursion.\n\nHowever, we would like to stress on the point that tail recursion is a useful form of recursion that could eliminate the space overhead incurred by the recursive function calls.\n\n*Note: a function cannot be tail recursion if there are multiple occurrences of recursive calls in the function, even if the last action is the recursive call.* Because the system has to maintain the function call stack for the sub-function calls that occur within the same function. \n<br />\n<br />\n\n---\n#### Approach 3: Iteration\n\n**Intuition**\n\nWe could also convert the above recursion into iteration, with the help of the *stack* data structure.\nSimilar with the behaviors of the function call stack, the stack data structure follows the pattern of FILO \n(First-In-Last-Out), *i.e.* the last element that is added to a stack would come out first.\n\nWith the help of the *stack* data structure, one could mimic the behaviors of function call stack that is involved in the recursion, to convert a recursive function to a function with iteration.\n\n**Algorithm**\n\n>The idea is to keep the next nodes to visit in a stack.\nDue to the FILO behavior of stack, one would get the order of visit same as the one in recursion.\n\nWe start from a stack which contains the root node and the corresponding depth which is ```1```.\nThen we proceed to the iterations: pop the current node out of the stack and push the child nodes. The depth is updated at each step. \n\n<iframe src=\"https://leetcode.com/playground/UL6Txuee/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"UL6Txuee\"></iframe>  \n\n**Complexity analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$.\n\n* Space complexity : in the worst case, the tree is completely unbalanced,\n*e.g.* each node has only left child node, the recursion call would occur\n $$N$$ times (the height of the tree), \n therefore the storage to keep the call stack would be $$\\mathcal{O}(N)$$.\n But in the average case (the tree is balanced), \n the height of the tree would be $$\\log(N)$$.\n Therefore, the space complexity in this case would be $$\\mathcal{O}(\\log(N))$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "maximum-depth-of-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.351,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1983",
                "title": "Word Ladder",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "127",
                    "questionFrontendId": "127",
                    "sessionId": "968792",
                    "questionTitle": "Word Ladder",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-ladder/submit/",
                    "interpretUrl": "/problems/word-ladder/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def ladderLength(self, beginWord, endWord, wordList):\\n        \\\"\\\"\\\"\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint ladderLength(char * beginWord, char * endWord, char ** wordList, int wordListSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} beginWord\\n * @param {string} endWord\\n * @param {string[]} wordList\\n * @return {number}\\n */\\nvar ladderLength = function(beginWord, endWord, wordList) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} begin_word\\n# @param {String} end_word\\n# @param {String[]} word_list\\n# @return {Integer}\\ndef ladder_length(begin_word, end_word, word_list)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func ladderLength(beginWord string, endWord string, wordList []string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun ladderLength(beginWord: String, endWord: String, wordList: List<String>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn ladder_length(begin_word: String, end_word: String, word_list: Vec<String>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $beginWord\\n     * @param String $endWord\\n     * @param String[] $wordList\\n     * @return Integer\\n     */\\n    function ladderLength($beginWord, $endWord, $wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (ladder-length beginWord endWord wordList)\\n  (-> string? string? (listof string?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> integer().\\nladder_length(BeginWord, EndWord, WordList) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\\n  def ladder_length(begin_word, end_word, word_list) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"ladderLength\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"beginWord\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"endWord\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"wordList\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Word Ladder",
                        "content": "## Video Solution\n\n---\n\n<div>\n  <div class=\"video-container\">\n    <iframe src=\"https://player.vimeo.com/video/497805462\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n  </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\nWe are given a `beginWord` and an `endWord`. Let these two represent `start node` and `end node` of a graph. We have to reach from the start node to the end node using some intermediate nodes/words. The intermediate nodes are determined by the `wordList` given to us. The only condition for every step we take on this ladder of words is the current word should change by just `one letter`.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_1.png\" width=\"400\"/>\n</center>\n\nWe will essentially be working with an undirected and unweighted graph with words as nodes and edges between words which differ by just one letter. The problem boils down to finding the shortest path from a start node to a destination node, if there exists one. Hence it can be solved using `Breadth First Search` approach.\n\nOne of the most important step here is to figure out how to find adjacent nodes i.e. words which differ by one letter. To efficiently find the neighboring nodes for any given word we do some pre-processing on the words of the given `wordList`. The pre-processing involves replacing the letter of a word by a non-alphabet say, `*`.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_2.png\" width=\"400\"/>\n</center>\n\nThis pre-processing helps to form generic states to represent a single letter change.\n\nFor e.g. `Dog ----> D*g <---- Dig`\n\nBoth `Dog` and `Dig` map to the same intermediate or generic state `D*g`.\n\nThe preprocessing step helps us find out the generic one letter away nodes for any word of the word list and hence making it easier and quicker to get the adjacent nodes. Otherwise, for every word we will have to iterate over the entire word list and find words that differ by one letter. That would take a lot of time. This preprocessing step essentially builds the adjacency list first before beginning the breadth first search algorithm.\n\nFor eg. While doing BFS if we have to find the adjacent nodes for `Dug` we can first find all the generic states for `Dug`.\n\n1. `Dug => *ug`\n2. `Dug => D*g`\n3. `Dug => Du*`\n\nThe second transformation `D*g` could then be mapped to `Dog` or `Dig`, since all of them share the same generic state. Having a common generic transformation means two words are connected and differ by one letter.\n\n#### Approach 1: Breadth First Search\n\n**Intuition**\n\nStart from `beginWord` and search the `endWord` using BFS.\n\n**Algorithm**\n\n1. Do the pre-processing on the given `wordList` and find all the possible generic/intermediate states. Save these intermediate states in a dictionary with key as the intermediate word and value as the list of words which have the same intermediate word.\n2. Push a tuple containing the `beginWord` and `1` in a queue. The `1` represents the level number of a node. We have to return the level of the `endNode` as that would represent the shortest sequence/distance from the `beginWord`.\n3. To prevent cycles, use a visited dictionary.\n4. While the queue has elements, get the front element of the queue. Let's call this word as `current_word`.\n5. Find all the generic transformations of the `current_word` and find out if any of these transformations is also a transformation of other words in the word list. This is achieved by checking the `all_combo_dict`.\n6. The list of words we get from `all_combo_dict` are all the words which have a common intermediate state with the `current_word`. These new set of words will be the adjacent nodes/words to `current_word` and hence added to the queue.\n6. Hence, for each word in this list of intermediate words, append `(word, level + 1)` into the queue where `level` is the level for the `current_word`.\n7. Eventually if you reach the desired word, its level would represent the shortest transformation sequence length.\n\n    >Termination condition for standard BFS is finding the end word.\n\n<iframe src=\"https://leetcode.com/playground/6MKoYxSP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6MKoYxSP\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O({M}^2 \\times N)$$, where $$M$$ is the length of each word and $$N$$ is the total number of words in the input word list.\n  * For each word in the word list, we iterate over its length to find all the intermediate words corresponding to it. Since the length of each word is $$M$$ and we have $$N$$ words, the total number of iterations the algorithm takes to create `all_combo_dict` is $$M \\times N$$. Additionally, forming each of the intermediate word takes $$O(M)$$ time because of the substring operation used to create the new string. This adds up to a complexity of $$O({M}^2 \\times N)$$.\n\n  * Breadth first search in the worst case might go to each of the $$N$$ words. For each word, we need to examine $$M$$ possible intermediate words/combinations. Notice, we have used the substring operation to find each of the combination. Thus, $$M$$ combinations take $$O({M} ^ 2)$$ time. As a result, the time complexity of BFS traversal would also be $$O({M}^2 \\times N)$$.\n\n  Combining the above steps, the overall time complexity of this approach is $$O({M}^2 \\times N)$$.\n\n* Space Complexity: $$O({M}^2 \\times N)$$.\n  * Each word in the word list would have $$M$$ intermediate combinations. To create the `all_combo_dict` dictionary we save an intermediate word as the key and its corresponding original words as the value. Note, for each of $$M$$ intermediate words we save the original word of length $$M$$. This simply means, for every word we would need a space of $${M}^2$$ to save all the transformations corresponding to it. Thus, `all_combo_dict` would need a total space of $$O({M}^2 \\times N)$$.\n  * `Visited` dictionary would need a space of $$O(M \\times N)$$ as each word is of length $$M$$.\n  * Queue for BFS in worst case would need a space for all $$O(N)$$ words and this would also result in a space complexity of $$O(M \\times N)$$.\n\n  Combining the above steps, the overall space complexity is $$O({M}^2 \\times N)$$ + $$O(M * N)$$ + $$O(M * N)$$ = $$O({M}^2 \\times N)$$ space.\n\n**Optimization:**\n We can definitely reduce the space complexity of this algorithm by storing the indices corresponding to each word instead of storing the word itself.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Bidirectional Breadth First Search\n\n**Intuition**\n\nThe graph formed from the nodes in the dictionary might be too big. The search space considered by the breadth first search algorithm depends upon the branching factor of the nodes at each level. If the branching factor remains the same for all the nodes, the search space increases exponentially along with the number of levels. Consider a simple example of a binary tree. With each passing level in a complete binary tree, the number of nodes increase in powers of `2`.\n\nWe can considerably cut down the search space of the standard breadth first search algorithm if we launch two simultaneous BFS. One from the `beginWord` and one from the `endWord`. We progress one node at a time from both sides and at any point in time if we find a common node in both the searches, we stop the search. This is known as `bidirectional BFS` and it considerably cuts down on the search space and hence reduces the time and space complexity.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_3.png\" width=\"600\"/>\n</center>\n\n**Algorithm**\n\n1. The algorithm is very similar to the standard BFS based approach we saw earlier.\n2. The only difference is we now do BFS starting two nodes instead of one. This also changes the termination condition of our search.\n3. We now have two visited dictionaries to keep track of nodes visited from the search starting at the respective ends.\n4. If we ever find a node/word which is in the visited dictionary of the parallel search we terminate our search, since we have found the meet point of this bidirectional search. It's more like meeting in the middle instead of going all the way through.\n\n    >Termination condition for bidirectional search is finding a word which is already been seen by the parallel search.\n\n5. The shortest transformation sequence is the sum of levels of the meet point node from both the ends. Thus, for every visited node we save its level as value in the visited dictionary.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_4.png\" width=\"600\"/>\n</center>\n\n\n<iframe src=\"https://leetcode.com/playground/oNcirzak/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"oNcirzak\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O({M}^2 \\times N)$$, where $$M$$ is the length of words and $$N$$ is the total number of words in the input word list. Similar to one directional, bidirectional also takes $$O({M}^2 \\times N)$$ time for finding out all the transformations. But the search time reduces to half, since the two parallel searches meet somewhere in the middle.\n\n* Space Complexity: $$O({M}^2 \\times N)$$, to store all $$M$$ transformations for each of the $$N$$ words in the `all_combo_dict` dictionary, same as one directional. But bidirectional reduces the search space. It narrows down because of meeting in the middle.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "word-ladder",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.578,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1984",
                "title": "Binary Tree Upside Down",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "156",
                    "questionFrontendId": "156",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Upside Down",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-upside-down/submit/",
                    "interpretUrl": "/problems/binary-tree-upside-down/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* upsideDownBinaryTree(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode upsideDownBinaryTree(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def upsideDownBinaryTree(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def upsideDownBinaryTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nstruct TreeNode* upsideDownBinaryTree(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode UpsideDownBinaryTree(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {TreeNode}\\n */\\nvar upsideDownBinaryTree = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {TreeNode}\\ndef upside_down_binary_tree(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func upsideDownBinaryTree(_ root: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc upsideDownBinaryTree(root *TreeNode) *TreeNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def upsideDownBinaryTree(root: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun upsideDownBinaryTree(root: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn upside_down_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return TreeNode\\n     */\\n    function upsideDownBinaryTree($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction upsideDownBinaryTree(root: TreeNode | null): TreeNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (upside-down-binary-tree root)\\n  (-> (or/c tree-node? #f) (or/c tree-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec upside_down_binary_tree(Root :: #tree_node{} | null) -> #tree_node{} | null.\\nupside_down_binary_tree(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec upside_down_binary_tree(root :: TreeNode.t | nil) :: TreeNode.t | nil\\n  def upside_down_binary_tree(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"upsideDownBinaryTree\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\",\n      \"dealloc\": false\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\",\n    \"dealloc\": true\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, turn the tree upside down and return <em>the new root</em>.</p>\n\n<p>You can turn a binary tree upside down with the following steps:</p>\n\n<ol>\n\t<li>The original left child becomes the new root.</li>\n\t<li>The original root becomes the new right child.</li>\n\t<li>The original right child becomes the new left child.</li>\n</ol>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/29/main.jpg\" style=\"width: 600px; height: 95px;\" />\n<p>The mentioned steps are done level by level. It is <strong>guaranteed</strong> that every right node has a sibling (a left node with the same parent) and has no children.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/29/updown.jpg\" style=\"width: 800px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5]\n<strong>Output:</strong> [4,5,2,null,null,3,1]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree will be in the range <code>[0, 10]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10</code></li>\n\t<li>Every right node in the tree has a sibling (a left node that shares the same parent).</li>\n\t<li>Every right node in the tree has no children.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1985",
                "title": "Number of Islands",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "200",
                    "questionFrontendId": "200",
                    "sessionId": "968792",
                    "questionTitle": "Number of Islands",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/number-of-islands/submit/",
                    "interpretUrl": "/problems/number-of-islands/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numIslands(vector<vector<char>>& grid) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numIslands(self, grid):\\n        \\\"\\\"\\\"\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numIslands(char** grid, int gridSize, int* gridColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} grid\\n * @return {number}\\n */\\nvar numIslands = function(grid) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} grid\\n# @return {Integer}\\ndef num_islands(grid)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numIslands(_ grid: [[Character]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numIslands(grid [][]byte) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numIslands(grid: Array[Array[Char]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numIslands(grid: Array<CharArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $grid\\n     * @return Integer\\n     */\\n    function numIslands($grid) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numIslands(grid: string[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-islands grid)\\n  (-> (listof (listof char?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_islands(Grid :: [[char()]]) -> integer().\\nnum_islands(Grid) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_islands(grid :: [[char]]) :: integer\\n  def num_islands(grid) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numIslands\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"character[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Number of Islands",
                        "content": "[TOC]\n\n#### Approach #1 DFS [Accepted]\n\n**Intuition**\n\nTreat the 2d grid map as an undirected graph and there is an edge\nbetween two horizontally or vertically adjacent nodes of value '1'.\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Depth First Search. During DFS, every visited node should be\nset as '0' to mark as visited node. Count the number of root nodes that trigger\nDFS, this number would be the number of islands since each DFS starting at some\nroot identifies an island.\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_dfs.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/eVGw9zoX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eVGw9zoX\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : worst case $$O(M \\times N)$$ in case that the grid map\n  is filled with lands where DFS goes by $$M \\times N$$ deep.\n\n---\n\n\n#### Approach #2: BFS [Accepted]\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Breadth First Search. Put it into a queue and set its value\nas '0' to mark as visited node. Iteratively search the neighbors of enqueued\nnodes until the queue becomes empty.\n\n<iframe src=\"https://leetcode.com/playground/jXzqritJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jXzqritJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : $$O(min(M, N))$$ because in worst case where the\n  grid is filled with lands, the size of queue can grow up to min($$M,N$$).\n\n---\n\n\n#### Approach #3: Union Find (aka Disjoint Set) [Accepted]\n\n**Algorithm**\n\nTraverse the 2d grid map and union adjacent lands horizontally or vertically,\nat the end, return the number of connected components maintained in the UnionFind\ndata structure.\n\nFor details regarding to Union Find, you can refer to this [article](https://leetcode.com/articles/redundant-connection/).\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_unionfind.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/k6Xzhgt6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"k6Xzhgt6\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns. Note that Union operation takes essentially constant\n  time[^1] when UnionFind is implemented with both path compression and union by rank.\n\n* Space complexity : $$O(M \\times N)$$ as required by UnionFind data structure.\n\n\n---\n\n**Footnotes**\n\n[^1]: [https://en.wikipedia.org/wiki/Disjoint-set_data_structure](https://en.wikipedia.org/wiki/Disjoint-set_data_structure)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "number-of-islands",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.326,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1986",
                "title": "Lowest Common Ancestor of a Binary Search Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "235",
                    "questionFrontendId": "235",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Search Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-search-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-search-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\n\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\n\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val   int\\n *     Left  *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n\\t\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[6,2,8,0,4,7,9,null,null,3,5]\n2\n8",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1], p = 2, q = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the BST.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Search Tree",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\nWe can solve this using the approaches to find [LCA in a binary tree](https://leetcode.com/articles/lowest-common-ancestor-of-a-binary-tree/).\r\n\r\nBut, binary search tree's property could be utilized, to come up with a better algorithm.\r\n\r\nLets review properties of a BST:\r\n>1. Left subtree of a node N contains nodes whose values are lesser than or equal to node N's value.\r\n>2. Right subtree of a node N contains nodes whose values are greater than node N's value.\r\n>3. Both left and right subtrees are also BSTs.\r\n\r\n#### Approach 1: Recursive Approach\r\n\r\n**Intuition**\r\n\r\nLowest common ancestor for two nodes `p` and `q` would be the last ancestor node common to both of them. Here `last` is defined in terms of the depth of the node. The below diagram would help in understanding what `lowest` means.\r\n\r\n<center>\r\n<img src=\"../Figures/235/235_LCA_Binary_1.png\" width=\"600\"/>\r\n</center>\r\n\r\nNote: One of `p` or `q` would be in the left subtree and the other in the right subtree of the LCA node.\r\n\r\nFollowing cases are possible:\r\n<center>\r\n<img src=\"../Figures/235/235_LCA_Binary_2.png\" width=\"600\"/>\r\n</center>\r\n\r\n**Algorithm**\r\n\r\n1. Start traversing the tree from the root node.\r\n2. If both the nodes `p` and `q` are in the right subtree, then continue the search with right subtree starting step 1.\r\n3. If both the nodes `p` and `q` are in the left subtree, then continue the search with left subtree starting step 1.\r\n4. If both step 2 and step 3 are not true, this means we have found the node which is common to node `p`'s and `q`'s subtrees.\r\nand hence we return this common node as the LCA.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ub9aBGUZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"ub9aBGUZ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.\r\n\r\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed BST could be $$N$$.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: Iterative Approach\r\n\r\n**Algorithm**\r\n\r\nThe steps taken are also similar to approach 1. The only difference is instead of recursively calling the function, we traverse down the tree iteratively. This is possible without using a stack or recursion since we don't need to backtrace to find the LCA node. In essence of it the problem is iterative, it just wants us to find the split point. The point from where `p` and `q` won't be part of the same subtree or when one is the parent of the other.\r\n\r\n<iframe src=\"https://leetcode.com/playground/UtgsdU9t/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"UtgsdU9t\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.\r\n\r\n* Space Complexity : $$O(1)$$.\r\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.698,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1987",
                "title": "Lowest Common Ancestor of a Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "236",
                    "questionFrontendId": "236",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n  \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\nFirst the given nodes `p` and `q` are to be searched in a binary tree and then their lowest common ancestor is to be found. We can resort to a normal tree traversal to search for the two nodes. Once we reach the desired nodes `p` and `q`, we can backtrack and find the lowest common ancestor.\n\n<center>\n<img src=\"../Figures/236/236_LCA_Binary_1.png\" width=\"600\"/>\n</center>\n\n#### Approach 1: Recursive Approach\n\n**Intuition**\n\nThe approach is pretty intuitive. Traverse the tree in a depth first manner. The moment you encounter either of the nodes `p` or `q`, return some boolean flag. The flag helps to determine if we found the required nodes in any of the paths. The least common ancestor would then be the node for which both the subtree recursions return a `True` flag. It can also be the node which itself is one of `p` or `q` and for which one of the subtree recursions returns a `True` flag.\n\nLet us look at the formal algorithm based on this idea.\n\n**Algorithm**\n\n1. Start traversing the tree from the root node.\n2. If the current node itself is one of `p` or `q`, we would mark a variable `mid` as `True` and continue the search for the other node in the left and right branches.\n3. If either of the left or the right branch returns `True`, this means one of the two nodes was found below.\n4. If at any point in the traversal, any two of the three flags `left`, `right` or `mid` become `True`, this means we have found the lowest common ancestor for the nodes `p` and `q`.\n\nLet us look at a sample tree and we search for the lowest common ancestor of two nodes `9` and `11` in the tree.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_1.json:770,460!?!\n\n</center>\n\nFollowing is the sequence of nodes that are followed in the recursion:\n\n<pre>\n1 --> 2 --> 4 --> 8\nBACKTRACK 8 --> 4\n4 --> 9 (ONE NODE FOUND, return True)\nBACKTRACK 9 --> 4 --> 2\n2 --> 5 --> 10\nBACKTRACK 10 --> 5\n5 --> 11 (ANOTHER NODE FOUND, return True)\nBACKTRACK 11 --> 5 --> 2\n\n2 is the node where we have left = True and right = True and hence it is the lowest common ancestor.\n</pre>\n\n\n<iframe src=\"https://leetcode.com/playground/SaUmkb92/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SaUmkb92\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative using parent pointers\n\n**Intuition**\n\nIf we have parent pointers for each node we can traverse back from `p` and `q` to get their ancestors. The first common node we get during this traversal would be the LCA node. We can save the parent pointers in a dictionary as we traverse the tree.\n\n**Algorithm**\n\n1. Start from the root node and traverse the tree.\n2. Until we find `p` and `q` both, keep storing the parent pointers in a dictionary.\n3. Once we have found both `p` and `q`, we get all the ancestors for `p` using the parent dictionary and add to a set called `ancestors`.\n4. Similarly, we traverse through ancestors for node `q`. If the ancestor is present in the ancestors set for `p`, this means this is the first ancestor common between `p` and `q` (while traversing upwards) and hence this is the LCA node.\n\n<iframe src=\"https://leetcode.com/playground/uh78aTxV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uh78aTxV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity : $$O(N)$$. In the worst case space utilized by the stack, the parent pointer dictionary and the ancestor set, would be $$N$$ each, since the height of a skewed binary tree could be $$N$$.\n<br>\n<br>\n\n---\n\n#### Approach 3: Iterative without parent pointers\n\n**Intuition**\n\nIn the previous approach, we come across the LCA during the backtracking process. We can get rid of the backtracking process itself. In this approach we always have a pointer to the probable LCA and the moment we find both the nodes we return the pointer as the answer.\n\n**Algorithm**\n\n1. Start with root node.\n2. Put the `(root, root_state)` on to the stack. `root_state` defines whether one of the children or both children of `root` are left for traversal.\n3. While the stack is not empty, peek into the top element of the stack represented as `(parent_node, parent_state)`.\n4. Before traversing any of the child nodes of `parent_node` we check if the `parent_node` itself is one of `p` or `q`.\n5. First time we find either of `p` or `q`, set a boolean flag called `one_node_found` to `True`. Also start keeping track of the lowest common ancestors by keeping a note of the top index of the stack in the variable `LCA_index`. Since all the current elements of the stack are ancestors of the node we just found.\n6. The second time `parent_node == p or parent_node == q` it means we have found both the nodes and we can return the `LCA node`.\n7. Whenever we visit a child of a `parent_node` we push the `(parent_node, updated_parent_state)` onto the stack. We update the state of the parent since a child/branch has been visited/processed and accordingly the state changes.\n8. A node finally gets popped off from the stack when the state becomes `BOTH_DONE` implying both left and right subtrees have been pushed onto the stack and processed. If `one_node_found` is `True` then we need to check if the top node being popped could be one of the ancestors of the found node. In that case we need to reduce `LCA_index` by one. Since one of the ancestors was popped off.\n\n> Whenever both `p` and `q` are found, `LCA_index` would be pointing to an index in the stack which would contain all the common ancestors between `p` and `q`. And the `LCA_index` element has the `lowest` ancestor common between p and q.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_2.json:770,460!?!\n\n</center>\n\nThe animation above shows how a stack is used to traverse the binary tree and keep track of the common ancestors between nodes `p` and `q`.\n\n<iframe src=\"https://leetcode.com/playground/j6C3VpYf/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"j6C3VpYf\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree. The advantage of this approach is that we can prune backtracking. We simply return once both the nodes are found.\n\n* Space Complexity : $$O(N)$$. In the worst case the space utilized by stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.14,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1989",
                "title": "Closest Binary Search Tree Value II",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "272",
                    "questionFrontendId": "272",
                    "sessionId": "968792",
                    "questionTitle": "Closest Binary Search Tree Value II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/closest-binary-search-tree-value-ii/submit/",
                    "interpretUrl": "/problems/closest-binary-search-tree-value-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<int> closestKValues(TreeNode* root, double target, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<Integer> closestKValues(TreeNode root, double target, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def closestKValues(self, root, target, k):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type target: float\\n        :type k: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def closestKValues(self, root: Optional[TreeNode], target: float, k: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* closestKValues(struct TreeNode* root, double target, int k, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<int> ClosestKValues(TreeNode root, double target, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {number} target\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar closestKValues = function(root, target, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @param {Float} target\\n# @param {Integer} k\\n# @return {Integer[]}\\ndef closest_k_values(root, target, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func closestKValues(_ root: TreeNode?, _ target: Double, _ k: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc closestKValues(root *TreeNode, target float64, k int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def closestKValues(root: TreeNode, target: Double, k: Int): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun closestKValues(root: TreeNode?, target: Double, k: Int): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn closest_k_values(root: Option<Rc<RefCell<TreeNode>>>, target: f64, k: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @param Float $target\\n     * @param Integer $k\\n     * @return Integer[]\\n     */\\n    function closestKValues($root, $target, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction closestKValues(root: TreeNode | null, target: number, k: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (closest-k-values root target k)\\n  (-> (or/c tree-node? #f) flonum? exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec closest_k_values(Root :: #tree_node{} | null, Target :: float(), K :: integer()) -> [integer()].\\nclosest_k_values(Root, Target, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec closest_k_values(root :: TreeNode.t | nil, target :: float, k :: integer) :: [integer]\\n  def closest_k_values(root, target, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,2,5,1,3]\n3.714286\n2",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"closestKValues\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"double\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary search tree, a <code>target</code> value, and an integer <code>k</code>, return <em>the </em><code>k</code><em> values in the BST that are closest to the</em> <code>target</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>You are <strong>guaranteed</strong> to have only one unique set of <code>k</code> values in the BST that are closest to the <code>target</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/closest1-1-tree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [4,2,5,1,3], target = 3.714286, k = 2\n<strong>Output:</strong> [4,3]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1], target = 0.000000, k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is <code>n</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>4</sup></code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Assume that the BST is balanced. Could you solve it in less than <code>O(n)</code> runtime (where <code>n = total nodes</code>)?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Consider implement these two helper functions:\r\n<ol type=\"i\"><li><code>getPredecessor(N)</code>, which returns the next smaller node to N.</li>\r\n<li><code>getSuccessor(N)</code>, which returns the next larger node to N.</li>\r\n</ol>",
                        "Try to assume that each node has a parent pointer, it makes the problem much easier.",
                        "Without parent pointer we just need to keep track of the path from the root to the current node using a stack.",
                        "You would need two stacks to track the path in finding predecessor and successor node separately."
                    ],
                    "solution": {
                        "title": "Closest BST Value II",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nThe problem is a BST variation of the \"kth-smallest\" classical problem. It is \npopular both in Google and Facebook, but these two companies are waiting for you\nto show different approaches to this problem. \nWe're proposing 3 solutions here, and it's more an overview.\n\n**Prerequisites**\n\nBecause of that, you might want first to check out the list of prerequisites:\n\n- [Inorder traversal of BST is an array sorted in the ascending order.](https://leetcode.com/problems/delete-node-in-a-bst/solution/)\nTo compute inorder traversal follow the direction `Left -> Node -> Right`.\n\n- [Closest BST value: find _one_ closest element](https://leetcode.com/problems/closest-binary-search-tree-value/solution/).\n\n- [kth-smallest problem for the array could be solved by using heap in \n$$\\mathcal{O}(N \\log k)$$ time, or by using quickselect in $$\\mathcal{O}(N)$$ time.](https://leetcode.com/problems/top-k-frequent-elements/solution/)\n\n**Google vs. Facebook**\n\nThere are three ways to solve the problem:\n\n- Approach 1. Sort, $$\\mathcal{O}(N \\log N)$$ time. The idea is to convert BST into an array, \nsort it by the distance to the target, and return the k closest elements.\n\n- Approach 2. Facebook-friendly, heap, $$\\mathcal{O}(N \\log k)$$ time. \nWe could use the heap of capacity k, sorted by the\ndistance to the target. It's not an optimal but very straightforward solution - \ntraverse the tree, push the elements into the heap, and then return this heap. \nFacebook interviewer would insist on implementing this solution because the interviews are a bit shorter than Google ones, and it's important to get \nproblem solved end-to-end.\n\n- Approach 3. Google-friendly, quickselect, $$\\mathcal{O}(N)$$ time.\n[Here you could find a very detailed explanation of quickselect algorithm.](https://leetcode.com/problems/top-k-frequent-elements/solution/)\nIn this article, we're going to provide a relatively brief implementation. \nGoogle guys usually prefer the best-time solutions, well-structured clean skeleton,\neven if you have no time to implement everything in time end-to-end.\n<br /> \n<br />\n\n\n--- \n#### Approach 1: Recursive Inorder + Sort, O(N log N) time\n\n**Intuition**\n\n![img](../Figures/272/inorder.png)\n*Figure 1. Sort.*\n{:align=\"center\"}\n\nThe most straightforward approach is to build inorder traversal\nand then find the k closest elements using build-in sort.  \n\n**Algorithm**\n\n- Build an inorder traversal array.\n\n- Find the k closest to the target elements using build-in sort.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/d6fu73dD/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"d6fu73dD\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N \\log N)$$. $$\\mathcal{O}(N)$$ to build inorder traversal\nand then $$\\mathcal{O}(N \\log N)$$ to sort it.\n\n* Space complexity: $$\\mathcal{O}(N)$$ to store list `nums` of $$N$$ elements.\n<br /> \n<br />\n\n\n---\n#### Approach 2: Recursive Inorder + Heap, O(N log k) time\n\n![img](../Figures/272/heap.png)\n*Figure 2. Heap.*\n{:align=\"center\"}\n\n**Algorithm**\n\n- Instantiate the heap with \"less close element first\" \nstrategy so that the heap contains the elements \nthat are closest to the target. \n\n- Use inorder traversal to traverse the tree \nfollowing the direction `Left -> Node -> Right`.\n\n    - Push all elements into heap during the traversal, keeping the heap size less than or equal to $$k$$.\n\n- As a result, the heap contains $$k$$ elements that are closest to target.\nConvert it into a list and return.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/avn4tDSj/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"avn4tDSj\"></iframe>\n\n**Optimisations**\n\nOne could optimize the solution by adding the stop condition.\nInorder traversal pops the elements in the sorted order. Hence once\nthe distance of the current element to the target becomes greater than\nthe distance of the first element in a heap, \none could stop the computations. The overall worst-case time\ncomplexity would be still $$\\mathcal{O}(N \\log k)$$, but the average time\ncould be improved to $$\\mathcal{O}(H \\log k)$$, where $$H$$ is a tree height.\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N \\log k)$$ to push N elements into \nthe heap of the size $$k$$.  \n\n* Space complexity: $$\\mathcal{O}(k + H)$$ to keep the heap of k elements \nand the recursion stack of the tree height.\n<br /> \n<br />\n\n\n--- \n#### Approach 3: QuickSelect, O(N) time.\n\n**Hoare's selection algorithm**\n\nQuickselect is a [textbook algorithm](https://en.wikipedia.org/wiki/Quickselect) \ntypically used to solve the problems \"find `k`*th* something\":\n`k`*th* smallest, `k`*th* largest, etc. Like quicksort, quickselect was developed \nby [Tony Hoare](https://en.wikipedia.org/wiki/Tony_Hoare), \nand also known as _Hoare's selection algorithm_.\n\nIt has $$\\mathcal{O}(N)$$ _average_ time complexity and widely used in practice. \nIt is worth to note that its worst-case time complexity \nis $$\\mathcal{O}(N^2)$$, although the probability of this worst-case \nis negligible.\n\nThe approach is the same as for quicksort.\n\n> One chooses a pivot and defines its position in a sorted array in a \nlinear time using the so-called _partition algorithm_. \n\nAs an output, we have an array where the pivot is on its perfect position\nin the ascending sorted array, sorted by the frequency. \nAll elements on the left of the pivot are more close to the target \nthan the pivot, and all elements on the right are less close \nor on the same distance from\nthe target.\n\nThe array is now split into two parts.\nIf by chance, our pivot element took `k`*th* final position, \nthen $$k$$ elements on the left are these $$k$$ \nclosest elements we're looking for. \nIf not, we can choose one more pivot and \nplace it in its perfect position.\n\n![img](../Figures/272/quickselect.png)\n*Figure 3. Quickselect.*\n{:align=\"center\"}\n\nIf that were a quicksort algorithm, one would have to process\nboth parts of the array. That would result in $$\\mathcal{O}(N \\log N)$$ time complexity.\nIn this case, there is no need to deal with both parts since one knows \nin which part to search for `k`*th* closest element, and that\nreduces the average time complexity to $$\\mathcal{O}(N)$$.\n\n**Algorithm**\n\nThe algorithm is relatively straightforward:\n\n* Traverse the tree and convert it into array `nums`. \n\n* Implement the simple function to compute the distance to the target. Note that the distance is not unique. \nThat means we need a partition algorithm \nthat works fine with _duplicates_. \n\n* Work with `nums` array. \nUse a partition scheme (please check the next section) to place the pivot \ninto its perfect position `pivot_index` in the sorted array,\nmove more close elements to the left of the pivot, \nand less close or of the same distance - to the right.\n\n* Compare `pivot_index` and `k`.\n \n    - If `pivot_index == k`, the pivot is the\n    `k`*th* less close element, and all elements on the left\n    are the $$k$$ closest elements to the target. \n    Return these elements.\n    \n    - Otherwise, choose the side of the array to proceed recursively.\n\n**Hoare's Partition vs. Lomuto's Partition**\n\nThere is a zoo of partition algorithms. The most simple \none is [Lomuto's Partition Scheme](https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme).\n\n> The drawback of Lomuto's partition is that it fails with duplicates. \n\nHere we work with an array of unique elements, but they are compared by the distances to the target, which are _not unique_. That's why we choose \n_Hoare's Partition_ here. \n\n> Hoare's partition is more efficient than Lomuto's partition \nbecause it does three times fewer swaps on average, \nand creates efficient partitions even when all values are equal.\n\nHere is how it works:\n\n- Move pivot at the end of the array using swap. \n\n- Set the pointer at the beginning of the array `store_index = left`.\n    \n- Iterate over the array and move all more close elements \nto the left\n`swap(store_index, i)`. Move `store_index` one step to the right after each swap.\n\n- Move the pivot to its final place, and return this index.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/V6BJggQ8/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"V6BJggQ8\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$,\n    $$\\mathcal{O}(N^2)$$ in the worst case. \n    [Please refer to this card for the good detailed explanation of Master Theorem](https://leetcode.com/explore/learn/card/recursion-ii/470/divide-and-conquer/2871/).\n    Master Theorem helps to get an average complexity by writing the algorithm cost\n    as $$T(N) = a T(N / b) + f(N)$$. \n    Here we have an example of Master Theorem case III: \n    $$T(N) = T \\left(\\frac{N}{2}\\right) + N$$, \n    that results in $$\\mathcal{O}(N)$$ time complexity.\n    That's the case of random pivots.\n    \n    In the worst-case of constantly bad chosen pivots, the problem is \n    not divided by half at each step, it becomes just one element less,\n    that leads to $$\\mathcal{O}(N^2)$$ time complexity. \n    It happens, for example, if at each step you choose the pivot not \n    randomly, but take the rightmost element. \n    For the random pivot choice, the probability of having such a \n    worst-case is negligibly small.  \n\n* Space complexity: $$\\mathcal{O}(N)$$ to store `nums`.\n<br /> \n<br />\n\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "closest-bst-value-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.143,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1993",
                "title": "Find Leaves of Binary Tree",
                "type": 1,
                "info": "Editor's choice: Frequently asked in LinkedIn onsite interview.",
                "paidOnly": true,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "366",
                    "questionFrontendId": "366",
                    "sessionId": "968792",
                    "questionTitle": "Find Leaves of Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-leaves-of-binary-tree/submit/",
                    "interpretUrl": "/problems/find-leaves-of-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> findLeaves(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> findLeaves(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def findLeaves(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def findLeaves(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** findLeaves(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<IList<int>> FindLeaves(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar findLeaves = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[][]}\\ndef find_leaves(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func findLeaves(_ root: TreeNode?) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc findLeaves(root *TreeNode) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findLeaves(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun findLeaves(root: TreeNode?): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn find_leaves(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[][]\\n     */\\n    function findLeaves($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction findLeaves(root: TreeNode | null): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (find-leaves root)\\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_leaves(Root :: #tree_node{} | null) -> [[integer()]].\\nfind_leaves(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_leaves(root :: TreeNode.t | nil) :: [[integer]]\\n  def find_leaves(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findLeaves\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<list<integer>>\",\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, collect a tree&#39;s nodes as if you were doing this:</p>\n\n<ul>\n\t<li>Collect all the leaf nodes.</li>\n\t<li>Remove all the leaf&nbsp;nodes.</li>\n\t<li>Repeat until the tree is empty.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/16/remleaves-tree.jpg\" style=\"width: 500px; height: 215px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5]\n<strong>Output:</strong> [[4,5,3],[2],[1]]\nExplanation:\n[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find Leaves of Binary Tree",
                        "content": "[TOC]\n\n#### Approach 1: DFS (Depth-First Search) with sorting\n\n**Intuition**\n\nThe order in which the elements (nodes) will be collected in the final answer depends on the \"height\" of these nodes. The height of a node is the number of edges from the node to the deepest leaf. The nodes that are located in the i<sup>th</sup> height will be appear in the i<sup>th</sup> collection in the final answer. For any given node in the binary tree, the height is obtained by adding 1 to the maximum height of any children. Formally, for a given node of the binary tree $$\\text{root}$$, it's height can be represented as\n\n$$\n    \\text{height(root)} = \\text{1} + \\text{max(height(root.left), height(root.right))}\n$$\n\nWhere $$\\text{root.left}$$ and $$\\text{root.right}$$ are left and right children of the root respectively\n\n**Algorithm**\n\nIn our first approach, we'll simply traverse the tree recursively in a depth first search manner using the function `int getHeight(node)`, which will return the height of the given node in the binary tree. Since height of any node depends on the height of it's children node, hence we traverse the tree in a post-order manner (i.e. height of the childrens are calculated first before calculating the height of the given node). Additionally, whenever we encounter a null node, we simply return -1 as it's height.\n\nNext, we'll store the pair `(height, val)` for all the nodes which will be sorted later to obtain the final answer. The sorting will be done in increasing order considering the height first and then the val. Hence we'll obtain all the pairs in the increasing order of their height in the given binary tree.\n\nAttached below is the video which shows the calculation of height in a height-first-search manner for the binary tree given in the example.\n\n<div>\n<center>\n<video width=\"100%\" poster=\"../Figures/366/poster.jpg\" controls>\n<source src=\"../Figures/366/leaves-of-binary-tree.mp4\" type=\"video/mp4\">\n</video>\n</center>\n</div>\n\nBelow is the implementaion of this approach\n\n<iframe src=\"https://leetcode.com/playground/BWv8mPNK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"BWv8mPNK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Assuming $$N$$ is the total number of nodes in the binary tree, traversing the tree takes $$O(N)$$ time. Sorting all the pairs based on their height takes $$O(N \\log N)$$ time. Hence overall time complexity of this approach is $$O(N \\log N)$$\n\n* Space Complexity: $$O(N \\log N)$$, the space used by `pairs` and `solution`.\n\n---\n\n#### Approach 2: DFS (Depth-First Search) without sorting\n\nWe've seen in approach 1 that there is an additional sorting that is being performed, which increases the overall time complexity to $$O(N \\log N)$$. The question we can ask here is, can we do better than this? To answer this, we try to remove the sorting by directly placing all the values in their respective positions, i.e. instead of using the `pairs` array to collect all the `(height, val)` pairs and then sorting them based on their heights, we'll directly obtain the solution by placing each element (`val`) to its correct position in the solution array. To clarify, in the given binary tree, `[4, 3, 5]` goes into the first position, `[2]` goes into the second position and `[1]` goes into the third position in the solution array.\n\nTo do this, we modify our `getHeight` method to directly insert the node's value in the solution array at the correct location. Solution array is kept empty in the beginning and as we encounter elements with increasing height, we'll keep increasing the size of the solution array to accomodate for these elements. For example, if our solution array currently is `[[4, 3, 5]]` and if we want to insert 2 at the second position, we first create the space for 2 by increasing the size of the solution array by 1 and then insert 2 at it's correct location.\n\n* `[[4, 3, 5]] -> [[4, 3, 5], []] # increase the size of solution array`\n\n* `[[4, 3, 5], []] -> [[4, 3, 5], [2]] # insert 2 at it's correct location`\n\nBelow is the implementation of the above mentioned approach.\n\n<iframe src=\"https://leetcode.com/playground/fYReWpim/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fYReWpim\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Assuming $$N$$ is the total number of nodes in the binary tree, traversing the tree takes $$O(N)$$ time and storing all the pairs at the correct position also takes $$O(N)$$ time. Hence overall time complexity of this approach is $$O(N)$$.\n\n* Space Complexity: $$O(N)$$, the space used by `solution` array.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-leaves-of-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.65,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1996",
                "title": "Second Minimum Node In a Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 341,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "671",
                    "questionFrontendId": "671",
                    "sessionId": "968792",
                    "questionTitle": "Second Minimum Node In a Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/second-minimum-node-in-a-binary-tree/submit/",
                    "interpretUrl": "/problems/second-minimum-node-in-a-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int findSecondMinimumValue(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public int findSecondMinimumValue(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def findSecondMinimumValue(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def findSecondMinimumValue(self, root: Optional[TreeNode]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nint findSecondMinimumValue(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public int FindSecondMinimumValue(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number}\\n */\\nvar findSecondMinimumValue = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer}\\ndef find_second_minimum_value(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func findSecondMinimumValue(_ root: TreeNode?) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc findSecondMinimumValue(root *TreeNode) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def findSecondMinimumValue(root: TreeNode): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun findSecondMinimumValue(root: TreeNode?): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn find_second_minimum_value(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer\\n     */\\n    function findSecondMinimumValue($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction findSecondMinimumValue(root: TreeNode | null): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (find-second-minimum-value root)\\n  (-> (or/c tree-node? #f) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec find_second_minimum_value(Root :: #tree_node{} | null) -> integer().\\nfind_second_minimum_value(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec find_second_minimum_value(root :: TreeNode.t | nil) :: integer\\n  def find_second_minimum_value(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,2,5,null,null,5,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findSecondMinimumValue\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly <code>two</code> or <code>zero</code> sub-node. If the node has two sub-nodes, then this node&#39;s value is the smaller value among its two sub-nodes. More formally, the property&nbsp;<code>root.val = min(root.left.val, root.right.val)</code>&nbsp;always holds.</p>\n\n<p>Given such a binary tree, you need to output the <b>second minimum</b> value in the set made of all the nodes&#39; value in the whole tree.</p>\n\n<p>If no such second minimum value exists, output -1 instead.</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg\" style=\"width: 431px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,5,null,null,5,7]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The smallest value is 2, the second smallest value is 5.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg\" style=\"width: 321px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,2,2]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The smallest value is 2, but there isn&#39;t any second smallest value.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 25]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>root.val == min(root.left.val, root.right.val)</code>&nbsp;for each internal node of the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Second Minimum Node In a Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1: Brute Force [Accepted]\n\n**Intuition and Algorithm**\n\nTraverse the tree with a depth-first search, and record every unique value in the tree using a Set structure `uniques`.\n\nThen, we'll look through the recorded values for the second minimum.  The first minimum must be $$\\text{root.val}$$.\n\n<iframe src=\"https://leetcode.com/playground/rVYM4qCQ/shared\" frameBorder=\"0\" name=\"rVYM4qCQ\" width=\"100%\" height=\"394\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the total number of nodes in the given tree.  We visit each node exactly once, and scan through the $$O(N)$$ values in `unique` once.\n\n* Space Complexity: $$O(N)$$, the information stored in `uniques`.\n\n---\n#### Approach #2: Ad-Hoc [Accepted]\n\n**Intuition and Algorithm**\n\nLet $$\\text{min1 = root.val}$$.  When traversing the tree at some node, $$\\text{node}$$, if $$\\text{node.val > min1}$$, we know all values in the subtree at $$\\text{node}$$ are at least $$\\text{node.val}$$, so there cannot be a better candidate for the second minimum in this subtree.  Thus, we do not need to search this subtree.\n\nAlso, as we only care about the second minimum $$\\text{ans}$$, we do not need to record any values that are larger than our current candidate for the second minimum, so unlike Approach #1 we can skip maintaining a Set of values(`uniques`) entirely.\n\n\n<iframe src=\"https://leetcode.com/playground/btTLPkjK/shared\" frameBorder=\"0\" name=\"btTLPkjK\" width=\"100%\" height=\"394\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N)$$, where $$N$$ is the total number of nodes in the given tree.  We visit each node at most once.\n\n* Space Complexity: $$O(N)$$.  The information stored in $$\\text{ans}$$ and $$\\text{min1}$$ is $$O(1)$$, but our depth-first search may store up to $$O(h) = O(N)$$ information in the call stack, where $$h$$ is the height of the tree.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "second-minimum-node-in-a-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Tree questions are very commonly asked at LinkedIn, however Graph questions are not commonly encountered at LinkedIn. However, we recommend you to at least have a basic understanding of the Graph data structure, as graphs are powered under LinkedIn's social network."
    },
    {
        "id": "337",
        "title": "Recursion and Backtracking",
        "slug": "recursion-and-backtracking",
        "items": [
            {
                "id": "2910",
                "title": "Combination Sum",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "39",
                    "questionFrontendId": "39",
                    "sessionId": "968792",
                    "questionTitle": "Combination Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/combination-sum/submit/",
                    "interpretUrl": "/problems/combination-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def combinationSum(self, candidates, target):\\n        \\\"\\\"\\\"\\n        :type candidates: List[int]\\n        :type target: int\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** combinationSum(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} candidates\\n * @param {number} target\\n * @return {number[][]}\\n */\\nvar combinationSum = function(candidates, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} candidates\\n# @param {Integer} target\\n# @return {Integer[][]}\\ndef combination_sum(candidates, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func combinationSum(candidates []int, target int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn combination_sum(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $candidates\\n     * @param Integer $target\\n     * @return Integer[][]\\n     */\\n    function combinationSum($candidates, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function combinationSum(candidates: number[], target: number): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (combination-sum candidates target)\\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec combination_sum(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\\ncombination_sum(Candidates, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec combination_sum(candidates :: [integer], target :: integer) :: [[integer]]\\n  def combination_sum(candidates, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,3,6,7]\n7",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"combinationSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"candidates\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of <strong>distinct</strong> integers <code>candidates</code> and a target integer <code>target</code>, return <em>a list of all <strong>unique combinations</strong> of </em><code>candidates</code><em> where the chosen numbers sum to </em><code>target</code><em>.</em> You may return the combinations in <strong>any order</strong>.</p>\n\n<p>The <strong>same</strong> number may be chosen from <code>candidates</code> an <strong>unlimited number of times</strong>. Two combinations are unique if the frequency of at least one of the chosen numbers is different.</p>\n\n<p>It is <strong>guaranteed</strong> that the number of unique combinations that sum up to <code>target</code> is less than <code>150</code> combinations for the given input.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,6,7], target = 7\n<strong>Output:</strong> [[2,2,3],[7]]\n<strong>Explanation:</strong>\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2,3,5], target = 8\n<strong>Output:</strong> [[2,2,2,2],[2,3,3],[3,5]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [2], target = 1\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [1], target = 1\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> candidates = [1], target = 2\n<strong>Output:</strong> [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= candidates.length &lt;= 30</code></li>\n\t<li><code>1 &lt;= candidates[i] &lt;= 200</code></li>\n\t<li>All elements of <code>candidates</code> are <strong>distinct</strong>.</li>\n\t<li><code>1 &lt;= target &lt;= 500</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Combination Sum",
                        "content": "[TOC]\n\n## Solution\n\n\n---\n#### Overview\n\nThis is one of the problems in the series of combination sum.\nThey all can be solved with the same algorithm, _i.e._ **backtracking**.\n\nBefore tackling this problem, we would recommend one to start with another almost identical problem called [Combination Sum III](https://leetcode.com/problems/combination-sum-iii/), which is arguably easier and one can tweak the solution a bit to solve this problem.\n\nFor the sake of this article, we will present the backtracking algorithm.\nFurthermore, we will list some other problems on LeetCode that one can solve with the same algorithm presented here.\n\n\n---\n#### Approach 1: Backtracking\n\n**Intuition**\n\n>As a reminder, [backtracking](https://en.wikipedia.org/wiki/Backtracking) is a general algorithm for finding all (or some) solutions to some computational problems. The idea is that it **_incrementally_** builds candidates to the solutions, and abandons a candidate (\"backtrack\") as soon as it determines that this candidate cannot lead to a final solution.\n\nSpecifically, to our problem, we could _incrementally_ build the combination, and once we find the current combination is not valid, we _backtrack_ and try another option.\n\nTo demonstrate the idea, we showcase how it works with a concrete example in the following graph:\n\n![exploration tree](../Figures/39/39_exploration_tree.png)\n\nFor the given list of candidates `[3, 4, 5]` and a target sum `8`, we start off from empty combination `[]` as indicated as the root node in the above graph.\n\n- Each node represents an action we take at a step, and within the node we also indicate the combination we build sofar.\n\n- From top to down, at each level we descend, we add one more element into the current combination.\n\n- The nodes marked in blue are the ones that could sum up to the target value, _i.e._ they are the desired combination solutions.\n\n- The nodes marked in red are the ones that _exceed_ the target value. Since all the candidates are positive value, there is no way we could bring the sum down to the target value, if we explore further.\n\n- At any instant, we can **only** be at one of the nodes.\nWhen we _backtrack_, we are moving from a node to its parent node.\n\n>An important detail on choosing the next number for the combination is that we select the candidates **in order**, where the total candidates are treated as a list.\nOnce a candidate is added into the current combination, we will not __look back__ to all the previous candidates in the next explorations.\n\n![zoom in](../Figures/39/39_zoom_in.png)\n\nTo demonstrate the idea, let us zoom in a node (as we shown in the above graph) to see how we can choose the next numbers.\n\n- When we are at the node of `[4]`, the precedent candidates are `[3]`, and the candidates followed are `[4, 5]`.\n\n- We don't add the precedent numbers into the current node, since they would have been explored in the nodes in the left part of the subtree, _i.e._ the node of `[3]`.\n\n- Even though we have already the element `4` in the current combination, we are giving the element _another chance_ in the next exploration, since the combination can contain **duplicate** numbers.\n\n- As a result, we would branch out in two directions, by adding the element `4` and `5` respectively into the current combination.\n\n**Algorithm**\n\nAs one can see, the above backtracking algorithm is unfolded as a _DFS_ (Depth-First Search) tree traversal, which is often implemented with recursion.\n\nHere we define a recursive function of `backtrack(remain, comb, start)` (in Python), which populates the combinations, starting from the current combination (`comb`), the remaining sum to fulfill (`remain`) and the current cursor (`start`) to the list of candidates.\nNote that, the signature of the recursive function is slightly different in Java. But the idea remains the same.\n\n- For the first base case of the recursive function, if the `remain==0`, _i.e._ we fulfill the desired target sum, therefore we can add the current combination to the final list.\n\n- As another base case, if `remain < 0`, _i.e._ we exceed the target value, we will cease the exploration here.\n\n- Other than the above two base cases, we would then continue to explore the sublist of candidates as `[start ... n]`.\nFor each of the candidate, we invoke the recursive function itself with updated parameters.\n\n    - Specifically, we add the current candidate into the combination.\n\n    - With the added candidate, we now have less sum to fulfill, _i.e._ `remain - candidate`.\n\n    - For the next exploration, still we start from the current cursor `start`.\n\n    - At the end of each exploration, we __*backtrack*__ by popping out the candidate out of the combination.\n\n\n<iframe src=\"https://leetcode.com/playground/nStQDKze/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"nStQDKze\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the number of candidates, $$T$$ be the target value, and $$M$$ be the minimal value among the candidates.\n\n- Time Complexity: $$\\mathcal{O}(N^{\\frac{T}{M}+1})$$\n\n    - As we illustrated before, the execution of the backtracking is unfolded as a DFS traversal in a n-ary tree.\n    The total number of steps during the backtracking would be the number of nodes in the tree.\n\n    - At each node, it takes a constant time to process, except the leaf nodes which could take a linear time to make a copy of combination. So we can say that the time complexity is linear to the number of nodes of the execution tree.\n\n    - Here we provide a _loose_ upper bound on the number of nodes.\n\n        - First of all, the fan-out of each node would be bounded to $$N$$, _i.e._ the total number of candidates.\n\n        - The maximal depth of the tree, would be $$\\frac{T}{M}$$, where we keep on adding the smallest element to the combination.\n\n        - As we know, the maximal number of nodes in N-ary tree of $$\\frac{T}{M}$$ height would be $$N^{\\frac{T}{M}+1}$$.\n\n    - **Note that**, the actual number of nodes in the execution tree would be much smaller than the upper bound, since the fan-out of the nodes are decreasing level by level.\n\n- Space Complexity: $$\\mathcal{O}(\\frac{T}{M})$$\n\n    - We implement the algorithm in recursion, which consumes some additional memory in the function call stack.\n\n    - The number of recursive calls can pile up to $$\\frac{T}{M}$$, where we keep on adding the smallest element to the combination.\n    As a result, the space overhead of the recursion is $$\\mathcal{O}(\\frac{T}{M})$$.\n\n    - In addition, we keep a combination of numbers during the execution, which requires at most $$\\mathcal{O}(\\frac{T}{M})$$ space as well.\n\n    - To sum up, the total space complexity of the algorithm would be $$\\mathcal{O}(\\frac{T}{M})$$.\n\n    - Note that, we did not take into the account the space used to hold the final results for the space complexity.\n\n\n---\n#### Similar Problems\n\nOnce one figures out how it works with the backtracking algorithm for this problem, one can go ahead and apply this _\"hammer\"_ to solve a series of similar problems.\n\nFor instance, if one goes back to the problem of [Combination Sum III](https://leetcode.com/problems/combination-sum-iii/), if suffices to tweak a bit on the invocation of the recursive function to solve the problem, in addition to some other minor adjustments on the base cases.\n\nMore specifically, in this problem, we give the current candidate another chance in the further explorations, while for the problem of [Combination Sum III](https://leetcode.com/problems/combination-sum-iii/) we simply **move on** to the candidates followed.\n\nHere are a series of problems that one can solve, with some tweaks of the backtracking algorithm presented in this article,\nthanks to the great list compiled by [issac3](https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)) in the discussion forum.\n\n- [Subsets](https://leetcode.com/problems/subsets)\n- [Subsets II](https://leetcode.com/problems/subsets-ii)\n- [Permutations](https://leetcode.com/problems/permutations/)\n- [Permutations II](https://leetcode.com/problems/permutations-ii/)\n- [Combinations](https://leetcode.com/problems/combinations/)\n- [Combination Sum II](https://leetcode.com/problems/combination-sum-ii/)\n- [Combination Sum III](https://leetcode.com/problems/combination-sum-iii/)\n- [Palindrome Partition](https://leetcode.com/problems/palindrome-partitioning/)\n\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "combination-sum",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.852,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1962",
                "title": "Permutations",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "46",
                    "questionFrontendId": "46",
                    "sessionId": "968792",
                    "questionTitle": "Permutations",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/permutations/submit/",
                    "interpretUrl": "/problems/permutations/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> permute(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> permute(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def permute(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> Permute(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar permute = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef permute(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func permute(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permute(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def permute(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun permute(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function permute($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function permute(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (permute nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec permute(Nums :: [integer()]) -> [[integer()]].\\npermute(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec permute(nums :: [integer]) :: [[integer]]\\n  def permute(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"permute\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": \"size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Permutations",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Backtracking\n\n[Backtracking](https://en.wikipedia.org/wiki/Backtracking) \nis an algorithm for finding all\nsolutions by exploring all potential candidates.\nIf the solution candidate turns to be _not_ a solution \n(or at least not the _last_ one), \nbacktracking algorithm discards it by making some changes \non the previous step, *i.e.* _backtracks_ and then try again.\n\nHere is a backtrack function \nwhich takes the index of the first integer to consider \nas an argument `backtrack(first)`.\n\n* If the first integer to consider has index `n` that means \nthat the current permutation is done.\n* Iterate over the integers from index `first` to index `n - 1`.\n    * Place `i`-th integer first in the permutation, \n    i.e. `swap(nums[first], nums[i])`.\n    * Proceed to create all permutations which starts from \n    `i`-th integer : `backtrack(first + 1)`.\n    * Now backtrack, i.e. `swap(nums[first], nums[i])` back.\n        \n!?!../Documents/46_LIS.json:1000,548!?!\n\n<iframe src=\"https://leetcode.com/playground/cCeKUsLu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cCeKUsLu\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\sum_{k = 1}^{N}{P(N, k)})$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$\nis so-called [_k-permutations_of_n_, or _partial permutation_](https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n). \n\nHere $$first + 1 = k$$ for the expression simplicity. \nThe formula is easy to understand : for each $$k$$ (each $$first$$) \none performs $$N(N - 1) ... (N - k + 1)$$ operations, \nand $$k$$ is going through the range of values from $$1$$ to $$N$$ (and $$first$$ from $$0$$ to $$N - 1$$). \n\nLet's do a rough estimation of the result : \n$$N! \\le \\sum_{k = 1}^{N}{\\frac{N!}{(N - k)!}} = \\sum_{k = 1}^{N}{P(N, k)} \\le N \\times N!$$,\ni.e. the algorithm performs better than $$\\mathcal{O}(N \\times N!)$$ and \na bit slower than $$\\mathcal{O}(N!)$$.\n \n* Space complexity : $$\\mathcal{O}(N!)$$ since one has to keep\n`N!` solutions.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "permutations",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.706,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1963",
                "title": "Permutations II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "47",
                    "questionFrontendId": "47",
                    "sessionId": "968792",
                    "questionTitle": "Permutations II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/permutations-ii/submit/",
                    "interpretUrl": "/problems/permutations-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> permuteUnique(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def permuteUnique(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> PermuteUnique(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar permuteUnique = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef permute_unique(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permuteUnique(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function permuteUnique($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function permuteUnique(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (permute-unique nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec permute_unique(Nums :: [integer()]) -> [[integer()]].\\npermute_unique(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec permute_unique(nums :: [integer]) :: [[integer]]\\n  def permute_unique(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,1,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"permuteUnique\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": \"size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Permutations II",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Overview\r\n\r\nAs the name of the problem suggests, this problem is an extension of the [Permutation](https://leetcode.com/problems/permutations/) problem.\r\nThe problem is different from the previous permutation problem on the condition that the input array can contain **_duplicates_**.\r\n\r\nThe key to solve the problem is still the **_backtracking_** algorithm.\r\nHowever, we need some adaptation to ensure that the _enumerated_ solutions generated from our backtracking exploration do not have any duplicates.\r\n\r\n>As a reminder, **[backtracking](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/)** is a general algorithm for finding all (or some) solutions to some problems with constraints.\r\nIt incrementally builds candidates to the solutions, and abandons a candidate as soon as it determines that the candidate cannot possibly lead to a solution.\r\n\r\nIn this article, we will present a yet another backtracking solution to solve the problem.\r\n\r\n---\r\n#### Approach 1: Backtracking with Groups of Numbers\r\n\r\n**Intuition**\r\n\r\nFirst of all, let us review the general idea of permutation with an example.\r\n\r\nGiven the input array `[1, 1, 2]`, to generate a permutation of the array, we could follow the _Depth-First Search_ (DFS) approach, or more precisely the backtracking technique as one will see later.\r\n\r\n>The idea is that we pick the numbers one by one. For a permutation of length $$N$$, we would then need $$N$$ stages to generate a valid permutation.\r\nAt each stage, we need to pick one number into the permutation, out of the remaining available numbers.\r\nLater at the same stage, we will try out all available choices.\r\nBy trying out, we progressively build up candidates to the solution, and revert each choice with another alternative until there is no more choice.\r\n\r\nLet us walk through the example with paper and pencil, as follows:\r\n\r\n- Given the input of `[1, 1, 2]`, at the first stage, we have 2 choices to pick a number as the first number in the final permutation, _i.e._ `1` and `2`.\r\nSuppose that we pick the number `1`, now the remaining numbers would become `[1, 2]`.\r\n**Note:** The reason that we have only 2 choices instead of 3, is that there is a duplicate in the given input.\r\nPicking any of the duplicate numbers as the first number of the permutation would lead us to the same permutation at the end.\r\nShould the numbers in the array be all unique, we would then have the same number of choices as the length of the array. \r\n\r\n- At the second stage, we now then have again 2 choices, _i.e._ `[1, 2]`. \r\nLet us pick again the number `1`, which leaves us the only remaining number `2`.\r\n\r\n- Now at the third stage, we have only one candidate number left, _i.e._ `[2]`. We then pick the last remaining number, which leads to a final permutation sequence of `[1, 1, 2]`.\r\n\r\n- Moreover, we need to **_revisit_** each of the above stages, and make a different choice in order to try out all possibilities.\r\nThe reversion of the choices is what we call __*backtracking*__.\r\n\r\nWe illustrate all potential exploration in the following graph where each node represents a choice at a specific stage:\r\n\r\n![permutation tree](../Figures/47/47_permutations.png)\r\n\r\n>A key insight to avoid generating any **_redundant_** permutation is that at each step rather than viewing each number as a candidate, we consider each **_unique_** number as the true candidate.\r\nFor instance, at the very beginning, given in the input of `[1, 1, 2]`, we have only two true candidates instead of three.\r\n\r\n\r\n**Algorithm**\r\n\r\nGiven the above insight, in order to find out all the unique numbers at each stage, we can build a **_hash table_** (denoted as `counter`), with each unique number as the key and its occurrence as the corresponding value.\r\n\r\nTo implement the algorithm, first we define a function called `backtrack(comb, counter)` which generates all permutations, starting from the current combination (`comb`) and the remaining numbers (`counter`).\r\n\r\nOnce the function is implemented, it suffices to invoke the function with the initial empty combination and the hash table we built out of the input array, to solve the problem.\r\n\r\nHere are some sample implementations.\r\n\r\n<iframe src=\"https://leetcode.com/playground/KghC3tCD/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KghC3tCD\"></iframe>\r\n\r\n**Note:** for a backtracking algorithm, usually there are some explorations that would lead to a *dead end*, and we have to abandon those explorations in the middle.\r\n\r\nHowever, due to the specificity of this problem and our exploration strategy, each exploration will result in a valid permutation, _i.e._ none of the efforts is in vain.\r\nThis insight would prove to be useful in the following complexity analysis.\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the length of the input array.\r\nHence, the number of permutations would be at maximum $$N!$$, _i.e._ $$N \\cdot (N-1) \\cdot (N-2) ... 1$$, when each number in the array is unique.\r\n\r\n- Time Complexity: $$\\mathcal{O}\\big(\\sum_{k = 1}^{N}{P(N, k)}\\big)$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$\r\nis so-called [_k-permutations_of_N_ or _partial permutation_](https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n). \r\n\r\n    - As one can see in the exploration graph we have shown earlier, the execution of the backtracking algorithm will unfold itself as a tree, where each node is an invocation of the recursive function `backtrack(comb, counter)`.\r\n    The total number of steps to complete the exploration is _exactly_ the number of nodes in the tree.\r\n    Therefore, the time complexity of the algorithm is linked directly with the size of the tree.\r\n\r\n    - It now boils down to estimating the number of nodes in the tree.\r\n    As we know now, each level of the tree corresponds to a specific _stage_ of the exploration.\r\n    At each stage, the number of candidates to explore is **bounded**.\r\n    For instance, at the first stage, _at most_ we would have $$N$$ candidates to explore, _i.e._ the number of nodes at this level would be $$N$$.\r\n    Moving on to the next stage, for each of the nodes in the first stage, we would have $$N-1$$ child nodes. Therefore, the number of nodes at this stage would be $$N \\cdot (N-1)$$.\r\n    So on and so forwards.\r\n\r\n    ![number of nodes](../Figures/47/47_number_of_nodes.png)\r\n\r\n    - By summing up all the nodes across the stages, we would then obtain the total number of nodes as $$\\sum_{k = 1}^{N}{P(N, k)}$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$.\r\n    As a result, the exact time complexity of the algorithm is $$\\mathcal{O}\\big(\\sum_{k = 1}^{N}{P(N, k)}\\big)$$.\r\n\r\n    - The above complexity might appear a bit too abstract to comprehend.\r\n    Here we could provide another __*loose upper bound*__ on the complexity.\r\n\r\n    - It takes $$N$$ steps to generate a single permutation. Since there are in total $$N!$$ possible permutations, at most it would take us $$N \\cdot N!$$ steps to generate all permutations, simply assuming that there is no overlapping effort (which is not true).\r\n\r\n\r\n- Space Complexity: $$\\mathcal{O}(N)$$\r\n\r\n    - First of all, we build a hash table out of the input numbers. In the worst case where each number is unique, we would need $$\\mathcal{O}(N)$$ space for the table.\r\n\r\n    - Since we applied recursion in the algorithm which consumes some extra space in the function call stack, we would need another $$\\mathcal{O}(N)$$ space for the recursion.\r\n\r\n    - During the exploration, we keep a candidate of permutation along the way, which takes yet another $$\\mathcal{O}(N)$$.\r\n\r\n    - To sum up, the total space complexity would be $$\\mathcal{O}(N) + \\mathcal{O}(N) + \\mathcal{O}(N) = \\mathcal{O}(N)$$.\r\n\r\n    - **Note**, we did not take into account the space needed to hold the results. Otherwise, the space complexity would become $$\\mathcal{O}(N \\cdot N!)$$.\r\n\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "permutations-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.146,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1964",
                "title": "Factor Combinations",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "254",
                    "questionFrontendId": "254",
                    "sessionId": "968792",
                    "questionTitle": "Factor Combinations",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/factor-combinations/submit/",
                    "interpretUrl": "/problems/factor-combinations/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> getFactors(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> getFactors(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def getFactors(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def getFactors(self, n: int) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** getFactors(int n, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> GetFactors(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} n\\n * @return {number[][]}\\n */\\nvar getFactors = function(n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\\n# @return {Integer[][]}\\ndef get_factors(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func getFactors(_ n: Int) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getFactors(n int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def getFactors(n: Int): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun getFactors(n: Int): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn get_factors(n: i32) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @return Integer[][]\\n     */\\n    function getFactors($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function getFactors(n: number): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (get-factors n)\\n  (-> exact-integer? (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec get_factors(N :: integer()) -> [[integer()]].\\nget_factors(N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec get_factors(n :: integer) :: [[integer]]\\n  def get_factors(n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "1",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"getFactors\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Numbers can be regarded as the product of their factors.</p>\n\n<ul>\n\t<li>For example, <code>8 = 2 x 2 x 2 = 2 x 4</code>.</li>\n</ul>\n\n<p>Given an integer <code>n</code>, return <em>all possible combinations of its factors</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p><strong>Note</strong> that the factors should be in the range <code>[2, n - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> []\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 12\n<strong>Output:</strong> [[2,6],[3,4],[2,2,3]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> n = 37\n<strong>Output:</strong> []\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> n = 32\n<strong>Output:</strong> [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1991",
                "title": "Nested List Weight Sum",
                "type": 1,
                "info": "Editor's choice: Frequently asked in LinkedIn phone interview.",
                "paidOnly": true,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "339",
                    "questionFrontendId": "339",
                    "sessionId": "968792",
                    "questionTitle": "Nested List Weight Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/nested-list-weight-sum/submit/",
                    "interpretUrl": "/problems/nested-list-weight-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *   public:\\n *     // Constructor initializes an empty nested list.\\n *     NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     NestedInteger(int value);\\n *\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool isInteger() const;\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     int getInteger() const;\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     void setInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     void add(const NestedInteger &ni);\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     const vector<NestedInteger> &getList() const;\\n * };\\n */\\nclass Solution {\\npublic:\\n    int depthSum(vector<NestedInteger>& nestedList) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * public interface NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     public NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     public NestedInteger(int value);\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public boolean isInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     public Integer getInteger();\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public void setInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public void add(NestedInteger ni);\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return empty list if this NestedInteger holds a single integer\\n *     public List<NestedInteger> getList();\\n * }\\n */\\nclass Solution {\\n    public int depthSum(List<NestedInteger> nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger(object):\\n#    def __init__(self, value=None):\\n#        \\\"\\\"\\\"\\n#        If value is not specified, initializes an empty list.\\n#        Otherwise initializes a single integer equal to value.\\n#        \\\"\\\"\\\"\\n#\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def add(self, elem):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def setInteger(self, value):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def depthSum(self, nestedList):\\n        \\\"\\\"\\\"\\n        :type nestedList: List[NestedInteger]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger:\\n#    def __init__(self, value=None):\\n#        \\\"\\\"\\\"\\n#        If value is not specified, initializes an empty list.\\n#        Otherwise initializes a single integer equal to value.\\n#        \\\"\\\"\\\"\\n#\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def add(self, elem):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def setInteger(self, value):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass Solution:\\n    def depthSum(self, nestedList: List[NestedInteger]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * *********************************************************************\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * *********************************************************************\\n *\\n * // Initializes an empty nested list and return a reference to the nested integer.\\n * struct NestedInteger *NestedIntegerInit();\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\n *\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\n * };\\n */\\n\\n\\nint depthSum(struct NestedInteger** nestedList, int nestedListSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * interface NestedInteger {\\n *\\n *     // Constructor initializes an empty nested list.\\n *     public NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     public NestedInteger(int value);\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool IsInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     int GetInteger();\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public void SetInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public void Add(NestedInteger ni);\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     IList<NestedInteger> GetList();\\n * }\\n */\\npublic class Solution {\\n    public int DepthSum(IList<NestedInteger> nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * function NestedInteger() {\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     @return {boolean}\\n *     this.isInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     @return {integer}\\n *     this.getInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     @return {void}\\n *     this.setInteger = function(value) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     @return {void}\\n *     this.add = function(elem) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     Return null if this NestedInteger holds a single integer\\n *     @return {NestedInteger[]}\\n *     this.getList = function() {\\n *         ...\\n *     };\\n * };\\n */\\n/**\\n * @param {NestedInteger[]} nestedList\\n * @return {number}\\n */\\nvar depthSum = function(nestedList) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n#\\n#class NestedInteger\\n#    def is_integer()\\n#        \\\"\\\"\\\"\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\n#        @return {Boolean}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_integer()\\n#        \\\"\\\"\\\"\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return nil if this NestedInteger holds a nested list\\n#        @return {Integer}\\n#        \\\"\\\"\\\"\\n#\\n#    def set_integer(value)\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        @return {Void}\\n#        \\\"\\\"\\\"\\n#\\n#    def add(elem)\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        @return {Void}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_list()\\n#        \\\"\\\"\\\"\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return nil if this NestedInteger holds a single integer\\n#        @return {NestedInteger[]}\\n#        \\\"\\\"\\\"\\n\\n# @param {NestedInteger[]} nested_list\\n# @return {Integer}\\ndef depth_sum(nested_list)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public func isInteger() -> Bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     public func getInteger() -> Int\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public func setInteger(value: Int)\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public func add(elem: NestedInteger)\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     public func getList() -> [NestedInteger]\\n * }\\n */\\nclass Solution {\\n    func depthSum(_ nestedList: [NestedInteger]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * type NestedInteger struct {\\n * }\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * func (n NestedInteger) IsInteger() bool {}\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * // So before calling this method, you should have a check\\n * func (n NestedInteger) GetInteger() int {}\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * func (n *NestedInteger) SetInteger(value int) {}\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n * func (n *NestedInteger) Add(elem NestedInteger) {}\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The list length is zero if this NestedInteger holds a single integer\\n * // You can access NestedInteger's List element directly if you want to modify it\\n * func (n NestedInteger) GetList() []*NestedInteger {}\\n */\\nfunc depthSum(nestedList []*NestedInteger) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\nobject Solution {\\n    def depthSum(nestedList: List[NestedInteger]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     constructor()\\n *\\n *     // Constructor initializes a single integer.\\n *     constructor(value: Int)\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     fun isInteger(): Boolean\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     fun getInteger(): Int?\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     fun setInteger(value: Int): Unit\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     fun add(ni: NestedInteger): Unit\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     fun getList(): List<NestedInteger>?\\n * }\\n */\\nclass Solution {\\n    fun depthSum(nestedList: List<NestedInteger>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// #[derive(Debug, PartialEq, Eq)]\\n// pub enum NestedInteger {\\n//   Int(i32),\\n//   List(Vec<NestedInteger>)\\n// }\\nimpl Solution {\\n    pub fn depth_sum(nested_list: Vec<NestedInteger>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n\\n *     // if value is not specified, initializes an empty list.\\n *     // Otherwise initializes a single integer equal to value.\\n *     function __construct($value = null)\\n\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     function isInteger() : bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     function getInteger()\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     function setInteger($i) : void\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     function add($ni) : void\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     function getList() : array\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param NestedInteger[] $nestedList\\n     * @return Integer\\n     */\\n    function depthSum($nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     If value is provided, then it holds a single integer\\n *     Otherwise it holds an empty nested list\\n *     constructor(value?: number) {\\n *         ...\\n *     };\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     isInteger(): boolean {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     getInteger(): number | null {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     setInteger(value: number) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     add(elem: NestedInteger) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds,\\n *     or an empty list if this NestedInteger holds a single integer\\n *     getList(): NestedInteger[] {\\n *         ...\\n *     };\\n * };\\n */\\n\\nfunction depthSum(nestedList: NestedInteger[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \";; This is the interface that allows for creating nested lists.\\n;; You should not implement it, or speculate about its implementation\\n\\n#|\\n\\n(define nested-integer%\\n  (class object%\\n    ...\\n\\n    ; Return true if this nested-integer% holds a single integer, rather than a nested list.\\n    ; -> boolean?\\n    (define/public (is-integer)\\n      ...)\\n\\n    ; Return the single integer that this nested-integer% holds, if it holds a single integer,\\n    ; or #f if this nested-integer% holds a nested list.\\n    ; -> integer?\\n    (define/public (get-integer)\\n      ...)\\n\\n    ; Set this nested-integer% to hold a single integer equal to value.\\n    ; -> integer? void?\\n    (define/public (set-integer i)\\n      ...)\\n\\n    ; Set this nested-integer% to hold a nested list and adds a nested integer elem to it.\\n    ; -> (is-a?/c nested-integer%) void?\\n    (define/public (add ni)\\n      ...)\\n\\n    ; Return the nested list that this nested-integer% holds,\\n    ; or an empty list if this nested-integer% holds a single integer.\\n    ; -> gvector?\\n    (define/public (get-list)\\n      ...)))\\n\\n|#\\n\\n(define/contract (depth-sum nestedList)\\n  (-> (listof (is-a?/c nested-integer%)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% % This is the interface that allows for creating nested lists.\\n%% % You should not implement it, or speculate about its implementation\\n%%\\n%% % Create an empty nested list.\\n%% nested_integer:new() -> nested_integer().\\n%%\\n%% % Create a single integer.\\n%% nested_integer:new(Val :: integer()) -> nested_integer().\\n%%\\n%% % Return true if argument NestedInteger holds a single integer, rather than a nested list.\\n%% nested_integer:is_integer(NestedInteger :: nested_integer()) -> boolean().\\n%%\\n%% % Return the single integer that NestedInteger holds, if it holds a single integer.\\n%% % The result is undefined if it holds a nested list.\\n%% nested_integer:get_integer(NestedInteger :: nested_integer()) -> integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a single integer Val.\\n%% nested_integer:set_integer(NestedInteger :: nested_integer(), Val :: integer()) -> nested_integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a nested list and adds a nested_integer Elem to it.\\n%% nested_integer:add(NestedInteger :: nested_integer(), Elem :: nested_integer()) -> nested_integer().\\n%%\\n%% % Return the nested list that NestedInteger holds, if it holds a nested list.\\n%% % The result is undefined if it holds a single integer.\\n%% nested_integer:get_list(NestedInteger :: nested_integer()) -> array:array(nested_integer()).\\n\\n-spec depth_sum(NestedList :: [nested_integer:nested_integer()]) -> integer().\\ndepth_sum(NestedList) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# # This is the interface that allows for creating nested lists.\\n# # You should not implement it, or speculate about its implementation\\n#\\n# # Create an empty nested list.\\n# :nested_integer.new() :: :nested_integer.nested_integer\\n#\\n# # Create a single integer.\\n# :nested_integer.new(val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return true if argument nested_integer holds a single integer, rather than a nested list.\\n# :nested_integer.is_integer(nested_integer :: :nested_integer.nested_integer) :: boolean\\n#\\n# # Return the single integer that nested_integer holds, if it holds a single integer\\n# # The result is undefined if it holds a nested list.\\n# :nested_integer.get_integer(nested_integer :: :nested_integer.nested_integer) :: integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a single integer val.\\n# :nested_integer.set_integer(nested_integer :: :nested_integer.nested_integer, val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a nested list and adds a nested_integer elem to it.\\n# :nested_integer.add(nested_integer :: :nested_integer.nested_integer, elem :: :nested_integer.nested_integer) :: :nested_integer.nested_integer\\n#\\n# # Return the nested list that nested_integer holds, if it holds a nested list.\\n# # The result is undefined if it holds a single integer.\\n# :nested_integer.get_list(nested_integer :: :nested_integer.nested_integer) :: :array.array(:nested_integer.nested_integer)\\n\\ndefmodule Solution do\\n  @spec depth_sum(nested_list :: [:nested_integer.nested_integer]) :: integer\\n  def depth_sum(nested_list) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,1],2,[1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"depthSum\",\n  \"params\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"list<NestedInteger>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n\n<p>The <strong>depth</strong> of an integer is the number of lists that it is inside of. For example, the nested list <code>[1,[2,2],[[3],2],1]</code> has each integer&#39;s value set to its <strong>depth</strong>.</p>\n\n<p>Return <em>the sum of each integer in </em><code>nestedList</code><em> multiplied by its <strong>depth</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/nestedlistweightsumex1.png\" style=\"width: 405px; height: 99px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Four 1&#39;s at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/nestedlistweightsumex2.png\" style=\"width: 315px; height: 106px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> 27\n<strong>Explanation:</strong> One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [0]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 50</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-100, 100]</code>.</li>\n\t<li>The maximum <strong>depth</strong> of any integer is less than or equal to <code>50</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Nested List Weight Sum",
                        "content": "[TOC]\n\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/499452652\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Depth-first Search\n\nBecause the input is nested, it is natural to think about the problem in a recursive way. We go through the list of nested integers one by one, keeping track of the current depth $$d$$. If a nested integer is an integer, $$n$$, we calculate its sum as $$n\\times d$$. If the nested integer is a list, we calculate the sum of this list recursively using the same process but with depth equals $$d + 1$$.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/9r7bzCW8/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"9r7bzCW8\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of nested elements in the input list. For example, the list `````[ [[[[1]]]], 2 ]````` contains $$4$$ nested lists and $$2$$ nested integers ($$1$$ and $$2$$), so $$N = 6$$ for that particular case.\n\n* Time complexity : $$\\mathcal{O}(N)$$.\n\n    Recursive functions can be a bit tricky to analyze, particularly when their implementation includes a loop. A good strategy is to start by determining how many times the recursive function is called, and then how many times the loop will iterate *across all calls to the recursive function*.\n\n    The recursive function, `dfs(...)` is called exactly **once** for each *nested list*. As $$N$$ also includes nested integers, we know that the number of recursive calls has to be *less than $$N$$*.\n\n    On each nested list, it iterates over all of the nested elements **directly inside that list** (in other words, not nested further). As each nested element can only be directly inside **one** list, we know that there must only be one loop iteration *for each nested element*. This is a total of $$N$$ loop iterations.\n\n    So combined, we are performing at most $$2 \\cdot N$$ recursive calls and loop iterations. We drop the $$2$$ as it is a constant, leaving us with time complexity $$\\mathcal{O}(N)$$.\n\n* Space complexity : $$\\mathcal{O}(N)$$.\n\n    In terms of space, at most $$O(D)$$ recursive calls are placed on the stack, where $$D$$ is the maximum level of nesting in the input. For example, $$D=2$$ for the input `````[[1,1],2,[1,1]]`````, and $$D=3$$ for the input `````[1,[4,[6]]]`````.\n\n    In the worst case, $$D = N$$, (e.g. the list `[[[[[[]]]]]]`) so the worst-case space complexity is $$O(N)$$.\n\n<br />\n\n---\n\n#### Approach 2: Breadth-first Search\n\nWe can also solve the problem using a breadth-first search. The algorithm for this is closely based on the [standard breadth-first search template](https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/1372/). The algorithm fully processes each depth before moving to the next one.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/bHQ3awgv/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"bHQ3awgv\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$.\n\n    Similar to the DFS approach. Each nested element is put on the queue and removed from the queue exactly once.\n\n* Space complexity : $$\\mathcal{O}(N)$$.\n\n    The worst-case for space complexity in BFS occurs where most of the elements are in a single layer, for example, a flat list such as `[1, 2, 3, 4, 5]` as all of the elements must be put on the queue at the same time. Therefore, this approach also has a worst-case space complexity of $$\\mathcal{O}(N)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "nested-list-weight-sum",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.865,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1992",
                "title": "Nested List Weight Sum II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in LinkedIn phone interview.",
                "paidOnly": true,
                "chapterId": 337,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "364",
                    "questionFrontendId": "364",
                    "sessionId": "968792",
                    "questionTitle": "Nested List Weight Sum II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/nested-list-weight-sum-ii/submit/",
                    "interpretUrl": "/problems/nested-list-weight-sum-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *   public:\\n *     // Constructor initializes an empty nested list.\\n *     NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     NestedInteger(int value);\\n *\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool isInteger() const;\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     int getInteger() const;\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     void setInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     void add(const NestedInteger &ni);\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     const vector<NestedInteger> &getList() const;\\n * };\\n */\\nclass Solution {\\npublic:\\n    int depthSumInverse(vector<NestedInteger>& nestedList) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * public interface NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     public NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     public NestedInteger(int value);\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public boolean isInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     public Integer getInteger();\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public void setInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public void add(NestedInteger ni);\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return empty list if this NestedInteger holds a single integer\\n *     public List<NestedInteger> getList();\\n * }\\n */\\nclass Solution {\\n    public int depthSumInverse(List<NestedInteger> nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger(object):\\n#    def __init__(self, value=None):\\n#        \\\"\\\"\\\"\\n#        If value is not specified, initializes an empty list.\\n#        Otherwise initializes a single integer equal to value.\\n#        \\\"\\\"\\\"\\n#\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def add(self, elem):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def setInteger(self, value):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def depthSumInverse(self, nestedList):\\n        \\\"\\\"\\\"\\n        :type nestedList: List[NestedInteger]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger:\\n#    def __init__(self, value=None):\\n#        \\\"\\\"\\\"\\n#        If value is not specified, initializes an empty list.\\n#        Otherwise initializes a single integer equal to value.\\n#        \\\"\\\"\\\"\\n#\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def add(self, elem):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def setInteger(self, value):\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        :rtype void\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass Solution:\\n    def depthSumInverse(self, nestedList: List[NestedInteger]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * *********************************************************************\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * *********************************************************************\\n *\\n * // Initializes an empty nested list and return a reference to the nested integer.\\n * struct NestedInteger *NestedIntegerInit();\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * void NestedIntegerSetInteger(struct NestedInteger *ni, int value);\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n * void NestedIntegerAdd(struct NestedInteger *ni, struct NestedInteger *elem);\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\n *\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\n * };\\n */\\n\\n\\nint depthSumInverse(struct NestedInteger** nestedList, int nestedListSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * interface NestedInteger {\\n *\\n *     // Constructor initializes an empty nested list.\\n *     public NestedInteger();\\n *\\n *     // Constructor initializes a single integer.\\n *     public NestedInteger(int value);\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool IsInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     int GetInteger();\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public void SetInteger(int value);\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public void Add(NestedInteger ni);\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     IList<NestedInteger> GetList();\\n * }\\n */\\npublic class Solution {\\n    public int DepthSumInverse(IList<NestedInteger> nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * function NestedInteger() {\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     @return {boolean}\\n *     this.isInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     @return {integer}\\n *     this.getInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     @return {void}\\n *     this.setInteger = function(value) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     @return {void}\\n *     this.add = function(elem) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     Return null if this NestedInteger holds a single integer\\n *     @return {NestedInteger[]}\\n *     this.getList = function() {\\n *         ...\\n *     };\\n * };\\n */\\n/**\\n * @param {NestedInteger[]} nestedList\\n * @return {number}\\n */\\nvar depthSumInverse = function(nestedList) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n#\\n#class NestedInteger\\n#    def is_integer()\\n#        \\\"\\\"\\\"\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\n#        @return {Boolean}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_integer()\\n#        \\\"\\\"\\\"\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return nil if this NestedInteger holds a nested list\\n#        @return {Integer}\\n#        \\\"\\\"\\\"\\n#\\n#    def set_integer(value)\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a single integer equal to value.\\n#        @return {Void}\\n#        \\\"\\\"\\\"\\n#\\n#    def add(elem)\\n#        \\\"\\\"\\\"\\n#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n#        @return {Void}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_list()\\n#        \\\"\\\"\\\"\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return nil if this NestedInteger holds a single integer\\n#        @return {NestedInteger[]}\\n#        \\\"\\\"\\\"\\n\\n# @param {NestedInteger[]} nested_list\\n# @return {Integer}\\ndef depth_sum_inverse(nested_list)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public func isInteger() -> Bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     public func getInteger() -> Int\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public func setInteger(value: Int)\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public func add(elem: NestedInteger)\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     public func getList() -> [NestedInteger]\\n * }\\n */\\nclass Solution {\\n    func depthSumInverse(_ nestedList: [NestedInteger]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * type NestedInteger struct {\\n * }\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * func (n NestedInteger) IsInteger() bool {}\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * // So before calling this method, you should have a check\\n * func (n NestedInteger) GetInteger() int {}\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * func (n *NestedInteger) SetInteger(value int) {}\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n * func (n *NestedInteger) Add(elem NestedInteger) {}\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The list length is zero if this NestedInteger holds a single integer\\n * // You can access NestedInteger's List element directly if you want to modify it\\n * func (n NestedInteger) GetList() []*NestedInteger {}\\n */\\nfunc depthSumInverse(nestedList []*NestedInteger) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\nobject Solution {\\n    def depthSumInverse(nestedList: List[NestedInteger]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     constructor()\\n *\\n *     // Constructor initializes a single integer.\\n *     constructor(value: Int)\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     fun isInteger(): Boolean\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     fun getInteger(): Int?\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     fun setInteger(value: Int): Unit\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     fun add(ni: NestedInteger): Unit\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     fun getList(): List<NestedInteger>?\\n * }\\n */\\nclass Solution {\\n    fun depthSumInverse(nestedList: List<NestedInteger>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// #[derive(Debug, PartialEq, Eq)]\\n// pub enum NestedInteger {\\n//   Int(i32),\\n//   List(Vec<NestedInteger>)\\n// }\\nimpl Solution {\\n    pub fn depth_sum_inverse(nested_list: Vec<NestedInteger>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n\\n *     // if value is not specified, initializes an empty list.\\n *     // Otherwise initializes a single integer equal to value.\\n *     function __construct($value = null)\\n\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     function isInteger() : bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     function getInteger()\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     function setInteger($i) : void\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     function add($ni) : void\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     function getList() : array\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param NestedInteger[] $nestedList\\n     * @return Integer\\n     */\\n    function depthSumInverse($nestedList) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     If value is provided, then it holds a single integer\\n *     Otherwise it holds an empty nested list\\n *     constructor(value?: number) {\\n *         ...\\n *     };\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     isInteger(): boolean {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     getInteger(): number | null {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     setInteger(value: number) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     add(elem: NestedInteger) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds,\\n *     or an empty list if this NestedInteger holds a single integer\\n *     getList(): NestedInteger[] {\\n *         ...\\n *     };\\n * };\\n */\\n\\nfunction depthSumInverse(nestedList: NestedInteger[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \";; This is the interface that allows for creating nested lists.\\n;; You should not implement it, or speculate about its implementation\\n\\n#|\\n\\n(define nested-integer%\\n  (class object%\\n    ...\\n\\n    ; Return true if this nested-integer% holds a single integer, rather than a nested list.\\n    ; -> boolean?\\n    (define/public (is-integer)\\n      ...)\\n\\n    ; Return the single integer that this nested-integer% holds, if it holds a single integer,\\n    ; or #f if this nested-integer% holds a nested list.\\n    ; -> integer?\\n    (define/public (get-integer)\\n      ...)\\n\\n    ; Set this nested-integer% to hold a single integer equal to value.\\n    ; -> integer? void?\\n    (define/public (set-integer i)\\n      ...)\\n\\n    ; Set this nested-integer% to hold a nested list and adds a nested integer elem to it.\\n    ; -> (is-a?/c nested-integer%) void?\\n    (define/public (add ni)\\n      ...)\\n\\n    ; Return the nested list that this nested-integer% holds,\\n    ; or an empty list if this nested-integer% holds a single integer.\\n    ; -> gvector?\\n    (define/public (get-list)\\n      ...)))\\n\\n|#\\n\\n(define/contract (depth-sum-inverse nestedList)\\n  (-> (listof (is-a?/c nested-integer%)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% % This is the interface that allows for creating nested lists.\\n%% % You should not implement it, or speculate about its implementation\\n%%\\n%% % Create an empty nested list.\\n%% nested_integer:new() -> nested_integer().\\n%%\\n%% % Create a single integer.\\n%% nested_integer:new(Val :: integer()) -> nested_integer().\\n%%\\n%% % Return true if argument NestedInteger holds a single integer, rather than a nested list.\\n%% nested_integer:is_integer(NestedInteger :: nested_integer()) -> boolean().\\n%%\\n%% % Return the single integer that NestedInteger holds, if it holds a single integer.\\n%% % The result is undefined if it holds a nested list.\\n%% nested_integer:get_integer(NestedInteger :: nested_integer()) -> integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a single integer Val.\\n%% nested_integer:set_integer(NestedInteger :: nested_integer(), Val :: integer()) -> nested_integer().\\n%%\\n%% % Return a copy of argument NestedInteger with it set to hold a nested list and adds a nested_integer Elem to it.\\n%% nested_integer:add(NestedInteger :: nested_integer(), Elem :: nested_integer()) -> nested_integer().\\n%%\\n%% % Return the nested list that NestedInteger holds, if it holds a nested list.\\n%% % The result is undefined if it holds a single integer.\\n%% nested_integer:get_list(NestedInteger :: nested_integer()) -> array:array(nested_integer()).\\n\\n-spec depth_sum_inverse(NestedList :: [nested_integer:nested_integer()]) -> integer().\\ndepth_sum_inverse(NestedList) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# # This is the interface that allows for creating nested lists.\\n# # You should not implement it, or speculate about its implementation\\n#\\n# # Create an empty nested list.\\n# :nested_integer.new() :: :nested_integer.nested_integer\\n#\\n# # Create a single integer.\\n# :nested_integer.new(val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return true if argument nested_integer holds a single integer, rather than a nested list.\\n# :nested_integer.is_integer(nested_integer :: :nested_integer.nested_integer) :: boolean\\n#\\n# # Return the single integer that nested_integer holds, if it holds a single integer\\n# # The result is undefined if it holds a nested list.\\n# :nested_integer.get_integer(nested_integer :: :nested_integer.nested_integer) :: integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a single integer val.\\n# :nested_integer.set_integer(nested_integer :: :nested_integer.nested_integer, val :: integer) :: :nested_integer.nested_integer\\n#\\n# # Return a copy of argument nested_integer with it set to hold a nested list and adds a nested_integer elem to it.\\n# :nested_integer.add(nested_integer :: :nested_integer.nested_integer, elem :: :nested_integer.nested_integer) :: :nested_integer.nested_integer\\n#\\n# # Return the nested list that nested_integer holds, if it holds a nested list.\\n# # The result is undefined if it holds a single integer.\\n# :nested_integer.get_list(nested_integer :: :nested_integer.nested_integer) :: :array.array(:nested_integer.nested_integer)\\n\\ndefmodule Solution do\\n  @spec depth_sum_inverse(nested_list :: [:nested_integer.nested_integer]) :: integer\\n  def depth_sum_inverse(nested_list) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,1],2,[1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"depthSumInverse\",\n  \"params\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"list<NestedInteger>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists.</p>\n\n<p>The <strong>depth</strong> of an integer is the number of lists that it is inside of. For example, the nested list <code>[1,[2,2],[[3],2],1]</code> has each integer&#39;s value set to its <strong>depth</strong>. Let <code>maxDepth</code> be the <strong>maximum depth</strong> of any integer.</p>\n\n<p>The <strong>weight</strong> of an integer is <code>maxDepth - (the depth of the integer) + 1</code>.</p>\n\n<p>Return <em>the sum of each integer in </em><code>nestedList</code><em> multiplied by its <strong>weight</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex1.png\" style=\"width: 426px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> Four 1&#39;s with a weight of 1, one 2 with a weight of 2.\n1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex2.png\" style=\"width: 349px; height: 192px;\" />\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.\n1*3 + 4*2 + 6*1 = 17\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 50</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-100, 100]</code>.</li>\n\t<li>The maximum <strong>depth</strong> of any integer is less than or equal to <code>50</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Recursion and backtracking is an important topic. We highly recommend the question Factor Combinations for preparing a LinkedIn interview."
    },
    {
        "id": "336",
        "title": "Heap, Queue, Stack",
        "slug": "heap-queue-stack",
        "items": [
            {
                "id": "1958",
                "title": "Valid Parentheses",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 336,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "20",
                    "questionFrontendId": "20",
                    "sessionId": "968792",
                    "questionTitle": "Valid Parentheses",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-parentheses/submit/",
                    "interpretUrl": "/problems/valid-parentheses/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isValid(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isValid(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isValid(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsValid(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isValid = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef is_valid(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isValid(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValid(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isValid(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isValid(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_valid(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function isValid($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isValid(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-valid s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\\nis_valid(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_valid(s :: String.t) :: boolean\\n  def is_valid(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"()\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isValid\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()[]{}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;([)]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;{[]}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n<pre>\r\n{ { } [ ] [ [ [ ] ] ] } is VALID expression\r\n          [ [ [ ] ] ]    is VALID sub-expression\r\n  { } [ ]                is VALID sub-expression\r\n</pre>\r\n\r\nCan we exploit this recursive structure somehow?",
                        "What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.\r\n\r\n<pre>\r\n{ { ( { } ) } }\r\n      |_|\r\n\r\n{ { (      ) } }\r\n    |______|\r\n\r\n{ {          } }\r\n  |__________|\r\n\r\n{                }\r\n|________________|\r\n\r\nVALID EXPRESSION!\r\n</pre>",
                        "The <b>stack</b> data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards."
                    ],
                    "solution": {
                        "title": "Valid Parentheses",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/557813247\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n---\r\n<br />\r\n\r\n**Intuition**\r\n\r\nImagine you are writing a small compiler for your college project and one of the tasks (or say sub-tasks) for the compiler would be to detect if the parenthesis are in place or not.\r\n\r\nThe algorithm we will look at in this article can be then used to process all the parenthesis in the program your compiler is compiling and checking if all the parenthesis are in place. This makes checking if a given string of parenthesis is valid or not, an important programming problem.\r\n\r\nThe expressions that we will deal with in this problem can consist of three different type of parenthesis:\r\n\r\n* `()`,\r\n* `{}` and\r\n* `[]`\r\n\r\nBefore looking at how we can check if a given expression consisting of these parenthesis is valid or not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So, the expressions we can encounter in this simplified version of the problem are e.g.\r\n\r\n<pre>\r\n(((((()))))) -- VALID\r\n\r\n()()()()     -- VALID\r\n\r\n(((((((()    -- INVALID\r\n\r\n((()(())))   -- VALID\r\n</pre>\r\n\r\nLet's look at a simple algorithm to deal with this problem.\r\n\r\n1. We process the expression one bracket at a time starting from the left.\r\n2. Suppose we encounter an opening bracket i.e. `(`, it may or may not be an invalid expression because there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we simply increment the counter keeping track of left parenthesis till now. `left += 1`\r\n3. If we encounter a closing bracket, this has two meanings:\r\n    1. One, there was no matching opening bracket for this closing bracket and in that case we have an invalid expression. This is the case when `left == 0` i.e. when there are no unmatched left brackets available.\r\n    2. We had `some unmatched` opening bracket available to match this closing bracket. This is the case when `left > 0` i.e. we have unmatched left brackets available.\r\n\r\n4. If we encounter a closing bracket i.e. `)` when `left == 0`, then we have an invalid expression on our hands. Else, we decrement `left` thus reducing the number of unmatched left parenthesis available.\r\n5. Continue processing the string until all parenthesis have been processed.\r\n6. If in the end we still have unmatched left parenthesis available, this implies an invalid expression.\r\n\r\nThe reason we discussed this particular algorithm here is because the approach for the original problem derives its inspiration from this very solution. Have a look at the following dry run of the algorithm we discussed to have a better understanding.\r\n\r\n!?!../Documents/20_Simple.json:1000,400!?!\r\n\r\nIf we try and follow the same approach for our original problem, then it simply won't work. The reason a simple counter based approach works above is because all the parenthesis are of the same type. So when we encounter a closing bracket, we simply assume a corresponding opening matching bracket to be available i.e. if `left > 0`.\r\n\r\nBut, in our problem, if we encounter say `]`, we don't really know if there is a corresponding opening `[` available or not. You could say:\r\n\r\n> Why not maintain a separate counter for the different types of parenthesis?\r\n\r\nThis doesn't work because the relative placement of the parenthesis also matters here. e.g.:\r\n\r\n<pre>\r\n[{]\r\n</pre>\r\n\r\nIf we simply keep counters here, then as soon as we encounter the closing square bracket, we would know there is an unmatched opening square bracket available as well. But, the **closest unmatched opening bracket available is a curly bracket and not a square bracket** and hence the counting approach breaks here.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 1: Stacks\r\n\r\nAn interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n<center>\r\n<img src=\"../Figures/20/20-Valid-Parentheses-Recursive-Property.png\" width=\"700\"></center>\r\n\r\nAlso, if you look at the above structure carefully, the color coded cells mark the opening and closing pairs of parenthesis. The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort of a recursive structure to the problem. For e.g. Consider the expression enclosed within the two green parenthesis in the diagram above. The opening bracket at index `1` and the corresponding closing bracket at index `6`.\r\n\r\n> What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression?\r\n\r\nLet's have a look at this idea below where remove the smaller expressions one at a time from the overall expression and since this is a valid expression, we would be left with an empty string in the end.\r\n\r\n!?!../Documents/20_Recursive.json:1000,400!?!\r\n\r\n> The stack data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards.\r\n\r\nLet us have a look at the algorithm for this problem using stacks as the intermediate data structure.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize a stack S.\r\n2. Process each bracket of the expression one at a time.\r\n3. If we encounter an opening bracket, we simply push it onto the stack. This means we will process it later, let us simply move onto the **sub-expression** ahead.\r\n4. If we encounter a closing bracket, then we check the element on top of the stack. If the element at the top of the stack is an opening bracket `of the same type`, then we pop it off the stack and continue processing. Else, this implies an invalid expression.\r\n5. In the end, if we are left with a stack still having elements, then this implies an invalid expression.\r\n\r\nWe'll have a look a dry run for the algorithm and then move onto the implementation.\r\n\r\n!?!../Documents/20_Stack.json:1000,560!?!\r\n\r\nLet us now have a look at the implementation for this algorithm.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ML6oK7bJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ML6oK7bJ\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$ because we simply traverse the given string one character at a time and push and pop operations on a stack take $$O(1)$$ time.\r\n* Space complexity : $$O(n)$$ as we push all opening brackets onto the stack and in the worst case, we will end up pushing all the brackets onto the stack. e.g. `((((((((((`.\r\n\r\n\r\n<br />\r\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "valid-parentheses",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.761,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1959",
                "title": "Evaluate Reverse Polish Notation",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 336,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "150",
                    "questionFrontendId": "150",
                    "sessionId": "968792",
                    "questionTitle": "Evaluate Reverse Polish Notation",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/evaluate-reverse-polish-notation/submit/",
                    "interpretUrl": "/problems/evaluate-reverse-polish-notation/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int evalRPN(vector<string>& tokens) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int evalRPN(String[] tokens) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def evalRPN(self, tokens):\\n        \\\"\\\"\\\"\\n        :type tokens: List[str]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def evalRPN(self, tokens: List[str]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint evalRPN(char ** tokens, int tokensSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int EvalRPN(string[] tokens) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} tokens\\n * @return {number}\\n */\\nvar evalRPN = function(tokens) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} tokens\\n# @return {Integer}\\ndef eval_rpn(tokens)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func evalRPN(_ tokens: [String]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func evalRPN(tokens []string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def evalRPN(tokens: Array[String]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun evalRPN(tokens: Array<String>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn eval_rpn(tokens: Vec<String>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $tokens\\n     * @return Integer\\n     */\\n    function evalRPN($tokens) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function evalRPN(tokens: string[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (eval-rpn tokens)\\n  (-> (listof string?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec eval_rpn(Tokens :: [unicode:unicode_binary()]) -> integer().\\neval_rpn(Tokens) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec eval_rpn(tokens :: [String.t]) :: integer\\n  def eval_rpn(tokens) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"2\",\"1\",\"+\",\"3\",\"*\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"evalRPN\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"tokens\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Evaluate the value of an arithmetic expression in <a href=\"http://en.wikipedia.org/wiki/Reverse_Polish_notation\" target=\"_blank\">Reverse Polish Notation</a>.</p>\n\n<p>Valid operators are <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>. Each operand may be an integer or another expression.</p>\n\n<p><strong>Note</strong> that division between two integers should truncate toward zero.</p>\n\n<p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> ((2 + 1) * 3) = 9\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> (4 + (13 / 5)) = 6\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]\n<strong>Output:</strong> 22\n<strong>Explanation:</strong> ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tokens.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tokens[i]</code> is either an operator: <code>&quot;+&quot;</code>, <code>&quot;-&quot;</code>, <code>&quot;*&quot;</code>, or <code>&quot;/&quot;</code>, or an integer in the range <code>[-200, 200]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Evaluate Reverse Polish Notation",
                        "content": "[TOC]\n\n## Solution\n\nIf you've attempted this question and can't figure out why you're getting wrong answers, here are a couple of things to check *before* reading the article:\n\n1. Reverse Polish Notation **is not a \"reverse\" form of Polish Notation**. It is a bit different.\n\n2. If you're using Java, note that **the input type is an array of strings**, *not* an array of chars. This means that you should be comparing them with `.equals(...)`, *not* `==`. If your code is working on your computer but not on Leetcode, this is probably why. *It is a bug in your code, not in the Leetcode platform*.\n\n3. **Some programming languages** (e.g. Python, but not C++ and Java) **do not truncate towards 0 with division**, so you'll need to figure out how to make them do so (we'll discuss ways in the article). For example, if we put `-121 // 7` into Python, we get `-18`, but we actually wanted `-17`. If unsure about your programming language, either check the documentation or simply write a program that does `-121 / 7` (as integer division) and see which result you get.\n\n4. **Did you put numbers around the correct way?** e.g. the test case `[\"12\", \"7\", \"-\"]` means you should calculate `12 - 7 = 5`, and ***not*** `7 - 12 = -5`. In most implementations, getting them the correct way around is not immediately obvious. If you aren't *certain* you have it right, try this test case (`[\"12\", \"7\", \"-]`) and check whether you get `5` or `-5`.\n\n5. At the time of writing this solution article, the Wikipedia article has a number of errors and sections that are confusing (in particular, parsing the list in reverse). Try to understand how Reverse Polish Notation works and then design an algorithm yourself rather than following the provided pseudocode too closely. The Introduction section of this solution article also explains how Reverse Polish Notation works.\n\n---\n\n#### Introduction\n\nWe'll start with looking at what it means for integer division to truncate towards zero, and then at what Reverse Polish Notation is. Feel free to skip these sections if you already know this stuff.\n\n**Division between two integers should truncate towards zero**\n\nEarly on in your programming career, you probably learned about integer division. When dividing 2 positive numbers, we always *truncate down* to the nearest integer. The non-integer values are in parenthesis afterwards for reference.\n\n```\n6 / 2 = 3 (3.0)\n11 / 5 = 2 (2.2)\n9 / 5 = 1 (1.8)\n```\n\nMost programming languages do integer division by default (as opposed to float division, where decimal places are kept), and this is how they handle positive integers. Both of the following definitions could be (and are) used to describe the truncation.\n\n1. The result is truncated to a *less than or equal number*. i.e. `1` is less than `1.8`.\n2. The truncation is towards zero, i.e. `1` is closer to zero than `1.8` is.\n\nFor negative numbers however, it is *impossible* to satisfy both of these, so one or the other has to be picked. For example, consider the following:\n\n```\n-9 / 5 = ? (-1.8)\n```\n\n1. If we wanted the truncated result to be *smaller*, we'd have to go to `-2`, as `-2 < -1`.\n2. If we wanted the truncated result to be *nearer to zero*, we'd have to go to `-1` as `-1` is nearer to zero than `-2` is.\n\nSome programming languages go with the first definition, and others go with the second. For this problem, you are expected to go with the second definition, regardless of what your chosen programming language uses.\n\nPython, for example, goes with the first definition. This means that we need to find a way of doing the division. Luckily, the `int(...)` function *does* truncate towards zero, and therefore we can use the `int(a / b)` trick. Note that this is *not* the same as `int(a // b)`. We haven't checked what all the programming languages available on Leetcode do, so if your chosen programming language is not truncating division towards zero, have a look in the math libraries for your chosen programming language or do a web search.\n\n**What is Infix Notation?**\n\nAnalysing Infix Notation provides some great context for understanding Reverse Polish Notation.\n\nMost people know how to read expressions written using Infix Notation. Evaluating the following expression is something you will have learned to do in elementary school.\n\n```\n3 + 1 + 9 - 5 = 8\n```\n\nThis isn't too difficult. However, many of you will also have seen viral posts circulating social media websites, such as Facebook, that challenge you to evaluate an expression like:\n\n```\n5 * 4 + 9 - 2 / 3 + 1 = ?\n```\n\nWhen you check the comments, among many other strange answers, you'll probably see people arguing about whether the answer is `10`, `28.33`, or `29.33`.\n\nThe reason for the disagreement is because different people have different understandings about how such an expression should be evaluated. \n\nThose who say the answer is `10` evaluated it strictly from left to right, with the following steps:\n\n```\n5 * 4 = 20\n20 + 9 = 29\n29 - 2 = 27\n27 / 3 = 9\n9 + 1 = 10\n```\n\nThose who say the answer is `28.33` follow a rule where we evaluate operations in the following order; division, multiplication, addition, and subtraction. This method comes from a common misunderstanding of the widely used mnemonics: PEMDAS/BODMAS/BEDMAS. The steps with this method are as follows:\n\n```\n= 5 * 4 + 9 - 0.66 + 1 (Do division first.)\n= 20 + 9 - 0.66 + 1 (Do multiplication second.)\n= 29 - 1.66 (Do the additions third.)\n= 28.33 (Do the subtraction fourth.)\n```\n\nThose who say the answer is `29.33` use the rules most programming languages use, and that is also the correct interpretation of the mnemonics (PEMDAS/BODMAS/BEDMAS). That is to do division *and* multiplication first, in order from left to right, and then addition *and* subtraction, in order from left to right. Their steps are as follows:\n\n```\n= 20 + 9 - 2 / 3 + 1 (Do the multiplication.)\n= 20 + 9 - 0.66 + 1 (Do the division.)\n= 29 - 0.66 + 1 (Do the first addition.)\n= 28.33 + 1 (Do the subtraction, as it's next.)\n= 29.33 (Do the last addition.)\n```\n\nMost mathematicians would agree that the correct answer is `29.33`. Yet, this is probably not the answer you'd get if you asked a random sample of people in the general public (just look at the Facebook posts!). In school for example, I was taught the method that gives `28.33`. It wasn't until I learned programming in university that I learned the correct way!\n\nWhen we want to do the operations in a different order, we use parenthesis (brackets) around the parts to do first. The parts in parenthesis are always done before the parts outside.\n\nThe big *disadvantage* of **Infix Notation** is hopefully clear now. The rules for evaluating it are surprisingly complex, cause a lot of confusion, and in fact most people don't understand them properly. Additionally, the need to use parentheses correctly adds another layer of complexity.\n\nAs we move towards understanding what **Reverse Polish Notation** is, keep in mind that while it seems a bit strange and un-intuitive (at first!), that **Infix Notation** is actually more confusing. The *only* reason Infix Notation seems intuitive is because you've probably been using it all your life and so it is now second nature to you. People who use Reverse Polish Notation on a daily basis find it very intuitive! Some hand-held calculators still use it!\n\n**What is Reverse Polish Notation?**\n\nJust like Infix Notation, or in fact any other notation, **Reverse Polish Notation** has rules for how to evaluate it. You'll need to know these rules before you can write an algorithm. The rules could either be prior knowledge or supplied by an interviewer.\n\n> While there are operators remaining in the list, find the left-most operator. Apply it to the 2 numbers immediately before it, and replace all 3 tokens (the operator and 2 numbers) with the result. \n\nFor example in the most simplest case of `3 4 +` when we reach `+` we can replace `3 4 +` with it's result `7`.\n\nAs long as the input was valid, this rule will always work and leave a *single number* that should be returned. The leftmost operator that hasn't yet been removed will *always* have 2 numbers immediately before it. \n\nHere is an animation showing a more complicated example.\n\n!?!../Documents/150_reverse_polish_notation.json:960,180!?!\n\nHopefully the advantage is obvious now. Reverse Polish Notation doesn't require brackets, and the rules for evaluating it are far simpler. In-fact, our [equivalent question for Infix Notation](https://leetcode.com/problems/basic-calculator-iii/) is much more difficult than this one!\n\n\n</br>\n\n---\n\n\n#### Approach 1: Reducing the List In-place\n\n**Intuition**\n\nThis approach literally follows the animation above. A pointer is used to step through the list, and each time an operator (`+-*/) is found, that operator is then applied to the 2 values before it (which are always numbers, as long as the original input was valid). The 3 values are then replaced with the result. This process is repeated until the list is of length 1, containing a single number that is the answer to be returned.\n\n**Algorithm**\n\nThe code is simpler for Python than Java. For Java (and other languages where the input type is a fixed size array), we have to define our own method to delete values from an array. This is done by shuffling the other elements down into the gap. Of course, you could start by copying the input into an `ArrayList` (so that you could then use its delete method), but then the algorithm would require $$O(n)$$ space instead of $$O(1)$$ space.\n\n![Diagram showing the in-place shuffles.](../Figures/150/inplace_array_replacement.png)\n\nWe have to be a little careful about the types in the Python code, as in the middle of processing the list, some numbers will be represent as strings, and others as ints. Additionally, we also need to be aware that *python division does not truncate towards zero*. We can instead use `int(a / b)` to achieve the desired result. Note that this is *not* the same as `int(a // b)`.\n\nIn the Java code, we have to convert ints back to Strings, because Java doesn't support mixed lists of Strings and ints.\n\nFinally, If you know how to use `lambda` functions in your chosen programming language, an ideal solution would use them to elegantly handle the 4 operations (`+-*/`). The first set of solutions here use `lambda` functions. If you aren't familiar with `lambda` functions though (or your chosen programming language doesn't support them), that's fine. You'll get a chance to learn them when you're ready! Scroll down a little more, as we have also provided solutions that don't use them. \n\n<iframe src=\"https://leetcode.com/playground/yEe3YyoG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"yEe3YyoG\"></iframe>\n\nHere are the solutions without the use of `lambda` functions.\n\n<iframe src=\"https://leetcode.com/playground/6x9uoGV9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6x9uoGV9\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of the list.\n\n- Time Complexity : $$O(n^2)$$.\n\n    Firstly, it helps to calculate how many *operators* and how many *numbers* are in the initial list. Each step of the algorithm removes 1 operator, 2 numbers, and adds back 1 number. This is an overall loss of 1 number and 1 operator per step. At the end, we have 1 number left. Therefore, we can infer that at the start, there must always be **exactly 1 more number than there is operators**.\n\n    The big inefficiency of this approach is more obvious in the Java code than the Python. Deleting an item from an ArrayList or Array is $$O(n)$$, because all the items after have to be shuffled down one place to fill in the gap. The number of these deletions we need to do is the same as the number of operators, which is proportional to $$n$$. Therefore, the cost of the deletions is $$O(n^2)$$.\n    \n    This is more obvious in the Java code, because we had to define the deletion method ourselves. However, the Python deletion method works the same way, it's just that you can't see it because it's hidden in a library function call. It's important to always be aware of the cost of library functions as they can sometimes look like they're $$O(1)$$ when they're not!\n\n- Space Complexity : $$O(1)$$.\n    \n    The only extra space used is a constant number of single-value variables. Therefore, the overall algorithm requires $$O(1)$$ space.\n\nInterestingly, this approach could be adapted to work with a **Double-Linked List**. It would require $$O(n)$$ space to create the list, and then take $$O(n)$$ time to process it using a similar algorithm to above. This works because the algorithm is traversing the list in a linear fashion and modifications only impact the tokens immediately to the left of the current token.\n\n</br>\n\n---\n\n#### Approach 2: Evaluate with Stack\n\n**Intuition**\n\nThe first approach worked, but $$O(n^2)$$ is too slow for large $$n$$. As hinted at above, a **Double-Linked List** could be an option. However, it requires a lot of set-up code, and in practice requires more space than the elegant **Stack** approach we're going to look at now.\n\nWe don't want to repeatedly delete items from the middle of a list, as this inevitably leads to $$O(n^2)$$ time performance. So recall that the above algorithm scanned through the list from left to right, and each time it reached an operator, it'd replace the operator and the 2 numbers immediately before it with the result of applying the operator to the 2 numbers.\n\nThe two key steps of the above algorithm were:\n\n1. Visit each operator, in linear order. Finding these can be done with a linear search of the original list.\n2. Get the 2 most recently seen numbers that haven't yet been replaced. These could be tracked using a **Stack**.\n\nThe algorithm would be as follows:\n\n```text\nstack = new Stack()\nfor each token in tokens:\n    if token is a number:\n        stack.push(token)\n    else (token is operator):\n        number_2 = stack.pop()  \n        number_1 = stack.pop()\n        result = apply_operator(token, number_1, number_2)\n        stack.push(result)\nreturn stack.pop()\n```\n\nHere is an animation showing the algorithm.\n\n!?!../Documents/150_reverse_polish_stack.json:960,270!?!\n\nYou might have noticed the following 2 lines of the pseudocode could look like they're around the wrong way.\n\n```text\nnumber_2 = stack.pop()  \nnumber_1 = stack.pop()\n```\n\nThey are correct though. Remember that for division and subtraction, the order of the numbers matters. i.e. `7 - 5 \u2260 5 - 7`. On the `Stack`, we have the *second* on the top. So we need to reverse them before applying the operator.\n\n\n**Algorithm**\n\nHere is code that uses `lambda` functionality. Scroll down for code that doesn't.\n\n<iframe src=\"https://leetcode.com/playground/Yam4jeRk/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Yam4jeRk\"></iframe>\n\nHere are the solutions without `lambda`.\n\n<iframe src=\"https://leetcode.com/playground/fDfrYuHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fDfrYuHG\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of the list.\n\n- Time Complexity : $$O(n)$$.\n\n    We do a linear search to put all numbers on the stack, and process all operators. Processing an operator requires removing 2 numbers off the stack and replacing them with a single number, which is an $$O(1)$$ operation. Therefore, the total cost is proportional to the length of the input array. Unlike before, we're no longer doing expensive deletes from the middle of an Array or List.\n\n- Space Complexity : $$O(n)$$.\n\n    In the worst case, the stack will have all the numbers on it at the same time. This is never more than half the length of the input array.\n\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "evaluate-reverse-polish-notation",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.826,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2915",
                "title": "Kth Largest Element in an Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 336,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "215",
                    "questionFrontendId": "215",
                    "sessionId": "968792",
                    "questionTitle": "Kth Largest Element in an Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/kth-largest-element-in-an-array/submit/",
                    "interpretUrl": "/problems/kth-largest-element-in-an-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findKthLargest(vector<int>& nums, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findKthLargest(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findKthLargest(self, nums, k):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findKthLargest(self, nums: List[int], k: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findKthLargest(int* nums, int numsSize, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindKthLargest(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar findKthLargest = function(nums, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} k\\n# @return {Integer}\\ndef find_kth_largest(nums, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findKthLargest(_ nums: [Int], _ k: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findKthLargest(nums []int, k int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findKthLargest(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findKthLargest(nums: IntArray, k: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_kth_largest(nums: Vec<i32>, k: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function findKthLargest($nums, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findKthLargest(nums: number[], k: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-kth-largest nums k)\\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_kth_largest(Nums :: [integer()], K :: integer()) -> integer().\\nfind_kth_largest(Nums, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_kth_largest(nums :: [integer], k :: integer) :: integer\\n  def find_kth_largest(nums, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,2,1,5,6,4]\n2",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findKthLargest\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k<sup>th</sup></code> <em>largest element in the array</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> largest element in the sorted order, not the <code>k<sup>th</sup></code> distinct element.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1,5,6,4], k = 2\n<strong>Output:</strong> 5\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,3,1,2,4,5,5,6], k = 4\n<strong>Output:</strong> 4\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Kth Largest Element in an Array",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 0: Sort\n\nThe naive solution would be to sort an array first and then return kth \nelement from the end, something like `sorted(nums)[-k]` on Python. \nThat would be an algorithm of $$\\mathcal{O}(N \\log N)$$ time complexity\nand $$\\mathcal{O}(1)$$ space complexity.\nThis time complexity is not really exciting so \nlet's check how to improve it by using some additional space.\n<br />\n<br />\n\n\n---     \n#### Approach 1: Heap\n\nThe idea is to init a heap \"the smallest element first\",\nand add all elements from the array into this heap one by one\nkeeping the size of the heap always less or equal to `k`. \nThat would results in a heap containing `k` largest elements of the array.\n\nThe head of this heap is the answer, \ni.e. the kth largest element of the array. \n\nThe time complexity of adding an element in a heap of size `k`\nis $$\\mathcal{O}(\\log k)$$, and we do it `N` times that means \n$$\\mathcal{O}(N \\log k)$$ time complexity for the algorithm.\n\nIn Python there is a method `nlargest` in `heapq` library \nwhich has the same $$\\mathcal{O}(N \\log k)$$\ntime complexity and reduces the code to one line.\n\nThis algorithm improves time complexity, but one pays with \n$$\\mathcal{O}(k)$$ space complexity.\n        \n<!--![LIS](../Figures/72/72_tr.gif)-->\n!?!../Documents/215_LIS.json:1000,530!?!\n\n<iframe src=\"https://leetcode.com/playground/3fPxq2Yv/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"3fPxq2Yv\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N \\log k)$$. \n* Space complexity : $$\\mathcal{O}(k)$$ to store the heap elements. \n<br />\n<br />\n\n\n---\n#### Approach 2: Quickselect \n\nThis [textbook algorthm](https://en.wikipedia.org/wiki/Quickselect) \nhas $$\\mathcal{O}(N)$$ average time complexity.\nLike quicksort, it was developed by Tony Hoare, \nand is also known as _Hoare's selection algorithm_.\n\nThe approach is basically the same as for quicksort. \nFor simplicity let's notice that `k`th largest element is the same as\n`N - k`th smallest element, hence one could implement \n`k`th smallest algorithm for this problem.\n\nFirst one chooses a pivot, \nand defines its position in a sorted array in a linear time.\nThis could be done with the help of _partition algorithm_.\n\n> To implement partition one moves along an array,\ncompares each element with a pivot, \nand moves all elements smaller than pivot to the left of the pivot.\n \nAs an output we have an array where pivot is on its perfect position\nin the ascending sorted array, \nall elements on the left of the pivot are smaller than pivot,\nand all elements on the right of the pivot are larger or equal to pivot.\n\nHence the array is now split into two parts.\nIf that would be a quicksort algorithm, one would proceed recursively \nto use quicksort for the both parts that would result in \n$$\\mathcal{O}(N \\log N)$$ time complexity.\nHere there is no need to deal with both parts since now one knows \nin which part to search for `N - k`th smallest element, and that\nreduces average time complexity to $$\\mathcal{O}(N)$$.\n\nFinally the overall algorithm is quite straightforward :\n\n* Choose a random pivot.\n\n* Use a partition algorithm to place the pivot \ninto its perfect position `pos` in the sorted array,\nmove smaller elements to the left of pivot, and larger or equal ones - to the right.\n\n* Compare `pos` and `N - k` to choose the side of array to proceed recursively.\n\n> ! Please notice that this algorithm works well even for arrays with duplicates.\n\n![quickselect](../Figures/215/215_quickselect.png)\n\n<iframe src=\"https://leetcode.com/playground/QsycSKCS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QsycSKCS\"></iframe>\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the average case, $$\\mathcal{O}(N^2)$$ in the worst case. \n* Space complexity : $$\\mathcal{O}(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "kth-largest-element-in-an-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.122,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1961",
                "title": "Exclusive Time of Functions",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 336,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "636",
                    "questionFrontendId": "636",
                    "sessionId": "968792",
                    "questionTitle": "Exclusive Time of Functions",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/exclusive-time-of-functions/submit/",
                    "interpretUrl": "/problems/exclusive-time-of-functions/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> exclusiveTime(int n, vector<string>& logs) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] exclusiveTime(int n, List<String> logs) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def exclusiveTime(self, n, logs):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :type logs: List[str]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* exclusiveTime(int n, char ** logs, int logsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] ExclusiveTime(int n, IList<string> logs) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} n\\n * @param {string[]} logs\\n * @return {number[]}\\n */\\nvar exclusiveTime = function(n, logs) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\\n# @param {String[]} logs\\n# @return {Integer[]}\\ndef exclusive_time(n, logs)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func exclusiveTime(_ n: Int, _ logs: [String]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func exclusiveTime(n int, logs []string) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def exclusiveTime(n: Int, logs: List[String]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun exclusiveTime(n: Int, logs: List<String>): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn exclusive_time(n: i32, logs: Vec<String>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @param String[] $logs\\n     * @return Integer[]\\n     */\\n    function exclusiveTime($n, $logs) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function exclusiveTime(n: number, logs: string[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (exclusive-time n logs)\\n  (-> exact-integer? (listof string?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec exclusive_time(N :: integer(), Logs :: [unicode:unicode_binary()]) -> [integer()].\\nexclusive_time(N, Logs) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec exclusive_time(n :: integer, logs :: [String.t]) :: [integer]\\n  def exclusive_time(n, logs) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2\n[\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"exclusiveTime\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"logs\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>On a <strong>single-threaded</strong> CPU, we execute a program containing <code>n</code> functions. Each function has a unique ID between <code>0</code> and <code>n-1</code>.</p>\n\n<p>Function calls are <strong>stored in a <a href=\"https://en.wikipedia.org/wiki/Call_stack\">call stack</a></strong>: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is <strong>the current function being executed</strong>. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.</p>\n\n<p>You are given a list <code>logs</code>, where <code>logs[i]</code> represents the <code>i<sup>th</sup></code> log message formatted as a string <code>&quot;{function_id}:{&quot;start&quot; | &quot;end&quot;}:{timestamp}&quot;</code>. For example, <code>&quot;0:start:3&quot;</code> means a function call with function ID <code>0</code> <strong>started at the beginning</strong> of timestamp <code>3</code>, and <code>&quot;1:end:2&quot;</code> means a function call with function ID <code>1</code> <strong>ended at the end</strong> of timestamp <code>2</code>. Note that a function can be called <b>multiple times, possibly recursively</b>.</p>\n\n<p>A function&#39;s <strong>exclusive time</strong> is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for <code>2</code> time units and another call executing for <code>1</code> time unit, the <strong>exclusive time</strong> is <code>2 + 1 = 3</code>.</p>\n\n<p>Return <em>the <strong>exclusive time</strong> of each function in an array, where the value at the </em><code>i<sup>th</sup></code><em> index represents the exclusive time for the function with ID </em><code>i</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/05/diag1b.png\" style=\"width: 550px; height: 239px;\" />\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]\n<strong>Output:</strong> [3,4]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [8]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]\n<strong>Output:</strong> [7,1]\n<strong>Explanation:</strong>\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:7&quot;,&quot;1:end:7&quot;,&quot;0:end:8&quot;]\n<strong>Output:</strong> [8,1]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, logs = [&quot;0:start:0&quot;,&quot;0:end:0&quot;]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 500</code></li>\n\t<li><code>0 &lt;= function_id &lt; n</code></li>\n\t<li><code>0 &lt;= timestamp &lt;= 10<sup>9</sup></code></li>\n\t<li>No two start events will happen at the same timestamp.</li>\n\t<li>No two end events will happen at the same timestamp.</li>\n\t<li>Each function has an <code>&quot;end&quot;</code> log for each <code>&quot;start&quot;</code> log.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some questions that uses basic data structures such as Heap, Queue, or Stack."
    },
    {
        "id": "338",
        "title": "Sorting and Searching",
        "slug": "sorting-and-searching",
        "items": [
            {
                "id": "2911",
                "title": "Search in Rotated Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "33",
                    "questionFrontendId": "33",
                    "sessionId": "968792",
                    "questionTitle": "Search in Rotated Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/search-in-rotated-sorted-array/submit/",
                    "interpretUrl": "/problems/search-in-rotated-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def search(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint search(int* nums, int numsSize, int target){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number}\\n */\\nvar search = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer}\\ndef search(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func search(_ nums: [Int], _ target: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func search(nums []int, target int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def search(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun search(nums: IntArray, target: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer\\n     */\\n    function search($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function search(nums: number[], target: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search nums target)\\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: integer\\n  def search(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,5,6,7,0,1,2]\n0",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"search\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Search in Rotated Sorted Array",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Binary search\n\nThe problem is to implement a search in $$\\mathcal{O}(\\log{N})$$ time\nthat gives an idea to use a binary search.\n\nThe algorithm is quite straightforward :\n\n* Find a rotation index `rotation_index`,\n_i.e._ index of the smallest element in the array.\nBinary search works just perfect here.\n\n* `rotation_index` splits array in two parts.\nCompare `nums[0]` and `target`\nto identify in which part one has to look for `target`.\n\n* Perform a binary search in the chosen part of the array.\n\n!?!../Documents/33_LIS.json:1000,510!?!\n\n<iframe src=\"https://leetcode.com/playground/Q6Yorxh3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Q6Yorxh3\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log{N})$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: One-pass Binary Search\n\nInstead of going through the input array in two passes, we could achieve the goal in one pass with an _revised_ binary search.\n\n>The idea is that we add some additional *condition checks* in the normal binary search in order to better _narrow down_ the scope of the search.\n\n**Algorithm**\n\nAs in the normal binary search, we keep two pointers (_i.e._ `start` and `end`) to track the search scope. At each iteration, we reduce the search scope into half, by moving either the `start` or `end` pointer to the middle (_i.e._ `mid`) of the previous search scope.\n\nHere are the detailed breakdowns of the algorithm:\n\n- Initiate the pointer `start` to `0`, and the pointer `end` to `n - 1`.\n\n- Perform standard binary search. While `start <= end`:\n\n    - Take an index in the middle `mid` as a pivot.\n\n    - If `nums[mid] == target`, the job is done, return `mid`.\n\n    - Now there could be two situations:\n\n        - Pivot element is larger than the first element in the array, _i.e._ the subarray from the first element to the pivot is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_small_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go left: `end = mid - 1`.\n\n            - Otherwise: go right: `start = mid + 1`.\n\n        - Pivot element is smaller than the first element of the array, _i.e._ the rotation index is somewhere between `0` and `mid`. It implies that the sub-array from the pivot element to the last one is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_big_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go right: `start = mid + 1`.\n\n            - Otherwise: go left: `end = mid - 1`.\n\n- We're here because the target is not found. Return -1.\n\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/UAxfNC7U/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"UAxfNC7U\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(\\log{N})$$.\n* Space complexity: $$\\mathcal{O}(1)$$.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "search-in-rotated-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.743,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2912",
                "title": "Find First and Last Position of Element in Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "34",
                    "questionFrontendId": "34",
                    "sessionId": "968792",
                    "questionTitle": "Find First and Last Position of Element in Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-first-and-last-position-of-element-in-sorted-array/submit/",
                    "interpretUrl": "/problems/find-first-and-last-position-of-element-in-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] searchRange(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def searchRange(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* searchRange(int* nums, int numsSize, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] SearchRange(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer[]}\\ndef search_range(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchRange(nums []int, target int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun searchRange(nums: IntArray, target: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer[]\\n     */\\n    function searchRange($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function searchRange(nums: number[], target: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search-range nums target)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\\nsearch_range(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\\n  def search_range(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[5,7,7,8,8,10]\n8",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"searchRange\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find First and Last Position of Element in Sorted Array",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nLet's briefly look at a brute-force way of solving this problem. Given a target element, we can simply do a linear scan over the entire array to find the first and the last position. The first occurrence will be the first time when we encounter this target. Thereafter, we continue to scan elements until we find one that is greater than the target or until we reach the end of the array. This will help us determine the last position of the target. \r\n\r\nThe downside of this approach is that it doesn't take advantage of the *sorted* nature of the array. This linear scan approach has a time complexity of $$O(N)$$ because there are $$N$$ elements in the array. That doesn't sound too bad, right? Well, it does if we compare it to an approach with logarithmic time complexity. We'll look at a *binary search-based approach* to solve this problem which will take advantage of the sorted nature of the array.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach: Binary Search\r\n\r\n**Intuition**\r\n\r\nLet's review binary search a bit. Given a sorted array, binary search works by looking at the middle element of the given array, and based on the value of the middle element, it decides to discard one half of the array. At each step, we reduce the length of the array to search by half and that is what leads to the logarithmic time complexity of the algorithm. Usually, we employ the binary search algorithm to determine if an element is in a sorted array. Here, we can tweak the binary search algorithm to find the first and the last position of a given element. \r\n\r\nLet's look at the basic binary search algorithm one step at a time:\r\n\r\n* We use 2 variables to keep track of the subarray that we are scanning. Let's call them `begin` and `end`. Initially, `begin` is set to `0` and `end` is set to the last index of the array.\r\n* We iterate until `begin` is greater than or equal to `end`.\r\n* At each step, we calculate the middle element `mid = (begin + end) / 2`. We use the value of the middle element to decide which half of the array we need to search. \r\n    - If the target that we're searching for has a value lower than the `mid` element, we discard the right half of the array i.e. `end = mid - 1`. \r\n    - If the target that we're searching for has a value higher than the `mid` element, we discard the left half of the array i.e. `begin = mid + 1`. \r\n    - If `nums[mid] == element`, then we found our target and we return from there.\r\n\r\n**Binary Search and Bidirectional Scan**\r\n\r\nA naive way to use binary search to find the first and the last position of a target is to first determine the index of **any** occurrence of the given target. Suppose we know that the target is at the index `i` in the array. From there on, we do a linear scan to the left and keep going until we find the first occurrence of this target. Similarly, we do a linear scan to the right to find the last position. This works just fine. However, in the worst case when our entire array (or say 90% or more of it) is filled with the target, then this is a linear-time algorithm. In that case, the linear scan will end up taking more time than the binary-search itself.\r\n\r\n**Two Binary Searches**\r\n\r\nInstead of using a linear-scan approach to find the boundaries once the target has been found, let's use two binary searches to find the first and last position of the target. We can make a small tweak to the checks we perform on the middle element.  This tweak will help us determine the first and the last position of an element\r\n\r\nNormally, we compare `nums[mid] == target` because we simply need to check if we found our target or not. But now, apart from checking for equality, we also need to check if `mid` is the first or the last index where the target occurs. Let's see how we can do that. \r\n\r\n**First position in the array**\r\n\r\nThere are two situations where an index will be the first occurrence of the target in the array.\r\n\r\n1. If `mid` is the same as `begin` which implies our `mid` element is the *first* element in the remaining subarray.\r\n2. The element to the left of this index is not equal to the target that we are searching for. I.e. `nums[mid - 1] != target`. If this condition is not met, we should keep searching on the left side of the array for the first occurrence of the target. \r\n\r\nLet's take a look at an example depicting this idea. In the example below, we are searching for the first occurrence of the number `7`.\r\n\r\n![Example for finding the first position of a target](../Figures/34/img1.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Find the first position of \"7\" in the array.*\r\n{:align=\"center\"}\r\n\r\nInitially, the variables `begin` and `end` are `0` and `5` respectively. So, our `mid` element is `(0 + 5) / 2 = 2`. \r\n\r\n![Middle element not the first occurrence](../Figures/34/img2.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 2. The middle element is a match but it is not the first occurrence.*\r\n{:align=\"center\"}\r\n\r\nNow, `begin` is still `0` but `end` has moved to `mid - 1 = 1`. Now we have narrowed our search down to the first two elements of the array. Our updated `mid` is `(0 + 1) / 2 = 0`. This element is lower than the target we are looking for `2 < 7`. So, we discard the \"left\" side of this subarray and update `begin = mid + 1`.  This leaves us with a single index, which is in fact the first occurrence of the element \"7\".\r\n\r\n**Last position in the array**\r\n\r\nThere are two situations where an index will be the last occurrence of the target in the array.\r\n\r\n1. If `mid` is the same as `end` which implies our `mid` element is the *last* element of the remaining subarray.\r\n2. If the element to the right of `mid` is not equal to the target we are searching for. I.e. `nums[mid + 1] != target`. If this condition is not met, we should keep searching on the right side of the array for the last occurrence of the target. \r\n\r\nLet's take a look at an example depicting this idea. In the example below, we are searching for the last occurrence of the number `7`.\r\n\r\n![Example for finding the last position of an element](../Figures/34/img3.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 3. Find the last position of \"7\" in the array.*\r\n{:align=\"center\"}\r\n\r\nInitially, the variables `begin` and `end` are `0` and `5` respectively. So, our `mid` element is `(0 + 5) / 2 = 2`. \r\n\r\n![Middle element not the last occurrence](../Figures/34/img4.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 4. The middle element is not a match.*\r\n{:align=\"center\"}\r\n\r\nThe updated `mid` is greater than \"7\". So, we discard the right side of the array.  This leaves us with just a single element in the array which is \"7\" and it is also the last occurrence.\r\n\r\n**Algorithm**\r\n\r\n1. Define a function called `findBound` which takes three arguments: the `array`, the `target` to search for, and a boolean value `isFirst` which indicates if we are trying to find the first or the last occurrence of `target`.\r\n2. We use 2 variables to keep track of the subarray that we are scanning. Let's call them `begin` and `end`. Initially, `begin` is set to `0` and `end` is set to the last index of the array.\r\n3. We iterate until `begin` is greater than or equal to `end`.\r\n4. At each step, we calculate the middle element `mid = (begin + end) / 2`. We use the value of the middle element to decide which half of the array we need to search. \r\n    - *nums[mid] == target*\r\n        - *isFirst is true* ~ This implies that we are trying to find the first occurrence of the element. If `mid == begin` or `nums[mid - 1] != target`, then we return `mid` as the first occurrence of the `target`. Otherwise, we update `end = mid - 1`\r\n        - *isFirst is false* ~ This implies we are trying to find the last occurrence of the element. If `mid == end` or `nums[mid + 1] != target`, then we return `mid` as the last occurrence of the `target`. Otherwise, we update `begin = mid + 1`\r\n    - *nums[mid] > target* ~ We update `end = mid - 1` since we must discard the right side of the array as the middle element is greater than `target`.\r\n    - *nums[mid] < target* ~ We update `begin = mid + 1` since we must discard the left side of the array as the middle element is less than `target`.\r\n5. We return a value of `-1` at the end of our function which indicates that `target` was not found in the array.\r\n6. In the main `searchRange` function, we first call `findBound` with `isFirst` set to `true`. If this value is `-1`, we can simply return `[-1, -1]`. Otherwise, we call `findBound` with `isFirst` set to false to get the last occurrence and then return the result.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/23fEZggX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"23fEZggX\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(\\text{log} N)$$ considering there are $$N$$ elements in the array. This is because binary search takes logarithmic time to scan an array of $$N$$ elements. Why? Because at each step we discard half of the array we are scanning and hence, we're done after a logarithmic number of steps. We simply perform binary search twice in this case.\r\n\r\n* Space Complexity: $$O(1)$$ since we only use space for a few variables and our result array, all of which require constant space.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.742,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1965",
                "title": "Pow(x, n)",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "50",
                    "questionFrontendId": "50",
                    "sessionId": "968792",
                    "questionTitle": "Pow(x, n)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/powx-n/submit/",
                    "interpretUrl": "/problems/powx-n/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    double myPow(double x, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public double myPow(double x, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def myPow(self, x, n):\\n        \\\"\\\"\\\"\\n        :type x: float\\n        :type n: int\\n        :rtype: float\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\ndouble myPow(double x, int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public double MyPow(double x, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} x\\n * @param {number} n\\n * @return {number}\\n */\\nvar myPow = function(x, n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Float} x\\n# @param {Integer} n\\n# @return {Float}\\ndef my_pow(x, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func myPow(_ x: Double, _ n: Int) -> Double {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myPow(x float64, n int) float64 {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def myPow(x: Double, n: Int): Double = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun myPow(x: Double, n: Int): Double {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn my_pow(x: f64, n: i32) -> f64 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Float $x\\n     * @param Integer $n\\n     * @return Float\\n     */\\n    function myPow($x, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function myPow(x: number, n: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (my-pow x n)\\n  (-> flonum? exact-integer? flonum?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_pow(X :: float(), N :: integer()) -> float().\\nmy_pow(X, N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec my_pow(x :: float, n :: integer) :: float\\n  def my_pow(x, n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2.00000\n10",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"myPow\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"x\",\r\n      \"type\": \"double\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Pow(x, n)",
                        "content": "[TOC]\n\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nJust simulate the process, multiply `x` for `n` times.\n\nIf $$n < 0$$, we can substitute $$x, n$$ with $$\\dfrac{1}{x}, -n$$ to make sure $$n \\ge 0$$. This restriction can simplify our further discussion.\n\nBut we need to take care of the corner cases, especially different range limits for negative and positive integers.\n\n**Algorithm**\n\nWe can use a straightforward loop to compute the result.\n\n<iframe src=\"https://leetcode.com/playground/Ryg5YHbk/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"Ryg5YHbk\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We will multiply `x` for `n` times.\n\n* Space complexity : $$O(1)$$. We only need one variable to store the final product of `x`.\n<br />\n<br />\n---\n#### Approach 2: Fast Power Algorithm Recursive\n\n**Intuition**\n\nAssuming we have got the result of $$x ^ n$$, how can we get $$x ^ {2 * n}$$ ? Obviously we do not need to multiply `x` for another `n` times. Using the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$, we can get $$x ^ {2 * n}$$ at the cost of only one computation. Using this optimization, we can reduce the time complexity of our algorithm.\n\n**Algorithm**\n\nAssume we have got the result of $$x ^ {n / 2}$$, and now we want to get the result of $$x ^ n$$. Let `A` be result of $$x ^ {n / 2}$$, we can talk about $$x ^ n$$ based on the parity of `n` respectively. If `n` is even, we can use the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$ to get $$x ^ n = A * A$$. If `n` is odd, then $$A * A = x ^ {n - 1}$$. Intuitively, We need to multiply another $$x$$ to the result, so $$x ^ n = A * A * x$$. This approach can be easily implemented using recursion. We call this method \"**Fast Power**\", because we only need at most $$O(\\log n)$$ computations to get $$x ^ n$$.\n\n<iframe src=\"https://leetcode.com/playground/TVkdREcW/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"TVkdREcW\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\log n)$$. Each time we apply the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$, $$n$$ is reduced by half. Thus we need at most $$O(\\log n)$$ computations to get the result.\n\n* Space complexity : $$O(\\log n)$$. For each computation, we need to store the result of $$x ^ {n / 2}$$. We need to do the computation for $$O(\\log n)$$ times, so the space complexity is $$O(\\log n)$$.\n<br />\n<br />\n---\n#### Approach 3: Fast Power Algorithm Iterative\n\n**Intuition**\n\nUsing the formula $$x ^ {a + b} = x ^ a * x ^ b$$, we can write `n` as a sum of positive integers, $$n = \\sum_i b_i$$. If we can get the result of $$x ^ {b_i}$$ quickly, the total time for computing $$x ^ n$$ will be reduced.\n\n**Algorithm**\n\nWe can use the binary representation of `n` to better understand the problem. Let the binary representation of `n` to be $$b_1, b_2, ..., b_{length\\_limit}$$, from the Least Significant Bit(LSB) to the Most Significant Bit(MSB). For the `i`th bit, if $$b_i = 1$$, it means we need to multiply the result by $$x ^ {2 ^ i}$$.\n\nIt seems to have no improvement with this representation, since $$\\sum_i b_i * 2 ^ i = n$$. But using the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$ we mentioned above, we can see some differences. Initially $$x ^ 1 = x$$, and for each $$ i > 1$$, we can use the result of $$x ^ {2 ^ {i - 1}}$$ to get $$x ^ {2 ^ i}$$ in one step. Since the number of $$b_i$$ is at most $$O(\\log n)$$, we can get all $$x ^ {2 ^ i}$$ in $$O(\\log n)$$ time. After that, for all `i`s that satisfy $$b_i = 1$$, we can multiply $$x ^ {2 ^ i}$$ to the result. This also requires $$O(\\log n)$$ time.\n\nUsing fast power recursively or iteratively are actually taking different paths towards the same goal. For more information about fast power algorithm, you can visit its wiki[^1].\n\n\n<iframe src=\"https://leetcode.com/playground/yrWcLt6t/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"yrWcLt6t\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\log n)$$. For each bit of `n`\n's binary representation, we will at most multiply once. So the total time complexity is $$O(\\log n)$$.\n\n* Space complexity : $$O(1)$$. We only need two variables for the current product and the final result of `x`.\n\n\n**Footnotes**\n\n[^1]: [https://en.wikipedia.org/wiki/Exponentiation_by_squaring](https://en.wikipedia.org/wiki/Exponentiation_by_squaring)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "powx-n",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.842,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1966",
                "title": "Merge Intervals",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "56",
                    "questionFrontendId": "56",
                    "sessionId": "968792",
                    "questionTitle": "Merge Intervals",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-intervals/submit/",
                    "interpretUrl": "/problems/merge-intervals/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[][] merge(int[][] intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def merge(self, intervals):\\n        \\\"\\\"\\\"\\n        :type intervals: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[][] Merge(int[][] intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} intervals\\n * @return {number[][]}\\n */\\nvar merge = function(intervals) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} intervals\\n# @return {Integer[][]}\\ndef merge(intervals)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func merge(intervals [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $intervals\\n     * @return Integer[][]\\n     */\\n    function merge($intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function merge(intervals: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (merge intervals)\\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\\nmerge(Intervals) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\\n  def merge(intervals) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,3],[2,6],[8,10],[15,18]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"merge\",\n  \"params\": [\n    {\n      \"name\": \"intervals\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[][]\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge Intervals",
                        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/471861267\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Connected Components\n\n**Intuition**\n\nIf we draw a graph (with intervals as nodes) that contains undirected edges\nbetween all pairs of intervals that overlap, then all intervals in each\n*connected component* of the graph can be merged into a single interval.\n\n**Algorithm**\n\nWith the above intuition in mind, we can represent the graph as an adjacency\nlist, inserting directed edges in both directions to simulate undirected\nedges. Then, to determine which connected component each node is it, we\nperform graph traversals from arbitrary unvisited nodes until all nodes have\nbeen visited. To do this efficiently, we store visited nodes in a `Set`,\nallowing for constant time containment checks and insertion. Finally, we\nconsider each connected component, merging all of its intervals by\nconstructing a new `Interval` with `start` equal to the minimum start among\nthem and `end` equal to the maximum end.\n\nThis algorithm is correct simply because it is basically the brute force\nsolution. We compare every interval to every other interval, so we know\nexactly which intervals overlap. The reason for the connected component\nsearch is that two intervals may not directly overlap, but might overlap\nindirectly via a third interval. See the example below to see this more\nclearly.\n\n![Components Example](../Figures/56/component.png)\n{:align=\"center\"}\n\nAlthough (1, 5) and (6, 10) do not directly overlap, either would overlap\nwith the other if first merged with (4, 7). There are two connected\ncomponents, so if we merge their nodes, we expect to get the following two\nmerged intervals:\n\n(1, 10), (15, 20)\n\n\n<iframe src=\"https://leetcode.com/playground/QAwfL3U4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QAwfL3U4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$\n\n    Building the graph costs $$O(V + E) = O(V) + O(E) = O(n) + O(n^2) = O(n^2)$$\n    time, as in the worst case all intervals are mutually overlapping.\n    Traversing the graph has the same cost (although it might appear higher\n    at first) because our `visited` set guarantees that each node will be\n    visited exactly once. Finally, because each node is part of exactly one\n    component, the merge step costs $$O(V) = O(n)$$ time. This all adds up as\n    follows:\n\n    $$\n        O(n^2) + O(n^2) + O(n) = O(n^2)\n    $$\n\n* Space complexity : $$O(n^2)$$\n\n    As previously mentioned, in the worst case, all intervals are mutually\n    overlapping, so there will be an edge for every pair of intervals.\n    Therefore, the memory footprint is quadratic in the input size.\n\n<br/>\n\n---\n\n#### Approach 2: Sorting\n\n**Intuition**\n\nIf we sort the intervals by their `start` value, then each set of intervals\nthat can be merged will appear as a contiguous \"run\" in the sorted list.\n\n**Algorithm**\n\nFirst, we sort the list as described. Then, we insert the first interval into\nour `merged` list and continue considering each interval in turn as follows:\nIf the current interval begins *after* the previous interval ends, then they\ndo not overlap and we can append the current interval to `merged`. Otherwise,\nthey do overlap, and we merge them by updating the `end` of the previous\ninterval if it is less than the `end` of the current interval.\n\nA simple proof by contradiction shows that this algorithm always produces the\ncorrect answer. First, suppose that the algorithm at some point fails to\nmerge two intervals that should be merged. This would imply that there exists\nsome triple of indices $$i$$, $$j$$, and $$k$$ in a list of intervals\n$$\\text{ints}$$ such that $$i < j < k$$ and ($$\\text{ints[i]}$$, $$\\text{ints[k]}$$) can be\nmerged, but neither ($$\\text{ints[i]}$$, $$\\text{ints[j]}$$) nor ($$\\text{ints[j]}$$, $$\\text{ints[k]}$$)\ncan be merged. From this scenario follow several inequalities:\n\n$$\n\\begin{aligned}\n    \\text{ints[i].end} < \\text{ints[j].start} \\\\\n    \\text{ints[j].end} < \\text{ints[k].start} \\\\\n    \\text{ints[i].end} \\geq \\text{ints[k].start} \\\\\n\\end{aligned}\n$$\n\nWe can chain these inequalities (along with the following inequality, implied\nby the well-formedness of the intervals: $$\\text{ints[j].start} \\leq \\text{ints[j].end}$$) to\ndemonstrate a contradiction:\n\n$$\n\\begin{aligned}\n    \\text{ints[i].end} < \\text{ints[j].start} \\leq \\text{ints[j].end} < \\text{ints[k].start} \\\\\n    \\text{ints[i].end} \\geq \\text{ints[k].start}\n\\end{aligned}\n$$\n\nTherefore, all mergeable intervals must occur in a contiguous run of the\nsorted list.\n\n![Sorting Example](../Figures/56/sort.png)\n{:align=\"center\"}\n\n\nConsider the example above, where the intervals are sorted, and then all\nmergeable intervals form contiguous blocks.\n\n<iframe src=\"https://leetcode.com/playground/FmaPwUjH/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"FmaPwUjH\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n\\log{}n)$$\n\n    Other than the `sort` invocation, we do a simple linear scan of the list,\n    so the runtime is dominated by the $$O(n\\log{}n)$$ complexity of sorting.\n\n* Space complexity : $$O(\\log N)$$ (or $$O(n)$$)\n\n    If we can sort `intervals` in place, we do not need more than constant\n    additional space, although the sorting itself takes $$O(\\log n)$$ space.\n    Otherwise, we must allocate linear space to store a copy of `intervals` and sort that.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "merge-intervals",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": false,
                        "rating": {
                            "average": 4.535,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2913",
                "title": "Sqrt(x)",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "69",
                    "questionFrontendId": "69",
                    "sessionId": "968792",
                    "questionTitle": "Sqrt(x)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/sqrtx/submit/",
                    "interpretUrl": "/problems/sqrtx/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int mySqrt(int x) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int mySqrt(int x) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def mySqrt(self, x):\\n        \\\"\\\"\\\"\\n        :type x: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def mySqrt(self, x: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint mySqrt(int x){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MySqrt(int x) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} x\\n * @return {number}\\n */\\nvar mySqrt = function(x) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} x\\n# @return {Integer}\\ndef my_sqrt(x)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func mySqrt(_ x: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func mySqrt(x int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def mySqrt(x: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun mySqrt(x: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn my_sqrt(x: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $x\\n     * @return Integer\\n     */\\n    function mySqrt($x) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function mySqrt(x: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (my-sqrt x)\\n  (-> exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_sqrt(X :: integer()) -> integer().\\nmy_sqrt(X) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec my_sqrt(x :: integer) :: integer\\n  def my_sqrt(x) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "4",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"mySqrt\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"x\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a non-negative integer <code>x</code>,&nbsp;compute and return <em>the square root of</em> <code>x</code>.</p>\n\n<p>Since the return type&nbsp;is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result&nbsp;is returned.</p>\n\n<p><strong>Note:&nbsp;</strong>You are not allowed to use any built-in exponent function or operator, such as <code>pow(x, 0.5)</code> or&nbsp;<code>x ** 0.5</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 4\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 8\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Try exploring all integers. (Credits: @annujoshi)",
                        "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
                    ],
                    "solution": {
                        "title": "Sqrt(x)",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Integer Square Root\n\nThe value $$a$$ we're supposed to compute could be defined \nas $$a^2 \\le x < (a + 1)^2$$.\nIt is called _integer square root_.\nFrom geometrical points of view, it's the side of the \nlargest integer-side square with a surface less than x. \n\n ![fig](../Figures/69/cop.png) \n\n<br /> \n<br />\n\n\n---\n#### Approach 1: Pocket Calculator Algorithm\n\nBefore going to the serious stuff, \nlet's first have some fun and implement \nthe [algorithm used by the pocket calculators](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Exponential_identity).\n\nUsually a pocket calculator computes well exponential functions and natural logarithms\nby having logarithm tables hardcoded or by the other means. \nHence the idea is to reduce the square root computation to these two algorithms as well \n\n$$\n\\sqrt{x} = e^{\\frac{1}{2} \\log x} \n$$\n\nThat's some sort of cheat because of non-elementary function usage\nbut it's how that actually works in a real life.\n\n![fig](../Figures/69/leet.png) \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/HneJGvw8/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"HneJGvw8\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$. \n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br /> \n<br />\n\n\n---\n#### Approach 2: Binary Search\n\n**Intuition**\n\nLet's go back to the interview context.\nFor $$x \\ge 2$$ the square root is always smaller \nthan $$x / 2$$ and larger than 0 : $$0 < a < x / 2$$.   \nSince $$a$$ is an integer, \nthe problem goes down to the iteration over the \nsorted set of integer numbers.\nHere the binary search enters the scene. \n\n![fig](../Figures/69/binary.png)\n\n**Algorithm**\n\n- If x < 2, return x.\n\n- Set the left boundary to 2, and the right boundary to x / 2.\n\n- While left <= right:\n\n    - Take num = (left + right) / 2 as a guess. \n    Compute num * num and compare it with x:\n    \n        - If num * num > x, move the right boundary right = pivot -1\n        \n        - Else, if num * num < x, move the left boundary left = pivot + 1\n        \n        - Otherwise num * num == x, \n        the integer square root is here, let's return it\n\n- Return right\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/JKe2UNgc/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"JKe2UNgc\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log N)$$. \n\n    Let's compute time complexity with the help of \n    [master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)) \n    $$T(N) = aT\\left(\\frac{N}{b}\\right) + \\Theta(N^d)$$.\n    The equation represents dividing the problem \n    up into $$a$$ subproblems of size $$\\frac{N}{b}$$ in $$\\Theta(N^d)$$ time. \n    Here at step there is only one subproblem `a = 1`, its size \n    is a half of the initial problem `b = 2`, \n    and all this happens in a constant time `d = 0`.\n    That means that $$\\log_b{a} = d$$ and hence we're dealing with \n    [case 2](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_2_example)\n    that results in $$\\mathcal{O}(n^{\\log_b{a}} \\log^{d + 1} N)$$\n    = $$\\mathcal{O}(\\log N)$$ time complexity.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br /> \n<br />\n\n\n---\n#### Approach 3: Recursion + Bit Shifts\n\n**Intuition**\n\nLet's use recursion. Bases cases are $$\\sqrt{x} = x$$ for $$x < 2$$.\nNow the idea is to decrease $$x$$ recursively at each step to\ngo down to the base cases. \n\n> How to go down? \n\nFor example, let's notice that $$\\sqrt{x} = 2 \\times \\sqrt{\\frac{x}{4}}$$, \nand hence square root could be computed recursively as \n\n$$\n\\textrm{mySqrt}(x) = 2 \\times \\textrm{mySqrt}\\left(\\frac{x}{4}\\right)\n$$ \n\nOne could already stop here, but let's use \n[left and right shifts](https://wiki.python.org/moin/BitwiseOperators),\nwhich are quite fast manipulations with bits\n\n$$\nx << y \\qquad \\textrm{that means} \\qquad x \\times 2^y \n$$\n\n$$\nx >> y \\qquad \\textrm{that means} \\qquad \\frac{x}{2^y} \n$$\n\n\nThat means one could rewrite the recursion above as \n\n$$\n\\textrm{mySqrt}(x) = \\textrm{mySqrt}(x >> 2) << 1\n$$ \n\nin order to fasten up the computations. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/tLYRPk29/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"tLYRPk29\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log N)$$. \n\n    Let's compute time complexity with the help of \n    [master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)) \n    $$T(N) = aT\\left(\\frac{N}{b}\\right) + \\Theta(N^d)$$.\n    The equation represents dividing the problem \n    up into $$a$$ subproblems of size $$\\frac{N}{b}$$ in $$\\Theta(N^d)$$ time. \n    Here at step there is only one subproblem `a = 1`, its size \n    is a half of the initial problem `b = 2`, \n    and all this happens in a constant time `d = 0`.\n    That means that $$\\log_b{a} = d$$ and hence we're dealing with \n    [case 2](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_2_example)\n    that results in $$\\mathcal{O}(n^{\\log_b{a}} \\log^{d + 1} N)$$\n    = $$\\mathcal{O}(\\log N)$$ time complexity.\n\n* Space complexity : $$\\mathcal{O}(\\log N)$$ to keep the recursion stack.\n<br /> \n<br />\n\n\n---\n#### Approach 4: Newton's Method\n\n**Intuition**\n\nOne of the best and widely used methods to compute sqrt is \n[Newton's Method](https://en.wikipedia.org/wiki/Newton%27s_method). \nHere we'll implement the version without the\nseed trimming to keep things simple.\nHowever, seed trimming is a bit of math and lot of fun,\nso [here is a link](https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Rough_estimation) \nif you'd like to dive in. \n\nLet's keep the [mathematical proofs](https://en.wikipedia.org/wiki/Newton%27s_method)\noutside of the article and just use the textbook fact that the set \n\n$$\nx_{k + 1} = \\frac{1}{2}\\left[x_k + \\frac{x}{x_k}\\right]\n$$ \n\nconverges to $$\\sqrt{x}$$ if $$x_0 = x$$. \nThen the things are straightforward: \ndefine that error should be less than 1 and proceed\niteratively.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/JCEAyBxq/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"JCEAyBxq\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log N)$$ since the set\nconverges quadratically. \n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br /> \n<br />\n\n\n---\n#### Compare Approaches 2, 3 and 4\n\nHere we have three algorithms with a time performance $$\\mathcal{O}(\\log N)$$,\nand it's a bit confusing. \n\n> Which one is performing less iterations?\n\nLet's run tests for the range of x in order to check that. \nHere are the results. The best one is Newton's method.\n\n![fig](../Figures/69/cp.png)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "sqrtx",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.385,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2914",
                "title": "Random Pick with Weight",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 338,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "912",
                    "questionFrontendId": "528",
                    "sessionId": "968792",
                    "questionTitle": "Random Pick with Weight",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/random-pick-with-weight/submit/",
                    "interpretUrl": "/problems/random-pick-with-weight/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    Solution(vector<int>& w) {\\n        \\n    }\\n    \\n    int pickIndex() {\\n        \\n    }\\n};\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution* obj = new Solution(w);\\n * int param_1 = obj->pickIndex();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n\\n    public Solution(int[] w) {\\n        \\n    }\\n    \\n    public int pickIndex() {\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(w);\\n * int param_1 = obj.pickIndex();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n\\n    def __init__(self, w):\\n        \\\"\\\"\\\"\\n        :type w: List[int]\\n        \\\"\\\"\\\"\\n        \\n\\n    def pickIndex(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(w)\\n# param_1 = obj.pickIndex()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n\\n    def __init__(self, w: List[int]):\\n        \\n\\n    def pickIndex(self) -> int:\\n        \\n\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution(w)\\n# param_1 = obj.pickIndex()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} Solution;\\n\\n\\nSolution* solutionCreate(int* w, int wSize) {\\n    \\n}\\n\\nint solutionPickIndex(Solution* obj) {\\n  \\n}\\n\\nvoid solutionFree(Solution* obj) {\\n    \\n}\\n\\n/**\\n * Your Solution struct will be instantiated and called as such:\\n * Solution* obj = solutionCreate(w, wSize);\\n * int param_1 = solutionPickIndex(obj);\\n \\n * solutionFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n\\n    public Solution(int[] w) {\\n        \\n    }\\n    \\n    public int PickIndex() {\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * Solution obj = new Solution(w);\\n * int param_1 = obj.PickIndex();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} w\\n */\\nvar Solution = function(w) {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nSolution.prototype.pickIndex = function() {\\n    \\n};\\n\\n/** \\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(w)\\n * var param_1 = obj.pickIndex()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Solution\\n\\n=begin\\n    :type w: Integer[]\\n=end\\n    def initialize(w)\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def pick_index()\\n        \\n    end\\n\\n\\nend\\n\\n# Your Solution object will be instantiated and called as such:\\n# obj = Solution.new(w)\\n# param_1 = obj.pick_index()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass Solution {\\n\\n    init(_ w: [Int]) {\\n        \\n    }\\n    \\n    func pickIndex() -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * let obj = Solution(w)\\n * let ret_1: Int = obj.pickIndex()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Solution struct {\\n    \\n}\\n\\n\\nfunc Constructor(w []int) Solution {\\n    \\n}\\n\\n\\nfunc (this *Solution) PickIndex() int {\\n    \\n}\\n\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * obj := Constructor(w);\\n * param_1 := obj.PickIndex();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Solution(_w: Array[Int]) {\\n\\n    def pickIndex(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(w)\\n * var param_1 = obj.pickIndex()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution(w: IntArray) {\\n\\n    fun pickIndex(): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * var obj = Solution(w)\\n * var param_1 = obj.pickIndex()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct Solution {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Solution {\\n\\n    fn new(w: Vec<i32>) -> Self {\\n        \\n    }\\n    \\n    fn pick_index(&self) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * let obj = Solution::new(w);\\n * let ret_1: i32 = obj.pick_index();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n    /**\\n     * @param Integer[] $w\\n     */\\n    function __construct($w) {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function pickIndex() {\\n        \\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * $obj = Solution($w);\\n * $ret_1 = $obj->pickIndex();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class Solution {\\n    constructor(w: number[]) {\\n\\n    }\\n\\n    pickIndex(): number {\\n\\n    }\\n}\\n\\n/**\\n * Your Solution object will be instantiated and called as such:\\n * var obj = new Solution(w)\\n * var param_1 = obj.pickIndex()\\n */\"}]",
                    "sampleTestCase": "[\"Solution\",\"pickIndex\"]\r\n[[[1]],[]]\r",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"Solution\",\n    \"maxbytesperline\": 200000,\n    \"constructor\": {\n        \"params\": [\n            {\n                \"name\": \"w\",\n                \"type\": \"integer[]\"\n            },\n            {\n                \"name\": \"wSize\",\n                \"type\": \"integer\",\n                \"lang\": \"c\",\n                \"value\": \"size_1\"\n            }\n        ]\n    },\n    \"methods\": [\n        {\n            \"name\" : \"pickIndex\",\n            \"params\": [\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            }\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>You are given an array of positive integers <code>w</code> where <code>w[i]</code> describes the weight of <code>i</code><sup><code>th</code>&nbsp;</sup>index (0-indexed).</p>\n\n<p>We need to call the function&nbsp;<code>pickIndex()</code> which <strong>randomly</strong> returns an integer in the range <code>[0, w.length - 1]</code>.&nbsp;<code>pickIndex()</code>&nbsp;should return the integer&nbsp;proportional to its weight in the <code>w</code> array. For example, for <code>w = [1, 3]</code>, the probability of picking the index <code>0</code> is <code>1 / (1 + 3)&nbsp;= 0.25</code> (i.e 25%)&nbsp;while the probability of picking the index <code>1</code> is <code>3 / (1 + 3)&nbsp;= 0.75</code> (i.e 75%).</p>\n\n<p>More formally, the probability of picking index <code>i</code> is <code>w[i] / sum(w)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;]\n[[[1]],[]]\n<strong>Output</strong>\n[null,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]\n[[[1,3]],[],[],[],[],[]]\n<strong>Output</strong>\n[null,1,1,1,1,0]\n\n<strong>Explanation</strong>\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It&#39;s returning the second element (index = 1) that has probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It&#39;s returning the first element (index = 0) that has probability of 1/4.\n\nSince this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= w.length &lt;= 10000</code></li>\n\t<li><code>1 &lt;= w[i] &lt;= 10^5</code></li>\n\t<li><code>pickIndex</code>&nbsp;will be called at most <code>10000</code> times.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Random Pick with Weight",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\nThis is actually a very practical problem which appears often in the scenario where we need to do **sampling** over a set of data.\n\nNowadays, people talk a lot about machine learning algorithms.\nAs many would reckon, one of the basic operations involved in training a machine learning algorithm (_e.g._ Decision Tree) is to sample a batch of data and feed them into the model, rather than taking the entire data set.\nThere are several rationales behind doing sampling over data, which we will not cover in detail, since it is not the focus of this article.\n\nIf one is interested, one can refer to our Explore card of [Machine Learning 101](https://leetcode.com/explore/learn/card/machine-learning-101/) which gives an overview on the fundamental concepts of machine learning, as well as the Explore card of [Decision Tree](https://leetcode.com/explore/learn/card/decision-tree/) which explains in detail on how to construct a decision tree algorithm.\n\nNow, given the above background, hopefully one is convinced that this is an interesting problem, and it is definitely worth solving.\n\n**Intuition**\n\nGiven a list of positive values, we are asked to _randomly_ pick up a value based on the weight of each value.\nTo put it simple, the task is to do **_sampling with weight_**.\n\nLet us look at a simple example. Given an input list of values `[1, 9]`, when we pick up a number out of it, the chance is that 9 times out of 10 we should pick the number `9` as the answer.\n\n>In other words, the **_probability_** that a number got picked is proportional to the value of the number, with regards to the total sum of all numbers.\n\nTo understand the problem better, let us imagine that there is a line in the space, we then project each number into the line according to its value, _i.e._ a large number would occupy a broader range on the line compared to a small number. For example, the range for the number `9` should be exactly nine times as the range for the number `1`.\n\n![throw a ball](../Figures/528/528_throw_ball.png)\n\nNow, let us throw a ball _**randomly**_ onto the line, then it is safe to say there is a good chance that the ball will fall into the range occupied by the number `9`. In fact, if we repeat this experiment for a large number of times, then _statistically_ speaking, 9 out of 10 times the ball will fall into the range for the number `9`.\n\nVoila. That is the intuition behind this problem.\n\n**Simulation**\n\n>So to solve the problem, we can simply **_simulate_** the aforementioned experiment with a computer program.\n\nFirst of all, let us construct the line in the experiment by **chaining up** all values together.\n\nLet us denote a list of numbers as $$[w_1, w_2, w_3, ..., w_n]$$.\nStarting from the beginning of the line, we then can represent the **offsets** for each range $$K$$ as $$(\\sum_{1}^{K}{w_i}, \\sum_{1}^{K+1}{w_i})$$, as shown in the following graph:\n\n![prefix sum formula](../Figures/528/528_prefix_sum_formula.png)\n\nAs many of you might recognize now, the offsets of the ranges are actually the [prefix sums](https://en.wikipedia.org/wiki/Prefix_sum) from a sequence of numbers. For each number in a sequence, its corresponding prefix sum, also known as **cumulative sum**, is the sum of all previous numbers in the sequence plus the number itself.\n\nAs an observation from the definition of prefix sums, one can see that the list of prefix sums would be _strictly_ monotonically increasing, if all numbers are positive.\n\nTo throw a ball on the line is to find an _offset_ to place the ball.\nLet us call this offset **_target_**.\n\n>Once we randomly generate the target offset, the task is now boiled down to finding the range that this target falls into.\n\nLet us rephrase the problem now, given a list of offsets (_i.e._ prefix sums) and a target offset, our task is to fit the target offset into the list so that the ascending order is maintained.\n\n<br/>\n<br/>\n\n---\n#### Approach 1: Prefix Sums with Linear Search\n\n**Intuition**\n\nIf one comes across this problem during an interview, one can consider the problem almost resolved, once one reduces the original problem down to the problem of inserting an element into a sorted list.\n\nConcerning the above problem, arguably the most intuitive solution would be **_linear search_**. Many of you might have already thought one step ahead, by noticing that the input list is _sorted_, which is a sign to apply a more advanced search algorithm called **_binary search_**.\n\nLet us do one thing at one time. In this approach, we will first focus on the linear search algorithm so that we could work out other implementation details. In the next approach, we will then improve upon this approach with a binary search algorithm.\n\nSo far, there is one little detail that we haven't discussed, which is how to _randomly_ generate a target offset for the ball. By \"randomly\", we should ensure that each point on the line has an equal opportunity to be the target offset for the ball.\n\nIn most of the programming languages, we have some `random()` function that generates a random value between 0 and 1. We can **_scale up_** this randomly-generated value to the entire range of the line, by multiplying it with the size of the range. At the end, we could use this _scaled_ random value as our target offset.  \n\nAs an alternative solution, sometimes one might find a `randomInteger(range)` function that could generate a random integer from a given range.\nOne could then directly use the output of this function as our target offset.\n\nHere, we adopt the `random()` function, since it could also work for the case where the weights are float values.\n\n\n**Algorithm**\n\nWe now should have all the elements at hand for the implementation.\n\n- First of all, before picking an index, we should first set up the playground, by generating a list of prefix sums from a given list of numbers.\nThe best place to do so would be in the constructor of the class, so that we don't have to generate it again and again at the invocation of `pickIndex()` function.\n\n    - In the constructor, we should also keep the total sum of the input numbers, so that later we could use this total sum to scale up the random number.\n\n- For the `pickIndex()` function, here are the steps that we should perform.\n\n    - Firstly, we generate a random number between 0 and 1. We then scale up this number, which will serve as our `target` offset.\n\n    - We then scan through the prefix sums that we generated before by _linear search_, to find the first prefix sum that is larger than our `target` offset.\n\n    - And the index of this prefix sum would be exactly the _right_ place that the target should fall into. We return the index as the result of `pickIndex()` function.\n\n\n<iframe src=\"https://leetcode.com/playground/Y9bEkzoK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Y9bEkzoK\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input list.\n\n- Time Complexity\n\n    - For the constructor function, the time complexity would be $$\\mathcal{O}(N)$$, which is due to the construction of the prefix sums.\n<br/>\n\n    - For the `pickIndex()` function, its time complexity would be $$\\mathcal{O}(N)$$ as well, since we did a linear search on the prefix sums.\n<br/>\n\n- Space Complexity\n\n    - For the constructor function, the space complexity would be $$\\mathcal{O}(N)$$, which is again due to the construction of the prefix sums.\n<br/>\n\n    - For the `pickIndex()` function, its space complexity would be $$\\mathcal{O}(1)$$, since it uses constant memory. Note, here we consider the prefix sums that it operates on, as the input of the function.\n<br/>\n\n\n---\n#### Approach 2: Prefix Sums with Binary Search\n\n**Intuition**\n\nAs we promised before, we could improve the above approach by replacing the linear search with the **binary search**, which then can reduce the time complexity of the `pickIndex()` function from $$\\mathcal{O}(N)$$ to $$\\mathcal{O}(\\log{N})$$.\n\nAs a reminder, the condition to apply binary search on a list is that the list should be _sorted_, either in ascending or descending order.\nFor the list of prefix sums that we search on, this condition is guaranteed, as we discussed before.\n\n\n**Algorithm**\n\nWe could base our implementation largely on the previous approach.\nIn fact, the only place we need to modify is the `pickIndex()` function, where we replace the linear search with the binary search.\n\nAs a reminder, there exist built-in functions of binary search in almost all programming languages.\nIf one comes across this problem during the interview, it might be acceptable to use any of the built-in functions.\n\nOn the other hand, the interviewers might insist on implementing a binary search by hand. It would be good to prepare for this request as well.\n\nThere are several code patterns to implement a binary search algorithm, which we cover in the Explore card of [Binary Search algorithm](https://leetcode.com/explore/learn/card/binary-search/).\nOne can refer to the card for more details.\n\n<iframe src=\"https://leetcode.com/playground/8wphkZw6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"8wphkZw6\"></iframe>\n\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input list.\n\n- Time Complexity\n\n    - For the constructor function, the time complexity would be $$\\mathcal{O}(N)$$, which is due to the construction of the prefix sums.\n<br/>\n\n    - For the `pickIndex()` function, this time its time complexity would be $$\\mathcal{O}(\\log{N})$$, since we did a binary search on the prefix sums.\n<br/>\n\n- Space Complexity\n\n    - For the constructor function, the space complexity remains $$\\mathcal{O}(N)$$, which is again due to the construction of the prefix sums.\n<br/>\n\n    - For the `pickIndex()` function, its space complexity would be $$\\mathcal{O}(1)$$, since it uses constant memory. Note, here we consider the prefix sums that it operates on, as the input of the function.\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "random-pick-with-weight",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.077,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These problems typically require you to sort it in order and apply some kind of linear search or binary search technique."
    },
    {
        "id": "340",
        "title": "Dynamic Programming",
        "slug": "dynamic-programming",
        "items": [
            {
                "id": "2916",
                "title": "Maximum Subarray",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "53",
                    "questionFrontendId": "53",
                    "sessionId": "968792",
                    "questionTitle": "Maximum Subarray",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/maximum-subarray/submit/",
                    "interpretUrl": "/problems/maximum-subarray/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxSubArray(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxSubArray(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxSubArray(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxSubArray(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxSubArray(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxSubArray(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar maxSubArray = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef max_sub_array(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxSubArray(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSubArray(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxSubArray(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxSubArray(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function maxSubArray($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxSubArray(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-sub-array nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_sub_array(Nums :: [integer()]) -> integer().\\nmax_sub_array(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_sub_array(nums :: [integer]) :: integer\\n  def max_sub_array(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[-2,1,-3,4,-1,2,1,-5,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxSubArray\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,-1,7,8]\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Maximum Subarray",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Optimized Brute Force\r\n\r\n**Intuition**\r\n\r\nThis algorithm doesn't reliably run under the time limit here on LeetCode. We'll still look briefly at it though, as in an interview scenario it would be a great start if you're struggling to come up with a better approach.\r\n\r\nCalculate the sum of all subarrays, and keep track of the best one. To actually generate all subarrays would take $$O(N^3)$$ time, but with a little optimization, we can achieve brute force in $$O(N^2)$$ time. The trick is to recognize that all of the subarrays starting at a particular value will share a common prefix.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize a variable `maxSubarray = -infinity` to keep track of the best subarray. We need to use negative infinity, not 0, because it is possible that there are only negative numbers in the array.\r\n\r\n2. Use a `for` loop that considers each index of the array as a starting point.\r\n\r\n3. For each starting point, create a variable `currentSubarray = 0`. Then, loop through the array from the starting index, adding each element to `currentSubarray`. Every time we add an element it represents a possible subarray - so continuously update `maxSubarray` to contain the maximum out of the `currentSubarray` and itself.\r\n\r\n4. Return `maxSubarray`. \r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/YZ2Sq9un/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"YZ2Sq9un\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N^2)$$, where $$N$$ is the length of `nums`.\r\n\r\n    We use 2 nested `for` loops, with each loop iterating through `nums`.\r\n\r\n* Space complexity: $$O(1)$$\r\n\r\n    No matter how big the input is, we are only ever using 2 variables: `ans` and `currentSubarray`. \r\n    \r\n<br/>\r\n\r\n#### Approach 2: Dynamic Programming, Kadane's Algorithm\r\n\r\n**Intuition**\r\n\r\nWhenever you see a question that asks for the maximum or minimum of something, consider Dynamic Programming as a possibility. The difficult part of this problem is figuring out when a negative number is \"worth\" keeping in a subarray. This question in particular is a popular problem that can be solved using an algorithm called [Kadane's Algorithm](https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm). If you're good at problem solving though, it's quite likely you'll be able to come up with the algorithm on your own. This algorithm also has a very greedy-like intuition behind it.\r\n\r\nLet's focus on one important part: where the optimal subarray **begins**. We'll use the following example.\r\n\r\n`nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`\r\n\r\nWe can see that the optimal subarray couldn't possibly involve the first 3 values - the overall sum of those numbers would always *subtract* from the total. Therefore, the subarray either starts at the first `4`, or somewhere further to the right.\r\n\r\nWhat if we had this example though?\r\n\r\n`nums = [-2,1000000000,-3,4,-1,2,1,-5,4]`\r\n \r\nWe need a general way to figure out when a part of the array is **worth** keeping.\r\n\r\nAs expected, any subarray whose sum is *positive* is worth keeping. Let's start with an empty array, and iterate through the input, adding numbers to our array as we go along. Whenever the sum of the array is negative, we know the entire array is not worth keeping, so we'll reset it back to an empty array.\r\n\r\nHowever, we don't actually need to build the subarray, we can just keep an integer variable `current_subarray` and add the values of each element there. When it becomes negative, we reset it to 0 (an empty array).\r\n\r\n!?!../Documents/53_Maximum_Subarray.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\n1. Initialize 2 integer variables. Set both of them equal to the first value in the array.\r\n    - `currentSubarray` will keep the running count of the current subarray we are focusing on.\r\n    - `maxSubarray` will be our final return value. Continuously update it whenever we find a bigger subarray.\r\n\r\n2. Iterate through the array, starting with the 2nd element (as we used the first element to initialize our variables). For each number, add it to the `currentSubarray` we are building. If `currentSubarray` becomes negative, we know it isn't worth keeping, so throw it away. Remember to update `maxSubarray` every time we find a new maximum.\r\n\r\n3. Return `maxSubarray`.\r\n\r\n**Implementation**\r\n\r\nA clever way to update `currentSubarray` is using `currentSubarray = max(num, currentSubarray + num)`. If `currentSubarray` is negative, then `num > currentSubarray + num`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/DTqpuZzF/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"DTqpuZzF\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N)$$, where $$N$$ is the length of `nums`.\r\n\r\n    We iterate through every element of `nums` exactly once.\r\n\r\n* Space complexity: $$O(1)$$\r\n\r\n    No matter how long the input is, we are only ever using 2 variables: `currentSubarray` and `maxSubarray`. \r\n    \r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 3: Divide and Conquer (Advanced)\r\n\r\n**Intuition**\r\n\r\nThis approach is slower than the second approach and uses more space, but it's still a nice and different way to approach the problem. In an interview, sometimes you may be asked for alternative ways to solve a problem - and divide and conquer is an extremely common type of algorithm. This solution will make use of recursion - if you aren't familiar with recursion, check out the [recursion explore card](https://leetcode.com/explore/featured/card/recursion-i/).\r\n\r\nDivide and conquer algorithms involve splitting up the input into smaller chunks until they're small enough to be easily solved, and then combining the solutions to get the final overall solution. If you're unfamiliar with them, check out [this explore card](https://leetcode.com/explore/learn/card/recursion-ii/470/divide-and-conquer/2897/). \r\n\r\nIf we were to split our input in half, then logically the optimal subarray either:\r\n\r\n- Uses elements only from the left side\r\n- Uses elements only from the right side\r\n- Uses a combination of elements from both the left and right side\r\n\r\nThus, the answer is simply the largest of:\r\n\r\n- The maximum subarray contained only in the left side\r\n- The maximum subarray contained only in the right side\r\n- The maximum subarray that can use elements from both sides\r\n\r\nFinding the maximum subarray from the left and right half is straightforward - just recurse using the respective half of the array. So, the hard part is figuring out how to find the best subarray that uses elements from both sides. Lets use a smaller example, `nums = [5, -2, 1, -3, 4, -2, 1]`. Since we want to use elements from both sides, we also must use the middle element, `-3`. Now, we can also take from the left and the right, but every element must be connected to the middle (since we're still forming a subarray). \r\n\r\nThe fact that every element must be connected to the middle actually makes our lives a lot easier - every subarray we consider **must** contain the element immediately beside the center, which means there are only as many subarrays as there are elements. In our example, the right side is `[4, -2, 1]`. There are only 3 subarrays to consider - `[4]`, `[4, -2]`, and `[4, -2, 1]`. To find the best chain of elements we can take from a half, iterate from the middle to the end (start of the array for the left half) and continuously update some counter `curr`.\r\n\r\n!?!../Documents/53_Maximum_Subarray_2.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\nNow that we know how to find the best subarray containing elements from both sides of any given array, the algorithm is as follows:\r\n\r\n1. Define a helper function that we will use for recursion.\r\n    - This function will take an input `left` and `right`, which defines the bounds of the array. The return value of this function will be the best possible subarray for the array that fits between `left` and `right`.\r\n    - If `left > right`, we have an empty array. Return negative infinity.\r\n    - Find the midpoint of our array. This is `(left + right) / 2`, rounded down. Using this midpoint, find the best possible subarray that uses elements from both sides of the array with the algorithm detailed in the animation above.\r\n    - The best subarray using elements from both sides is only 1 of 3 possibilities. We still need to find the best subarray using only the left or right halves. So, call this function again, once with the left half, and once with the right half.\r\n    - Return the largest of the 3 values - the best left half sum, the best right half sum, and the best combined sum.\r\n\r\n2. Call our helper function with the entire input array (`left = 0`, `right = length - 1`). This is our final answer, so return it.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/RoGrNEAu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RoGrNEAu\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N \\cdot \\log N)$$, where $$N$$ is the length of `nums`.\r\n    \r\n    On our first call to `findBestSubarray`, we use for loops to visit every element of `nums`. Then, we split the array in half and call `findBestSubarray` with each half. Both those calls will then iterate through every element in that half, which combined is every element of `nums` again. Then, both those halves will be split in half, and 4 more calls to `findBestSubarray` will happen, each with a quarter of `nums`. As you can see, every time the array is split, we still need to handle every element of the original input `nums`. We have to do this $$\\log N$$ times since that's how many times an array can be split in half.\r\n\r\n* Space complexity: $$O(\\log N)$$, where $$N$$ is the length of `nums`.\r\n    \r\n    The extra space we use relative to input size is solely occupied by the recursion stack. Each time the array gets split in half, another call of `findBestSubarray` will be added to the recursion stack, until calls start to get resolved by the base case - remember, the base case happens at an empty array, which occurs after $$\\log N$$ calls.\r\n\r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "maximum-subarray",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.538,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1973",
                "title": "Edit Distance",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "72",
                    "questionFrontendId": "72",
                    "sessionId": "968792",
                    "questionTitle": "Edit Distance",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/edit-distance/submit/",
                    "interpretUrl": "/problems/edit-distance/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int minDistance(string word1, string word2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int minDistance(String word1, String word2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minDistance(self, word1, word2):\\n        \\\"\\\"\\\"\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minDistance(self, word1: str, word2: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint minDistance(char * word1, char * word2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MinDistance(string word1, string word2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} word1\\n * @param {string} word2\\n * @return {number}\\n */\\nvar minDistance = function(word1, word2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} word1\\n# @param {String} word2\\n# @return {Integer}\\ndef min_distance(word1, word2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minDistance(_ word1: String, _ word2: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minDistance(word1 string, word2 string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minDistance(word1: String, word2: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minDistance(word1: String, word2: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_distance(word1: String, word2: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $word1\\n     * @param String $word2\\n     * @return Integer\\n     */\\n    function minDistance($word1, $word2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minDistance(word1: string, word2: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-distance word1 word2)\\n  (-> string? string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_distance(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\\nmin_distance(Word1, Word2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_distance(word1 :: String.t, word2 :: String.t) :: integer\\n  def min_distance(word1, word2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"horse\"\n\"ros\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"minDistance\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"word1\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"word2\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p>\n\n<p>You have the following three operations permitted on a word:</p>\n\n<ul>\n\t<li>Insert a character</li>\n\t<li>Delete a character</li>\n\t<li>Replace a character</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nhorse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)\nrorse -&gt; rose (remove &#39;r&#39;)\nrose -&gt; ros (remove &#39;e&#39;)\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> \nintention -&gt; inention (remove &#39;t&#39;)\ninention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)\nenention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)\nexention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)\nexection -&gt; execution (insert &#39;u&#39;)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li>\n\t<li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Edit Distance",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Intuition\n\nThe edit distance algorithm is very popular among \nthe data scientists. It's one of the basic algorithms\nused for evaluation of machine translation and speech \nrecognition. \n\nThe naive approach would be to check for all possible edit \nsequences and choose the shortest one in-between.\nThat would result in an exponential complexity and it's an overkill\nsince we actually don't need to have all possible edit sequences \nbut just the shortest one. \n<br />\n<br />\n\n\n---\n#### Approach 1: Dynamic Programming\n\nThe idea would be to reduce the problem to simple ones.\nFor example, there are two words, `horse` and `ros` and we want to compute\nan edit distance `D` for them. One could notice that it seems to be\nmore simple for short words and so it would be logical to relate\nan edit distance `D[n][m]` with the lengths `n` and `m` of input words.\n\nLet's go further and introduce an edit distance `D[i][j]` which is\nan edit distance between the first `i` characters of `word1` and \nthe first `j` characters of `word2`.\n\n![edit_distance](../Figures/72/72_edit.png)\n\nIt turns out that one could compute `D[i][j]`, knowing \n`D[i - 1][j]`, `D[i][j - 1]` and `D[i - 1][j - 1]`.\n\n> There is just one more character to add into one or both strings \nand the formula is quite obvious.\n\nIf the last character is the same, *i.e.* `word1[i] = word2[j]` then\n\n$$\nD[i][j] = 1 + \\min(D[i - 1][j], D[i][j - 1], D[i - 1][j - 1] - 1)\n$$\n\nand if not, *i.e.* `word1[i] != word2[j]` we have to\ntake into account the replacement of the last character \nduring the conversion.\n\n$$\nD[i][j] = 1 + \\min(D[i - 1][j], D[i][j - 1], D[i - 1][j - 1])\n$$\n\nSo each step of the computation would be done based on the previous computation,\nas follows: \n\n![compute](../Figures/72/72_compute.png)\n\nThe obvious base case is an edit distance between the empty string and \nnon-empty string that means `D[i][0] = i` and `D[0][j] = j`.\n\nNow we have everything to actually proceed to the computations \n\n<!--![LIS](../Figures/72/72_tr.gif)-->\n!?!../Documents/72_LIS.json:1000,513!?!\n\n<iframe src=\"https://leetcode.com/playground/YihzPbdt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"YihzPbdt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(m n)$$ as \nit follows quite straightforward for the inserted loops. \n* Space complexity : $$\\mathcal{O}(m n)$$ since at each step we\nkeep the results of all previous computations.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "edit-distance",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.767,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1974",
                "title": "Maximum Product Subarray",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "152",
                    "questionFrontendId": "152",
                    "sessionId": "968792",
                    "questionTitle": "Maximum Product Subarray",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/maximum-product-subarray/submit/",
                    "interpretUrl": "/problems/maximum-product-subarray/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxProduct(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxProduct(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxProduct(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxProduct(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxProduct(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxProduct(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar maxProduct = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef max_product(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxProduct(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProduct(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxProduct(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxProduct(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_product(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function maxProduct($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxProduct(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-product nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_product(Nums :: [integer()]) -> integer().\\nmax_product(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_product(nums :: [integer]) :: integer\\n  def max_product(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,3,-2,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxProduct\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, find a contiguous non-empty subarray within the array that has the largest product, and return <em>the product</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [2,3] has the largest product 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Maximum Product Subarray",
                        "content": "[TOC]\n\n## Solution\n\nIt is advisable to approach [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/) problem first before approaching this problem. The intuition acquired from that problem will help a lot with this problem.\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nThe most naive way to tackle this problem is to go through each element in `nums`, and for each element, consider the product of every a contiguous subarray starting from that element. This will result in a cubic runtime. \n\n    for i in [0...nums-1]: \n        for j in [i..nums-1]: \n            accumulator = 1\n            for k in [i..j]:\n                accumulator = accumulator * nums[k]\n            result = max(result, accumulator)\n\nWe can improve the runtime from cubic to quadratic by removing the innermost `for` loop in the above pseudo code. Rather than calculating the product of every contiguous subarray over and over again, for each element in `nums` (the outermost `for` loop), we accumulate the products of contiguous subarrays starting from that element to subsequent elements as we go through them (the second `for` loop). By doing so, we only need to multiply the current number with accumulated product to get the product of numbers up to the current number.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/TxvynHcJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"TxvynHcJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N^2)$$ where $$N$$ is the size of `nums`. Since we are checking every possible contiguous subarray following every element in `nums` we have quadratic runtime.\n\n* Space complexity : $$O(1)$$ since we are not consuming additional space other than two variables: `result` to hold the final result and `accu` to accumulate product of preceding contiguous subarrays.\n\n---\n\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nRather than looking for every possible subarray to get the largest product, we can scan the array and solve smaller subproblems.\n\nLet's see this problem as a problem of getting the highest combo chain. The way combo chains work is that they build on top of the previous combo chains that you have acquired. The simplest case is when the numbers in `nums` are all positive numbers. In that case, you would only need to keep on multiplying the accumulated result to get a bigger and bigger combo chain as you progress.\n\nHowever, two things can disrupt your combo chain:\n\n- Zeros\n- Negative numbers\n\n**Zeros** will reset your combo chain. A high score which you have achieved will be recorded in placeholder `result`. You will have to *restart* your combo chain after zero. If you encounter another combo chain which is higher than the recorded high score in `result`, you just need to update the `result`.\n\n**Negative numbers** are a little bit tricky. A single negative number can flip the largest combo chain to a very small number. This may sound like your combo chain has been completely disrupted but if you encounter another negative number, your combo chain can be saved. Unlike zero, you still have a hope of saving your combo chain as long as you have another negative number in `nums` (Think of this second negative number as an antidote for the poison that you just consumed). However, if you encounter a zero while you are looking your another negative number to save your combo chain, you lose the hope of saving that combo chain.\n\nWhile going through numbers in `nums`, we will have to keep track of the maximum product up to that number (we will call `max_so_far`) and minimum product up to that number (we will call `min_so_far`). The reason behind keeping track of `max_so_far` is to keep track of the accumulated product of positive numbers. The reason behind keeping track of `min_so_far` is to properly handle negative numbers.\n\n`max_so_far` is updated by taking the **maximum** value among:\n    \n1. Current number.\n    * This value will be picked if the accumulated product has been really bad (even compared to the current number). This can happen when the current number has a preceding zero (e.g. `[0,4]`) or is preceded by a single negative number (e.g. `[-3,5]`).\n2. Product of last `max_so_far` and current number.\n    * This value will be picked if the accumulated product has been steadily increasing (all positive numbers).\n3. Product of last `min_so_far` and current number.\n    * This value will be picked if the current number is a negative number and the combo chain has been disrupted by a single negative number before (In a sense, this value is like an antidote to an already poisoned combo chain).\n\n`min_so_far` is updated in using the same three numbers except that we are taking **minimum**  among the above three numbers.\n\nIn the animation below, you will observe a negative number `-5` disrupting a combo chain but that combo chain is later saved by another negative number `-4`. The only reason this can be saved is because of `min_so_far`. You will also observe a zero disrupting a combo chain. \n\n!?!../Documents/152_maximum_product_subarray.json:1200,600!?!\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/gQYpEw94/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"gQYpEw94\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N)$$ where $$N$$ is the size of `nums`. The algorithm achieves linear runtime since we are going through `nums` only once. \n\n* Space complexity : $$O(1)$$ since no additional space is consumed rather than variables which keep track of the maximum product so far, the minimum product so far, current variable, temp variable, and placeholder variable for the result.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "maximum-product-subarray",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.887,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2917",
                "title": "Paint House",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "256",
                    "questionFrontendId": "256",
                    "sessionId": "968792",
                    "questionTitle": "Paint House",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/paint-house/submit/",
                    "interpretUrl": "/problems/paint-house/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int minCost(vector<vector<int>>& costs) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int minCost(int[][] costs) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minCost(self, costs):\\n        \\\"\\\"\\\"\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minCost(self, costs: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint minCost(int** costs, int costsSize, int* costsColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MinCost(int[][] costs) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} costs\\n * @return {number}\\n */\\nvar minCost = function(costs) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} costs\\n# @return {Integer}\\ndef min_cost(costs)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minCost(_ costs: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minCost(costs [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minCost(costs: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minCost(costs: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_cost(costs: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $costs\\n     * @return Integer\\n     */\\n    function minCost($costs) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minCost(costs: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-cost costs)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_cost(Costs :: [[integer()]]) -> integer().\\nmin_cost(Costs) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_cost(costs :: [[integer]]) :: integer\\n  def min_cost(costs) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[17,2,17],[16,16,5],[14,3,19]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"minCost\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"costs\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is a row of <code>n</code> houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n\n<p>The cost of painting each house with a certain color is represented by an <code>n x 3</code> cost matrix <code>costs</code>.</p>\n\n<ul>\n\t<li>For example, <code>costs[0][0]</code> is the cost of painting house <code>0</code> with the color red; <code>costs[1][2]</code> is the cost of painting house 1 with color green, and so on...</li>\n</ul>\n\n<p>Return <em>the minimum cost to paint all houses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[17,2,17],[16,16,5],[14,3,19]]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.\nMinimum cost: 2 + 5 + 3 = 10.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[7,6,2]]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>costs.length == n</code></li>\n\t<li><code>costs[i].length == 3</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= costs[i][j] &lt;= 20</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Paint House",
                        "content": "[TOC]\n\n## Solution\n\nFor those already familiar with memoization and dynamic programming, this question will be easy. For those who are very new to Leetcoding, it might seem like a medium, or even a hard. ***For those who are starting to learn about memoization and dynamic programming, this question is a great one for getting started***!\n\nThis article is aimed at those of you getting started with dynamic programming and memoization. I\u2019ll assume you have already worked through prerequisite concepts such as n-ary trees (or binary trees), including with recursion. If you haven\u2019t, then I strongly recommend that you come back to this question after working through either the [N-ary Trees module](https://leetcode.com/explore/learn/card/n-ary-tree/) or the [Binary Trees module](https://leetcode.com/explore/learn/card/data-structure-tree/). The intuition behind memoization and dynamic programming is best understood using trees, so that is what I\u2019ve done in this article. Understanding how to recognize and then approach memoization and dynamic programming problems is essential for interview success.\n\n<br />\n\n---\n\n#### Approach 1: Brute force\n\n**Intuition**\n\nThe brute force approach is often a good place to start. From there, we can identify unnecessary work and further optimize. In this case, the brute force algorithm would be to generate every valid permutation of house colors (or all permutations and then remove all the invalid ones, e.g. ones that have 2 red houses side-by-side) and score them. Then, the lowest score is the value we need to return.\n\nFor this article, we'll use the following input. It is for 4 houses.\n\n```\n[[17, 2, 17], [8, 4, 10], [6, 3, 19], [4, 8, 12]]\n```\n\n![The input grid.](../Figures/256/input_grid.png)\n\nThese are all the valid sequences you can get with 4 houses. In total, there are 24 of them. The one with the lowest total cost is highlighted.\n\n![All the possible sequences and their costs.](../Figures/256/brute_force.png)\n\nThe best option is to paint the first house green, second house red, third house green, and fourth house red. This will cost a total of `17`.\n\n**Algorithm**\n\nIt's not worth worrying about how you'd implement the brute force solution\u2014it's completely infeasible and useless in practice. Additionally, the latter approaches move in a different direction, and the permutation code actually takes some effort to understand (which would be a distraction for you). Therefore, I haven't included code for it. You wouldn't be writing code for it in an interview either, instead you'd simply describe a possible approach and move onto optimizing, and then write code for a more optimal algorithm.\n\nThere are many different approaches to it. All are based on permutation generation, but some only generate permutations that follow the color rules, and others generate all permutations and then remove the non-valid ones afterwards. Some are recursive, and others are iterative. Some use $$O(n)$$ space by only generating one permutation at a time and then processing it before generating the next, and others use a lot more (discussed below) from generating all the sequences first and then processing them.\n\nThe simplest is probably to generate every possible length-n string of `0`, `1`, and `2`, remove any that have the same digit twice in a row, and then score those that are left, keeping track of the smallest cost seen so far.\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^n)$$ or $$O(3^n)$$.\n\n    Without writing code, we can get a good idea of the cost. We know that at the very least, we'd have to process every valid permutation. The number of valid permutations doubles with every house added. With `4` houses, there were `24` permutations. If we add another house, then all of our permutations for 4 houses could be extended with 2 different colors for the 5th house, giving `48` permutations. Because it doubles every time, this is $$O(n^2)$$.\n\n    It'd be even worse if we generated all permutations of `0`, `1`, and `2` and then pruned out the invalid ones. There are $$O(n^3)$$ such permutations in total.\n\n* Space complexity : Anywhere from $$O(n)$$ to $$O(n \\cdot 3^n)$$.\n\n    This would depend entirely on the implementation. If you generated all the permutations at the same time and put them in a massive list, then you'd be using $$O(n * 2^n)$$ or $$O(n * 3^n)$$ space. If you generated one, processed it, generated the next, processed it, etc, without keeping the long list, it'd require $$O(n)$$ space.\n\n<br />\n\n---\n\n#### Approach 2: Brute force with a Recursive Tree\n\n**Intuition**\n\nLike the first approach, this approach still isn't good enough. However, it bridges the gap between approach 1 and approach 3, with approach 3 further building on it. So make sure you understand it well.\n\nWhen we have permutations, we can think of them as forming a big tree of all the options. Drawing out the tree (or part of it) can give useful insights and reveal other possible algorithms. We'll continue using the sample example that we did above:\n\n![The input grid.](../Figures/256/input_grid.png)\n\nAnd here is how we can represent it using a tree. Each path from root to leaf represents a different possible permutation of house colors. There are 24 leaf nodes on the tree, just like there was 24 permutations identified in the brute force approach.\n\n![A tree showing all the valid permutations.](../Figures/256/permutation_tree.png)\n\nThe tree representation gives a useful model of the problem and all the possible permutations. It shows that, for example, if we paint the first house red, then we have 2 options for the second house: green or blue. And then if we choose green for the second house, we could choose red or blue for the 3rd house. And so forth.\n\nWithout worrying yet about how we would actually implement it, we'll now explore a straightforward algorithm that can be used to solve the problem using this tree.\n\nIf the first 3 houses were red, green, and red then we could paint the 4th house green or blue. Which would we want to choose?\n\n![Should we pick the green house or the blue house?](../Figures/256/tree_intro_example.png)\n\nTo minimize cost, we'd choose green. This is because green is `8`, and blue is `12`. *Under the assumption that we'd already decided that the first 3 houses would be red, green, and red*, this decision is definitely optimal. We know that there's no way we could do better.\n\nWhat we were effectively doing was deciding which was cheaper out of 2 permutations: `red, green, red, green` or `red, green, red, blue`. Because the former is cheaper, we have completely ruled out the latter. We can simplify our tree with this new information by adding the cost of the 4th house to the cost of the 3rd house on that branch.\n\n![Updating the tree.](../Figures/256/tree_intro_example_2.png)\n\nWe can repeatedly remove leaf nodes following this same process, as shown in this animation.\n\n!?!../Documents/256_brute_force_tree.json:960,540!?!\n\nWe are left with the conclusion that:\n\n- Painting the first house red would have a *total* cost of `34`.\n- Painting the first house green would have a *total* cost of `17`.\n- Painting the first house blue would have a *total* cost of `32`.\n\nSo, it makes sense to paint the first house green. This gives a total cost of `17`, which was the same answer our brute force in approach 1 arrived at.\n\n**Algorithm**\n\nTo actually implement it, we'll need to change the way we think about it. What we did here was a *bottom-up* algorithm, meaning that we started by processing leaf nodes and then worked our way up. When we implement algorithms like this though, we almost always do it *top-down*. This allows us to use an *implicit tree* with recursion, instead of actually making a tree (i.e. having to work with `TreeNode`'s'). The recursive calls all form a tree structure. If you're not too familiar with this idea yet, don't panic, there is an animation of the algorithm and the code in the next section. The best way to get your head around recursion is to look at examples and recognise common patterns.\n\nLet's get started. Remember how we determined the cost of painting each house in the tree?\n\n![The cost of painting the first house red is the cost of that paint + the minimum out of painting the second house green or painting it blue.](../Figures/256/intro_to_recursive_algorithm.png)\n\nBy *total cost*, we mean the cost of painting that house a particular color *and* painting the ones after it optimally.\n\nIn pseudocode the top-down recursive algorithm looks like this:\n\n```text\nprint min(paint(0, 0), paint(0, 1), paint(0, 2))\n\ndefine function paint(n, color):\n  total_cost = costs[n][color]\n  if n is the last house number:\n    pass [go straight to the return]\n  else if color is red (0):\n    total_cost += min(paint(n+1, 1), paint(n+1, 2))\n  else if color is green (1):\n    total_cost += min(paint(n+1, 0), paint(n+1, 2))\n  else if color is blue (2):\n    total_cost += min(paint(n+1, 0), paint(n+1, 1))\n  return the total_cost    \n```\n\nHere is an animation/ walkthrough of the algorithm. It also shows how the recursive calls make the same structure as the tree we were playing around with before, without actually building a tree. While this algorithm might be a bit to get your head around if you're not too familiar with recursion, doing so is essential to understanding approach 3.\n\n!?!../Documents/256_recursive_demonstration.json:960,540!?!\n\nAnd here is the code. While you're reading over it, have an initial think about how you could optimize it so that it no longer takes exponential time. Hint: look closely at the parameters of the recursive function. Are we actually repeating the same thing over and over? Fixing this problem will be what we tackle in Approach 3.\n\n<iframe src=\"https://leetcode.com/playground/VU64CeM9/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"VU64CeM9\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^n)$$.\n\n    While this approach is an improvement on the previous approach, it still requires exponential time. Think about the number of leaf nodes. Each permutation has its own leaf node. The number of internal nodes is the same as the number of leaf nodes too. Remember how there are $$2^n$$ different permutations? Each effectively adds `2` nodes to the tree, so dropping the constant of `2` gives us $$O(2^n)$$.\n\n    This is better than the previous approach, which had an additional factor of `n`, giving $$O(n \\cdot 2 ^ n)$$. That extra factor of `n` has disappeared here because the permutations are now \"sharing\" their similar parts, unlike before. The idea of \"sharing\" similar parts can be taken much further for this particular problem, as we will see with the remaining approaches that knock the time complexity all the way down to $$O(n)$$.\n\n* Space complexity : $$O(n)$$.\n\n    This algorithm might initially appear to be $$O(1)$$, because we are not allocating any new data structures. However, we need to take into account space usage on the **run-time stack**. The run-time stack was shown in the animation. Whenever we are processing the last house (house number `n - 1`), there are `n` stack frames on the stack. This space usages counts for complexity analysis (it's memory usage, like any other memory usage) and so the space complexity is $$O(n)$$.\n\n<br />\n\n---\n\n#### Approach 3: Memoization\n\n**Intuition**\n\nYou may have noticed a very important pattern while we were working on the previous approach. Let's take a closer look.\n\nThis is the tree before we removed any layers.\n\n![The tree with one layer collapsed.](../Figures/256/permutation_tree.png)\n\nLook at the leaf nodes. All the red houses cost `4`, the green houses `7`, and the blue houses `23`. This makes sense, as the original input told us the costs of painting the `4th` house red, green, or blue were `4`, `7`, and `23` respectively.\n\nBut look at what happens when we remove those leaf nodes in the way we described in the previous section.\n\n![The tree with one layer collapsed.](../Figures/256/1_layer_removed.png)\n\nAgain, all the red houses are the same at `14`, the green houses are `7`, and the blue houses are `23`. Why has this happened? Well, we were always adding the cheapest of the 2 children to the parent, before deleting the 2 children. Painting the 3rd house itself red *always* costs `6`. And then we can *always* choose between painting the 4th house green or blue. It only ever made sense to choose green, as that was `8` (compared to `12` to paint it blue) Therefore, all those branches became `6 + 8 = 14`. Similar arguments apply to painting the 3rd house blue or green.\n\nAnd here's the tree when we'd removed another layer again.\n\n![The tree with two layers collapsed.](../Figures/256/2_layers_removed.png)\n\nUnsurprisingly, the pattern still continues.\n\nThis pattern is important, because it shows us that we're actually doing the same few calculations over and over again. Instead of repeatedly doing the same (expensive) calculations, we should instead save and re-use results where possible.\n\nFor example, imagine if in school you'd been given this math homework (and were *not* allowed to use a calculator). How would you approach it?\n\n```\n1) 345 * 282 = ?\n2) 43 + (345 * 282) = ?\n3) (345 * 282) + 89 = ?\n4) (345 * 282) * 5 + 19 = ?\n```\n\nUnless you really, really love arithmetic, I think you would have done the working for `345 * 282` just *once* and then inserted it into all the other equations. You probably wouldn't have done the long multiplication 4 separate times for it!\n\nAnd it's the same for calculating the costs for painting these houses. We only need to calculate the cost of painting the 2nd house red *once*.\n\nSo to do this, we'll use **memoization**. Immediately before returning a value we've finished computing, we'll write it into a dictionary with the input values as the key and the return value as the result. Then at the start of the function, we'll first check if the answer is already in the dictionary. If it is, we can immediately return it. If not, then we need to continue like before and compute it.\n\n**Algorithm**\n\nThe algorithm is almost the same as before. The only difference is that we create an empty dictionary at the start, write the return values into it, and check it first to see if we've already found the answer for a particular set of input parameters.\n\n```text\nprint min(paint(0, 0), paint(0, 1), paint(0, 2))\n\nmemo = a new, empty dictionary\n\ndefine function paint(n, color):\n  if (n, color) is a key in memo:\n     return memo[(n, color)]\n  total_cost = costs[n][color]\n  if n is the last house number:\n    pass [go straight to return]\n  else if color is red (0):\n    total_cost += min(paint(n+1, 1), paint(n+1, 2))\n  else if color is green (1):\n    total_cost += min(paint(n+1, 0), paint(n+1, 2))\n  else if color is blue (2):\n    total_cost += min(paint(n+1, 0), paint(n+1, 1))\n  memo[(n, color)] = total_cost\n  return the total_cost    \n```\n\nRemember how the previous approach made a recursive function call for every node in the tree we drew? Well this approach only needs to do the calculations shown. The brighter circles represent where it needed to actually calculate the answer and the dull circles show where an answer was looked up in the dictionary.\n\n![A visualization showing what recursive calls the memoization approach actually makes.](../Figures/256/visualisation_memo.png)\n\n<iframe src=\"https://leetcode.com/playground/dauXcjJi/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dauXcjJi\"></iframe>\n\nIn Python, we can use the `lru_cache` decorator from the `functools` package.  If you're not familar with this, you can find it [In the python documentation](https://docs.python.org/3/library/functools.html#functools.lru_cache). It's very useful!\n\nHere's the code using it.\n\n<iframe src=\"https://leetcode.com/playground/R4RcF2Ma/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"R4RcF2Ma\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$.\n\n    Analyzing memoization algorithms can be tricky at first, and requires understanding how recursion impacts the cost differently to loops. The key thing to notice is that the full function runs once for each possible set of parameters. There are `3 * n` different possible sets of parameters, because there are `n` houses and `3` colors. Because the function body is $$O(1)$$ (it's simply a conditional), this gives us a total of `3 * n`. There can't be more than `3 * 2 * n` searches into the memoization dictionary either. The tree showed this clearly\u2014the nodes representing lookups had to be the child of a call where a full calculation was done. Because the constants are all dropped, this leaves $$O(n)$$.\n\n* Space complexity : $$O(n)$$.\n\n    Like the previous approach, the main space usage is on the stack. When we go down the first branch of function calls (see the tree visualization), we won't find any results in the dictionary. Therefore, every house will make a stack frame. Because there are `n` houses, this gives a worst case space usage of $$O(n)$$. Note that this could be a problem in languages such as Python, where stack frames are large.\n\n<br />\n\n---\n\n#### Approach 4: Dynamic Programming\n\n**Intuition**\n\nIn approach 2, we started with, although didn't actually implement, a bottom up algorithm. The reason we didn't implement it is because we would have had to generate an actual tree which would have been a lot of work, and unnecessary for what we were trying to accomplish. However, there is another way of writing an iterative bottom-up algorithm to solve this problem. It utilizes the same pattern that we identified in approach 3.\n\nAs a starting point, what would the tree look like if we converted it into a directed graph without the repetition? In other words, if we made it so that the 2nd house being blue was pointed to by both the 1st house being green and the 1st house being red? Well, it'd look something like this.\n\n![How the tree would look if collapsed.](../Figures/256/dp_collapsed_tree.png)\n\nDirectly generating this graph (i.e. not generating the massive tree first) and then using the same algorithm from approach 2 would achieve comparable time complexity to approach 3. But there's a far simpler way that doesn't even require generating the graph: dynamic programming! Dynamic programming is iterative, unlike memoization, which is recursive.\n\nWe'll define a subproblem to be calculating the total cost for a particular house position and color.\n\nFor the 4-house example, the memoization approach needed to solve a total of 12 different subproblems. We know this, because there were 3 possible values for the color (0, 1, 2), and 4 possible values for the house number (0, 1, 2, 3). In total, this gave us 12 different possibilities. The dynamic programming approach will need to solve these same subproblems, except in an iterative manner.\n\n![A grid of all the subproblems.](../Figures/256/dp_func_call_grid.png)\n\nNow, remember the size of the input array? It's the same! Also, notice how it maps onto the tree. Again, it's the same.\n\n![The input array.](../Figures/256/dp_in_grid.png)\n\nWe can, therefore, calculate the cost of each subproblem, starting from the ones with the highest house numbers, and write the results directly into the input array. In effect, we will replace each single-house cost value in the array with the cost of painting the house that color and the minimum cost to paint all the houses after it. This is almost the same as what we did on the tree. The only difference is that we are only doing each calculation once and we are writing results directly into the input table. It is bottom up, because we are solving the \"lower\" problems first, and then the \"higher\" ones once we've solved all the lower ones that they depend on.\n\nFirst thing to realize is that we don't need to do anything to the last row. Like in the tree, these costs are the total costs because there are no further houses after them.\n\n![We don't need to do anything to the last row.](../Figures/256/dp_last_already_done.png)\n\nNow, what about the second-to-last row? Well, we know that if we painted that house red, that it'd cost itself and the cheapest out of blue and green from the next row, which is 8. So the total cost there would be 14, and we can put that into the cell.\n\n![The calculation for painting the second-to-last house red.](../Figures/256/dp_calc_example.png)\n\nJust like we did with the tree, we can work our way up through the grid, repeatedly applying the same algorithm to determine the total value for each cell. Once we have updated all the cells, we then simply need to take the minimum value from the first row and return it. Here is an animation showing the process.\n\n!?!../Documents/256_dp_animation.json:960,540!?!\n\n**Algorithm**\n\nThe algorithm is straightforward. We iterate backwards over all the rows in the grid (starting from the second-to-last) and calculate a total cost for each cell in the way shown in the animation.\n\n<iframe src=\"https://leetcode.com/playground/ZRJ79YEg/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"ZRJ79YEg\"></iframe>\n\nYou could also avoid the hardcoding of the colors and instead iterate over the colors. This approach will be covered in the solution article for the follow up question where there are `m` colors instead of just 3.\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n\n    Finding the minimum of two values and adding it to another value is an $$O(1)$$ operation. We are doing these $$O(1)$$ operations for $$3 \\cdot (n - 1)$$ cells in the grid. Expanding that out, we get $$3 \\cdot n - 3$$. The constants don't matter in big-oh notation, so we drop them, leaving us with $$O(n)$$.\n\n    *A word of warning:* This would *not* be correct if there were $$m$$ colors. For this particular problem we were told there's only $$3$$ colors. However, a logical follow-up question would be to make the code work for any number of colors. In that case, the time complexity would actually be $$O(n \\cdot m)$$, because $$m$$ is not a constant, whereas $$3$$ is. If this confused you, I'd recommend reading up on big-oh notation.\n\n- Space Complexity : $$O(1)$$\n\n    We don't allocate any new data structures, and are only using a few local variables. All the work is done directly into the input array. Therefore, the algorithm is in-place, requiring constant extra space.\n\n<br />\n\n---\n\n#### Approach 5: Dynamic Programming with Optimized Space Complexity\n\n**Intuition**\n\nOverwriting the input array isn't always desirable. What if, for example, other functions also needed to use that same array?\n\nWe could allocate our own array and then continue in the same way as approach 4. This would bring our space complexity up to $$O(n)$$ (for the same reason the time complexity is $$O(n)$$, the constants are dropped in big-oh notation).\n\nUsing $$O(n)$$ space isn't necessary though\u2014we can further optimize the space complexity. Remember how the dynamic programming animation blanked out rows to show we'd no longer be looking at them? We only needed to look at the previous row, and the row we're currently working on. The rest could have been thrown away. So to avoid overwriting the input, we keep track of the previous row and the current row as length-3 arrays.\n\nThis space-optimization technique applies to many dynamic programming problems. As a general rule, I'd recommend first trying to come up with an algorithm that has optimal time complexity, and then looking at if you can trim down the space complexity.\n\n**Algorithm**\n\nIt's up to you whether you do this using length-3 arrays or variables. Arrays are better in terms of writing clean code though. They will also be easier to adapt if you were asked to make the algorithm work with $$m$$ colors. I have chosen to use arrays here as keeping track of 6 seperate variables is too messy.\n\nThe `previous_row` starts as being the last row of the input array. The `current_row` is the row `n` is currently up to (starts as the second to last row). At each step we update the values in `current_row` by adding values from `previous_row`. We then set `previous_row` to be `current_row` and go on to the next value of `n` where we repeat the process. At the end, the first row will be sitting in the `previous_row` variable, so we find the minimum like we did before.\n\nNote that we have to be careful about not overwriting the `costs` array inadvertently. Any rows we take out of the array that will be *written* into will need to be copies. This can be done using `clone` in Java (suitable for an array of primitive types such as integers) and `copy.deepcopy` in Python.\n\n<iframe src=\"https://leetcode.com/playground/cWcDRbHr/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"cWcDRbHr\"></iframe>\n\n\nThanks so much to [@bitbleach](https://leetcode.com/bitbleach) for pointing out that the original code I had here was over writing the input array! Because this is such an easy mistake to make, I've kept the original code for reference.\n\n<iframe src=\"https://leetcode.com/playground/Szimf8N3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Szimf8N3\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n\n    Same as previous approach.\n\n- Space Complexity : $$O(1)$$\n\n    We're \"remembering\" up to $$6$$ calculations at a time (using 2 x length-3 arrays). Because this is actually a constant, the space complexity is still $$O(1)$$.\n\n    Like the time complexity though, this analysis is dependent on there being a constant number of colors (i.e. 3). If the problem was changed to be $$m$$ colors, then the space complexity would become $$O(m)$$ as we'd need to keep track of a couple of length-m arrays.\n\n<br />\n\n---\n\n#### Justifying why this is a Dynamic Programming Problem\n\nMany dynamic programming problems have very straightforward solutions. As you get more experience with them, you'll gain a better intuition for when a problem might be solvable with dynamic programming, and you'll also get better at quickly identifying the overlapping subproblems (e.g. that painting the 3rd house green will have the same total cost regardless of whether the 2nd house was blue or red). Thinking about the tree structure can help too for identifying those subproblems, although you won't always need to draw it out fully like we did here.\n\nRemember that a **subproblem** is any call to the recursive function. Subproblems are solved either as a base case (in this case a simple lookup from the table and no further calculations) or by looking at the solutions of a bunch of lower down subproblems. In dynamic programming lingo, we say that this problem has an **optimal substructure**. This means that the optimal cost for each **subproblem** is constructed from the **optimal cost** of **subproblems** below it. This is the same property that must be true for greedy algorithms to work.\n\nIf, for example, we hadn't been able to choose the minimum and know it was optimal (perhaps because it would impact a choice further up the tree) then there would *not* have been **optimal substructure**.\n\nIn addition this problem also had **overlapping subproblems**. This just means that the lower subproblems were often shared (remember how the tree had lots of branches that looked the same?)\n\nProblems that have **optimal substructure** can be solved with greedy algorithms. If they *also* have **overlapping subproblems**, then they can be solved with dynamic programming algorithms.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "paint-house",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.962,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1975",
                "title": "Paint House II",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "265",
                    "questionFrontendId": "265",
                    "sessionId": "968792",
                    "questionTitle": "Paint House II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/paint-house-ii/submit/",
                    "interpretUrl": "/problems/paint-house-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int minCostII(vector<vector<int>>& costs) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int minCostII(int[][] costs) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minCostII(self, costs):\\n        \\\"\\\"\\\"\\n        :type costs: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minCostII(self, costs: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint minCostII(int** costs, int costsSize, int* costsColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MinCostII(int[][] costs) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} costs\\n * @return {number}\\n */\\nvar minCostII = function(costs) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} costs\\n# @return {Integer}\\ndef min_cost_ii(costs)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minCostII(_ costs: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minCostII(costs [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minCostII(costs: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minCostII(costs: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_cost_ii(costs: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $costs\\n     * @return Integer\\n     */\\n    function minCostII($costs) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minCostII(costs: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-cost-ii costs)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_cost_ii(Costs :: [[integer()]]) -> integer().\\nmin_cost_ii(Costs) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_cost_ii(costs :: [[integer]]) :: integer\\n  def min_cost_ii(costs) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,5,3],[2,9,4]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"minCostII\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"costs\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There are a row of <code>n</code> houses, each house can be painted with one of the <code>k</code> colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>\n\n<p>The cost of painting each house with a certain color is represented by an <code>n x k</code> cost matrix costs.</p>\n\n<ul>\n\t<li>For example, <code>costs[0][0]</code> is the cost of painting house <code>0</code> with color <code>0</code>; <code>costs[1][2]</code> is the cost of painting house <code>1</code> with color <code>2</code>, and so on...</li>\n</ul>\n\n<p>Return <em>the minimum cost to paint all houses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[1,5,3],[2,9,4]]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong>\nPaint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \nOr paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> costs = [[1,3],[2,4]]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>costs.length == n</code></li>\n\t<li><code>costs[i].length == k</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>2 &lt;= k &lt;= 20</code></li>\n\t<li><code>1 &lt;= costs[i][j] &lt;= 20</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve it in <code>O(nk)</code> runtime?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Paint House II",
                        "content": "[TOC]\n\n## Solution\n\n**Paint House II** is a follow up question of [Paint House](https://leetcode.com/problems/paint-house/). In the original Paint House problem, `k` was always `3`. In this problem, `k` is no longer fixed and instead can be any non-negative integer.\n\nIf you haven't yet attempted the original [Paint House](https://leetcode.com/problems/paint-house/) question and are having trouble with this question, go attempt Paint House first and come back. There is also an in-depth [Paint House Solution Article](https://leetcode.com/articles/paint-house/). This solution article will assume you are already comfortable with the memoization and dynamic programming solutions for Paint House.\n\n---\n\n#### Approach 1: Memoization\n\n**Intuition**\n\nRemembering that we already know how to solve this problem using memoization when `k = 3` (check the [Paint House Solution Article](https://leetcode.com/articles/paint-house/)) if you can't remember how), let's think through some of the other possible values of `k`.\n\nFor this explanation, we'll call a way of painting the houses *valid* if, and only if, there are no adjacent houses painted the same color. We'll call an input *valid* if it is possible to paint the houses in a *valid* way. **The test cases here on Leetcode are all valid inputs**. In an interview however, you'd need to ensure that it is safe to assume that the input is always valid though.\n\nIf `k = 0`, then this means we have no colors. If there are no colors, it's probably reasonable to assume there are no houses either, i.e. `n = 0`. In other words, the input is `[]`. **For this question here on Leetcode, this is a safe assumption**. In an interview though it could be a good idea to ask the interviewer whether or not the input is *guaranteed* to be valid. For example, could you get a test case such as `[[],[],[],[]]`? This would be `k = 0` and `n = 4`. Of course, this case doesn't make much sense, because we are supposed to be painting houses, but can't with no paint. Either you'd be told it could never happen, or that you needed to do something special for it, such as returning `-1`.\n\nIf `k = 1` (all houses have to be the same color), then it's probably safe to assume that `n = 1`. Otherwise, the problem would be impossible to solve without breaking the adjacent color rule. Again, this is a safe assumption here, but do consider asking the interviewer whether or not you could get an invalid input that had `k = 1` and `n > 1`. So, assuming that `k = 1` and `n = 1`, the total cost will be the cost of painting that one house the only color available.\n\nIf `k = 2` (there are two colors), then we know the problem is always solvable, because we can simply paint the houses alternating colors. For example, when `n = 5` and `k = 2`, here are the only 2 valid ways of painting the houses. Anything else would be invalid.\n\n![The only 2 ways of painting 5 houses with 2 colors.](../Figures/265/two_colors.png)\n\nThe answer will be the one that leads to the lowest cost. It'd be easy to check both.\n\nWhen `k = 3`, the problem is equivalent to [Paint House](https://leetcode.com/problems/paint-house/). In the Solution Article for that question, we worked through an example where `n = 4`.\n\n```\n[[17, 2, 17], [8, 4, 10], [6, 3, 19], [4, 8, 12]]\n```\n\nA good way to visualize all of the valid painting permutations is to use a tree. Each root-to-leaf path represents one valid way of painting the houses.\n\n![A tree showing all the valid permutations.](../Figures/256/permutation_tree.png)\n\nThe cheapest cost of painting the houses is, therefore, the root-to-leaf path with the lowest total sum of its nodes. This animation shows the algorithm we used to solve this problem for Paint House.\n\n!?!../Documents/256_brute_force_tree.json:960,540!?!\n\nLuckily, we didn't actually need to create the tree itself\u2014there is a simpler way using recursion.\n\nSay we have a `paint` function that takes 2 parameters: a house number and a color to paint that house. The output is the ***total*** **cost of painting that house and all the ones after it**. For example `paint(1, red)` would be the cost of painting house `1` red, along with the cost of painting the houses after it (taking into account restrictions caused by painting house `1` red).\n\nTherefore the cheapest way of painting all the houses can be expressed as follows, where `0` is the first house.\n\n`min(paint(0, \"red\"), paint(0, \"green\"), paint(0, \"blue\"))`\n\nThe `paint` function has a recursive implementation. `costs` refers to the *input* table.\n\n```text\ndef paint(i, color):\n    ### BASE CASE ###\n    if i is the last house number:\n        return costs[i][color]\n    ### RECURSIVE CASE ###\n    lowest_cost = Infinity\n    for each next_color in [\"red\", \"green\", \"blue\"]:\n       if next_color != color: # No adjacent houses can be same color.\n           this_cost = costs[i][color] + paint(i + 1, next_color) # <- Recursive call\n           lowest_cost = min(lowest_cost, this_cost)\n    return lowest_cost\n```\n\nThe **base case** is where `i` refers to the *last house*. Painting the last house a particular color can be obtained from the `costs` table.\n\nThe **recursive case** is where we also need to consider the houses after `i`. It is obtained by looking up the cost of painting house `i` the given color (in the `costs` table) and then by determining the cost of painting the houses after it. The cost of painting the houses after requires making recursive paint calls to determine the cost of painting house `i + 1` each of the 2 other colors and then finding the minimum of those 2 values.\n\nThis algorithm is inefficient though. There is a lot of repetition in the tree, meaning we're doing the same calculations over and over again. For example, the total cost of painting the *second* house blue will be the same regardless of whether the first house was red or green. For example, both these branches of the tree are identical.\n\n![Repetition in the tree.](../Figures/265/same_branches.png)\n\nThis should also be apparent from the definition of the `paint` function. The parameters are simply a house number and a color. It doesn't require any information about *where* exactly in the tree it is.\n\nTo solve this problem, we add **memoization** to the `paint` function. Recall that memoization is where before returning an answer, the recursive function writes the answer into a dictionary with the input parameters as the key and the answer as the value. Then before doing a calculation, it checks whether or not that particular calculation has already been done. For the example above, the function would only calculate the cost of painting the second house blue *once*, and then the second time it would look it up in the dictionary.\n\nHere is a visualization that shows the calculations that need to be done when using memoization. The brighter circles show where the function body runs, and the duller circles show where a lookup was done and the function immediately returned. These are the only times the function is called.\n\n![A visualization showing what recursive calls the memoization approach actually makes.](../Figures/256/visualisation_memo.png)\n\n**If this explanation wasn't thorough enough for you**, then please check out the full [Paint House Solution Article](https://leetcode.com/articles/paint-house/). In that article I go into a lot more depth about memoization and how this algorithm was derived.\n\nThe `k > 3` case is really no different to this. The only difference is that instead of only considering 2 possible colors for the *next* house, we're considering `k - 1` colors (all colors except for the color of the current house).\n\n**Algorithm**\n\nUnlike the pseudocode above, we don't need to worry about the names of the colors. Instead, they are represented by numbers between `0` and `k - 1`. Additionally, we're also using memoization (`lru_cache` in Python, and a dictionary in Java).\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/UkjtvsGQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"UkjtvsGQ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k ^ 2)$$.\n\n    Determining the total time complexity of a recursive memoization algorithm requires looking at how many calls are made to the `paint` function, and how much each call costs (remember that the memoization lookups are $$O(1)$$). The function is called once for each possible pair of house number and color. This gives $$n \\cdot k$$ calls. Then, each call has a loop that loops over each of the $$k$$ colors. Therefore, we have $$n \\cdot k \\cdot k = n \\cdot k ^2$$ which is $$O(n \\cdot k ^ 2)$$.\n\n    The part outside of the recursive function is $$O(k)$$ and therefore does not impact the overall complexity.\n\n* Space complexity : $$O(n \\cdot k)$$.\n\n    There are 2 different places memory is being used that we need to consider.\n\n    Firstly, the memoization is storing the answers for each pair of house number and color. There are $$n \\cdot k$$ of these, and so $$O(n \\cdot k)$$ memory used.\n\n    Secondly, we need to consider the memory used on the run-time stack. In the worst case, there's a stack frame for each house number on the stack. This is a total of $$O(n)$$.\n\n    The $$O(n)$$ is insignficant to the $$O(n \\cdot k)$$, so we're left with a total of $$O(n \\cdot k)$$.\n\n<br />\n\n---\n\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nLet's look at a bigger example now, and view the problem in a different way to how we did before. For this example, `k = 6` and `n = 5`.\n\n`[[10, 6, 16, 25, 7, 28], [7, 16, 18, 30, 16, 25], [8, 26, 6, 22, 26, 19], [10, 23, 14, 17, 23, 9], [12, 14, 27, 7, 8, 9]]`\n\nAnd here is a diagram of the input grid.\n\n![A picture of the input grid.](../Figures/265/large_input.png)\n\nEach row represents the different colors a house could be. *Remember that the colors are represented by numbers*. The actual colors are only to make the table easier to read.\n\nThe problem we're trying to solve is equivalent to the following: **pick exactly one number from each row** such that the **sum of those numbers is minimized**. Because 2 adjacent houses cannot be the same color, **adjacent rows must be picked from different columns**. This is a straightforward variant of one of those \"classic\" minimum-path-in-a-grid dynamic programming problems.\n\nThe way that we solve it is to iterate over the cells and determine what the cheapest way of getting to that cell is. We'll work from top to bottom.\n\nTo begin with, we say the first row (house 0) is already completed. We don't need to make any changes to it.\n\nThen, for each cell in the second row, we work out the cheapest way of getting to it from the first row is. For example, to get to `[1][red]` we have to go through any of the non-red cells from the row above. We want to go through the minimum.\n\n![Choosing the best path to house 1, red.](../Figures/265/dynamic_programming_1.png)\n\nWe show our decision by updating `[1][red]`  to `7 + 6 = 13`.\n\nWe can repeat this for the rest of the second row, and then work down each of the remaining rows.\n\nHere's an animation of the algorithm being carried out.\n\nWhen we're finished, the final answer is the **minimum value in the last row**.\n\n**Algorithm**\n\nWe'll do this in the same way we did in the animation above\u2014an in-place algorithm that over-writes the input grid.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/b4J2BxyQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"b4J2BxyQ\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k ^ 2)$$.\n\n    We iterate over each of the $$n \\cdot k$$ cells. For each of the cells, we're finding the minimum of the $$k$$ values in the row above, excluding the one that is in the same column. This operation is $$O(k)$$. Multiplying this out, we get $$O(n \\cdot k ^ 2)$$.\n\n* Space complexity : $$O(1)$$ if done in-place, $$O(n \\cdot k)$$ if input is copied.\n\n    We're not creating any new data structures in the code above, and so it has a space complexity of $$O(1)$$. This is, however, overwriting the given input, which might not be ideal in some situations.\n\n    If we don't want to overwrite the input, we could instead create a copy of it first and then do the calculations in the copy. This will require an additional $$O(n \\cdot k)$$ space.\n\n<br />\n\n---\n\n#### Approach 3: Dynamic Programming with O(k) additional Space.\n\n**Intuition**\n\nImplementing the algorithm in-place meant that we only needed $$O(1)$$ additional space. This, however required modifying the input, which could be a problem in some situations.\n\nThe easiest solution is to make a copy of the input array and then do the calculations in that instead. This would require $$O(n \\cdot k)$$ additional space.\n\nThere is a way that uses less space though. We're only ever working with 2 rows at a time: the current row, and the row before it. The rows before that are never looked at again, and the rows after are still the same as the input array. Therefore, we can take advantage of this to only use $$O(k)$$ space.\n\n**Algorithm**\n\nInstead of writing the updated costs into the input array, the algorithm writes them into a k-length array. The k-length array from the previous row is held onto in-order to do these calculations.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/aoF5nVA8/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"aoF5nVA8\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k ^ 2)$$.\n\n    Same as above.\n\n* Space complexity : $$O(k)$$.\n\n    The previous row and the current row are represented as k-length arrays.\n\n    This approach does *not* modify the input grid.\n\n<br />\n\n---\n\n#### Approach 4: Dynamic programming with Optimized Time\n\n**Intuition**\n\nDespite Paint House II being listed as a hard question, and the problem statement listing $$O(n \\cdot k)$$ time as a \"follow up\", you'd possibly be expected to come up with this solution at top companies as it's still a fairly basic dynamic programming algorithm. You should, therefore, ensure you're comfortable with this approach and could identify and apply similar observations in other dynamic programming problems. At the very least, it'll make you look awesome!\n\nSo far, all of our approaches have had a $$O(n \\cdot k^2)$$ time complexity. This is because calculating the new value for each of the $$O(n \\cdot k)$$ cells required looking at each of the $$k$$ cells in the row immediately below.\n\nHowever, we don't need to look at the entire previous row for every cell. Let's look again at the large example from above. When we're calculating the values for the second row, we're adding the minimum from the first row onto them. The only cell we can't do this for is the one that was *directly below the minimum*, as this would break the adjacency rule. For this one, it makes sense to add the second minimum.\n\n![We're only ever adding 2 different numbers.](../Figures/265/dynamic_programming_2.png)\n\nHere's an animation of the entire algorithm.\n\n!?!../Documents/265_dp_min_finding.json:960,540!?!\n\n**Algorithm**\n\nThe simplest way of implementing this algorithm is to base it on the animation above. This requires overwriting the input.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/DpMTLirQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"DpMTLirQ\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k)$$.\n\n    The first loop that finds the minimums of the first row is $$O(k)$$ because it looks at each of the $$k$$ values in the first row exactly once. The second loop is $$O(n \\cdot k)$$ because the outer loop loops $$n$$ times, and the inner loop loops $$k$$ times. $$O(n \\cdot k) + O(k) = O(n \\cdot k)$$. We know it is *impossible* to ever do better here, because we cannot solve the problem without at least looking at each of the $$n \\cdot k$$ cells once.\n\n* Space complexity : $$O(1)$$.\n\n    Like approach 2, this approach also modifies the input instead of allocating its own space.\n\n<br />\n\n---\n\n#### Approach 5: Dynamic programming with Optimized Time and Space\n\n**Intuition**\n\nThere is another way we can still solve the problem in $$O(1)$$ space and $$O(n \\cdot k)$$ time complexity, *and* preserving the input.\n\nThe only thing the algorithm in the previous approach is really doing is going through the rows, and finding the 2 minimums of each row. It does this by calculating all the new costs for the row, writing them into the input, and then finding the minimums. This overwriting isn't necessary though\u2014we can simply keep track of the 2 smallest values we've seen so far, as we go, in the current row. We also need to remember the 2 from the previous row.\n\n**Algorithm**\n\nThe approach is a hybrid of approach 3 and 4. Like approach 4, it finds the minimums once instead of repeatedly. Like approach 3, it keeps track of information only from the current and previous rows. Unlike approach 3 though, the only information kept is the minimums.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/CTrSisdw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"CTrSisdw\"></iframe>\n\nThere are many ways to compact the code a bit more, particularly in the case of the Python. I haven't done this here as it could be problematic for those less familiar with the 2 languages I have provided solutions in, however feel free to post your own solutions in the comments. I'm excited to see the elegance you can come up with!\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n \\cdot k)$$.\n\n    Same as the previous approach.\n\n* Space complexity : $$O(1)$$.\n\n    The only additional working memory we're using is a constant number of single-value variables to keep track of the 2 minimums in the current and previous row, and to calculate the cost of the current cell. Because the memory usage is constant, we say it is $$O(1)$$. Unlike the previous approach one though, this one does not overwrite the input.\n\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "paint-house-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.877,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "1978",
                "title": "Partition to K Equal Sum Subsets",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 340,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "698",
                    "questionFrontendId": "698",
                    "sessionId": "968792",
                    "questionTitle": "Partition to K Equal Sum Subsets",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/partition-to-k-equal-sum-subsets/submit/",
                    "interpretUrl": "/problems/partition-to-k-equal-sum-subsets/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool canPartitionKSubsets(vector<int>& nums, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean canPartitionKSubsets(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def canPartitionKSubsets(self, nums, k):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool canPartitionKSubsets(int* nums, int numsSize, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool CanPartitionKSubsets(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {boolean}\\n */\\nvar canPartitionKSubsets = function(nums, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} k\\n# @return {Boolean}\\ndef can_partition_k_subsets(nums, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func canPartitionKSubsets(_ nums: [Int], _ k: Int) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canPartitionKSubsets(nums []int, k int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def canPartitionKSubsets(nums: Array[Int], k: Int): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun canPartitionKSubsets(nums: IntArray, k: Int): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn can_partition_k_subsets(nums: Vec<i32>, k: i32) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Boolean\\n     */\\n    function canPartitionKSubsets($nums, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function canPartitionKSubsets(nums: number[], k: number): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (can-partition-k-subsets nums k)\\n  (-> (listof exact-integer?) exact-integer? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec can_partition_k_subsets(Nums :: [integer()], K :: integer()) -> boolean().\\ncan_partition_k_subsets(Nums, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec can_partition_k_subsets(nums :: [integer], k :: integer) :: boolean\\n  def can_partition_k_subsets(nums, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,3,2,3,5,2,1]\n4",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"canPartitionKSubsets\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> if it is possible to divide this array into <code>k</code> non-empty subsets whose sums are all equal.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,3,2,3,5,2,1], k = 4\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It&#39;s possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4], k = 3\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>The frequency of each element is in the range <code>[1, 4]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
                    ],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "The Dynamic Programming problems that are asked in LinkedIn interviews are often not that tricky to solve. One of the best LeetCode dynamic programming problem for beginners - Maximum Subarray is quite often asked by LinkedIn."
    },
    {
        "id": "343",
        "title": "Design",
        "slug": "design",
        "items": [
            {
                "id": "2000",
                "title": "Two Sum III - Data structure design",
                "type": 1,
                "info": "Editor's choice: Frequently asked in LinkedIn phone interview.",
                "paidOnly": true,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "170",
                    "questionFrontendId": "170",
                    "sessionId": "968792",
                    "questionTitle": "Two Sum III - Data structure design",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/two-sum-iii-data-structure-design/submit/",
                    "interpretUrl": "/problems/two-sum-iii-data-structure-design/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class TwoSum {\\npublic:\\n    /** Initialize your data structure here. */\\n    TwoSum() {\\n        \\n    }\\n    \\n    /** Add the number to an internal data structure.. */\\n    void add(int number) {\\n        \\n    }\\n    \\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    bool find(int value) {\\n        \\n    }\\n};\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * TwoSum* obj = new TwoSum();\\n * obj->add(number);\\n * bool param_2 = obj->find(value);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class TwoSum {\\n\\n    /** Initialize your data structure here. */\\n    public TwoSum() {\\n        \\n    }\\n    \\n    /** Add the number to an internal data structure.. */\\n    public void add(int number) {\\n        \\n    }\\n    \\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    public boolean find(int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * TwoSum obj = new TwoSum();\\n * obj.add(number);\\n * boolean param_2 = obj.find(value);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class TwoSum(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def add(self, number):\\n        \\\"\\\"\\\"\\n        Add the number to an internal data structure..\\n        :type number: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def find(self, value):\\n        \\\"\\\"\\\"\\n        Find if there exists any pair of numbers which sum is equal to the value.\\n        :type value: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your TwoSum object will be instantiated and called as such:\\n# obj = TwoSum()\\n# obj.add(number)\\n# param_2 = obj.find(value)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class TwoSum:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def add(self, number: int) -> None:\\n        \\\"\\\"\\\"\\n        Add the number to an internal data structure..\\n        \\\"\\\"\\\"\\n        \\n\\n    def find(self, value: int) -> bool:\\n        \\\"\\\"\\\"\\n        Find if there exists any pair of numbers which sum is equal to the value.\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your TwoSum object will be instantiated and called as such:\\n# obj = TwoSum()\\n# obj.add(number)\\n# param_2 = obj.find(value)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} TwoSum;\\n\\n/** Initialize your data structure here. */\\n\\nTwoSum* twoSumCreate() {\\n    \\n}\\n\\n/** Add the number to an internal data structure.. */\\nvoid twoSumAdd(TwoSum* obj, int number) {\\n  \\n}\\n\\n/** Find if there exists any pair of numbers which sum is equal to the value. */\\nbool twoSumFind(TwoSum* obj, int value) {\\n  \\n}\\n\\nvoid twoSumFree(TwoSum* obj) {\\n    \\n}\\n\\n/**\\n * Your TwoSum struct will be instantiated and called as such:\\n * TwoSum* obj = twoSumCreate();\\n * twoSumAdd(obj, number);\\n \\n * bool param_2 = twoSumFind(obj, value);\\n \\n * twoSumFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class TwoSum {\\n\\n    /** Initialize your data structure here. */\\n    public TwoSum() {\\n        \\n    }\\n    \\n    /** Add the number to an internal data structure.. */\\n    public void Add(int number) {\\n        \\n    }\\n    \\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    public bool Find(int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * TwoSum obj = new TwoSum();\\n * obj.Add(number);\\n * bool param_2 = obj.Find(value);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar TwoSum = function() {\\n    \\n};\\n\\n/**\\n * Add the number to an internal data structure.. \\n * @param {number} number\\n * @return {void}\\n */\\nTwoSum.prototype.add = function(number) {\\n    \\n};\\n\\n/**\\n * Find if there exists any pair of numbers which sum is equal to the value. \\n * @param {number} value\\n * @return {boolean}\\n */\\nTwoSum.prototype.find = function(value) {\\n    \\n};\\n\\n/** \\n * Your TwoSum object will be instantiated and called as such:\\n * var obj = new TwoSum()\\n * obj.add(number)\\n * var param_2 = obj.find(value)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class TwoSum\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    Add the number to an internal data structure..\\n    :type number: Integer\\n    :rtype: Void\\n=end\\n    def add(number)\\n        \\n    end\\n\\n\\n=begin\\n    Find if there exists any pair of numbers which sum is equal to the value.\\n    :type value: Integer\\n    :rtype: Boolean\\n=end\\n    def find(value)\\n        \\n    end\\n\\n\\nend\\n\\n# Your TwoSum object will be instantiated and called as such:\\n# obj = TwoSum.new()\\n# obj.add(number)\\n# param_2 = obj.find(value)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass TwoSum {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** Add the number to an internal data structure.. */\\n    func add(_ number: Int) {\\n        \\n    }\\n    \\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    func find(_ value: Int) -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * let obj = TwoSum()\\n * obj.add(number)\\n * let ret_2: Bool = obj.find(value)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type TwoSum struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() TwoSum {\\n    \\n}\\n\\n\\n/** Add the number to an internal data structure.. */\\nfunc (this *TwoSum) Add(number int)  {\\n    \\n}\\n\\n\\n/** Find if there exists any pair of numbers which sum is equal to the value. */\\nfunc (this *TwoSum) Find(value int) bool {\\n    \\n}\\n\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Add(number);\\n * param_2 := obj.Find(value);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class TwoSum() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Add the number to an internal data structure.. */\\n    def add(number: Int) {\\n        \\n    }\\n\\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    def find(value: Int): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * var obj = new TwoSum()\\n * obj.add(number)\\n * var param_2 = obj.find(value)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class TwoSum() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Add the number to an internal data structure.. */\\n    fun add(number: Int) {\\n        \\n    }\\n\\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    fun find(value: Int): Boolean {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * var obj = TwoSum()\\n * obj.add(number)\\n * var param_2 = obj.find(value)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct TwoSum {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl TwoSum {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** Add the number to an internal data structure.. */\\n    fn add(&self, number: i32) {\\n        \\n    }\\n    \\n    /** Find if there exists any pair of numbers which sum is equal to the value. */\\n    fn find(&self, value: i32) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * let obj = TwoSum::new();\\n * obj.add(number);\\n * let ret_2: bool = obj.find(value);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class TwoSum {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * Add the number to an internal data structure..\\n     * @param Integer $number\\n     * @return NULL\\n     */\\n    function add($number) {\\n        \\n    }\\n  \\n    /**\\n     * Find if there exists any pair of numbers which sum is equal to the value.\\n     * @param Integer $value\\n     * @return Boolean\\n     */\\n    function find($value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * $obj = TwoSum();\\n * $obj->add($number);\\n * $ret_2 = $obj->find($value);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class TwoSum {\\n    constructor() {\\n\\n    }\\n\\n    add(number: number): void {\\n\\n    }\\n\\n    find(value: number): boolean {\\n\\n    }\\n}\\n\\n/**\\n * Your TwoSum object will be instantiated and called as such:\\n * var obj = new TwoSum()\\n * obj.add(number)\\n * var param_2 = obj.find(value)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define two-sum%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; add : exact-integer? -> void?\\n    (define/public (add number)\\n\\n      )\\n    ; find : exact-integer? -> boolean?\\n    (define/public (find value)\\n\\n      )))\\n\\n;; Your two-sum% object will be instantiated and called as such:\\n;; (define obj (new two-sum%))\\n;; (send obj add number)\\n;; (define param_2 (send obj find value))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec two_sum_init_() -> any().\\ntwo_sum_init_() ->\\n  .\\n\\n-spec two_sum_add(Number :: integer()) -> any().\\ntwo_sum_add(Number) ->\\n  .\\n\\n-spec two_sum_find(Value :: integer()) -> boolean().\\ntwo_sum_find(Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% two_sum_init_(),\\n%% two_sum_add(Number),\\n%% Param_2 = two_sum_find(Value),\\n\\n%% two_sum_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule TwoSum do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec add(number :: integer) :: any\\n  def add(number) do\\n\\n  end\\n\\n  @spec find(value :: integer) :: boolean\\n  def find(value) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# TwoSum.init_()\\n# TwoSum.add(number)\\n# param_2 = TwoSum.find(value)\\n\\n# TwoSum.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"TwoSum\",\"add\",\"add\",\"add\",\"find\",\"find\"]\n[[],[1],[3],[5],[4],[7]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"TwoSum\",\r\n    \"maxbytesperline\": 165000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"add\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"number\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Add the number to an internal data structure..\"\r\n        },\r\n        {\r\n            \"name\" : \"find\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Find if there exists any pair of numbers which sum is equal to the value.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.</p>\n\n<p>Implement the <code>TwoSum</code> class:</p>\n\n<ul>\n\t<li><code>TwoSum()</code> Initializes the <code>TwoSum</code> object, with an empty array initially.</li>\n\t<li><code>void add(int number)</code> Adds <code>number</code> to the data structure.</li>\n\t<li><code>boolean find(int value)</code> Returns <code>true</code> if there exists any pair of numbers whose sum is equal to <code>value</code>, otherwise, it returns <code>false</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;TwoSum&quot;, &quot;add&quot;, &quot;add&quot;, &quot;add&quot;, &quot;find&quot;, &quot;find&quot;]\n[[], [1], [3], [5], [4], [7]]\n<strong>Output</strong>\n[null, null, null, null, true, false]\n\n<strong>Explanation</strong>\nTwoSum twoSum = new TwoSum();\ntwoSum.add(1);   // [] --&gt; [1]\ntwoSum.add(3);   // [1] --&gt; [1,3]\ntwoSum.add(5);   // [1,3] --&gt; [1,3,5]\ntwoSum.find(4);  // 1 + 3 = 4, return true\ntwoSum.find(7);  // No two integers sum up to 7, return false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= number &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= value &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>add</code> and <code>find</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Two Sum III - Data Structure Design",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Sorted List\n\n**Intuition**\n\nFirst of all, the problem description is not terribly clear on the requirements of _time_ and _space_ complexity. But let us consider this as part of the challenge or a freedom of design. We could figure out the desired complexity for each function, by trial and error.\n\nThis is one of the followup problems to the first programming problem on LeetCode called [Two Sum](https://leetcode.com/problems/two-sum/), where one is asked to return the indice of two numbers from a **_list_** that could sum up to a given value.\n\n>Let us take the inspiration from the origin problem, by keeping all the incoming numbers in a _list_.\n\nGiven a list, one of the solutions to the Two Sum problem is called **_Two-Pointers Iteration_** where we iterate through the list from two directions with _two pointers_ approaching each other.\n\n![pic](../Figures/170/170_two_pointers.png)\n\n>However, one of the preconditions for the Two-Pointers Iteration solution is that the input list should be _**sorted**_. \n\nSo now, here are the questions:\n\n- Should we keep the list in order while inserting new numbers in the function `add(number)` ? \n\n- Or should we do the sorting on demand, _i.e._ at the invocation of `find(value)` ?\n\nWe will address the above two questions later in the Algorithm section.\n\n**Algorithm**\n\nLet us first give the algorithm of Two-Pointers Iteration to find the two-sum solution from a _sorted_ list:\n\n- We initialize **two pointers** `low` and `high` which point to the head and the tail elements of the list respectively.\n\n- With the two pointers, we start a **loop** to iterate the list. The loop would terminate either we find the two-sum solution or the two pointers meet each other.\n\n- Within the loop, at each step, we would move either of the pointers, according to different conditions:\n\n    - If the sum of the elements pointed by the current pointers is _**less than**_ the desired value, then we should try to increase the sum to meet the desired value, _i.e._ we should move the `low` pointer forwards to have a larger value.\n\n    - Similarly if the sum of the elements pointed by the current pointers is _**greater than**_ the desired value, we then should try to reduce the sum by moving the `high` pointer towards the `low` pointer. \n\n    - If the sum happen to the desired value, then we could simply do an **early return** of the function.\n\n- If the loop is terminated at the case where the two pointers meet each other, then we can be sure that there is no solution to the desired value.\n\n\n<iframe src=\"https://leetcode.com/playground/BtJsFEDc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"BtJsFEDc\"></iframe>\n\n>The usage pattern of the desired data structure in the online judge, as we would discover, is that the `add(number)` function would be called **frequently** which might be followed a less frequent call of `find(value)` function.\n\nThe usage pattern implies that we should try to minimize the cost of `add(number)` function. As a result, we sort the list within the `find(value)` function instead of the `add(number)` function.\n\n_So to the above questions about where to place the sort operation, actually both options are valid and correct._ Due to the usage pattern of the two functions though, it is **less optimal** to sort the list at each _add_ operation.\n\nOn the other hand, we do not do sorting at each occasion of `find(value)` neither. But rather, we sort on demand, _i.e._ only when the list is updated. As a result, we **_amortize_** the cost of the sorting over the time. And this is the optimization trick for the solution to pass the online judge.\n\n**Complexity Analysis**\n\n- Time Complexity:\n\n    - For the `add(number)` function: $$\\mathcal{O}(1)$$, since we simply append the element into the list.\n\n    - For the `find(value)` function: $$\\mathcal{O}(N \\cdot \\log(N))$$. In the worst case, we would need to sort the list first, which is of $$\\mathcal{O}(N \\cdot \\log(N))$$  time complexity normally. And later, again in the worst case we need to iterate through the entire list, which is of $$\\mathcal{O}(N)$$ time complexity. As a result, the overall time complexity of the function lies on  $$\\mathcal{O}(N \\cdot \\log(N))$$ of the sorting operation, which dominates over the later iteration part.\n\n- Space Complexity: the overall space complexity of the data structure is $$\\mathcal{O}(N)$$ where $$N$$ is the total number of _numbers_ that have been added.\n<br/>\n<br/>\n\n---\n#### Approach 2: HashTable\n\n**Intuition**\n\nAs an alternative solution to the original [Two Sum](https://leetcode.com/problems/two-sum/) problem, one could employ the _HashTable_ to index each number.\n\n>Given a desired sum value `S`, for each number `a`, we just need to verify if there exists a complement number (`S-a`) in the table.\n\nAs we know, the data structure of hashtable could offer us a quick _lookup_ as well as _insertion_ operations, which fits well with the above requirements.\n\n\n**Algorithm**\n\n- First, we initialize a _hashtable_ container in our data structure.\n\n- For the `add(number)` function, we build a frequency hashtable with the _number_ as key and the frequency of the _number_ as the value in the table.\n\n- For the `find(value)` function, we then iterate through the hashtable over the keys. For each key (`number`), we check if there exists a complement (`value - number`) in the table. If so, we could terminate the loop and return the result.\n\n- In a particular case, where the number and its complement are equal, we then need to check if there exists _at least_ **two copies** of the _number_ in the table.\n\nWe illustrate the algorithm in the following figure:\n\n![pic](../Figures/170/170_hashtable.png)\n\n<iframe src=\"https://leetcode.com/playground/RY8zFnba/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RY8zFnba\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity:\n\n    - For the `add(number)` function: $$\\mathcal{O}(1)$$, since it takes a constant time to update an entry in hashtable.\n\n    - For the `find(value)` function: $$\\mathcal{O}(N)$$, where $$N$$ is the total number of **unique** _numbers_. In the worst case, we would iterate through the entire table.\n\n- Space Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the total number of **unique** _numbers_ that we will see during the usage of the data structure.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "two-sum-iii-data-structure-design",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.737,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2001",
                "title": "Shortest Word Distance II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in LinkedIn phone interview.",
                "paidOnly": true,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "244",
                    "questionFrontendId": "244",
                    "sessionId": "968792",
                    "questionTitle": "Shortest Word Distance II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/shortest-word-distance-ii/submit/",
                    "interpretUrl": "/problems/shortest-word-distance-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class WordDistance {\\npublic:\\n    WordDistance(vector<string>& wordsDict) {\\n        \\n    }\\n    \\n    int shortest(string word1, string word2) {\\n        \\n    }\\n};\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * WordDistance* obj = new WordDistance(wordsDict);\\n * int param_1 = obj->shortest(word1,word2);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class WordDistance {\\n\\n    public WordDistance(String[] wordsDict) {\\n        \\n    }\\n    \\n    public int shortest(String word1, String word2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * WordDistance obj = new WordDistance(wordsDict);\\n * int param_1 = obj.shortest(word1,word2);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class WordDistance(object):\\n\\n    def __init__(self, wordsDict):\\n        \\\"\\\"\\\"\\n        :type wordsDict: List[str]\\n        \\\"\\\"\\\"\\n        \\n\\n    def shortest(self, word1, word2):\\n        \\\"\\\"\\\"\\n        :type word1: str\\n        :type word2: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your WordDistance object will be instantiated and called as such:\\n# obj = WordDistance(wordsDict)\\n# param_1 = obj.shortest(word1,word2)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class WordDistance:\\n\\n    def __init__(self, wordsDict: List[str]):\\n        \\n\\n    def shortest(self, word1: str, word2: str) -> int:\\n        \\n\\n\\n# Your WordDistance object will be instantiated and called as such:\\n# obj = WordDistance(wordsDict)\\n# param_1 = obj.shortest(word1,word2)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} WordDistance;\\n\\n\\nWordDistance* wordDistanceCreate(char ** wordsDict, int wordsDictSize) {\\n    \\n}\\n\\nint wordDistanceShortest(WordDistance* obj, char * word1, char * word2) {\\n  \\n}\\n\\nvoid wordDistanceFree(WordDistance* obj) {\\n    \\n}\\n\\n/**\\n * Your WordDistance struct will be instantiated and called as such:\\n * WordDistance* obj = wordDistanceCreate(wordsDict, wordsDictSize);\\n * int param_1 = wordDistanceShortest(obj, word1, word2);\\n \\n * wordDistanceFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class WordDistance {\\n\\n    public WordDistance(string[] wordsDict) {\\n        \\n    }\\n    \\n    public int Shortest(string word1, string word2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * WordDistance obj = new WordDistance(wordsDict);\\n * int param_1 = obj.Shortest(word1,word2);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} wordsDict\\n */\\nvar WordDistance = function(wordsDict) {\\n    \\n};\\n\\n/** \\n * @param {string} word1 \\n * @param {string} word2\\n * @return {number}\\n */\\nWordDistance.prototype.shortest = function(word1, word2) {\\n    \\n};\\n\\n/** \\n * Your WordDistance object will be instantiated and called as such:\\n * var obj = new WordDistance(wordsDict)\\n * var param_1 = obj.shortest(word1,word2)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class WordDistance\\n\\n=begin\\n    :type words_dict: String[]\\n=end\\n    def initialize(words_dict)\\n        \\n    end\\n\\n\\n=begin\\n    :type word1: String\\n    :type word2: String\\n    :rtype: Integer\\n=end\\n    def shortest(word1, word2)\\n        \\n    end\\n\\n\\nend\\n\\n# Your WordDistance object will be instantiated and called as such:\\n# obj = WordDistance.new(words_dict)\\n# param_1 = obj.shortest(word1, word2)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass WordDistance {\\n\\n    init(_ wordsDict: [String]) {\\n        \\n    }\\n    \\n    func shortest(_ word1: String, _ word2: String) -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * let obj = WordDistance(wordsDict)\\n * let ret_1: Int = obj.shortest(word1, word2)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type WordDistance struct {\\n    \\n}\\n\\n\\nfunc Constructor(wordsDict []string) WordDistance {\\n    \\n}\\n\\n\\nfunc (this *WordDistance) Shortest(word1 string, word2 string) int {\\n    \\n}\\n\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * obj := Constructor(wordsDict);\\n * param_1 := obj.Shortest(word1,word2);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class WordDistance(_wordsDict: Array[String]) {\\n\\n    def shortest(word1: String, word2: String): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * var obj = new WordDistance(wordsDict)\\n * var param_1 = obj.shortest(word1,word2)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class WordDistance(wordsDict: Array<String>) {\\n\\n    fun shortest(word1: String, word2: String): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * var obj = WordDistance(wordsDict)\\n * var param_1 = obj.shortest(word1,word2)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct WordDistance {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl WordDistance {\\n\\n    fn new(wordsDict: Vec<String>) -> Self {\\n        \\n    }\\n    \\n    fn shortest(&self, word1: String, word2: String) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * let obj = WordDistance::new(wordsDict);\\n * let ret_1: i32 = obj.shortest(word1, word2);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class WordDistance {\\n    /**\\n     * @param String[] $wordsDict\\n     */\\n    function __construct($wordsDict) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $word1\\n     * @param String $word2\\n     * @return Integer\\n     */\\n    function shortest($word1, $word2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * $obj = WordDistance($wordsDict);\\n * $ret_1 = $obj->shortest($word1, $word2);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class WordDistance {\\n    constructor(wordsDict: string[]) {\\n\\n    }\\n\\n    shortest(word1: string, word2: string): number {\\n\\n    }\\n}\\n\\n/**\\n * Your WordDistance object will be instantiated and called as such:\\n * var obj = new WordDistance(wordsDict)\\n * var param_1 = obj.shortest(word1,word2)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define word-distance%\\n  (class object%\\n    (super-new)\\n\\n    ; words-dict : (listof string?)\\n    (init-field\\n      words-dict)\\n    \\n    ; shortest : string? string? -> exact-integer?\\n    (define/public (shortest word1 word2)\\n\\n      )))\\n\\n;; Your word-distance% object will be instantiated and called as such:\\n;; (define obj (new word-distance% [words-dict words-dict]))\\n;; (define param_1 (send obj shortest word1 word2))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec word_distance_init_(WordsDict :: [unicode:unicode_binary()]) -> any().\\nword_distance_init_(WordsDict) ->\\n  .\\n\\n-spec word_distance_shortest(Word1 :: unicode:unicode_binary(), Word2 :: unicode:unicode_binary()) -> integer().\\nword_distance_shortest(Word1, Word2) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% word_distance_init_(WordsDict),\\n%% Param_1 = word_distance_shortest(Word1, Word2),\\n\\n%% word_distance_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule WordDistance do\\n  @spec init_(words_dict :: [String.t]) :: any\\n  def init_(words_dict) do\\n\\n  end\\n\\n  @spec shortest(word1 :: String.t, word2 :: String.t) :: integer\\n  def shortest(word1, word2) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# WordDistance.init_(words_dict)\\n# param_1 = WordDistance.shortest(word1, word2)\\n\\n# WordDistance.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"WordDistance\",\"shortest\",\"shortest\"]\n[[[\"practice\",\"makes\",\"perfect\",\"coding\",\"makes\"]],[\"coding\",\"practice\"],[\"makes\",\"coding\"]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"classname\": \"WordDistance\",\n  \"maxbytesperline\": 300000,\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"string[]\",\n        \"name\": \"wordsDict\"\n      },\n      {\n        \"type\": \"integer\",\n        \"name\": \"wordsSize\",\n        \"lang\": \"c\",\n        \"value\": \"size_1\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"name\": \"shortest\",\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"word1\"\n        },\n        {\n          \"type\": \"string\",\n          \"name\": \"word2\"\n        }\n      ],\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    }\n  ],\n  \"systemdesign\": true,\n  \"params\": [\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<String>\",\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.</p>\n\n<p>Implement the <code>WordDistance</code> class:</p>\n\n<ul>\n\t<li><code>WordDistance(String[] wordsDict)</code> initializes the object with the strings array <code>wordsDict</code>.</li>\n\t<li><code>int shortest(String word1, String word2)</code> returns the shortest distance between <code>word1</code> and <code>word2</code> in the array <code>wordsDict</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordDistance&quot;, &quot;shortest&quot;, &quot;shortest&quot;]\n[[[&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]], [&quot;coding&quot;, &quot;practice&quot;], [&quot;makes&quot;, &quot;coding&quot;]]\n<strong>Output</strong>\n[null, 3, 1]\n\n<strong>Explanation</strong>\nWordDistance wordDistance = new WordDistance([&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]);\nwordDistance.shortest(&quot;coding&quot;, &quot;practice&quot;); // return 3\nwordDistance.shortest(&quot;makes&quot;, &quot;coding&quot;);    // return 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= wordsDict.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= wordsDict[i].length &lt;= 10</code></li>\n\t<li><code>wordsDict[i]</code> consists of lowercase English letters.</li>\n\t<li><code>word1</code> and <code>word2</code> are in <code>wordsDict</code>.</li>\n\t<li><code>word1 != word2</code></li>\n\t<li>At most <code>5000</code> calls will be made to <code>shortest</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Shortest Word Distance II",
                        "content": "[TOC]\n\n## Solution\n\nBefore looking at the solution for this problem, let's look at what the problem asks us to do in simpler terms. We have to design a class which receives a list of words as input in the constructor. The class has a function which we need to implement and that function is `shortest` which takes two words as input and returns the minimum distance between the two as the output.\n\nWhen the problem talks about the distance between two words, it essentially means the absolute gap between the indices of the two words in the list. For e.g. if the first word occurs at a location `i` and the second word occurs at the location `j`, then the distance between the two would be `abs(i - j)`.\n\nThe question asks us to find the `minimum` such different between words which clearly indicates that the words can occur at multiple locations. If we have `K` occurrences for the `word1` and `L` occurrences for the `word2`, then iteratively checking every pair of indices will give us a $$O(N^2)$$ algorithm which won't be optimal at all. We won't discuss that algorithm here since it is very straightforward.\n\nThe brute-force algorithm would simple consider all possible pairs of indices for (`word1_location`, `word2_location`) and see which one produces the minimum distance. Let's try and build on this idea and see if some pre-processing can help us out reduce the complexity of the brute-force algorithm.\n<br>\n<br>\n\n---\n\n#### Approach 1: Using Preprocessed Sorted Indices\n\n**Intuition**\n\nA given word can occur multiple times in the original word list. Let's suppose the first word, `word1` in the input to the function `shortest` occurs at the indices `[i1, i2, i3, i4]` in the original list. Similarly, let's assume that the second word, `word2`, appears at the following locations inside the word list `[j1, j2, j3]`.\n\nNow, given these list of indices, we are to simply find the pair of indices `(i, j)` such that their absolute difference is minimum.\n\n> The main idea for this approach is that if the list of these indices is in sorted order, we can find such a pair in linear time.\n\nThe idea is to use a two pointer approach. Let's say we have a pointer `i` for the sorted list of indices of `word1` and `j` for the sorted list of indices of `word2`. At every iteration, we record the difference of indices i.e. `abs(word1[i] - word2[j])`. Once we've done that, we have two possible choices for progressing the two pointers.\n\n<pre>\nword1[i] < word2[j]\n</pre>\n\nIf this is the case, that means there is no point in moving the `j` pointer forward. The location indices for the words are in a sorted order. We know that `word2[j + 1] > word2[j]` because these indices are sorted. So, if we move `j` forward, then the difference `abs(word1[i] - word2[j + 1])` would be even greater than `abs(word1[i] - word2[j])`. That doesn't help us since we want to find the minimum possible distance (difference) overall.\n\n> So, if we have (word1[i] < word2[j]), we move the pointer 'i' one step forward i.e. (i + 1) in the hopes that abs(word1[i + 1] - word2[j]) would give us a lower distance than abs(word1[i] - word2[j]). We say \"hopes\" because it is not certain this improvement would happen.\n\nLet's look at two different examples. In the first example we will see that moving `i` forward gave us the best difference overall (0). In the second example we see that moving `i` forward leads us to our second case (yet to discuss) but doesn't lead to any improvement in the difference.\n\n**Example-1**\n\n```\nword1_locations = [2,4,5,9]\nword2_locations = [4,10,11]\n\ni, j = 0, 0\nmin_diff = 2 (abs(2 - 4))\nword1[i] < word2[j] i.e. 2 < 4\n  move i one step forward\n\ni, j = 1, 0 (abs(4 - 4))\nmin_diff = 0 (We hit the jackpot!)  \n```\n\n**Example-2**\n\n```\nword1_locations = [2,7,15,16]\nword2_locations = [4,10,11]\n\ni, j = 0, 0\nmin_diff = 2 (abs(2 - 4))\nword1[i] < word2[j] i.e. 2 < 4\n  move i one step forward\n\ni, j = 1, 0\nmin_diff = 2 (2 < abs(7 - 4))\n\nHere, we did not update out global minimum difference.\nThat is why we said earlier, moving 'i' forward may or\nmay not give a lower difference. But moving 'j' forward in\nour case would definitely worsen the difference (or keep it same!).\n```\nLet's move onto our second scenario.\n\n<pre>\nword1[i] > word2[j]\n</pre>\n\nIf this is the case, that means there is no point in moving the `i` pointer forward. We know that `word1[i + 1] > word2[j]` because these indices are sorted. So, if we move `i` forward, then the difference `abs(word1[i + 1] - word2[j])` would be even greater than `abs(word1[i] - word2[j])`. That doesn't help us since we want to find the minimum possible distance (difference) overall.\n\n> So, along the similar lines of thought as the previous case, if we have (word1[i] > word2[j]), we move the pointer 'j' one step forward i.e. (j + 1) in the hopes that abs(word1[i] - word2[j + 1]) would give us a lower distance than abs(word1[i] - word2[j]). We say \"hopes\" because as showcased in the previous scenario, it is not certain this improvement would happen.\n\nNow let's formally look at the algorithm for solving this problem.\n\n**Algorithm**\n\n1. In the `constructor` of the class, we simply iterate over the given list of words and prepare a dictionary, mapping a word to all it's locations in the array.\n2. Since we process all the words from left to right, we will get all the indices in a sorted order by default for all the words. So, we don't have to sort the indices ourselves.\n3. Let's call the dictionary that we build, `locations`.\n4. For a given pair of words, obtain the list of indices (appearances inside the original list/array of words). Let's call the two arrays `loc1` and `loc2`.\n5. Initialize two pointer variables `l1 = 0` and `l2 = 0`.\n6. For a given `l1` and `l2`, we first update (if possible) the minimum difference (distance) till now i.e. `dist = min(dist, abs(loc1[l1] - loc2[l2]))`. Then, we check if `loc1[l1] < loc2[l2]` and if this is the case, we move `l1` one step forward i.e. `l1 = l1 + 1`. Otherwise, we move `l2` one step forward i.e. `l2 = l2 + 1`.\n7. We keep doing this until all the elements in the smaller of the two location arrays are processed.\n8. Return the global minimum distance between the words.\n\n<center>\n<img src=\"../Figures/244/postings_list.png\" width=\"500\">\n</center>\n\nThis represents the locations dictionary that we should build given the original words list in the constructor. The key represents the word and the value is a list containing indices in ascending order of occurrences throughout the array. Let's look at the minimum distance between the words `apple` and `football` in the array. So, we will be considering the two *sorted* lists of indices: `[3, 6, 8, 12]` and `[2, 7, 9]`.\n\n<center>\n\n!?!../Documents/244_Anim.json!?!\n\n</center>\n\n<iframe src=\"https://leetcode.com/playground/9kJr9mNg/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"9kJr9mNg\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity : The time complexity of the constructor of our class is $$O(N)$$ considering there were $$N$$ words in the original list. We iterate over them and prepare a mapping from key to list of indices as described before. Then, for the function that finds the minimum distance between the two words, the complexity would be $$O(max(K, L))$$ where $$K$$ and $$L$$ represent the number of occurrences of the two words. However, $$K = O(N)$$ and also $$L = O(N)$$. Therefore, the overall time complexity would also be $$O(N)$$. The reason the complexity is $$O(max(K, L))$$ and not $$O(min(K, L))$$ is because of the scenario where the minimum element of the smaller list is larger than `all` the elements of the larger list. In that scenario, the pointer for the smaller list will not progress at all and the one for the longer list will reach to the very end.\n* Space complexity: $$O(N)$$ for the dictionary that we prepare in the constructor. The keys represent all the unique words in the input and the values represent all of the indices from $$0 ... N$$.\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "shortest-word-distance-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.273,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2002",
                "title": "Serialize and Deserialize Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "297",
                    "questionFrontendId": "297",
                    "sessionId": "968792",
                    "questionTitle": "Serialize and Deserialize Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/serialize-and-deserialize-binary-tree/submit/",
                    "interpretUrl": "/problems/serialize-and-deserialize-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        \\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/** Encodes a tree to a single string. */\\nchar* serialize(struct TreeNode* root) {\\n    \\n}\\n\\n/** Decodes your encoded data to tree. */\\nstruct TreeNode* deserialize(char* data) {\\n    \\n}\\n\\n// Your functions will be called as such:\\n// char* data = serialize(root);\\n// deserialize(data);\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    \\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    \\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# Encodes a tree to a single string.\\n#\\n# @param {TreeNode} root\\n# @return {string}\\ndef serialize(root)\\n    \\nend\\n\\n# Decodes your encoded data to tree.\\n#\\n# @param {string} data\\n# @return {TreeNode}\\ndef deserialize(data)\\n    \\nend\\n\\n\\n# Your functions will be called as such:\\n# deserialize(serialize(data))\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Codec {\\n    func serialize(_ root: TreeNode?) -> String {\\n        \\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// var ser = Codec()\\n// var deser = Codec()\\n// deser.deserialize(ser.serialize(root))\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\ntype Codec struct {\\n    \\n}\\n\\nfunc Constructor() Codec {\\n    \\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    \\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    \\n}\\n\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * ser := Constructor();\\n * deser := Constructor();\\n * data := ser.serialize(root);\\n * ans := deser.deserialize(data);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a list of strings to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes a single string to a list of strings.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = new Codec()\\n * var deser = new Codec()\\n * val s = ser.serialize(root)\\n * val ans = deser.deserialize(s)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Codec() {\\n\\t// Encodes a URL to a shortened URL.\\n    fun serialize(root: TreeNode?): String {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    fun deserialize(data: String): TreeNode? {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = Codec()\\n * var deser = Codec()\\n * var data = ser.serialize(longUrl)\\n * var ans = deser.deserialize(data)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nstruct Codec {\\n\\t\\n}\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Codec {\\n    fn new() -> Self {\\n        \\n    }\\n\\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\\n        \\n    }\\n\\t\\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * let obj = Codec::new();\\n * let data: String = obj.serialize(strs);\\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Codec {\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param TreeNode $root\\n     * @return String\\n     */\\n    function serialize($root) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $data\\n     * @return TreeNode\\n     */\\n    function deserialize($data) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * $ser = Codec();\\n * $deser = Codec();\\n * $data = $ser->serialize($root);\\n * $ans = $deser->deserialize($data);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\n/*\\n * Encodes a tree to a single string.\\n */\\nfunction serialize(root: TreeNode | null): string {\\n\\n};\\n\\n/*\\n * Decodes your encoded data to tree.\\n */\\nfunction deserialize(data: string): TreeNode | null {\\n\\n};\\n\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}]",
                    "sampleTestCase": "[1,2,3,null,null,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"Codec\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Serialize and Deserialize Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Depth First Search (DFS)\n\n\n**Intuition**\n\n<center><img src=\"../Figures/297_BST.png\" width=\"550px\" /></center>\n\nThe **serialization** of a `Binary Search Tree` is essentially to encode\nits values and more importantly its structure. \nOne can traverse the tree to accomplish the above task.\nAnd it is well know that we have two general strategies to do so:\n\n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \nIn this task, however, the `DFS` strategy is more adapted for our needs,\nsince the linkage among the adjacent nodes is naturally encoded in the order,\nwhich is rather helpful for the later task of **deserialization**. \n\nTherefore, in this solution, we demonstrate an example with the `preorder` DFS strategy.\nOne can check out more tutorial about `Binary Search Tree` on \nthe [LeetCode Explore](https://leetcode.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/).\n\n**Algorithm**\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/gKbx4EPz/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"gKbx4EPz\"></iframe>\n\n\n\nThe preorder DFS traverse follows *recursively* the order of  \n`root -> left subtree -> right subtree`.\n\nAs an example, let's serialize the following tree.\nNote that serialization contains information about the node values\nas well as the information about the tree structure.\n\n\n<!--![LIS](../Figures/297/297_tr.gif)-->\n!?!../Documents/297_LIS.json:1000,622!?!\n\n\nWe start from the root, node `1`, the serialization string is ```1,```.\nThen we jump to its left subtree with the root node `2`, and the serialization string becomes ```1,2,```.\nNow starting from node `2`, \nwe visit its left node `3` (```1,2,3,None,None,```) \nand right node `4` (```1,2,3,None,None,4,None,None```) sequentially.\nNote that ```None,None,``` appears for each leaf to mark the absence of left and right child node, \nthis is how we save the tree structure during the serialization.\nAnd finally, we get back to the root node `1` and visit its right subtree\nwhich happens to be a leaf node `5`. Finally, the serialization string is done\nas ```1,2,3,None,None,4,None,None,5,None,None,```.\n\n\n<iframe src=\"https://leetcode.com/playground/KzKSosy9/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"KzKSosy9\"></iframe>\n\nNow let's deserialize the serialization string constructed above ```1,2,3,None,None,4,None,None,5,None,None,```.\nIt goes along the string, initiate the node value and \nthen calls itself to construct its left and right child nodes. \n\n<iframe src=\"https://leetcode.com/playground/byCTAyWj/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"byCTAyWj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : in both serialization and deserialization functions,\n we visit each node exactly once, thus the time complexity is $$O(N)$$,\n where $$N$$ is the number of nodes, *i.e.* the size of tree. \n\n* Space complexity : in both serialization and deserialization functions,\n we keep the entire tree, either at the beginning or at the end,\n therefore, the space complexity is $$O(N)$$. \n \nThe solutions with BFS or other DFS strategies normally will have the same\ntime and space complexity.\n \n**Further Space Optimization**\n\nIn the above solution, we store the node value and \nthe references to ```None``` child nodes, \nwhich means $$N \\cdot V + 2N$$ complexity, \nwhere $$V$$ is the size of value. \nThat is called *natural serialization*, and has was implemented above.\n\nThe $$N \\cdot V$$ component here is the encoding of values, can't be optimized further,\nbut there is a way to reduce $$2N$$ part \nwhich is the encoding of the tree structure.\n\nThe number of unique binary tree structures that can be \nconstructed using `n` nodes is $$C(n)$$, where $$C(n)$$ is the `nth` Catalan\nnumber. Please refer to [this article](https://leetcode.com/articles/unique-binary-search-trees/) for more information.\n\nThere are $$C(n)$$ possible structural configurations of \na binary tree with n nodes, so the largest index value \nthat we might need to store is $$C(n) - 1$$.\nThat means storing the index value could require up to \n1 bit for $$n \\leq 2$$, or $$\\lceil log_2(C(n) - 1) \\rceil$$ bits for $$n > 2$$.\n\nIn this way one could reduce the encoding of the tree structure by $$\\log N$$.\nMore precisely, the [Catalan numbers](https://en.wikipedia.org/wiki/Catalan_number) grow as\n$$C(n) \\sim \\frac{4^n}{n^{3/2}\\sqrt{\\pi}}$$ and hence the theoretical minimum of storage\n for the tree structure that could be achieved\nis $$log(C(n)) \\sim 2n - \\frac{3}{2}\\log(n) - \\frac{1}{2}\\log(\\pi)$$",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "serialize-and-deserialize-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.781,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2003",
                "title": "Flatten Nested List Iterator",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "341",
                    "questionFrontendId": "341",
                    "sessionId": "968792",
                    "questionTitle": "Flatten Nested List Iterator",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/flatten-nested-list-iterator/submit/",
                    "interpretUrl": "/problems/flatten-nested-list-iterator/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *   public:\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool isInteger() const;\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     int getInteger() const;\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     const vector<NestedInteger> &getList() const;\\n * };\\n */\\n\\nclass NestedIterator {\\npublic:\\n    NestedIterator(vector<NestedInteger> &nestedList) {\\n        \\n    }\\n    \\n    int next() {\\n        \\n    }\\n    \\n    bool hasNext() {\\n        \\n    }\\n};\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * NestedIterator i(nestedList);\\n * while (i.hasNext()) cout << i.next();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * public interface NestedInteger {\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public boolean isInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     public Integer getInteger();\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return empty list if this NestedInteger holds a single integer\\n *     public List<NestedInteger> getList();\\n * }\\n */\\npublic class NestedIterator implements Iterator<Integer> {\\n\\n    public NestedIterator(List<NestedInteger> nestedList) {\\n        \\n    }\\n\\n    @Override\\n    public Integer next() {\\n        \\n    }\\n\\n    @Override\\n    public boolean hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * NestedIterator i = new NestedIterator(nestedList);\\n * while (i.hasNext()) v[f()] = i.next();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger(object):\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator(object):\\n\\n    def __init__(self, nestedList):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        :type nestedList: List[NestedInteger]\\n        \\\"\\\"\\\"\\n        \\n\\n    def next(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def hasNext(self):\\n        \\\"\\\"\\\"\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n# Your NestedIterator object will be instantiated and called as such:\\n# i, v = NestedIterator(nestedList), []\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger:\\n#    def isInteger(self) -> bool:\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self) -> int:\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self) -> [NestedInteger]:\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator:\\n    def __init__(self, nestedList: [NestedInteger]):\\n        \\n    \\n    def next(self) -> int:\\n        \\n    \\n    def hasNext(self) -> bool:\\n         \\n\\n# Your NestedIterator object will be instantiated and called as such:\\n# i, v = NestedIterator(nestedList), []\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * *********************************************************************\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * *********************************************************************\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\n *\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\n * };\\n */\\nstruct NestedIterator {\\n    \\n};\\n\\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\\n    \\n}\\n\\nbool nestedIterHasNext(struct NestedIterator *iter) {\\n    \\n}\\n\\nint nestedIterNext(struct NestedIterator *iter) {\\n    \\n}\\n\\n/** Deallocates memory previously allocated for the iterator */\\nvoid nestedIterFree(struct NestedIterator *iter) {\\n    \\n}\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\\n * while (nestedIterHasNext(i)) printf(\\\"%d\\\\n\\\", nestedIterNext(i));\\n * nestedIterFree(i);\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * interface NestedInteger {\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool IsInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     int GetInteger();\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     IList<NestedInteger> GetList();\\n * }\\n */\\npublic class NestedIterator {\\n\\n    public NestedIterator(IList<NestedInteger> nestedList) {\\n        \\n    }\\n\\n    public bool HasNext() {\\n        \\n    }\\n\\n    public int Next() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * NestedIterator i = new NestedIterator(nestedList);\\n * while (i.HasNext()) v[f()] = i.Next();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * function NestedInteger() {\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     @return {boolean}\\n *     this.isInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     @return {integer}\\n *     this.getInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     Return null if this NestedInteger holds a single integer\\n *     @return {NestedInteger[]}\\n *     this.getList = function() {\\n *         ...\\n *     };\\n * };\\n */\\n/**\\n * @constructor\\n * @param {NestedInteger[]} nestedList\\n */\\nvar NestedIterator = function(nestedList) {\\n    \\n};\\n\\n\\n/**\\n * @this NestedIterator\\n * @returns {boolean}\\n */\\nNestedIterator.prototype.hasNext = function() {\\n    \\n};\\n\\n/**\\n * @this NestedIterator\\n * @returns {integer}\\n */\\nNestedIterator.prototype.next = function() {\\n    \\n};\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * var i = new NestedIterator(nestedList), a = [];\\n * while (i.hasNext()) a.push(i.next());\\n*/\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n#\\n#class NestedInteger\\n#    def is_integer()\\n#        \\\"\\\"\\\"\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\n#        @return {Boolean}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_integer()\\n#        \\\"\\\"\\\"\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return nil if this NestedInteger holds a nested list\\n#        @return {Integer}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_list()\\n#        \\\"\\\"\\\"\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return nil if this NestedInteger holds a single integer\\n#        @return {NestedInteger[]}\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator\\n    # @param {NestedInteger[]} nested_list\\n    def initialize(nested_list)\\n        \\n    end\\n\\n    # @return {Boolean}\\n    def has_next\\n        \\n    end\\n\\n    # @return {Integer}\\n    def next\\n        \\n    end\\nend\\n\\n# Your NestedIterator will be called like this:\\n# i, v = NestedIterator.new(nested_list), []\\n# while i.has_next()\\n#    v << i.next\\n# end\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public func isInteger() -> Bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     public func getInteger() -> Int\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public func setInteger(value: Int)\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public func add(elem: NestedInteger)\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     public func getList() -> [NestedInteger]\\n * }\\n */\\n\\nclass NestedIterator {\\n\\n    init(_ nestedList: [NestedInteger]) {\\n        \\n    }\\n    \\n    func next() -> Int {\\n        \\n    }\\n    \\n    func hasNext() -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * let obj = NestedIterator(nestedList)\\n * let ret_1: Int = obj.next()\\n * let ret_2: Bool = obj.hasNext()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * type NestedInteger struct {\\n * }\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * func (this NestedInteger) IsInteger() bool {}\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * // So before calling this method, you should have a check\\n * func (this NestedInteger) GetInteger() int {}\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * func (n *NestedInteger) SetInteger(value int) {}\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n * func (this *NestedInteger) Add(elem NestedInteger) {}\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The list length is zero if this NestedInteger holds a single integer\\n * // You can access NestedInteger's List element directly if you want to modify it\\n * func (this NestedInteger) GetList() []*NestedInteger {}\\n */\\n\\ntype NestedIterator struct {\\n    \\n}\\n\\nfunc Constructor(nestedList []*NestedInteger) *NestedIterator {\\n    \\n}\\n\\nfunc (this *NestedIterator) Next() int {\\n    \\n}\\n\\nfunc (this *NestedIterator) HasNext() bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\n\\nclass NestedIterator(_nestedList: List[NestedInteger]) {\\n    def next(): Int = {\\n        \\n    }\\n    \\n    def hasNext(): Boolean = {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * var obj = new NestedIterator(nestedList)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     constructor()\\n *\\n *     // Constructor initializes a single integer.\\n *     constructor(value: Int)\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     fun isInteger(): Boolean\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     fun getInteger(): Int?\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     fun setInteger(value: Int): Unit\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     fun add(ni: NestedInteger): Unit\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     fun getList(): List<NestedInteger>?\\n * }\\n */\\n\\nclass NestedIterator(nestedList: List<NestedInteger>) {\\n    fun next(): Int {\\n        \\n    }\\n    \\n    fun hasNext(): Boolean {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * var obj = NestedIterator(nestedList)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// #[derive(Debug, PartialEq, Eq)]\\n// pub enum NestedInteger {\\n//   Int(i32),\\n//   List(Vec<NestedInteger>)\\n// }\\nstruct NestedIterator {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl NestedIterator {\\n\\n    fn new(nestedList: Vec<NestedInteger>) -> Self {\\n        \\n    }\\n    \\n    fn next(&self) -> i32 {\\n        \\n    }\\n    \\n    fn has_next(&self) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * let obj = NestedIterator::new(nestedList);\\n * let ret_1: i32 = obj.next();\\n * let ret_2: bool = obj.has_next();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *\\n *     // if value is not specified, initializes an empty list.\\n *     // Otherwise initializes a single integer equal to value.\\n *     function __construct($value = null)\\n *\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     function isInteger() : bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     function getInteger()\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     function setInteger($i) : void\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     function add($ni) : void\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     function getList() : array\\n * }\\n */\\n\\nclass NestedIterator {\\n    /**\\n     * @param NestedInteger[] $nestedList\\n     */\\n    function __construct($nestedList) {\\n        \\n    }\\n    \\n    /**\\n     * @return Integer\\n     */\\n    function next() {\\n        \\n    }\\n    \\n    /**\\n     * @return Boolean\\n     */\\n    function hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * $obj = NestedIterator($nestedList);\\n * $ret_1 = $obj->next();\\n * $ret_2 = $obj->hasNext();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     If value is provided, then it holds a single integer\\n *     Otherwise it holds an empty nested list\\n *     constructor(value?: number) {\\n *         ...\\n *     };\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     isInteger(): boolean {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     getInteger(): number | null {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     setInteger(value: number) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     add(elem: NestedInteger) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds,\\n *     or an empty list if this NestedInteger holds a single integer\\n *     getList(): NestedInteger[] {\\n *         ...\\n *     };\\n * };\\n */\\n\\nclass NestedIterator {\\n    constructor(nestedList: NestedInteger[]) {\\n\\t\\t\\n    }\\n\\n    hasNext(): boolean {\\n\\t\\t\\n    }\\n\\n\\tnext(): number {\\n\\t\\t\\n    }\\n}\\n\\n/**\\n * Your ParkingSystem object will be instantiated and called as such:\\n * var obj = new NestedIterator(nestedList)\\n * var a: number[] = []\\n * while (obj.hasNext()) a.push(obj.next());\\n */\"}]",
                    "sampleTestCase": "[[1,1],2,[1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"\",\n  \"params\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"list<NestedInteger>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>\n\n<p>Implement the <code>NestedIterator</code> class:</p>\n\n<ul>\n\t<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li>\n\t<li><code>int next()</code> Returns the next integer in the nested list.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li>\n</ul>\n\n<p>Your code will be tested with the following pseudocode:</p>\n\n<pre>\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n</pre>\n\n<p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> [1,1,2,1,1]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> [1,4,6]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Flatten Nested Iterator",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nIf you aren't at all familiar with Iterators, then we suggest having a go at [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/). Additionally, the [Solution Article for Peeking Iterator](https://leetcode.com/problems/peeking-iterator/solution/) has a special introduction section that introduces you to what Iterators are.\n\nIf you're still having trouble, have a go at writing a function that simply flattens a nested list (i.e. not as an iterator). Then, think about how you could adapt it to be an iterator.\n\nIn this article, we cover 5 approaches. Approach 4 is primarily for Java programmers, and Approach 5 is for programmers of languages where generators are supported.\n\n<br/>\n\n---\n\n#### Approach 1: Make a Flat List with Recursion\n\n**Intuition**\n\nThe simplest way of solving this problem is to flatten the entire input list, in the constructor. Then the actual iterator methods can simply work with this flattened list instead of needing to worry about the input structure.\n\nThis approach splits the coding into two parts:\n\n1. A function that the constructor can call to make a flattened list. \n2. `next()` and `hasNext()` methods that iterate over a plain list, by keeping track of the current position within it.\n\nThe first part is best done with recursion (iteration is more complicated, and if you were going to use it, then you may as well look at approaches 2, 3, and 4 instead). This approach is the only recursive one that works in any programming language (as of the time of writing this article, things are changing!).\n\nTo flatten the list recursively, notice that we can look at the input as a tree. The integers are the leaf nodes, and the order they should be returned is from left to right.\n\n!?!../Documents/341_flatten_tree_expansion.json:960,540!?!\n\nTherefore, we can use a recursive depth-first search to flatten it.\n\n```text\nintegers = []\n\ndefine function flattenList(nestedList):\n    for nestedInteger in nestedList:\n        if nestedInteger.isInteger():\n            append nestedInteger.getInteger() to integers\n        else:\n            recursively call flattenList on nestedInteger.getList()\n```\n\nHere is an animation showing the flattening algorithm.\n\n!?!../Documents/341_flatten_tree.json:960,600!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/eSjMjErq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eSjMjErq\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    We'll analyze each of the methods separately.\n\n    \n    - **Constructor:** $$O(N + L)$$.\n\n        The constructor is where all the time-consuming work is done.\n\n        For each list within the nested list, there will be one call to `flattenList(...)`. The loop within `flattenList(...)` will then iterate $$n$$ times, where $$n$$ is the number of integers within that list. Across all calls to `flattenList(...)`, there will be a total of $$N$$ loop iterations. Therefore, the time complexity is the number of lists plus the number of integers, giving us $$O(N + L)$$.\n\n        Notice that the maximum depth of the nesting does not impact the time complexity.\n        \n\n    - **next():** $$O(1)$$.\n        \n        Getting the next element requires incrementing `position` by 1 and accessing an element at a particular index of the `integers` list. Both of these are $$O(1)$$ operations.\n\n    - **hasNext():** $$O(1)$$.\n\n        Checking whether or not there is a next element requires comparing the length of the `integers` list to the `position` variable. This is an $$O(1)$$ operation.\n        \n\n- Space complexity : $$O(N + D)$$.\n\n    The most obvious auxiliary space is the `integers` list. The length of this is $$O(N)$$.\n\n    The less obvious auxiliary space is the space used by the `flattenList(...)` function. Recall that recursive functions need to keep track of where they're up to by putting stack frames on the runtime stack. Therefore, we need to determine what the maximum number of stack frames there could be at a time is. Each time we encounter a nested list, we call `flattenList(...)` and a stack frame is added. Each time we finish processing a nested list, `flattenList(...)` returns and a stack frame is removed. Therefore, the maximum number of stack frames on the runtime stack is the maximum nesting depth, $$D$$. \n\n    Because these two operations happen one-after-the-other, and either could be the largest, we add their time complexities together giving a final result of $$O(N + D)$$.\n\n<br/>\n\n---\n\n#### Approach 2: Stack\n\n**Intuition**\n\nThe downside of Approach 1 is that it creates a new data structure instead of simply iterating over the given one. Instead, we should find a way to step through the integers, one at a time, keeping track of where we're currently up to in `nestedList`.\n\nA better way is to do an iterative depth-first search, based on the following tree traversal algorithm:\n\n```text\ndefine function iterativeDepthFirstSearch(nestedList):\n    result = []\n\n    stack = a new Stack\n    push all items in nestedList onto stack, in reverse order\n\n    while stack is not empty:\n        nestedInteger = pop top of stack\n        if nestedInteger.isInteger():\n            append nestedInteger.getInteger() to result\n        else:\n            list = nestedInteger.getList()\n            push all items in list onto stack, in reverse order\n\n    return result\n```\n\nWhile we could use this algorithm in the constructor like before, a better way would be to store `stack` on the iterator object and progress the algorithm on each call to `next()` to get the next integer out.\n\nNotice that if the top of the stack is an integer, then we've already found the next integer. Otherwise, if it's a list, then the `else` is adding the list contents to `stack`. On the next loop iteration, the same will happen. We could write an algorithm to get the next integer as follows.\n\n```text\nstack = a new Stack\npush all items in nestedList onto stack, in reverse order\n\ndefine function getNextInteger():\n    while stack is not empty:\n        nestedInteger = pop top off stack\n        if nestedInteger.isInteger():\n            RETURN nestedInteger.getInteger()\n        else:\n            list = nestedInteger.getList()\n            push all items in list onto stack, in reverse order\n\n```\n\nNotice that the `stack` is shared between calls. This means that `getNextInteger()` will find an integer and return it, while still preserving the state of the stack. We can then call `getNextInteger()` again to get the next integer, and so forth.\n\nTo simplify the code a bit, we can change our loop condition so that it checks if the top of the stack is still a list. The loop body should push the contents of the list onto the stack (in reverse). Eventually, there will be an integer on the top of the stack, OR the stack will be empty. Being able to get the next integer to the top of the stack allows the `next()` and `hasNext()` methods to access it.\n\n```text\nstack = a new Stack\npush all items in nestedList onto stack, in reverse order\n\ndefine function makeStackTopAnInteger():\n    while stack is not empty AND the nestedInteger at top of stack is a list:\n        nestedInteger = pop top off stack\n        list = nestedInteger.getList()\n        push all items in list onto stack, in reverse order\n```\n\n\n**Algorithm**\n\nLet's define a private method called `makeStackTopAnInteger()` that contains the algorithm to make the stack top an integer (as described above). The `makeStackTopAnInteger()` method never *removes* integers. \n\nThe `next()` and `hasNext()` methods should call `makeStackTopAnInteger()` before doing anything else. This means that they can then *assume* that either the stack top is an integer, *or* the stack is empty. Then, their definitions are as follows:\n\n- **hasNext():** Returns `true` if the stack still contains items, `false` if not.\n- **next():** If the stack still contains items, then it is guaranteed the top is an integer. This integer is popped and returned. If the stack is empty, then the behavior is language-dependent. For example, in Java, a `NoSuchElementException` should be throw.\n\n\n<iframe src=\"https://leetcode.com/playground/TP2VJHdq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TP2VJHdq\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity.\n\n    - **Constructor:** $$O(N + L)$$.\n\n        The worst-case occurs when the initial input nestedList consists entirely of integers and empty lists (everything is in the top-level). In this case, every item is reversed and stored, giving a total time complexity of $$O(N + L)$$.\n\n    - **makeStackTopAnInteger():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        If the top of the stack is an integer, then this function does nothing; taking $$O(1)$$ time.\n\n        Otherwise, it needs to process the stack until an integer is on top. The best way of analyzing the time complexity is to look at the total cost across all calls to `makeStackTopAnInteger()` and then divide by the number of calls made. Once the iterator is exhausted `makeStackTopAnInteger()` must have seen every integer at least once, costing $$O(N)$$ time. Additionally, it has seen every list (except the first) on the stack at least once also, so this costs $$O(L)$$ time. Adding these together, we get $$O(N + L)$$ time.\n\n        The amortized time of a single `makeStackTopAnInteger` is the total cost, $$O(N + L)$$, divided by the number of times it's called. In order to get all integers, we need to have called it $$N$$ times. This gives us an amortized time complexity of $$\\dfrac{O(N + L)}{N} = O(\\dfrac{N}{N} + \\dfrac{L}{N}) = O(\\dfrac{L}{N})$$.\n\n    - **next():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        All of this method is $$O(1)$$, except for possibly the call to `makeStackTopAnInteger()`, giving us a time complexity the same as `makeStackTopAnInteger()`.\n\n    - **hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        All of this method is $$O(1)$$, except for possibly the call to `makeStackTopAnInteger()`, giving us a time complexity the same as `makeStackTopAnInteger()`.\n\n- Space complexity : $$O(N + L)$$.\n\n    In the worst case, where the top list contains $$N$$ integers, or $$L$$ empty lists, it will cost $$O(N + L)$$ space. Other expensive cases occur when the nesting is very deep. However, it's useful to remember that $$D \u2264 L$$ (because each layer of nesting requires another list), and so we don't need to take this into account.\n\n<br/>\n\n---\n\n#### Approach 3: Two Stacks\n\n**Intuition**\n\nReversing the lists to put them onto the stack can be an expensive operation, and it turns out it isn't necessary.\n\nInstead of pushing every item of a sub-list onto the stack, we can instead associate an index pointer with each sub-list, that keeps track of how far along that sub-list we are. Adding a new sub-list to the stack now becomes an $$O(1)$$ operation instead of a $$O(length of sublist)$$ one. \n\nHere is an animation showing this approach.\n\n!?!../Documents/341_flatten_tree_two_stacks.json:960,400!?!\n\nThe *total* time complexity across all method calls for using up the entire iterator remains the same, *but* work is only done when it's necessary, thus improving performance when we only use part of the iterator. This is a desirable property for an iterator.\n\n**Algorithm**\n\nThis approach can be implemented as either one stack of pairs/ tuples, or two stacks with one for `NestedInteger`s and the other for indexes. The best decision for this is language-dependent. I tried both for the Java and found that attempting to put `Pair` objects onto a single stack doesn't work well because updating an index count requires popping and then reconstructing the entire `Pair` due to immutability (alternatives such as using length-2 `Lists`s as pairs are possible, but I don't think ideal). Using two stacks is cleaner.\n\n<iframe src=\"https://leetcode.com/playground/kw9U2WL6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kw9U2WL6\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        Pushing a list onto a `stack` is *by reference* in all the programming languages we're using here. This means that instead of creating a new list, some information about how to get to the existing list is put onto the stack. The list is not traversed, as it doesn't need reversing this time, and we're not pushing the items on one-by-one. This is, therefore, an $$O(1)$$ operation.\n\n    - **makeStackTopAnInteger() / next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as Approach 2.\n\n- Space complexity : $$O(D)$$.\n\n    At any given time, the stack contains only *one* nestedList reference for each level. This is unlike the previous approach, wherein the worst case we need to put almost all elements onto the stack.\n\n    Because there's one reference on the stack at each level, the worst case is when we're looking at the deepest leveled list, giving a space complexity is $$O(D)$$.\n\n<br/>\n\n---\n\n#### Approach 4: Stack of Iterators\n\n**Intuition**\n\n*This approach works best in Java but isn't well suited to other languages. Have a look at Approach 5 if you're looking for an elegant Python and JavaScript approach.*\n\nIf you're using Java, a very elegant approach is to maintain a stack of `ListIterators`. This approach is closely based on Approach 3. \n\nInstead of keeping a `Stack` of indexes to keep track of where we are in each `List`, we can simply make each `List` a `ListIterator`, thus keeping a `Stack` of `ListIterator`s. Then, we can use the `next()` and `hasNext()` methods on those `ListIterators`. Internally, the `ListIterator` is storing the index.\n\nA downside to this approach is that for `hasNext()` to work correctly, it needs to know whether or not there are any *integers* remaining (empty lists don't count!). The only way it can do this is to remove items from the `ListIterator` and check whether or not they are an integer. It cannot, however, put the integers back again. Therefore, if it removes an integer it will need to put it into a `peeked` field so that the `next()` function can return that integer. This is the same as in the [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/) problem.\n\nA clean design is to have a `setPeeked()` method that is analogous to the `makeStackTopAnInteger()` method. This method should firstly check if `peeked` is empty, and if it is empty, then find the next integer to put in it. This integer is *removed* from the stack (as explained above).\n\nRegardless of the need for `peeked`, this is probably the best design if you're coding in Java.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/uMiDg5K9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uMiDg5K9\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        Same as Approach 3.\n\n    - **makeStackTopAnInteger() / next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as Approach 3.\n\n- Space complexity : $$O(D)$$.\n\n    Same as Approach 3.\n\nIn practice, this code runs faster than Approach 3, probably because most of the functionality relies on `ListIterator`; an optimized API class. Approach 3 was really just our own implementation of `ListIterator`s.\n\n<br/>\n\n---\n\n#### Approach 5: Using a Generator\n\n**Intuition**\n\n*This approach will only work in programming languages that support **generator functions**, for example, **Python**, **JavaScript** and **C#**. At the time of writing this article, **C++** doesn't support it, but it is expected to support them soon.* \n\nIn a nutshell, generator functions are a special type of function that can \"return\" multiple values. When you call a **generator function**, you get back a special object called a **generator**. This **generator** can then be used to get each value from the function, one at a time.\n\nTo \"return\" multiple values from these **generator functions**, a special keyword, `yield`, is used. `yield` behaves similarly to a `return` statement, except that it does not terminate the function. Instead, it pauses the function, and \"returns\" the `yield`ed value. Then, when we need another value, the function resumes from where it left off. It continues until it gets to another `yield`, just like before. When the function gets to the end (no more code left to run), it stops. \n\nFor example in Python, if we have a **generator** `gen`, we can tell it to resume the function and get the next value by calling `next(gen)`.\n\nAs an example, the **generators** created by this Python **generator function** can be used to get all numbers from `a` to `b`:\n\n```python\n# This is effectively how range works in Python. We're implementing our own\n# version of it here to see how generators work.\n# Many Python 3 library functions are generators.\ndef range_generator(a, b):\n    current = a\n    while current < b:\n        # This yield \"returns\" a value from the function and pauses it\n        yield current\n        # Once the function is \"woken up\" by another call to next(...), it will resume\n        # by continuing with the next statement (current += 1), until it either\n        # hits another yield or reaches the end of the function\n        current += 1\n    # When we get here, the generator is finished.\n\n# Create a new range_generator object for the numbers 10 to 20.\nten_to_twenty_generator = range_generator(10, 20)\n\n# Get the first 3 values out of the range_generator object we made.\nprint(next(ten_to_twenty_generator)) # 10\nprint(next(ten_to_twenty_generator)) # 11\nprint(next(ten_to_twenty_generator)) # 12\n\n# Here's another example of using the generator with a loop. As we said, it's\n# the same as the range function.\n# This is a new generator object, not the 10-20 one from above.\nfor number in range_generator(5, 9):\n    print(number)\nprint(\"Done!\")\n# Will print\n# 5\n# 6\n# 7\n# 8\n# Done\n```\n\n\nEnd-of-function behaviour for **generators** is language-dependent. For example, in Python, once the end of the function is reached, a `StopIteration` exception is raised. When you use your generator in a loop, e.g. `for number in range_generator(5, 9):`, it will simply stop when it gets this exception. The programmer doesn't need to explicitly handle it.\n\nNow that we know what a **generator** is, we'll use one to implement a `NestedIterator`. \n\nBack in Approach 1, we started by flattening the entire list with the following recursive algorithm:\n\n```python\nintegers = []\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            integers.append(nested_integer.getInteger())\n        else:\n            flatten_list(nested_integer.getList())\n```\n\nSomething cool about **generator functions** is that they can be recursive.\n\nSo, instead of pushing each integer to a list, we could just `yield` them. This way, when we want the next integer, the function will resume from after the `yield` until it finds the next one. \n\nLet's replace the list append with `yield`.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            flatten_list(nested_integer.getList())\n```\n\nThis has a mistake though; because `flatten_list` is now a generator function, the recursive call to `flatten_list` only *creates a new generator*; it doesn't actually `yield` the values from the nested generator.\n\nTo fix this, we can loop over each item of the recursive generator and `yield` them instead.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            for integer in flatten_list(nested_integer.getList()):\n                yield integer\n```\n\nSome languages, such as Python, offer a shorthand for this looping, in Python called `yield from`. Here is its usage.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            yield from flatten_list(nested_integer.getList())\n```\n\nNote that, not all languages that support `yield` also support `yield from`. For example, **C#** has `yield`, but no `yield from` equivalent. JavaScript supports it, but instead calls it `yield*`.\n\n**Algorithm**\n\nFor this approach, we also need to add a `peeked` field, much like in the [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/) problem. This is because the only way to know if there *is* a next value is to take it out of the generator, and generators can only go forwards, not backward.\n\n<iframe src=\"https://leetcode.com/playground/T6oKpBQF/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"T6oKpBQF\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        In the constructor, we only create a generator object. Simply creating a generator object doesn't invoke any code in the generator function itself (only calls to next do).\n\n        Because the time taken to create the generator doesn't vary with the size of the input, the time complexity is $$O(1)$$.\n\n    - **next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as approaches 2, 3, and 4.\n\n\n- Space complexity : $$O(D)$$.\n\n    We recursively call `_int_generator` within itself for nested lists. Therefore, the runtime stack uses memory proportional to the current depth of the list. Seeing as the largest depth is $$D$$, the space complexity is $$O(D)$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "flatten-nested-iterator",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.974,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2004",
                "title": "Insert Delete GetRandom O(1)",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "380",
                    "questionFrontendId": "380",
                    "sessionId": "968792",
                    "questionTitle": "Insert Delete GetRandom O(1)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/insert-delete-getrandom-o1/submit/",
                    "interpretUrl": "/problems/insert-delete-getrandom-o1/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class RandomizedSet {\\npublic:\\n    /** Initialize your data structure here. */\\n    RandomizedSet() {\\n        \\n    }\\n    \\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    bool insert(int val) {\\n        \\n    }\\n    \\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    bool remove(int val) {\\n        \\n    }\\n    \\n    /** Get a random element from the set. */\\n    int getRandom() {\\n        \\n    }\\n};\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * RandomizedSet* obj = new RandomizedSet();\\n * bool param_1 = obj->insert(val);\\n * bool param_2 = obj->remove(val);\\n * int param_3 = obj->getRandom();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class RandomizedSet {\\n\\n    /** Initialize your data structure here. */\\n    public RandomizedSet() {\\n        \\n    }\\n    \\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    public boolean insert(int val) {\\n        \\n    }\\n    \\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    public boolean remove(int val) {\\n        \\n    }\\n    \\n    /** Get a random element from the set. */\\n    public int getRandom() {\\n        \\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * RandomizedSet obj = new RandomizedSet();\\n * boolean param_1 = obj.insert(val);\\n * boolean param_2 = obj.remove(val);\\n * int param_3 = obj.getRandom();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class RandomizedSet(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, val):\\n        \\\"\\\"\\\"\\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\\n        :type val: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n    def remove(self, val):\\n        \\\"\\\"\\\"\\n        Removes a value from the set. Returns true if the set contained the specified element.\\n        :type val: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n    def getRandom(self):\\n        \\\"\\\"\\\"\\n        Get a random element from the set.\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your RandomizedSet object will be instantiated and called as such:\\n# obj = RandomizedSet()\\n# param_1 = obj.insert(val)\\n# param_2 = obj.remove(val)\\n# param_3 = obj.getRandom()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class RandomizedSet:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, val: int) -> bool:\\n        \\\"\\\"\\\"\\n        Inserts a value to the set. Returns true if the set did not already contain the specified element.\\n        \\\"\\\"\\\"\\n        \\n\\n    def remove(self, val: int) -> bool:\\n        \\\"\\\"\\\"\\n        Removes a value from the set. Returns true if the set contained the specified element.\\n        \\\"\\\"\\\"\\n        \\n\\n    def getRandom(self) -> int:\\n        \\\"\\\"\\\"\\n        Get a random element from the set.\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your RandomizedSet object will be instantiated and called as such:\\n# obj = RandomizedSet()\\n# param_1 = obj.insert(val)\\n# param_2 = obj.remove(val)\\n# param_3 = obj.getRandom()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} RandomizedSet;\\n\\n/** Initialize your data structure here. */\\n\\nRandomizedSet* randomizedSetCreate() {\\n    \\n}\\n\\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\nbool randomizedSetInsert(RandomizedSet* obj, int val) {\\n  \\n}\\n\\n/** Removes a value from the set. Returns true if the set contained the specified element. */\\nbool randomizedSetRemove(RandomizedSet* obj, int val) {\\n  \\n}\\n\\n/** Get a random element from the set. */\\nint randomizedSetGetRandom(RandomizedSet* obj) {\\n  \\n}\\n\\nvoid randomizedSetFree(RandomizedSet* obj) {\\n    \\n}\\n\\n/**\\n * Your RandomizedSet struct will be instantiated and called as such:\\n * RandomizedSet* obj = randomizedSetCreate();\\n * bool param_1 = randomizedSetInsert(obj, val);\\n \\n * bool param_2 = randomizedSetRemove(obj, val);\\n \\n * int param_3 = randomizedSetGetRandom(obj);\\n \\n * randomizedSetFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class RandomizedSet {\\n\\n    /** Initialize your data structure here. */\\n    public RandomizedSet() {\\n        \\n    }\\n    \\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    public bool Insert(int val) {\\n        \\n    }\\n    \\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    public bool Remove(int val) {\\n        \\n    }\\n    \\n    /** Get a random element from the set. */\\n    public int GetRandom() {\\n        \\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * RandomizedSet obj = new RandomizedSet();\\n * bool param_1 = obj.Insert(val);\\n * bool param_2 = obj.Remove(val);\\n * int param_3 = obj.GetRandom();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar RandomizedSet = function() {\\n    \\n};\\n\\n/**\\n * Inserts a value to the set. Returns true if the set did not already contain the specified element. \\n * @param {number} val\\n * @return {boolean}\\n */\\nRandomizedSet.prototype.insert = function(val) {\\n    \\n};\\n\\n/**\\n * Removes a value from the set. Returns true if the set contained the specified element. \\n * @param {number} val\\n * @return {boolean}\\n */\\nRandomizedSet.prototype.remove = function(val) {\\n    \\n};\\n\\n/**\\n * Get a random element from the set.\\n * @return {number}\\n */\\nRandomizedSet.prototype.getRandom = function() {\\n    \\n};\\n\\n/** \\n * Your RandomizedSet object will be instantiated and called as such:\\n * var obj = new RandomizedSet()\\n * var param_1 = obj.insert(val)\\n * var param_2 = obj.remove(val)\\n * var param_3 = obj.getRandom()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class RandomizedSet\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    Inserts a value to the set. Returns true if the set did not already contain the specified element.\\n    :type val: Integer\\n    :rtype: Boolean\\n=end\\n    def insert(val)\\n        \\n    end\\n\\n\\n=begin\\n    Removes a value from the set. Returns true if the set contained the specified element.\\n    :type val: Integer\\n    :rtype: Boolean\\n=end\\n    def remove(val)\\n        \\n    end\\n\\n\\n=begin\\n    Get a random element from the set.\\n    :rtype: Integer\\n=end\\n    def get_random()\\n        \\n    end\\n\\n\\nend\\n\\n# Your RandomizedSet object will be instantiated and called as such:\\n# obj = RandomizedSet.new()\\n# param_1 = obj.insert(val)\\n# param_2 = obj.remove(val)\\n# param_3 = obj.get_random()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass RandomizedSet {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    func insert(_ val: Int) -> Bool {\\n        \\n    }\\n    \\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    func remove(_ val: Int) -> Bool {\\n        \\n    }\\n    \\n    /** Get a random element from the set. */\\n    func getRandom() -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * let obj = RandomizedSet()\\n * let ret_1: Bool = obj.insert(val)\\n * let ret_2: Bool = obj.remove(val)\\n * let ret_3: Int = obj.getRandom()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type RandomizedSet struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() RandomizedSet {\\n    \\n}\\n\\n\\n/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\nfunc (this *RandomizedSet) Insert(val int) bool {\\n    \\n}\\n\\n\\n/** Removes a value from the set. Returns true if the set contained the specified element. */\\nfunc (this *RandomizedSet) Remove(val int) bool {\\n    \\n}\\n\\n\\n/** Get a random element from the set. */\\nfunc (this *RandomizedSet) GetRandom() int {\\n    \\n}\\n\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * obj := Constructor();\\n * param_1 := obj.Insert(val);\\n * param_2 := obj.Remove(val);\\n * param_3 := obj.GetRandom();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class RandomizedSet() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    def insert(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    def remove(`val`: Int): Boolean = {\\n        \\n    }\\n\\n    /** Get a random element from the set. */\\n    def getRandom(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * var obj = new RandomizedSet()\\n * var param_1 = obj.insert(`val`)\\n * var param_2 = obj.remove(`val`)\\n * var param_3 = obj.getRandom()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class RandomizedSet() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    fun insert(`val`: Int): Boolean {\\n        \\n    }\\n\\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    fun remove(`val`: Int): Boolean {\\n        \\n    }\\n\\n    /** Get a random element from the set. */\\n    fun getRandom(): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * var obj = RandomizedSet()\\n * var param_1 = obj.insert(`val`)\\n * var param_2 = obj.remove(`val`)\\n * var param_3 = obj.getRandom()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct RandomizedSet {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl RandomizedSet {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\\n    fn insert(&self, val: i32) -> bool {\\n        \\n    }\\n    \\n    /** Removes a value from the set. Returns true if the set contained the specified element. */\\n    fn remove(&self, val: i32) -> bool {\\n        \\n    }\\n    \\n    /** Get a random element from the set. */\\n    fn get_random(&self) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * let obj = RandomizedSet::new();\\n * let ret_1: bool = obj.insert(val);\\n * let ret_2: bool = obj.remove(val);\\n * let ret_3: i32 = obj.get_random();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class RandomizedSet {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * Inserts a value to the set. Returns true if the set did not already contain the specified element.\\n     * @param Integer $val\\n     * @return Boolean\\n     */\\n    function insert($val) {\\n        \\n    }\\n  \\n    /**\\n     * Removes a value from the set. Returns true if the set contained the specified element.\\n     * @param Integer $val\\n     * @return Boolean\\n     */\\n    function remove($val) {\\n        \\n    }\\n  \\n    /**\\n     * Get a random element from the set.\\n     * @return Integer\\n     */\\n    function getRandom() {\\n        \\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * $obj = RandomizedSet();\\n * $ret_1 = $obj->insert($val);\\n * $ret_2 = $obj->remove($val);\\n * $ret_3 = $obj->getRandom();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class RandomizedSet {\\n    constructor() {\\n\\n    }\\n\\n    insert(val: number): boolean {\\n\\n    }\\n\\n    remove(val: number): boolean {\\n\\n    }\\n\\n    getRandom(): number {\\n\\n    }\\n}\\n\\n/**\\n * Your RandomizedSet object will be instantiated and called as such:\\n * var obj = new RandomizedSet()\\n * var param_1 = obj.insert(val)\\n * var param_2 = obj.remove(val)\\n * var param_3 = obj.getRandom()\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define randomized-set%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; insert : exact-integer? -> boolean?\\n    (define/public (insert val)\\n\\n      )\\n    ; remove : exact-integer? -> boolean?\\n    (define/public (remove val)\\n\\n      )\\n    ; get-random : -> exact-integer?\\n    (define/public (get-random)\\n\\n      )))\\n\\n;; Your randomized-set% object will be instantiated and called as such:\\n;; (define obj (new randomized-set%))\\n;; (define param_1 (send obj insert val))\\n;; (define param_2 (send obj remove val))\\n;; (define param_3 (send obj get-random))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec randomized_set_init_() -> any().\\nrandomized_set_init_() ->\\n  .\\n\\n-spec randomized_set_insert(Val :: integer()) -> boolean().\\nrandomized_set_insert(Val) ->\\n  .\\n\\n-spec randomized_set_remove(Val :: integer()) -> boolean().\\nrandomized_set_remove(Val) ->\\n  .\\n\\n-spec randomized_set_get_random() -> integer().\\nrandomized_set_get_random() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% randomized_set_init_(),\\n%% Param_1 = randomized_set_insert(Val),\\n%% Param_2 = randomized_set_remove(Val),\\n%% Param_3 = randomized_set_get_random(),\\n\\n%% randomized_set_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule RandomizedSet do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec insert(val :: integer) :: boolean\\n  def insert(val) do\\n\\n  end\\n\\n  @spec remove(val :: integer) :: boolean\\n  def remove(val) do\\n\\n  end\\n\\n  @spec get_random() :: integer\\n  def get_random() do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# RandomizedSet.init_()\\n# param_1 = RandomizedSet.insert(val)\\n# param_2 = RandomizedSet.remove(val)\\n# param_3 = RandomizedSet.get_random()\\n\\n# RandomizedSet.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"RandomizedSet\",\n    \"maxbytesperline\": 121000,\n    \"constructor\": {\n        \"params\": [\n        ],\n        \"comment\": \"Initialize your data structure here.\"\n    },\n    \"methods\": [\n        {\n            \"name\" : \"insert\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"val\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"boolean\"\n            },\n            \"comment\": \"Inserts a value to the set. Returns true if the set did not already contain the specified element.\"\n        },\n        {\n            \"name\" : \"remove\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"val\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"boolean\"\n            },\n            \"comment\": \"Removes a value from the set. Returns true if the set contained the specified element.\"\n        },\n        {\n            \"name\" : \"getRandom\",\n            \"params\": [\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            },\n            \"comment\": \"Get a random element from the set.\"\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement the <code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it&#39;s guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 *&nbsp;</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Insert Delete GetRandom O(1)",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nWe're asked to implement the structure \nwhich provides the following operations in _average_ $$\\mathcal{O}(1)$$ time:\n\n- Insert \n\n- Delete\n\n- GetRandom\n\nFirst of all - why this weird combination? \nThe structure looks quite theoretical, \nbut it's widely used in popular statistical algorithms like \n[Markov chain Monte Carlo](https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo) and \n[Metropolis\u2013Hastings algorithm](https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm). \nThese algorithms are for sampling from a probability distribution \nwhen it's difficult to compute the distribution itself. \n\nLet's figure out how to implement such a structure.\nStarting from the Insert, we immediately have two good candidates with $$\\mathcal{O}(1)$$\n[average insert time](https://wiki.python.org/moin/TimeComplexity):\n\n- Hashmap (or Hashset, the implementation is very similar): [Java HashMap](https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html) / [Python dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)\n\n- Array List: [Java ArrayList](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html) / [Python list](https://docs.python.org/3/tutorial/datastructures.html)\n\nLet's consider them one by one. \n\n> Hashmap provides Insert and Delete in \naverage constant time, although has problems with GetRandom. \n\nThe idea of GetRandom is to choose a random index and then to retrieve an\nelement with that index. There is no indexes in hashmap, and hence\nto get true random value, one has first to convert hashmap keys in a list,\nthat would take linear time. The solution here is to build a list of \nkeys aside and to use this list to compute GetRandom in constant time.\n\n> Array List has indexes and could provide Insert and GetRandom in \naverage constant time, though has problems with Delete. \n\nTo delete a value at arbitrary index takes linear time. \nThe solution here is to always delete the last value:\n\n- Swap the element to delete with the last one.\n\n- Pop the last element out.\n\nFor that, one has to compute an index of each element in constant time, and hence\nneeds a hashmap which stores `element -> its index` dictionary.\n\nBoth ways converge into the same combination of data structures:\n\n- Hashmap `element -> its index`.\n\n- Array List of elements.\n\n![fig](../Figures/380/structure2.png)\n<br /> \n<br />\n\n\n---\n#### Approach 1: HashMap + ArrayList\n\n**Insert**\n\n- Add value -> its index into dictionary, average $$\\mathcal{O}(1)$$ time.\n\n- Append value to array list, average $$\\mathcal{O}(1)$$ time as well.\n\n![fig](../Figures/380/isert.png)\n\n<iframe src=\"https://leetcode.com/playground/NBz6A7pX/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"NBz6A7pX\"></iframe>\n\n**Delete**\n\n- Retrieve an index of element to delete from the hashmap.\n\n- Move the last element to the place of the element to delete, $$\\mathcal{O}(1)$$ time.\n\n- Pop the last element out, $$\\mathcal{O}(1)$$ time.\n\n![fig](../Figures/380/delete.png)\n\n<iframe src=\"https://leetcode.com/playground/BrKuitZ7/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"BrKuitZ7\"></iframe>\n\n**GetRandom**\n\nGetRandom could be implemented in $$\\mathcal{O}(1)$$ time with the help of standard\n`random.choice` in Python and `Random` object in Java.\n\n<iframe src=\"https://leetcode.com/playground/jVvSDTEV/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"jVvSDTEV\"></iframe>\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/cMXhQw7r/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cMXhQw7r\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity. GetRandom is always $$\\mathcal{O}(1)$$.\nInsert and Delete both have $$\\mathcal{O}(1)$$ average time complexity, \nand $$\\mathcal{O}(N)$$ in the worst-case scenario \nwhen the operation exceeds the capacity of\ncurrently allocated array/hashmap and invokes space reallocation.\n\n* Space complexity: $$\\mathcal{O}(N)$$, to store N elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "insert-delete-getrandom-o1",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.925,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2005",
                "title": "All O`one Data Structure",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "432",
                    "questionFrontendId": "432",
                    "sessionId": "968792",
                    "questionTitle": "All O`one Data Structure",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/all-oone-data-structure/submit/",
                    "interpretUrl": "/problems/all-oone-data-structure/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class AllOne {\\npublic:\\n    /** Initialize your data structure here. */\\n    AllOne() {\\n        \\n    }\\n    \\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    void inc(string key) {\\n        \\n    }\\n    \\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    void dec(string key) {\\n        \\n    }\\n    \\n    /** Returns one of the keys with maximal value. */\\n    string getMaxKey() {\\n        \\n    }\\n    \\n    /** Returns one of the keys with Minimal value. */\\n    string getMinKey() {\\n        \\n    }\\n};\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * AllOne* obj = new AllOne();\\n * obj->inc(key);\\n * obj->dec(key);\\n * string param_3 = obj->getMaxKey();\\n * string param_4 = obj->getMinKey();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class AllOne {\\n\\n    /** Initialize your data structure here. */\\n    public AllOne() {\\n        \\n    }\\n    \\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    public void inc(String key) {\\n        \\n    }\\n    \\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    public void dec(String key) {\\n        \\n    }\\n    \\n    /** Returns one of the keys with maximal value. */\\n    public String getMaxKey() {\\n        \\n    }\\n    \\n    /** Returns one of the keys with Minimal value. */\\n    public String getMinKey() {\\n        \\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * AllOne obj = new AllOne();\\n * obj.inc(key);\\n * obj.dec(key);\\n * String param_3 = obj.getMaxKey();\\n * String param_4 = obj.getMinKey();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class AllOne(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def inc(self, key):\\n        \\\"\\\"\\\"\\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\\n        :type key: str\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def dec(self, key):\\n        \\\"\\\"\\\"\\n        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\\n        :type key: str\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def getMaxKey(self):\\n        \\\"\\\"\\\"\\n        Returns one of the keys with maximal value.\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def getMinKey(self):\\n        \\\"\\\"\\\"\\n        Returns one of the keys with Minimal value.\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your AllOne object will be instantiated and called as such:\\n# obj = AllOne()\\n# obj.inc(key)\\n# obj.dec(key)\\n# param_3 = obj.getMaxKey()\\n# param_4 = obj.getMinKey()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class AllOne:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def inc(self, key: str) -> None:\\n        \\\"\\\"\\\"\\n        Inserts a new key <Key> with value 1. Or increments an existing key by 1.\\n        \\\"\\\"\\\"\\n        \\n\\n    def dec(self, key: str) -> None:\\n        \\\"\\\"\\\"\\n        Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\\n        \\\"\\\"\\\"\\n        \\n\\n    def getMaxKey(self) -> str:\\n        \\\"\\\"\\\"\\n        Returns one of the keys with maximal value.\\n        \\\"\\\"\\\"\\n        \\n\\n    def getMinKey(self) -> str:\\n        \\\"\\\"\\\"\\n        Returns one of the keys with Minimal value.\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your AllOne object will be instantiated and called as such:\\n# obj = AllOne()\\n# obj.inc(key)\\n# obj.dec(key)\\n# param_3 = obj.getMaxKey()\\n# param_4 = obj.getMinKey()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} AllOne;\\n\\n/** Initialize your data structure here. */\\n\\nAllOne* allOneCreate() {\\n    \\n}\\n\\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\nvoid allOneInc(AllOne* obj, char * key) {\\n  \\n}\\n\\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\nvoid allOneDec(AllOne* obj, char * key) {\\n  \\n}\\n\\n/** Returns one of the keys with maximal value. */\\nchar * allOneGetMaxKey(AllOne* obj) {\\n  \\n}\\n\\n/** Returns one of the keys with Minimal value. */\\nchar * allOneGetMinKey(AllOne* obj) {\\n  \\n}\\n\\nvoid allOneFree(AllOne* obj) {\\n    \\n}\\n\\n/**\\n * Your AllOne struct will be instantiated and called as such:\\n * AllOne* obj = allOneCreate();\\n * allOneInc(obj, key);\\n \\n * allOneDec(obj, key);\\n \\n * char * param_3 = allOneGetMaxKey(obj);\\n \\n * char * param_4 = allOneGetMinKey(obj);\\n \\n * allOneFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class AllOne {\\n\\n    /** Initialize your data structure here. */\\n    public AllOne() {\\n        \\n    }\\n    \\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    public void Inc(string key) {\\n        \\n    }\\n    \\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    public void Dec(string key) {\\n        \\n    }\\n    \\n    /** Returns one of the keys with maximal value. */\\n    public string GetMaxKey() {\\n        \\n    }\\n    \\n    /** Returns one of the keys with Minimal value. */\\n    public string GetMinKey() {\\n        \\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * AllOne obj = new AllOne();\\n * obj.Inc(key);\\n * obj.Dec(key);\\n * string param_3 = obj.GetMaxKey();\\n * string param_4 = obj.GetMinKey();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar AllOne = function() {\\n    \\n};\\n\\n/**\\n * Inserts a new key <Key> with value 1. Or increments an existing key by 1. \\n * @param {string} key\\n * @return {void}\\n */\\nAllOne.prototype.inc = function(key) {\\n    \\n};\\n\\n/**\\n * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. \\n * @param {string} key\\n * @return {void}\\n */\\nAllOne.prototype.dec = function(key) {\\n    \\n};\\n\\n/**\\n * Returns one of the keys with maximal value.\\n * @return {string}\\n */\\nAllOne.prototype.getMaxKey = function() {\\n    \\n};\\n\\n/**\\n * Returns one of the keys with Minimal value.\\n * @return {string}\\n */\\nAllOne.prototype.getMinKey = function() {\\n    \\n};\\n\\n/** \\n * Your AllOne object will be instantiated and called as such:\\n * var obj = new AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * var param_3 = obj.getMaxKey()\\n * var param_4 = obj.getMinKey()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class AllOne\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    Inserts a new key <Key> with value 1. Or increments an existing key by 1.\\n    :type key: String\\n    :rtype: Void\\n=end\\n    def inc(key)\\n        \\n    end\\n\\n\\n=begin\\n    Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\\n    :type key: String\\n    :rtype: Void\\n=end\\n    def dec(key)\\n        \\n    end\\n\\n\\n=begin\\n    Returns one of the keys with maximal value.\\n    :rtype: String\\n=end\\n    def get_max_key()\\n        \\n    end\\n\\n\\n=begin\\n    Returns one of the keys with Minimal value.\\n    :rtype: String\\n=end\\n    def get_min_key()\\n        \\n    end\\n\\n\\nend\\n\\n# Your AllOne object will be instantiated and called as such:\\n# obj = AllOne.new()\\n# obj.inc(key)\\n# obj.dec(key)\\n# param_3 = obj.get_max_key()\\n# param_4 = obj.get_min_key()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass AllOne {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    func inc(_ key: String) {\\n        \\n    }\\n    \\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    func dec(_ key: String) {\\n        \\n    }\\n    \\n    /** Returns one of the keys with maximal value. */\\n    func getMaxKey() -> String {\\n        \\n    }\\n    \\n    /** Returns one of the keys with Minimal value. */\\n    func getMinKey() -> String {\\n        \\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * let obj = AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * let ret_3: String = obj.getMaxKey()\\n * let ret_4: String = obj.getMinKey()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type AllOne struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() AllOne {\\n    \\n}\\n\\n\\n/** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\nfunc (this *AllOne) Inc(key string)  {\\n    \\n}\\n\\n\\n/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\nfunc (this *AllOne) Dec(key string)  {\\n    \\n}\\n\\n\\n/** Returns one of the keys with maximal value. */\\nfunc (this *AllOne) GetMaxKey() string {\\n    \\n}\\n\\n\\n/** Returns one of the keys with Minimal value. */\\nfunc (this *AllOne) GetMinKey() string {\\n    \\n}\\n\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Inc(key);\\n * obj.Dec(key);\\n * param_3 := obj.GetMaxKey();\\n * param_4 := obj.GetMinKey();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class AllOne() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    def inc(key: String) {\\n        \\n    }\\n\\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    def dec(key: String) {\\n        \\n    }\\n\\n    /** Returns one of the keys with maximal value. */\\n    def getMaxKey(): String = {\\n        \\n    }\\n\\n    /** Returns one of the keys with Minimal value. */\\n    def getMinKey(): String = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * var obj = new AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * var param_3 = obj.getMaxKey()\\n * var param_4 = obj.getMinKey()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class AllOne() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    fun inc(key: String) {\\n        \\n    }\\n\\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    fun dec(key: String) {\\n        \\n    }\\n\\n    /** Returns one of the keys with maximal value. */\\n    fun getMaxKey(): String {\\n        \\n    }\\n\\n    /** Returns one of the keys with Minimal value. */\\n    fun getMinKey(): String {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * var obj = AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * var param_3 = obj.getMaxKey()\\n * var param_4 = obj.getMinKey()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct AllOne {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl AllOne {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** Inserts a new key <Key> with value 1. Or increments an existing key by 1. */\\n    fn inc(&self, key: String) {\\n        \\n    }\\n    \\n    /** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */\\n    fn dec(&self, key: String) {\\n        \\n    }\\n    \\n    /** Returns one of the keys with maximal value. */\\n    fn get_max_key(&self) -> String {\\n        \\n    }\\n    \\n    /** Returns one of the keys with Minimal value. */\\n    fn get_min_key(&self) -> String {\\n        \\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * let obj = AllOne::new();\\n * obj.inc(key);\\n * obj.dec(key);\\n * let ret_3: String = obj.get_max_key();\\n * let ret_4: String = obj.get_min_key();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class AllOne {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * Inserts a new key <Key> with value 1. Or increments an existing key by 1.\\n     * @param String $key\\n     * @return NULL\\n     */\\n    function inc($key) {\\n        \\n    }\\n  \\n    /**\\n     * Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\\n     * @param String $key\\n     * @return NULL\\n     */\\n    function dec($key) {\\n        \\n    }\\n  \\n    /**\\n     * Returns one of the keys with maximal value.\\n     * @return String\\n     */\\n    function getMaxKey() {\\n        \\n    }\\n  \\n    /**\\n     * Returns one of the keys with Minimal value.\\n     * @return String\\n     */\\n    function getMinKey() {\\n        \\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * $obj = AllOne();\\n * $obj->inc($key);\\n * $obj->dec($key);\\n * $ret_3 = $obj->getMaxKey();\\n * $ret_4 = $obj->getMinKey();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class AllOne {\\n    constructor() {\\n\\n    }\\n\\n    inc(key: string): void {\\n\\n    }\\n\\n    dec(key: string): void {\\n\\n    }\\n\\n    getMaxKey(): string {\\n\\n    }\\n\\n    getMinKey(): string {\\n\\n    }\\n}\\n\\n/**\\n * Your AllOne object will be instantiated and called as such:\\n * var obj = new AllOne()\\n * obj.inc(key)\\n * obj.dec(key)\\n * var param_3 = obj.getMaxKey()\\n * var param_4 = obj.getMinKey()\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define all-one%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; inc : string? -> void?\\n    (define/public (inc key)\\n\\n      )\\n    ; dec : string? -> void?\\n    (define/public (dec key)\\n\\n      )\\n    ; get-max-key : -> string?\\n    (define/public (get-max-key)\\n\\n      )\\n    ; get-min-key : -> string?\\n    (define/public (get-min-key)\\n\\n      )))\\n\\n;; Your all-one% object will be instantiated and called as such:\\n;; (define obj (new all-one%))\\n;; (send obj inc key)\\n;; (send obj dec key)\\n;; (define param_3 (send obj get-max-key))\\n;; (define param_4 (send obj get-min-key))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec all_one_init_() -> any().\\nall_one_init_() ->\\n  .\\n\\n-spec all_one_inc(Key :: unicode:unicode_binary()) -> any().\\nall_one_inc(Key) ->\\n  .\\n\\n-spec all_one_dec(Key :: unicode:unicode_binary()) -> any().\\nall_one_dec(Key) ->\\n  .\\n\\n-spec all_one_get_max_key() -> unicode:unicode_binary().\\nall_one_get_max_key() ->\\n  .\\n\\n-spec all_one_get_min_key() -> unicode:unicode_binary().\\nall_one_get_min_key() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% all_one_init_(),\\n%% all_one_inc(Key),\\n%% all_one_dec(Key),\\n%% Param_3 = all_one_get_max_key(),\\n%% Param_4 = all_one_get_min_key(),\\n\\n%% all_one_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule AllOne do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec inc(key :: String.t) :: any\\n  def inc(key) do\\n\\n  end\\n\\n  @spec dec(key :: String.t) :: any\\n  def dec(key) do\\n\\n  end\\n\\n  @spec get_max_key() :: String.t\\n  def get_max_key() do\\n\\n  end\\n\\n  @spec get_min_key() :: String.t\\n  def get_min_key() do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# AllOne.init_()\\n# AllOne.inc(key)\\n# AllOne.dec(key)\\n# param_3 = AllOne.get_max_key()\\n# param_4 = AllOne.get_min_key()\\n\\n# AllOne.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]\n[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"AllOne\",\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"inc\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Inserts a new key <Key> with value 1. Or increments an existing key by 1.\"\r\n        },\r\n        {\r\n            \"name\" : \"dec\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Decrements an existing key by 1. If Key's value is 1, remove it from the data structure.\"\r\n        },\r\n        {\r\n            \"name\" : \"getMaxKey\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"string\"\r\n            },\r\n            \"comment\": \"Returns one of the keys with maximal value.\"\r\n        },\r\n        {\r\n            \"name\" : \"getMinKey\",\r\n            \"params\": [\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"string\"\r\n            },\r\n            \"comment\": \"Returns one of the keys with Minimal value.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure to store the strings&#39; count with the ability to return the strings with minimum and maximum counts.</p>\n\n<p>Implement the <code>AllOne</code> class:</p>\n\n<ul>\n\t<li><code>AllOne()</code> Initializes the object of the data structure.</li>\n\t<li><code>inc(String key)</code> Increments the count of the string <code>key</code> by <code>1</code>. If <code>key</code> does not exist in the data structure, insert it with count <code>1</code>.</li>\n\t<li><code>dec(String key)</code> Decrements the count of the string <code>key</code> by <code>1</code>. If the count of <code>key</code> is <code>0</code> after the decrement, remove it from the data structure. It is guaranteed that <code>key</code> exists in the data structure before the decrement.</li>\n\t<li><code>getMaxKey()</code> Returns one of the keys with the maximal count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n\t<li><code>getMinKey()</code> Returns one of the keys with the minimum count. If no element exists, return an empty string <code>&quot;&quot;</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;AllOne&quot;, &quot;inc&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;, &quot;inc&quot;, &quot;getMaxKey&quot;, &quot;getMinKey&quot;]\n[[], [&quot;hello&quot;], [&quot;hello&quot;], [], [], [&quot;leet&quot;], [], []]\n<strong>Output</strong>\n[null, null, null, &quot;hello&quot;, &quot;hello&quot;, null, &quot;hello&quot;, &quot;leet&quot;]\n\n<strong>Explanation</strong>\nAllOne allOne = new AllOne();\nallOne.inc(&quot;hello&quot;);\nallOne.inc(&quot;hello&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;hello&quot;\nallOne.inc(&quot;leet&quot;);\nallOne.getMaxKey(); // return &quot;hello&quot;\nallOne.getMinKey(); // return &quot;leet&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length &lt;= 10</code></li>\n\t<li><code>key</code> consists of lowercase English letters.</li>\n\t<li>It is guaranteed that for each call to <code>dec</code>, <code>key</code> is existing in the data structure.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code>&nbsp;calls will be made to <code>inc</code>, <code>dec</code>, <code>getMaxKey</code>, and <code>getMinKey</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2006",
                "title": "Max Stack",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "716",
                    "questionFrontendId": "716",
                    "sessionId": "968792",
                    "questionTitle": "Max Stack",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/max-stack/submit/",
                    "interpretUrl": "/problems/max-stack/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MaxStack {\\npublic:\\n    /** initialize your data structure here. */\\n    MaxStack() {\\n        \\n    }\\n    \\n    void push(int x) {\\n        \\n    }\\n    \\n    int pop() {\\n        \\n    }\\n    \\n    int top() {\\n        \\n    }\\n    \\n    int peekMax() {\\n        \\n    }\\n    \\n    int popMax() {\\n        \\n    }\\n};\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * MaxStack* obj = new MaxStack();\\n * obj->push(x);\\n * int param_2 = obj->pop();\\n * int param_3 = obj->top();\\n * int param_4 = obj->peekMax();\\n * int param_5 = obj->popMax();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MaxStack {\\n\\n    /** initialize your data structure here. */\\n    public MaxStack() {\\n        \\n    }\\n    \\n    public void push(int x) {\\n        \\n    }\\n    \\n    public int pop() {\\n        \\n    }\\n    \\n    public int top() {\\n        \\n    }\\n    \\n    public int peekMax() {\\n        \\n    }\\n    \\n    public int popMax() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * MaxStack obj = new MaxStack();\\n * obj.push(x);\\n * int param_2 = obj.pop();\\n * int param_3 = obj.top();\\n * int param_4 = obj.peekMax();\\n * int param_5 = obj.popMax();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MaxStack(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def push(self, x):\\n        \\\"\\\"\\\"\\n        :type x: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def pop(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def top(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def peekMax(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def popMax(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your MaxStack object will be instantiated and called as such:\\n# obj = MaxStack()\\n# obj.push(x)\\n# param_2 = obj.pop()\\n# param_3 = obj.top()\\n# param_4 = obj.peekMax()\\n# param_5 = obj.popMax()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MaxStack:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def push(self, x: int) -> None:\\n        \\n\\n    def pop(self) -> int:\\n        \\n\\n    def top(self) -> int:\\n        \\n\\n    def peekMax(self) -> int:\\n        \\n\\n    def popMax(self) -> int:\\n        \\n\\n\\n# Your MaxStack object will be instantiated and called as such:\\n# obj = MaxStack()\\n# obj.push(x)\\n# param_2 = obj.pop()\\n# param_3 = obj.top()\\n# param_4 = obj.peekMax()\\n# param_5 = obj.popMax()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} MaxStack;\\n\\n/** initialize your data structure here. */\\n\\nMaxStack* maxStackCreate() {\\n    \\n}\\n\\nvoid maxStackPush(MaxStack* obj, int x) {\\n  \\n}\\n\\nint maxStackPop(MaxStack* obj) {\\n  \\n}\\n\\nint maxStackTop(MaxStack* obj) {\\n  \\n}\\n\\nint maxStackPeekMax(MaxStack* obj) {\\n  \\n}\\n\\nint maxStackPopMax(MaxStack* obj) {\\n  \\n}\\n\\nvoid maxStackFree(MaxStack* obj) {\\n    \\n}\\n\\n/**\\n * Your MaxStack struct will be instantiated and called as such:\\n * MaxStack* obj = maxStackCreate();\\n * maxStackPush(obj, x);\\n \\n * int param_2 = maxStackPop(obj);\\n \\n * int param_3 = maxStackTop(obj);\\n \\n * int param_4 = maxStackPeekMax(obj);\\n \\n * int param_5 = maxStackPopMax(obj);\\n \\n * maxStackFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MaxStack {\\n\\n    /** initialize your data structure here. */\\n    public MaxStack() {\\n        \\n    }\\n    \\n    public void Push(int x) {\\n        \\n    }\\n    \\n    public int Pop() {\\n        \\n    }\\n    \\n    public int Top() {\\n        \\n    }\\n    \\n    public int PeekMax() {\\n        \\n    }\\n    \\n    public int PopMax() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * MaxStack obj = new MaxStack();\\n * obj.Push(x);\\n * int param_2 = obj.Pop();\\n * int param_3 = obj.Top();\\n * int param_4 = obj.PeekMax();\\n * int param_5 = obj.PopMax();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * initialize your data structure here.\\n */\\nvar MaxStack = function() {\\n    \\n};\\n\\n/** \\n * @param {number} x\\n * @return {void}\\n */\\nMaxStack.prototype.push = function(x) {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMaxStack.prototype.pop = function() {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMaxStack.prototype.top = function() {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMaxStack.prototype.peekMax = function() {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMaxStack.prototype.popMax = function() {\\n    \\n};\\n\\n/** \\n * Your MaxStack object will be instantiated and called as such:\\n * var obj = new MaxStack()\\n * obj.push(x)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.peekMax()\\n * var param_5 = obj.popMax()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MaxStack\\n\\n=begin\\n    initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    :type x: Integer\\n    :rtype: Void\\n=end\\n    def push(x)\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def pop()\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def top()\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def peek_max()\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def pop_max()\\n        \\n    end\\n\\n\\nend\\n\\n# Your MaxStack object will be instantiated and called as such:\\n# obj = MaxStack.new()\\n# obj.push(x)\\n# param_2 = obj.pop()\\n# param_3 = obj.top()\\n# param_4 = obj.peek_max()\\n# param_5 = obj.pop_max()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass MaxStack {\\n\\n    /** initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    func push(_ x: Int) {\\n        \\n    }\\n    \\n    func pop() -> Int {\\n        \\n    }\\n    \\n    func top() -> Int {\\n        \\n    }\\n    \\n    func peekMax() -> Int {\\n        \\n    }\\n    \\n    func popMax() -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * let obj = MaxStack()\\n * obj.push(x)\\n * let ret_2: Int = obj.pop()\\n * let ret_3: Int = obj.top()\\n * let ret_4: Int = obj.peekMax()\\n * let ret_5: Int = obj.popMax()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MaxStack struct {\\n    \\n}\\n\\n\\n/** initialize your data structure here. */\\nfunc Constructor() MaxStack {\\n    \\n}\\n\\n\\nfunc (this *MaxStack) Push(x int)  {\\n    \\n}\\n\\n\\nfunc (this *MaxStack) Pop() int {\\n    \\n}\\n\\n\\nfunc (this *MaxStack) Top() int {\\n    \\n}\\n\\n\\nfunc (this *MaxStack) PeekMax() int {\\n    \\n}\\n\\n\\nfunc (this *MaxStack) PopMax() int {\\n    \\n}\\n\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Push(x);\\n * param_2 := obj.Pop();\\n * param_3 := obj.Top();\\n * param_4 := obj.PeekMax();\\n * param_5 := obj.PopMax();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MaxStack() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    def push(x: Int) {\\n        \\n    }\\n\\n    def pop(): Int = {\\n        \\n    }\\n\\n    def top(): Int = {\\n        \\n    }\\n\\n    def peekMax(): Int = {\\n        \\n    }\\n\\n    def popMax(): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * var obj = new MaxStack()\\n * obj.push(x)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.peekMax()\\n * var param_5 = obj.popMax()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MaxStack() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    fun push(x: Int) {\\n        \\n    }\\n\\n    fun pop(): Int {\\n        \\n    }\\n\\n    fun top(): Int {\\n        \\n    }\\n\\n    fun peekMax(): Int {\\n        \\n    }\\n\\n    fun popMax(): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * var obj = MaxStack()\\n * obj.push(x)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.peekMax()\\n * var param_5 = obj.popMax()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct MaxStack {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MaxStack {\\n\\n    /** initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    fn push(&self, x: i32) {\\n        \\n    }\\n    \\n    fn pop(&self) -> i32 {\\n        \\n    }\\n    \\n    fn top(&self) -> i32 {\\n        \\n    }\\n    \\n    fn peek_max(&self) -> i32 {\\n        \\n    }\\n    \\n    fn pop_max(&self) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * let obj = MaxStack::new();\\n * obj.push(x);\\n * let ret_2: i32 = obj.pop();\\n * let ret_3: i32 = obj.top();\\n * let ret_4: i32 = obj.peek_max();\\n * let ret_5: i32 = obj.pop_max();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class MaxStack {\\n    /**\\n     * initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $x\\n     * @return NULL\\n     */\\n    function push($x) {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function pop() {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function top() {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function peekMax() {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function popMax() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * $obj = MaxStack();\\n * $obj->push($x);\\n * $ret_2 = $obj->pop();\\n * $ret_3 = $obj->top();\\n * $ret_4 = $obj->peekMax();\\n * $ret_5 = $obj->popMax();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class MaxStack {\\n    constructor() {\\n\\n    }\\n\\n    push(x: number): void {\\n\\n    }\\n\\n    pop(): number {\\n\\n    }\\n\\n    top(): number {\\n\\n    }\\n\\n    peekMax(): number {\\n\\n    }\\n\\n    popMax(): number {\\n\\n    }\\n}\\n\\n/**\\n * Your MaxStack object will be instantiated and called as such:\\n * var obj = new MaxStack()\\n * obj.push(x)\\n * var param_2 = obj.pop()\\n * var param_3 = obj.top()\\n * var param_4 = obj.peekMax()\\n * var param_5 = obj.popMax()\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define max-stack%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; push : exact-integer? -> void?\\n    (define/public (push x)\\n\\n      )\\n    ; pop : -> exact-integer?\\n    (define/public (pop)\\n\\n      )\\n    ; top : -> exact-integer?\\n    (define/public (top)\\n\\n      )\\n    ; peek-max : -> exact-integer?\\n    (define/public (peek-max)\\n\\n      )\\n    ; pop-max : -> exact-integer?\\n    (define/public (pop-max)\\n\\n      )))\\n\\n;; Your max-stack% object will be instantiated and called as such:\\n;; (define obj (new max-stack%))\\n;; (send obj push x)\\n;; (define param_2 (send obj pop))\\n;; (define param_3 (send obj top))\\n;; (define param_4 (send obj peek-max))\\n;; (define param_5 (send obj pop-max))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_stack_init_() -> any().\\nmax_stack_init_() ->\\n  .\\n\\n-spec max_stack_push(X :: integer()) -> any().\\nmax_stack_push(X) ->\\n  .\\n\\n-spec max_stack_pop() -> integer().\\nmax_stack_pop() ->\\n  .\\n\\n-spec max_stack_top() -> integer().\\nmax_stack_top() ->\\n  .\\n\\n-spec max_stack_peek_max() -> integer().\\nmax_stack_peek_max() ->\\n  .\\n\\n-spec max_stack_pop_max() -> integer().\\nmax_stack_pop_max() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% max_stack_init_(),\\n%% max_stack_push(X),\\n%% Param_2 = max_stack_pop(),\\n%% Param_3 = max_stack_top(),\\n%% Param_4 = max_stack_peek_max(),\\n%% Param_5 = max_stack_pop_max(),\\n\\n%% max_stack_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule MaxStack do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec push(x :: integer) :: any\\n  def push(x) do\\n\\n  end\\n\\n  @spec pop() :: integer\\n  def pop() do\\n\\n  end\\n\\n  @spec top() :: integer\\n  def top() do\\n\\n  end\\n\\n  @spec peek_max() :: integer\\n  def peek_max() do\\n\\n  end\\n\\n  @spec pop_max() :: integer\\n  def pop_max() do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MaxStack.init_()\\n# MaxStack.push(x)\\n# param_2 = MaxStack.pop()\\n# param_3 = MaxStack.top()\\n# param_4 = MaxStack.peek_max()\\n# param_5 = MaxStack.pop_max()\\n\\n# MaxStack.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"MaxStack\",\"push\",\"push\",\"push\",\"top\",\"popMax\",\"top\",\"peekMax\",\"pop\",\"top\"]\n[[],[5],[1],[5],[],[],[],[],[],[]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"classname\": \"MaxStack\",\r\n  \"maxbytesperline\": 130000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n        {\r\n            \"type\": \"integer\",\r\n            \"name\": \"maxSize\",\r\n            \"lang\": \"c\",\r\n            \"value\": \"64000\"\r\n        }\r\n      ],\r\n      \"comment\": \"initialize your data structure here.\"\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"push\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"x\"\r\n            }],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"pop\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      },\r\n      { \"name\": \"top\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      },\r\n      { \"name\": \"peekMax\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      },\r\n      { \"name\": \"popMax\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"integer\"\r\n        }\r\n      }\r\n  ],\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a max stack data structure that supports the stack operations and supports finding the stack&#39;s maximum element.</p>\n\n<p>Implement the <code>MaxStack</code> class:</p>\n\n<ul>\n\t<li><code>MaxStack()</code> Initializes the stack object.</li>\n\t<li><code>void push(int x)</code> Pushes element <code>x</code> onto the stack.</li>\n\t<li><code>int pop()</code> Removes the element on top of the stack and returns it.</li>\n\t<li><code>int top()</code> Gets the element on the top of the stack without removing it.</li>\n\t<li><code>int peekMax()</code> Retrieves the maximum element in the stack without removing it.</li>\n\t<li><code>int popMax()</code> Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the <strong>top-most</strong> one.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MaxStack&quot;, &quot;push&quot;, &quot;push&quot;, &quot;push&quot;, &quot;top&quot;, &quot;popMax&quot;, &quot;top&quot;, &quot;peekMax&quot;, &quot;pop&quot;, &quot;top&quot;]\n[[], [5], [1], [5], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, 5, 5, 1, 5, 1, 5]\n\n<strong>Explanation</strong>\nMaxStack stk = new MaxStack();\nstk.push(5);   // [<strong><u>5</u></strong>] the top of the stack and the maximum number is 5.\nstk.push(1);   // [<u>5</u>, <strong>1</strong>] the top of the stack is 1, but the maximum is 5.\nstk.push(5);   // [5, 1, <strong><u>5</u></strong>] the top of the stack is 5, which is also the maximum, because it is the top most one.\nstk.top();     // return 5, [5, 1, <strong><u>5</u></strong>] the stack did not change.\nstk.popMax();  // return 5, [<u>5</u>, <strong>1</strong>] the stack is changed now, and the top is different from the max.\nstk.top();     // return 1, [<u>5</u>, <strong>1</strong>] the stack did not change.\nstk.peekMax(); // return 5, [<u>5</u>, <strong>1</strong>] the stack did not change.\nstk.pop();     // return 1, [<strong><u>5</u></strong>] the top of the stack and the max element is now 5.\nstk.top();     // return 5, [<strong><u>5</u></strong>] the stack did not change.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>7</sup> &lt;= x &lt;= 10<sup>7</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>push</code>, <code>pop</code>, <code>top</code>, <code>peekMax</code>, and <code>popMax</code>.</li>\n\t<li>There will be <strong>at least one element</strong> in the stack when <code>pop</code>, <code>top</code>, <code>peekMax</code>, or <code>popMax</code> is called.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you come up with a solution that supports <code>O(1)</code> for each <code>top</code> call and <code>O(logn)</code> for each other call?&nbsp;",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Max Stack",
                        "content": "[TOC]\n\n#### Approach #1: Two Stacks [Accepted]\n\n**Intuition and Algorithm**\n\nA regular stack already supports the first 3 operations, so we focus on the last two.\n\nFor `peekMax`, we remember the largest value we've seen on the side.  For example if we add `[2, 1, 5, 3, 9]`, we'll remember `[2, 2, 5, 5, 9]`.  This works seamlessly with `pop` operations, and also it's easy to compute: it's just the maximum of the element we are adding and the previous maximum.\n\nFor `popMax`, we know what the current maximum (`peekMax`) is.  We can pop until we find that maximum, then push the popped elements back on the stack.\n\nOur implementation in Python will showcase extending the `list` class.\n\n<iframe src=\"https://leetcode.com/playground/AZuvbhq6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"AZuvbhq6\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ for the `popMax` operation, and $$O(1)$$ for the other operations, where $$N$$ is the number of operations performed.\n\n* Space Complexity: $$O(N)$$, the maximum size of the stack.\n\n---\n#### Approach #2: Double Linked List + TreeMap [Accepted]\n\n**Intuition**\n\nUsing structures like Array or Stack will never let us `popMax` quickly.  We turn our attention to tree and linked-list structures that have a lower time complexity for removal, with the aim of making `popMax` faster than $$O(N)$$ time complexity.\n\nSay we have a double linked list as our \"stack\".  This reduces the problem to finding which node to remove, since we can remove nodes in $$O(1)$$ time.\n\nWe can use a TreeMap mapping values to a list of nodes to answer this question.  TreeMap can find the largest value, insert values, and delete values, all in $$O(\\log N)$$ time.\n\n**Algorithm**\n\nLet's store the stack as a double linked list `dll`, and store a `map` from `value` to a `List` of `Node`.\n\n* When we `MaxStack.push(x)`, we add a node to our `dll`, and add or update our entry `map.get(x).add(node)`.\n\n* When we `MaxStack.pop()`, we find the value `val = dll.pop()`, and remove the node from our `map`, deleting the entry if it was the last one.\n\n* When we `MaxStack.popMax()`, we use the `map` to find the relevant node to `unlink`, and return it's value.\n\nThe above operations are more clear given that we have a working `DoubleLinkedList` class.  The implementation provided uses `head` and `tail` *sentinels* to simplify the relevant `DoubleLinkedList` operations.\n\nA Python implementation was not included for this approach because there is no analog to *TreeMap* available.\n\n<iframe src=\"https://leetcode.com/playground/b9tKyzdr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"b9tKyzdr\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\log N)$$ for all operations except `peek` which is $$O(1)$$, where $$N$$ is the number of operations performed.  Most operations involving `TreeMap` are $$O(\\log N)$$.\n\n* Space Complexity: $$O(N)$$, the size of the data structures used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "max-stack",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.432,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "2007",
                "title": "Design HashMap",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 343,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "817",
                    "questionFrontendId": "706",
                    "sessionId": "968792",
                    "questionTitle": "Design HashMap",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/design-hashmap/submit/",
                    "interpretUrl": "/problems/design-hashmap/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MyHashMap {\\npublic:\\n    /** Initialize your data structure here. */\\n    MyHashMap() {\\n        \\n    }\\n    \\n    /** value will always be non-negative. */\\n    void put(int key, int value) {\\n        \\n    }\\n    \\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    int get(int key) {\\n        \\n    }\\n    \\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    void remove(int key) {\\n        \\n    }\\n};\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * MyHashMap* obj = new MyHashMap();\\n * obj->put(key,value);\\n * int param_2 = obj->get(key);\\n * obj->remove(key);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MyHashMap {\\n\\n    /** Initialize your data structure here. */\\n    public MyHashMap() {\\n        \\n    }\\n    \\n    /** value will always be non-negative. */\\n    public void put(int key, int value) {\\n        \\n    }\\n    \\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    public int get(int key) {\\n        \\n    }\\n    \\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    public void remove(int key) {\\n        \\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * MyHashMap obj = new MyHashMap();\\n * obj.put(key,value);\\n * int param_2 = obj.get(key);\\n * obj.remove(key);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MyHashMap(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def put(self, key, value):\\n        \\\"\\\"\\\"\\n        value will always be non-negative.\\n        :type key: int\\n        :type value: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key):\\n        \\\"\\\"\\\"\\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\\n        :type key: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def remove(self, key):\\n        \\\"\\\"\\\"\\n        Removes the mapping of the specified value key if this map contains a mapping for the key\\n        :type key: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your MyHashMap object will be instantiated and called as such:\\n# obj = MyHashMap()\\n# obj.put(key,value)\\n# param_2 = obj.get(key)\\n# obj.remove(key)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MyHashMap:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def put(self, key: int, value: int) -> None:\\n        \\\"\\\"\\\"\\n        value will always be non-negative.\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key: int) -> int:\\n        \\\"\\\"\\\"\\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\\n        \\\"\\\"\\\"\\n        \\n\\n    def remove(self, key: int) -> None:\\n        \\\"\\\"\\\"\\n        Removes the mapping of the specified value key if this map contains a mapping for the key\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your MyHashMap object will be instantiated and called as such:\\n# obj = MyHashMap()\\n# obj.put(key,value)\\n# param_2 = obj.get(key)\\n# obj.remove(key)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} MyHashMap;\\n\\n/** Initialize your data structure here. */\\n\\nMyHashMap* myHashMapCreate() {\\n    \\n}\\n\\n/** value will always be non-negative. */\\nvoid myHashMapPut(MyHashMap* obj, int key, int value) {\\n  \\n}\\n\\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\nint myHashMapGet(MyHashMap* obj, int key) {\\n  \\n}\\n\\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\\nvoid myHashMapRemove(MyHashMap* obj, int key) {\\n  \\n}\\n\\nvoid myHashMapFree(MyHashMap* obj) {\\n    \\n}\\n\\n/**\\n * Your MyHashMap struct will be instantiated and called as such:\\n * MyHashMap* obj = myHashMapCreate();\\n * myHashMapPut(obj, key, value);\\n \\n * int param_2 = myHashMapGet(obj, key);\\n \\n * myHashMapRemove(obj, key);\\n \\n * myHashMapFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MyHashMap {\\n\\n    /** Initialize your data structure here. */\\n    public MyHashMap() {\\n        \\n    }\\n    \\n    /** value will always be non-negative. */\\n    public void Put(int key, int value) {\\n        \\n    }\\n    \\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    public int Get(int key) {\\n        \\n    }\\n    \\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    public void Remove(int key) {\\n        \\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * MyHashMap obj = new MyHashMap();\\n * obj.Put(key,value);\\n * int param_2 = obj.Get(key);\\n * obj.Remove(key);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar MyHashMap = function() {\\n    \\n};\\n\\n/**\\n * value will always be non-negative. \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */\\nMyHashMap.prototype.put = function(key, value) {\\n    \\n};\\n\\n/**\\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \\n * @param {number} key\\n * @return {number}\\n */\\nMyHashMap.prototype.get = function(key) {\\n    \\n};\\n\\n/**\\n * Removes the mapping of the specified value key if this map contains a mapping for the key \\n * @param {number} key\\n * @return {void}\\n */\\nMyHashMap.prototype.remove = function(key) {\\n    \\n};\\n\\n/** \\n * Your MyHashMap object will be instantiated and called as such:\\n * var obj = new MyHashMap()\\n * obj.put(key,value)\\n * var param_2 = obj.get(key)\\n * obj.remove(key)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MyHashMap\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    value will always be non-negative.\\n    :type key: Integer\\n    :type value: Integer\\n    :rtype: Void\\n=end\\n    def put(key, value)\\n        \\n    end\\n\\n\\n=begin\\n    Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\\n    :type key: Integer\\n    :rtype: Integer\\n=end\\n    def get(key)\\n        \\n    end\\n\\n\\n=begin\\n    Removes the mapping of the specified value key if this map contains a mapping for the key\\n    :type key: Integer\\n    :rtype: Void\\n=end\\n    def remove(key)\\n        \\n    end\\n\\n\\nend\\n\\n# Your MyHashMap object will be instantiated and called as such:\\n# obj = MyHashMap.new()\\n# obj.put(key, value)\\n# param_2 = obj.get(key)\\n# obj.remove(key)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass MyHashMap {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** value will always be non-negative. */\\n    func put(_ key: Int, _ value: Int) {\\n        \\n    }\\n    \\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    func get(_ key: Int) -> Int {\\n        \\n    }\\n    \\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    func remove(_ key: Int) {\\n        \\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * let obj = MyHashMap()\\n * obj.put(key, value)\\n * let ret_2: Int = obj.get(key)\\n * obj.remove(key)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MyHashMap struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() MyHashMap {\\n    \\n}\\n\\n\\n/** value will always be non-negative. */\\nfunc (this *MyHashMap) Put(key int, value int)  {\\n    \\n}\\n\\n\\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\nfunc (this *MyHashMap) Get(key int) int {\\n    \\n}\\n\\n\\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\\nfunc (this *MyHashMap) Remove(key int)  {\\n    \\n}\\n\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Put(key,value);\\n * param_2 := obj.Get(key);\\n * obj.Remove(key);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MyHashMap() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** value will always be non-negative. */\\n    def put(key: Int, value: Int) {\\n        \\n    }\\n\\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    def remove(key: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * var obj = new MyHashMap()\\n * obj.put(key,value)\\n * var param_2 = obj.get(key)\\n * obj.remove(key)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MyHashMap() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** value will always be non-negative. */\\n    fun put(key: Int, value: Int) {\\n        \\n    }\\n\\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    fun get(key: Int): Int {\\n        \\n    }\\n\\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    fun remove(key: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * var obj = MyHashMap()\\n * obj.put(key,value)\\n * var param_2 = obj.get(key)\\n * obj.remove(key)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct MyHashMap {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MyHashMap {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** value will always be non-negative. */\\n    fn put(&self, key: i32, value: i32) {\\n        \\n    }\\n    \\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\\n    fn get(&self, key: i32) -> i32 {\\n        \\n    }\\n    \\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\\n    fn remove(&self, key: i32) {\\n        \\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * let obj = MyHashMap::new();\\n * obj.put(key, value);\\n * let ret_2: i32 = obj.get(key);\\n * obj.remove(key);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class MyHashMap {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * value will always be non-negative.\\n     * @param Integer $key\\n     * @param Integer $value\\n     * @return NULL\\n     */\\n    function put($key, $value) {\\n        \\n    }\\n  \\n    /**\\n     * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\\n     * @param Integer $key\\n     * @return Integer\\n     */\\n    function get($key) {\\n        \\n    }\\n  \\n    /**\\n     * Removes the mapping of the specified value key if this map contains a mapping for the key\\n     * @param Integer $key\\n     * @return NULL\\n     */\\n    function remove($key) {\\n        \\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * $obj = MyHashMap();\\n * $obj->put($key, $value);\\n * $ret_2 = $obj->get($key);\\n * $obj->remove($key);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class MyHashMap {\\n    constructor() {\\n\\n    }\\n\\n    put(key: number, value: number): void {\\n\\n    }\\n\\n    get(key: number): number {\\n\\n    }\\n\\n    remove(key: number): void {\\n\\n    }\\n}\\n\\n/**\\n * Your MyHashMap object will be instantiated and called as such:\\n * var obj = new MyHashMap()\\n * obj.put(key,value)\\n * var param_2 = obj.get(key)\\n * obj.remove(key)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define my-hash-map%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; put : exact-integer? exact-integer? -> void?\\n    (define/public (put key value)\\n\\n      )\\n    ; get : exact-integer? -> exact-integer?\\n    (define/public (get key)\\n\\n      )\\n    ; remove : exact-integer? -> void?\\n    (define/public (remove key)\\n\\n      )))\\n\\n;; Your my-hash-map% object will be instantiated and called as such:\\n;; (define obj (new my-hash-map%))\\n;; (send obj put key value)\\n;; (define param_2 (send obj get key))\\n;; (send obj remove key)\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_hash_map_init_() -> any().\\nmy_hash_map_init_() ->\\n  .\\n\\n-spec my_hash_map_put(Key :: integer(), Value :: integer()) -> any().\\nmy_hash_map_put(Key, Value) ->\\n  .\\n\\n-spec my_hash_map_get(Key :: integer()) -> integer().\\nmy_hash_map_get(Key) ->\\n  .\\n\\n-spec my_hash_map_remove(Key :: integer()) -> any().\\nmy_hash_map_remove(Key) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% my_hash_map_init_(),\\n%% my_hash_map_put(Key, Value),\\n%% Param_2 = my_hash_map_get(Key),\\n%% my_hash_map_remove(Key),\\n\\n%% my_hash_map_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule MyHashMap do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n\\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n\\n  end\\n\\n  @spec remove(key :: integer) :: any\\n  def remove(key) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MyHashMap.init_()\\n# MyHashMap.put(key, value)\\n# param_2 = MyHashMap.get(key)\\n# MyHashMap.remove(key)\\n\\n# MyHashMap.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"MyHashMap\",\"put\",\"put\",\"get\",\"get\",\"put\",\"get\",\"remove\",\"get\"]\n[[],[1,1],[2,2],[1],[3],[2,1],[2],[2],[2]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"MyHashMap\",\r\n    \"maxbytesperline\": 400000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"put\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"value\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"value will always be non-negative.\"\r\n        },\r\n        {\r\n            \"name\" : \"get\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            },\r\n            \"comment\": \"Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\"\r\n        },\r\n        {\r\n            \"name\" : \"remove\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"key\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Removes the mapping of the specified value key if this map contains a mapping for the key\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a HashMap without using any built-in hash table libraries.</p>\n\n<p>Implement the <code>MyHashMap</code> class:</p>\n\n<ul>\n\t<li><code>MyHashMap()</code> initializes the object with an empty map.</li>\n\t<li><code>void put(int key, int value)</code> inserts a <code>(key, value)</code> pair into the HashMap. If the <code>key</code> already exists in the map, update the corresponding <code>value</code>.</li>\n\t<li><code>int get(int key)</code> returns the <code>value</code> to which the specified <code>key</code> is mapped, or <code>-1</code> if this map contains no mapping for the <code>key</code>.</li>\n\t<li><code>void remove(key)</code> removes the <code>key</code> and its corresponding <code>value</code> if the map contains the mapping for the <code>key</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MyHashMap&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;remove&quot;, &quot;get&quot;]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>Output</strong>\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>Explanation</strong>\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>put</code>, <code>get</code>, and <code>remove</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Design Hashmap",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Intuition\n\nHashmap is a common data structure that is implemented in various forms in different programming languages, _e.g._ `dict` in Python and `HashMap` in Java. The most distinguish characteristic about hashmap is that it provides a fast access to a **value** that is associated with a given **key**.\n\n>There are two main issues that we should tackle, in order to design an _efficient_ hashmap data structure: _1). hash function design_ and _2). collision handling_. \n\n- **1). hash function design**: the purpose of hash function is to map a key value to an address in the storage space, similarly to the system that we assign a postcode to each mail address.\nAs one can image, for a good hash function, it should map different keys **_evenly_** across the storage space, so that we don't end up with the case that the majority of the keys are _concentrated_ in a few spaces.\n\n- **2). collision handling**: essentially the hash function reduces the vast key space into a limited address space. As a result, there could be the case where two different keys are mapped to the same address, which is what we call _'collision'_. \nSince the collision is inevitable, it is important that we have a strategy to handle the collision. \n\nDepending on how we deal with each of the above two issues, we could have various implementation of hashmap data structure. \n<br/>\n<br/>\n\n---\n#### Approach 1: Modulo + Array\n\n**Intuition**\n\nAs one of the most intuitive implementations, we could adopt the `modulo` operator as the hash function, since the key value is of integer type. In addition, in order to minimize the potential collisions, it is advisable to use a prime number as the base of modulo, _e.g._ `2069`.\n\nWe organize the storage space as an **array** where each element is indexed with the output value of the hash function.\n\nIn case of _collision_, where two different keys are mapped to the same address, we use a **bucket** to hold all the values. The bucket is a container that hold all the values that are assigned by the hash function. We could use either a `LinkedList` or an `Array` to implement the bucket data structure. \n\n**Algorithm**\n\nFor each of the methods in hashmap data structure, namely `get()`, `put()` and `remove()`, it all boils down to the method to locate the value that is stored in hashmap, given the key.\n\nThis localization process can be done in two steps:\n\n- For a given `key` value, first we apply the hash function to generate a hash key, which corresponds to the address in our main storage. With this hash key, we would find the _bucket_ where the value should be stored. \n\n- Now that we found the bucket, we simply iterate through the bucket to check if the desired `<key, value>` pair does exist. \n\n\n![pic](../Figures/706/706_hashmap.png)\n\n<iframe src=\"https://leetcode.com/playground/Poe3m4md/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Poe3m4md\"></iframe>\n\nNote that in the above implementations, we use `Array` to implement the _bucket_ in Python, while we use `LinkedList` in Java.\n\n**Complexity Analysis**\n\n- Time Complexity: for each of the methods, the time complexity is $$\\mathcal{O}(\\frac{N}{K})$$ where $$N$$ is the number of all possible keys and $$K$$ is the number of predefined buckets in the hashmap, which is `2069` in our case.\n\n    - In the ideal case, the keys are evenly distributed in all buckets. As a result, *on average*, we could consider the size of the bucket is $$\\frac{N}{K}$$.\n\n    - Since in the worst case we need to iterate through a bucket to find the desire value, the time complexity of each method is $$\\mathcal{O}(\\frac{N}{K})$$.\n\n- Space Complexity: $$\\mathcal{O}(K+M)$$ where $$K$$ is the number of predefined buckets in the hashmap and $$M$$ is the number of unique keys that have been inserted into the hashmap.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "design-hashmap",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.5,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These are the design questions that are asked by LinkedIn. Design questions typically requires some out of box thinking and find an appropriate data structure to solve the problem efficiently. Sometimes you may even combine several data structures together!\n\nInsert Delete GetRandom O(1) is definitely a classic."
    }
]