[
    {
        "id": "5",
        "title": "Arrays and Strings",
        "slug": "array-and-strings",
        "items": [
            {
                "id": "3008",
                "title": "Longest Substring Without Repeating Characters",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "3",
                    "questionFrontendId": "3",
                    "sessionId": "968792",
                    "questionTitle": "Longest Substring Without Repeating Characters",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-substring-without-repeating-characters/submit/",
                    "interpretUrl": "/problems/longest-substring-without-repeating-characters/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int lengthOfLongestSubstring(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int lengthOfLongestSubstring(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def lengthOfLongestSubstring(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def lengthOfLongestSubstring(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint lengthOfLongestSubstring(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LengthOfLongestSubstring(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar lengthOfLongestSubstring = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef length_of_longest_substring(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func lengthOfLongestSubstring(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLongestSubstring(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def lengthOfLongestSubstring(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun lengthOfLongestSubstring(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn length_of_longest_substring(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function lengthOfLongestSubstring($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function lengthOfLongestSubstring(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (length-of-longest-substring s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec length_of_longest_substring(S :: unicode:unicode_binary()) -> integer().\\nlength_of_longest_substring(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec length_of_longest_substring(s :: String.t) :: integer\\n  def length_of_longest_substring(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"abcabcbb\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"lengthOfLongestSubstring\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, find the length of the <b>longest substring</b> without repeating characters.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcbb&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;abc&quot;, with the length of 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bbbbb&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The answer is &quot;b&quot;, with the length of 1.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pwwkew&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The answer is &quot;wke&quot;, with the length of 3.\nNotice that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of English letters, digits, symbols and spaces.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Substring Without Repeating Characters",
                        "content": "## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/497431788?texttrack=en\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n\r\n---\r\n\r\n#### Approach 1: Brute Force\r\n\r\n**Intuition**\r\n\r\nCheck all the substring one by one to see if it has no duplicate character.\r\n\r\n**Algorithm**\r\n\r\nSuppose we have a function `boolean allUnique(String substring)` which will return true if the characters in the substring are all unique, otherwise false. We can iterate through all the possible substrings of the given string `s` and call the function `allUnique`. If it turns out to be true, then we update our answer of the maximum length of substring without duplicate characters.\r\n\r\nNow let's fill the missing parts:\r\n\r\n1. To enumerate all substrings of a given string, we enumerate the start and end indices of them. Suppose the start and end indices are $$i$$ and $$j$$, respectively. Then we have $$0 \\leq i \\lt j \\leq n$$ (here end index $$j$$ is exclusive by convention). Thus, using two nested loops with $$i$$ from 0 to $$n - 1$$ and $$j$$ from $$i+1$$ to $$n$$, we can enumerate all the substrings of `s`.\r\n\r\n2. To check if one string has duplicate characters, we can use a set. We iterate through all the characters in the string and put them into the `set` one by one. Before putting one character, we check if the set already contains it. If so, we return `false`. After the loop, we return `true`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/cqFhjPgG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cqFhjPgG\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n^3)$$.\r\n\r\n    To verify if characters within index range $$[i, j)$$ are all unique, we need to scan all of them. Thus, it costs $$O(j - i)$$ time.\r\n\r\n    For a given `i`, the sum of time costed by each $$j \\in [i+1, n]$$ is\r\n\r\n    $$\r\n    \\sum_{i+1}^{n}O(j - i)\r\n    $$\r\n\r\n    Thus, the sum of all the time consumption is:\r\n\r\n    $$\r\n    O\\left(\\sum_{i = 0}^{n - 1}\\left(\\sum_{j = i + 1}^{n}(j - i)\\right)\\right) =\r\n    O\\left(\\sum_{i = 0}^{n - 1}\\frac{(1 + n - i)(n - i)}{2}\\right) =\r\n    O(n^3)\r\n    $$\r\n\r\n* Space complexity : $$O(min(n, m))$$. We need $$O(k)$$ space for checking a substring has no duplicate characters, where $$k$$ is the size of the `Set`. The size of the Set is upper bounded by the size of the string $$n$$ and the size of the charset/alphabet $$m$$.\r\n<br />\r\n<br />\r\n---\r\n#### Approach 2: Sliding Window\r\n\r\n**Algorithm**\r\n\r\nThe naive approach is very straightforward. But it is too slow. So how can we optimize it?\r\n\r\nIn the naive approaches, we repeatedly check a substring to see if it has duplicate character. But it is unnecessary. If a substring $$s_{ij}$$ from index $$i$$ to $$j - 1$$ is already checked to have no duplicate characters. We only need to check if $$s[j]$$ is already in the substring $$s_{ij}$$.\r\n\r\nTo check if a character is already in the substring, we can scan the substring, which leads to an $$O(n^2)$$ algorithm. But we can do better.\r\n\r\nBy using HashSet as a sliding window, checking if a character in the current can be done in $$O(1)$$.\r\n\r\nA sliding window is an abstract concept commonly used in array/string problems. A window is a range of elements in the array/string which usually defined by the start and end indices, i.e. $$[i, j)$$ (left-closed, right-open). A sliding window is a window \"slides\" its two boundaries to the certain direction. For example, if we slide $$[i, j)$$ to the right by $$1$$ element, then it becomes $$[i+1, j+1)$$ (left-closed, right-open).\r\n\r\nBack to our problem. We use HashSet to store the characters in current window $$[i, j)$$ ($$j = i$$ initially). Then we slide the index $$j$$ to the right. If it is not in the HashSet, we slide $$j$$ further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index $$i$$. If we do this for all $$i$$, we get our answer.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ivDRgKu6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ivDRgKu6\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(2n) = O(n)$$. In the worst case each character will be visited twice by $$i$$ and $$j$$.\r\n\r\n* Space complexity : $$O(min(m, n))$$. Same as the previous approach. We need $$O(k)$$ space for the sliding window, where $$k$$ is the size of the `Set`. The size of the Set is upper bounded by the size of the string $$n$$ and the size of the charset/alphabet $$m$$.\r\n<br />\r\n<br />\r\n---\r\n#### Approach 3: Sliding Window Optimized\r\n\r\nThe above solution requires at most 2n steps. In fact, it could be optimized to require only n steps. Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. Then we can skip the characters immediately when we found a repeated character.\r\n\r\nThe reason is that if $$s[j]$$ have a duplicate in the range $$[i, j)$$ with index $$j'$$, we don't need to increase $$i$$ little by little. We can skip all the elements in the range $$[i, j']$$ and let $$i$$ to be $$j' + 1$$ directly.\r\n\r\n**Java (Using HashMap)**\r\n\r\n<iframe src=\"https://leetcode.com/playground/HRFnMpL9/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"HRFnMpL9\"></iframe>\r\n\r\nHere is a visualization of the above code.\r\n\r\n<div class=\"video-container\">\r\n<iframe src=\"https://player.vimeo.com/video/484238122\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n</div>\r\n\r\n**Java (Assuming ASCII 128)**\r\n\r\nThe previous implements all have no assumption on the charset of the string `s`.\r\n\r\nIf we know that the charset is rather small, we can replace the `Map` with an integer array as direct access table.\r\n\r\nCommonly used tables are:\r\n\r\n* `int[26]` for Letters 'a' - 'z' or 'A' - 'Z'\r\n* `int[128]` for ASCII\r\n* `int[256]` for Extended ASCII\r\n\r\n<iframe src=\"https://leetcode.com/playground/LEu2h2DZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"LEu2h2DZ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n)$$. Index $$j$$ will iterate $$n$$ times.\r\n\r\n* Space complexity (HashMap) : $$O(min(m, n))$$. Same as the previous approach.\r\n\r\n* Space complexity (Table): $$O(m)$$. $$m$$ is the size of the charset.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "longest-substring-without-repeating-characters",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.661,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3009",
                "title": "String to Integer (atoi)",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "8",
                    "questionFrontendId": "8",
                    "sessionId": "968792",
                    "questionTitle": "String to Integer (atoi)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/string-to-integer-atoi/submit/",
                    "interpretUrl": "/problems/string-to-integer-atoi/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int myAtoi(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def myAtoi(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint myAtoi(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MyAtoi(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef my_atoi(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func myAtoi(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myAtoi(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def myAtoi(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun myAtoi(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function myAtoi($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function myAtoi(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (my-atoi s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\\nmy_atoi(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec my_atoi(s :: String.t) :: integer\\n  def my_atoi(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"42\"",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"myAtoi\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++&#39;s <code>atoi</code> function).</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li>\n\t<li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;42&quot;\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The underlined characters are what is read in, the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   -42&quot;\n<strong>Output:</strong> -42\n<strong>Explanation:</strong>\nStep 1: &quot;<u>   </u>-42&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>42&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>42</u>&quot; (&quot;42&quot; is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;4193 with words&quot;\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong>\nStep 1: &quot;4193 with words&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;4193 with words&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>4193</u> with words&quot; (&quot;4193&quot; is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;words and 987&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:\n</strong>Step 1: &quot;words and 987&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;words and 987&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;words and 987&quot; (reading stops immediately because there is a non-digit &#39;w&#39;)\n         ^\nThe parsed integer is 0 because no digits were read.\nSince 0 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 0.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;-91283472332&quot;\n<strong>Output:</strong> -2147483648\n<strong>Explanation:\n</strong>Step 1: &quot;-91283472332&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;<u>-</u>91283472332&quot; (&#39;-&#39; is read, so the result should be negative)\n          ^\nStep 3: &quot;-<u>91283472332</u>&quot; (&quot;91283472332&quot; is read in)\n                     ^\nThe parsed integer is -91283472332.\nSince -91283472332 is less than the lower bound of the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is clamped to -2<sup>31</sup> = -2147483648.<strong><span style=\"display: none;\"> </span></strong>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3010",
                "title": "Roman to Integer",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "13",
                    "questionFrontendId": "13",
                    "sessionId": "968792",
                    "questionTitle": "Roman to Integer",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/roman-to-integer/submit/",
                    "interpretUrl": "/problems/roman-to-integer/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int romanToInt(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int romanToInt(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def romanToInt(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def romanToInt(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint romanToInt(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int RomanToInt(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar romanToInt = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef roman_to_int(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func romanToInt(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func romanToInt(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def romanToInt(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun romanToInt(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn roman_to_int(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function romanToInt($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function romanToInt(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (roman-to-int s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\\nroman_to_int(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec roman_to_int(s :: String.t) :: integer\\n  def roman_to_int(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"III\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"romanToInt\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IV&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IX&quot;\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Problem is simpler to solve by working the string from back to front and using a map."
                    ],
                    "solution": {
                        "title": "Roman To Integer",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nIn a lot of countries, Roman Numerals are taught in elementary school-level math. This has made them a somewhat popular \"easy\" interview question. Unfortunately though, this ignores the fact that *not everybody learned them in school*, and therefore a big advantage has been given to those who did. I suspect it's also difficult for a lot of us who *have* learned them previously to fully appreciate how much easier prior experience makes this question. While this is very unfair, and possibly very frustrating, keep in mind that the best thing you can do is work through this question and the related question [Integer to Roman](https://leetcode.com/problems/integer-to-roman/) so that you don't get caught out by it in a real interview.\n\n**Can we assume the input is valid?**\n\nYes. Here on Leetcode, you can make that assumption because you *haven't* been told what to do if it *isn't*.\n\nIn a real interview, this is a question you should ask the interviewer. Don't ever assume without asking in a real interview that the input has to be valid.\n\n**Is there only one valid representation for each number?**\n\nThis is more relevant to the other question, [Integer to Roman](https://leetcode.com/problems/integer-to-roman/), however we'll still briefly look at it now.\n\nGiven that the representation for `3` is `III`, it could seem natural that the representation for `15` is `VVV`, because that would be `5 + 5 + 5`. However, it's actually `XV`, which is `10 + 5`. How are you even supposed to know which is correct?\n\nThe trick is to use the \"biggest\" symbols you can. Because `X` is bigger than `V`, we should use an `X` first and then make up the remainder with a single `V`, giving `XV`.\n\nWe'll talk more about this in the [Integer to Roman](https://leetcode.com/problems/integer-to-roman/) article. This question is a lot simpler because there's only one logical way of converting from a *Roman Numeral to an Integer*. This is also why this question is labelled as \"easy\", whereas the other is labelled as \"medium\".\n\n**A few more examples**\n\nIf you're not very familiar with Roman Numerals, work through these examples and then have another go at writing your own algorithm before reading the rest of this solution article.\n\n*What is `CXVII` as an integer?*\n\nRecall that `C = 100`, `X = 10`, `V = 5`, and `I = 1`. Because the symbols are ordered from most significant to least, we can simply add the symbols, i.e. `C + X + V + I + I = 100 + 10 + 5 + 1 + 1 = 117`.\n\n*What is `DXCI` as an integer?*\n\nRecall that `D = 500`. \n\nNow, notice that this time the symbols are *not* ordered from most significant to least\u2014the `X` and `C` are out of numeric order. Because of this, we subtract the value of `X` (`10`) from the value of `C` (`100`) to get `90`.\n\nSo, going from left to right, we have `D + (C - X) + I = 500 + 90 + 1 = 591`. \n\n*What is `CMXCIV` as an integer?*\n\nRecall that `M = 1000`.\n\nThe symbols barely look sorted at all here\u2014from left-to-right we have `100, 1000, 10, 100, 1, 5`. Do not panic though, we just need to look for each occurrence of a smaller symbols *preceding* a bigger symbol. The first, third, and fifth symbols are all smaller than their next symbol. Therefore they are all going to be subtracted from their next.\n\n- The first two symbols are `CM`. This is `M - C = 1000 - 100 = 900`\n- The second two symbols are `XC`. This is `C - X = 100 - 10 = 90`.\n- The final two symbols are `IV`. This is `V - I = 5 - 1 = 4`.\n\nLike we did above, we add these together. `(M - C) + (C - X) + (V - I) = 900 + 90 + 4 = 994`.\n\n---\n\n#### Approach 1: Left-to-Right Pass\n\n**Intuition**\n\nLet's hard-code a mapping with the value of each symbol so that we can easily look them up.\n\n![Symbol mapping](../Figures/13/hardcoding_1.png)\n\nNow, recall that each symbol adds its own value, *except for* when a *smaller valued symbol* is *before* a *larger valued symbol*. In those cases, instead of adding both symbols to the total, we need to *subtract the large from the small*, adding that instead.\n\nTherefore, the simplest algorithm is to use a pointer to scan through the string, at each step deciding whether to add the current symbol and go forward 1 place, or add the difference of the next 2 symbols and go forward 2 places. Here is this algorithm in pseudocode.\n\n```text \ntotal = 0\ni = 0\nwhile i < s.length:\n    if at least 2 symbols remaining AND value of s[i] < value of s[i + 1]:\n        total = total + (value of s[i + 1]) - (value of s[i])  \n        i = i + 2\n    else:\n        total = total + (value of s[i])\n        i = i + 1\nreturn total\n```\n\nHere is an animation of the above algorithm.\n\n!?!../Documents/13_animation_1.json:816,307!?!\n\nRecall that the *input is always valid*. This means that we don't need to worry about being given inputs such as `ICD`.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/kcAKumjx/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kcAKumjx\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of the input string (the total number of symbols in it).\n\n- Time complexity : $$O(1)$$.\n\n    As there is a finite set of roman numerals, the maximum number possible number can be `3999`, which in roman numerals is  `MMMCMXCIX`. As such the time complexity is $$O(1)$$.\n\n    If roman numerals had an arbitrary number of symbols, then the time complexity would be proportional to the length of the input, i.e. $$O(n)$$. This is assuming that looking up the value of each symbol is $$O(1)$$.\n\n- Space complexity : $$O(1)$$.\n\n    Because only a constant number of single-value variables are used, the space complexity is $$O(1)$$.\n\n</br>\n\n---\n\n#### Approach 2: Left-to-Right Pass Improved\n\n**Intuition**\n\nInstead of viewing a Roman Numeral as having `7` unique symbols, we could instead view it as having `13` unique symbols\u2014some of length-1 and some of length-2.\n\n![Symbol mapping](../Figures/13/hardcoding_2_fixed.png)\n\nFor example, here is the Roman Numeral `MMCMLXXXIX` broken into its symbols using this definition:\n\n![Splitting the numeral into parts](../Figures/13/length_2_symbols_example.png)\n\nWe can then look up the value of each symbol and add them together.\n\n![Adding up the sum of the numeral](../Figures/13/length_2_symbols_calculation.png)\n\nAfter making a `Map` of `String -> Integer` with the `13` \"symbols\", we need to work our way down the string in the same way as before (we'll do left-to-right, however right-to-left will work okay too), firstly checking if we're at a length-2 symbol, and if not, then treating it as a length-1 symbol.\n\n```text \ntotal = 0\ni = 0\nwhile i < s.length:\n    if at least 2 characters remaining and s.substing(i, i + 1) is in values:\n        total = total + (value of s.substring(i, i + 1))  \n        i = i + 2\n    else:\n        total = total + (value of s[i])\n        i = i + 1\nreturn total\n```\n\nHere is an animation showing the algorithm.\n\n!?!../Documents/13_animation_2.json:816,307!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/2RKp9fC5/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"2RKp9fC5\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n- Space complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n</br>\n\n---\n\n#### Approach 3: Right-to-Left Pass\n\n**Intuition**\n\nThis approach is a more elegant variant of Approach 1. Just to be clear though, *Approach 1 and Approach 2 are probably sufficient for an interview. This approach is still well worth understanding though.*\n\nIn the \"subtraction\" cases, such as `XC`, we've been updating our running `sum` as follows:\n\n```text\nsum += value(C) - value(X)\n```\n\nHowever, notice that this is mathematically equivalent to the following:\n\n```text\nsum += value(C)\nsum -= value(X)\n```\n\nUtilizing this means that we can process *one* symbol each time we go around the main loop. We still need to determine whether or not our current symbol should be added or subtracted by looking at the neighbour though.\n\nIn Approach 1, we had to be careful when inspecting the next symbol to not go over the end of the string. This check wasn't difficult to do, but it increased the code complexity a bit, and it turns out we can avoid it with this approach!\n\nObserve the following:\n\n1. Without looking at the next symbol, we *don't* know whether or not the left-most symbol should be added or subtracted.\n2. The right-most symbol is *always* added. It is either by itself, or the additive part of a pair.\n\nSo, what we can do is initialise sum to be the value of the right-most (last) symbol. Then, we work *backwards* through the string, starting from the second-to-last-symbol. We check the symbol *after* (`i + 1`) to determine whether the current symbol should be \"added\" or \"subtracted\".\n\n```text\nlast = s.length - 1\ntotal = value(last)\n`\nfor i from last - 1 down to 0:\n    if value(s[i]) < value(s[i+1]):\n        total -= value(s[i])\n    else:\n        total += value(s[i])\nreturn sum\n```\n\nBecause we're starting at the second-to-last-index, we know that index `i + 1` always exists. We no longer need to handle its potential non-existence as a special case, and additionally we're able to (cleanly) use a `for` loop, as we're always moving along by 1 index at at time, unlike before where it could have been 1 or 2.\n\nHere is an animation of the above approach.\n\n!?!../Documents/13_animation_3.json:816,307!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/rotmeTT4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"rotmeTT4\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n- Space complexity : $$O(1)$$.\n\n    Same as Approach 1.\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "roman-to-integer",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.842,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "283",
                "title": "3Sum",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "15",
                    "questionFrontendId": "15",
                    "sessionId": "968792",
                    "questionTitle": "3Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/3sum/submit/",
                    "interpretUrl": "/problems/3sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> threeSum(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> threeSum(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def threeSum(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> ThreeSum(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar threeSum = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef three_sum(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func threeSum(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func threeSum(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun threeSum(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function threeSum($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function threeSum(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (three-sum nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec three_sum(Nums :: [integer()]) -> [[integer()]].\\nthree_sum(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec three_sum(nums :: [integer]) :: [[integer]]\\n  def three_sum(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[-1,0,1,2,-1,-4]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"threeSum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<list<integer>>\",\n    \"colsize\": 3,\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = []\n<strong>Output:</strong> []\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
                        "For the two-sum problem, if we fix one of the numbers, say <pre>x</pre>, we have to scan the entire array to find the next number<pre>y</pre> which is <pre>value - x</pre> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
                        "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
                    ],
                    "solution": {
                        "title": "3Sum",
                        "content": "[TOC]\n\n## Solution\n\nThis problem is a follow-up of Two Sum, and it is a good idea to first take a look at [Two Sum](https://leetcode.com/articles/two-sum/) and [Two Sum II](https://leetcode.com/articles/two-sum-ii-input-array-is-sorted/). An interviewer may ask to solve Two Sum first, and then throw 3Sum at you. Pay attention to subtle differences in problem description and try to re-use existing solutions!\n\nTwo Sum, Two Sum II and 3Sum share a similarity that the sum of elements must match the target exactly. A difference is that, instead of exactly one answer, we need to find all unique triplets that sum to zero.\n\nBefore jumping in, let's check the existing solutions and determine the best conceivable runtime (BCR) for 3Sum:\n\n1. [Two Sum](https://leetcode.com/articles/two-sum/) uses a hashmap to find complement values, and therefore achieves $$\\mathcal{O}(N)$$ time complexity.\n2. [Two Sum II](https://leetcode.com/articles/two-sum-ii-input-array-is-sorted/) uses the two pointers pattern and also has $$\\mathcal{O}(N)$$ time complexity for a sorted array. We can use this approach for any array if we sort it first, which bumps the time complexity to $$\\mathcal{O}(n\\log{n})$$.\n\nConsidering that there is one more dimension in 3Sum, it sounds reasonable to shoot for $$\\mathcal{O}(n^2)$$ time complexity as our BCR.\n\n---\n\n#### Approach 1: Two Pointers <a name=\"approach1\"></a>\n\nWe will follow the same two pointers pattern as in [Two Sum II](https://leetcode.com/articles/two-sum-ii-input-array-is-sorted/). It requires the array to be sorted, so we'll do that first. As our BCR is $$\\mathcal{O}(n^2)$$, sorting the array would not change the overall time complexity.\n\nTo make sure the result contains unique triplets, we need to skip duplicate values. It is easy to do because repeating values are next to each other in a sorted array.\n\n> If you are wondering how to solve this problem without sorting the array, go over the [\"No-Sort\"](#approach3) approach below. There are cases when that approach is preferable, and your interviewer may probe your knowledge there.\n\nAfter sorting the array, we move our pivot element `nums[i]` and analyze elements to its right. We find all pairs whose sum is equal `-nums[i]` using the two pointers pattern, so that the sum of the pivot element (`nums[i]`) and the pair (`-nums[i]`) is equal to zero.\n\nAs a quick refresher, the pointers are initially set to the first and the last element respectively. We compare the sum of these two elements to the target. If it is smaller, we increment the lower pointer `lo`. Otherwise, we decrement the higher pointer `hi`. Thus, the sum always moves toward the target, and we \"prune\" pairs that would move it further away. Again, this works only if the array is sorted. Head to the [Two Sum II](https://leetcode.com/articles/two-sum-ii-input-array-is-sorted/) solution for the detailed explanation.\n\n!?!../Documents/15_3Sum.json:1565,370!?!\n\n**Algorithm**\n\nThe implementation is straightforward - we just need to modify `twoSumII` to produce triplets and skip repeating values.\n\n1. For the main function:\n    - Sort the input array `nums`.\n    - Iterate through the array:\n        - If the current value is greater than zero, break from the loop. Remaining values cannot sum to zero.\n        - If the current value is the same as the one before, skip it.\n        - Otherwise, call `twoSumII` for the current position `i`.\n\n2. For `twoSumII` function:\n    - Set the low pointer `lo` to `i + 1`, and high pointer `hi` to the last index.\n    - While low pointer is smaller than high:\n        - If `sum` of `nums[i] + nums[lo] + nums[hi]` is less than zero, increment `lo`.\n        - If `sum` is greater than zero, decrement `hi`.\n        - Otherwise, we found a triplet:\n            - Add it to the result `res`.\n            - Decrement `hi` and increment `lo`.\n            - Increment `lo` while the next value is the same as before to avoid duplicates in the result.\n\n3. Return the result `res`.\n\n<iframe src=\"https://leetcode.com/playground/H7HFMg7d/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"H7HFMg7d\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(n^2)$$. `twoSumII` is $$\\mathcal{O}(n)$$, and we call it $$n$$ times.\n\n    Sorting the array takes $$\\mathcal{O}(n\\log{n})$$, so overall complexity is $$\\mathcal{O}(n\\log{n} + n^2)$$. This is asymptotically equivalent to $$\\mathcal{O}(n^2)$$.\n\n- Space Complexity: from $$\\mathcal{O}(\\log{n})$$ to $$\\mathcal{O}(n)$$, depending on the implementation of the sorting algorithm. For the purpose of complexity analysis, we ignore the memory required for the output.\n\n---\n\n### Approach 2: Hashset\n\nSince triplets must sum up to the target value, we can try the hash table approach from the [Two Sum](https://leetcode.com/articles/two-sum/) solution. This approach won't work, however, if the sum is not necessarily equal to the target, like in [3Sum Smaller](https://leetcode.com/problems/3sum-smaller/) and [3Sum Closest](https://leetcode.com/problems/3sum-closest/).\n\nWe move our pivot element `nums[i]` and analyze elements to its right. We find all pairs whose sum is equal `-nums[i]` using the [Two Sum: One-pass Hash Table](https://leetcode.com/articles/two-sum/#approach-3-one-pass-hash-table) approach, so that the sum of the pivot element (`nums[i]`) and the pair (`-nums[i]`) is equal to zero.\n\nTo do that, we process each element `nums[j]` to the right of the pivot, and check whether a complement `-nums[i] - nums[j]` is already in the hashset. If it is, we found a triplet. Then, we add `nums[j]` to the hashset, so it can be used as a complement from that point on.\n\nLike in the approach above, we will also sort the array so we can skip repeated values. We provide a different way to avoid duplicates in the [\"No-Sort\"](#approach3) approach below.\n\n**Algorithm**\n\nThe main function is the same as in the [Two Pointers](#approach1) approach above. Here, we use `twoSum` (instead of `twoSumII`), modified to produce triplets and skip repeating values.\n\n1. For the main function:\n    - Sort the input array `nums`.\n    - Iterate through the array:\n        - If the current value is greater than zero, break from the loop. Remaining values cannot sum to zero.\n        - If the current value is the same as the one before, skip it.\n        - Otherwise, call `twoSum` for the current position `i`.\n\n2. For `twoSum` function:\n    - For each index `j > i` in `A`:\n        - Compute `complement` value as `-nums[i] - nums[j]`.\n        - If `complement` exists in hashset `seen`:\n            - We found a triplet - add it to the result `res`.\n            - Increment `j` while the next value is the same as before to avoid duplicates in the result.\n        - Add `nums[j]` to hashset `seen`\n\n3. Return the result `res`.\n\n<iframe src=\"https://leetcode.com/playground/8APSUBsw/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"8APSUBsw\"></iframe>\n\n- Time Complexity: $$\\mathcal{O}(n^2)$$. `twoSum` is $$\\mathcal{O}(n)$$, and we call it $$n$$ times.\n\n    Sorting the array takes $$\\mathcal{O}(n\\log{n})$$, so overall complexity is $$\\mathcal{O}(n\\log{n} + n^2)$$. This is asymptotically equivalent to $$\\mathcal{O}(n^2)$$.\n\n- Space Complexity: $$\\mathcal{O}(n)$$ for the hashset.\n\n---\n\n#### Approach 3: \"No-Sort\" <a name=\"approach3\"></a>\n\nWhat if you cannot modify the input array, and you want to avoid copying it due to memory constraints?\n\nWe can adapt the hashset approach above to work for an unsorted array. We can put a combination of three values into a hashset to avoid duplicates. Values in a combination should be ordered (e.g. ascending). Otherwise, we can have results with the same values in the different positions.\n\n**Algorithm**\n\nThe algorithm is similar to the hashset approach above. We just need to add few optimizations so that it works efficiently for repeated values:\n\n1. Use another hashset `dups` to skip duplicates in the outer loop.\n    - Without this optimization, the submission will time out for the test case with 3,000 zeroes. This case is handled naturally when the array is sorted.\n2. Instead of re-populating a hashset every time in the inner loop, we can use a hashmap and populate it once. Values in the hashmap will indicate whether we have encountered that element in the current iteration. When we process `nums[j]` in the inner loop, we set its hashmap value to `i`. This indicates that we can now use `nums[j]` as a complement for `nums[i]`.\n    - This is more like a trick to compensate for container overheads. The effect varies by language, e.g. for C++ it cuts the runtime in half. Without this trick the submission may time out.\n\n<iframe src=\"https://leetcode.com/playground/KjzZx3BV/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"KjzZx3BV\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(n^2)$$. We have outer and inner loops, each going through $$n$$ elements.\n\n    While the asymptotic complexity is the same, this algorithm is noticeably slower than the previous approach. Lookups in a hashset, though requiring a constant time, are expensive compared to the direct memory access.\n\n- Space Complexity: $$\\mathcal{O}(n)$$ for the hashset/hashmap.\n\n    For the purpose of complexity analysis, we ignore the memory required for the output. However, in this approach we also store output in the hashset for deduplication. In the worst case, there could be $$\\mathcal{O}(n^2)$$ triplets in the output, like for this example: `[-k, -k + 1, ..., -1, 0, 1, ... k - 1, k]`. Adding a new number to this sequence will produce `n / 3` new triplets.\n\n---\n\n#### Further Thoughts\n\nThis is a well-known problem with many variations and its own [Wikipedia page](https://en.wikipedia.org/wiki/3SUM).\n\nFor an interview, we recommend focusing on the Two Pointers approach above. It's easier to get it right and adapt for other variations of 3Sum. Interviewers love asking follow-up problems like [3Sum Smaller](https://leetcode.com/problems/3sum-smaller/) and [3Sum Closest](https://leetcode.com/problems/3sum-closest/)!",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "3sum",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.554,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3011",
                "title": "Remove Duplicates from Sorted Array",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "26",
                    "questionFrontendId": "26",
                    "sessionId": "968792",
                    "questionTitle": "Remove Duplicates from Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/remove-duplicates-from-sorted-array/submit/",
                    "interpretUrl": "/problems/remove-duplicates-from-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int removeDuplicates(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int removeDuplicates(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def removeDuplicates(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint removeDuplicates(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int RemoveDuplicates(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar removeDuplicates = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef remove_duplicates(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeDuplicates(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def removeDuplicates(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun removeDuplicates(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function removeDuplicates(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function removeDuplicates(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (remove-duplicates nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,1,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"removeDuplicates\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0,\r\n    \"size\": \"ret\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>\n\n<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;<code>k</code>&nbsp;elements.</p>\n\n<p>Return <code>k</code><em> after placing the final result in the first </em><code>k</code><em> slots of </em><code>nums</code>.</p>\n\n<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>",
                        "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
                        "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."
                    ],
                    "solution": {
                        "title": "Remove Duplicates from Sorted Array",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/591217456\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution\n\n---\n#### Approach 1: Two Pointers\n\n**Algorithm**\n\nSince the array is already sorted, we can keep two pointers $$i$$ and $$j$$, where $$i$$ is the slow-runner while $$j$$ is the fast-runner. As long as $$nums[i] = nums[j]$$, we increment $$j$$ to skip the duplicate.\n\nWhen we encounter $$nums[j] \\neq nums[i]$$, the duplicate run has ended so we must copy its value to $$nums[i + 1]$$. $$i$$ is then incremented and we repeat the same process again until $$j$$ reaches the end of array.\n\n<iframe src=\"https://leetcode.com/playground/YJ5mYjoD/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"YJ5mYjoD\"></iframe>\n\n**Complexity analysis**\n\n* Time complextiy : $$O(n)$$.\nAssume that $$n$$ is the length of array. Each of $$i$$ and $$j$$ traverses at most $$n$$ steps.\n\n* Space complexity : $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "remove-duplicates-from-sorted-array",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.624,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3012",
                "title": "Next Permutation",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "31",
                    "questionFrontendId": "31",
                    "sessionId": "968792",
                    "questionTitle": "Next Permutation",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/next-permutation/submit/",
                    "interpretUrl": "/problems/next-permutation/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void nextPermutation(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void nextPermutation(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def nextPermutation(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def nextPermutation(self, nums: List[int]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid nextPermutation(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void NextPermutation(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar nextPermutation = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Void} Do not return anything, modify nums in-place instead.\\ndef next_permutation(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func nextPermutation(_ nums: inout [Int]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func nextPermutation(nums []int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def nextPermutation(nums: Array[Int]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun nextPermutation(nums: IntArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn next_permutation(nums: &mut Vec<i32>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function nextPermutation(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums in-place instead.\\n */\\nfunction nextPermutation(nums: number[]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (next-permutation nums)\\n  (-> (listof exact-integer?) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"nextPermutation\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n\n<p>If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).</p>\n\n<p>The replacement must be <strong><a href=\"http://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a></strong> and use only constant&nbsp;extra memory.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,2,1]\n<strong>Output:</strong> [1,2,3]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,5]\n<strong>Output:</strong> [1,5,1]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Next Permutation",
                        "content": "[TOC]\n\n## Summary\n\nWe need to find the next lexicographic permutation of the given list of numbers than the number formed by the given array.\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nIn this approach, we find out every possible permutation of list formed by the elements of the given array and find out the permutation which is\njust larger than the given one. But this one will be a very naive approach, since it requires us to find out every possible permutation\n which will take really long time and the implementation is complex.\n Thus, this approach is not acceptable at all. Hence, we move on directly to the correct approach.\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n!)$$. Total possible permutations is $$n!$$.\n* Space complexity : $$O(n)$$. Since an array will be used to store the permutations.\n<br />\n<br />\n---\n#### Approach 2: Single Pass Approach\n\n**Algorithm**\n\nFirst, we observe that for any given sequence that is in descending order, no next larger permutation is possible.\n For example, no next permutation is possible for the following array:\n ```\n [9, 5, 4, 3, 1]\n ```\n\nWe need to find the first pair of two successive numbers $$a[i]$$ and $$a[i-1]$$, from the right, which satisfy\n $$a[i] > a[i-1]$$. Now, no rearrangements to the right of $$a[i-1]$$ can create a larger permutation since that subarray consists of numbers in descending order.\n Thus, we need to rearrange the numbers to the right of $$a[i-1]$$ including itself.\n\nNow, what kind of rearrangement will produce the next larger number? We want to create the permutation just larger than the current one. Therefore, we need to replace the number $$a[i-1]$$ with the number which is just larger than itself among the numbers lying to its right section, say $$a[j]$$.\n\n![ Next Permutation ](https://leetcode.com/media/original_images/31_nums_graph.png)\n\nWe swap the numbers $$a[i-1]$$ and $$a[j]$$. We now have the correct number at index $$i-1$$. But still the current permutation isn't the permutation\n    that we are looking for. We need the smallest permutation that can be formed by using the numbers only to the right of $$a[i-1]$$. Therefore, we need to place those\n     numbers in ascending order to get their smallest permutation.\n\nBut, recall that while scanning the numbers from the right, we simply kept decrementing the index\n      until we found the pair $$a[i]$$ and $$a[i-1]$$ where,  $$a[i] > a[i-1]$$. Thus, all numbers to the right of $$a[i-1]$$ were already sorted in descending order.\n      Furthermore, swapping $$a[i-1]$$ and $$a[j]$$ didn't change that order.\n      Therefore, we simply need to reverse the numbers following $$a[i-1]$$ to get the next smallest lexicographic permutation.\n\nThe following animation will make things clearer:\n\n![Next Permutation](https://leetcode.com/media/original_images/31_Next_Permutation.gif)\n\n<iframe src=\"https://leetcode.com/playground/dmqdX5HL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dmqdX5HL\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. In worst case, only two scans of the whole array are needed.\n\n* Space complexity : $$O(1)$$. No extra space is used. In place replacements are done.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "next-permutation",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.44,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3013",
                "title": "Multiply Strings",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "43",
                    "questionFrontendId": "43",
                    "sessionId": "968792",
                    "questionTitle": "Multiply Strings",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/multiply-strings/submit/",
                    "interpretUrl": "/problems/multiply-strings/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string multiply(string num1, string num2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String multiply(String num1, String num2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def multiply(self, num1, num2):\\n        \\\"\\\"\\\"\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def multiply(self, num1: str, num2: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * multiply(char * num1, char * num2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string Multiply(string num1, string num2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} num1\\n * @param {string} num2\\n * @return {string}\\n */\\nvar multiply = function(num1, num2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num1\\n# @param {String} num2\\n# @return {String}\\ndef multiply(num1, num2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func multiply(_ num1: String, _ num2: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func multiply(num1 string, num2 string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def multiply(num1: String, num2: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun multiply(num1: String, num2: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn multiply(num1: String, num2: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $num1\\n     * @param String $num2\\n     * @return String\\n     */\\n    function multiply($num1, $num2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function multiply(num1: string, num2: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (multiply num1 num2)\\n  (-> string? string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec multiply(Num1 :: unicode:unicode_binary(), Num2 :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmultiply(Num1, Num2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec multiply(num1 :: String.t, num2 :: String.t) :: String.t\\n  def multiply(num1, num2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"2\"\n\"3\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"multiply\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"num1\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"num2\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\n\n<p><strong>Note:</strong>&nbsp;You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num1 = \"2\", num2 = \"3\"\n<strong>Output:</strong> \"6\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num1 = \"123\", num2 = \"456\"\n<strong>Output:</strong> \"56088\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li>\n\t<li><code>num1</code> and <code>num2</code> consist of digits only.</li>\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number <code>0</code> itself.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3014",
                "title": "Group Anagrams",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "49",
                    "questionFrontendId": "49",
                    "sessionId": "968792",
                    "questionTitle": "Group Anagrams",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/group-anagrams/submit/",
                    "interpretUrl": "/problems/group-anagrams/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def groupAnagrams(self, strs):\\n        \\\"\\\"\\\"\\n        :type strs: List[str]\\n        :rtype: List[List[str]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nchar *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} strs\\n * @return {string[][]}\\n */\\nvar groupAnagrams = function(strs) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\\n# @return {String[][]}\\ndef group_anagrams(strs)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func groupAnagrams(strs []string) [][]string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $strs\\n     * @return String[][]\\n     */\\n    function groupAnagrams($strs) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function groupAnagrams(strs: string[]): string[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (group-anagrams strs)\\n  (-> (listof string?) (listof (listof string?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\\ngroup_anagrams(Strs) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\\n  def group_anagrams(strs) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"groupAnagrams\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"strs\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Group Anagrams",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n     <div class=\"video-container\">\n         <iframe src=\"https://player.vimeo.com/video/548141577?texttrack=en\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n     </div>\n </div>\n\n <div>&nbsp;\n </div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Categorize by Sorted String\n\n**Intuition**\n\nTwo strings are anagrams if and only if their sorted strings are equal.\n\n**Algorithm**\n\nMaintain a map `ans : {String -> List}` where each key $$\\text{K}$$ is a sorted string, and each value is the list of strings from the initial input that when sorted, are equal to $$\\text{K}$$.\n\nIn Java, we will store the key as a string, eg. `code`.  In Python, we will store the key as a hashable tuple, eg. `('c', 'o', 'd', 'e')`.\n\n![Anagrams](../Figures/49_groupanagrams1.png)\n\n<iframe src=\"https://leetcode.com/playground/NGc8spVj/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"NGc8spVj\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK \\log K)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  The outer loop has complexity $$O(N)$$ as we iterate through each string.  Then, we sort each string in $$O(K \\log K)$$ time.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.\n<br />\n<br />\n---\n#### Approach 2: Categorize by Count\n\n**Intuition**\n\nTwo strings are anagrams if and only if their character counts (respective number of occurrences of each character) are the same.\n\n**Algorithm**\n\nWe can transform each string $$\\text{s}$$ into a character count, $$\\text{count}$$, consisting of 26 non-negative integers representing the number of $$\\text{a}$$'s, $$\\text{b}$$'s, $$\\text{c}$$'s, etc.  We use these counts as the basis for our hash map.\n\nIn Java, the hashable representation of our count will be a string delimited with '**#**' characters.  For example, `abbccc` will be `#1#2#3#0#0#0...#0` where there are 26 entries total.  In python, the representation will be a tuple of the counts.  For example, `abbccc` will be `(1, 2, 3, 0, 0, ..., 0)`, where again there are 26 entries total.\n\n![Anagrams](../Figures/49_groupanagrams2.png)\n\n<iframe src=\"https://leetcode.com/playground/o64x8Vq4/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"o64x8Vq4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  Counting each string is linear in the size of the string, and we count every string.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "group-anagrams",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.893,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "263",
                "title": "Add Binary",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook phone interview.",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "67",
                    "questionFrontendId": "67",
                    "sessionId": "968792",
                    "questionTitle": "Add Binary",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/add-binary/submit/",
                    "interpretUrl": "/problems/add-binary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string addBinary(string a, string b) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String addBinary(String a, String b) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def addBinary(self, a, b):\\n        \\\"\\\"\\\"\\n        :type a: str\\n        :type b: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def addBinary(self, a: str, b: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * addBinary(char * a, char * b){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string AddBinary(string a, string b) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} a\\n * @param {string} b\\n * @return {string}\\n */\\nvar addBinary = function(a, b) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} a\\n# @param {String} b\\n# @return {String}\\ndef add_binary(a, b)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func addBinary(_ a: String, _ b: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addBinary(a string, b string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def addBinary(a: String, b: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun addBinary(a: String, b: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn add_binary(a: String, b: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $a\\n     * @param String $b\\n     * @return String\\n     */\\n    function addBinary($a, $b) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function addBinary(a: string, b: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (add-binary a b)\\n  (-> string? string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec add_binary(A :: unicode:unicode_binary(), B :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nadd_binary(A, B) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec add_binary(a :: String.t, b :: String.t) :: String.t\\n  def add_binary(a, b) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"11\"\n\"1\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"addBinary\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"a\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"b\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> a = \"11\", b = \"1\"\n<strong>Output:</strong> \"100\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> a = \"1010\", b = \"1011\"\n<strong>Output:</strong> \"10101\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a.length, b.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>a</code> and <code>b</code> consist&nbsp;only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>\n\t<li>Each string does not contain leading zeros except for the zero itself.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Add Binary",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nThere is a simple way using built-in functions:\n\n- Convert a and b into integers.\n\n- Compute the sum.\n\n- Convert the sum back into binary form.\n\n<iframe src=\"https://leetcode.com/playground/csdNVNdg/shared\" frameBorder=\"0\" width=\"100%\" height=\"140\" name=\"csdNVNdg\"></iframe>\n\nThe overall algorithm has $$\\mathcal{O}(N + M)$$ time complexity \nand has two drawbacks which could be used against you during the interview.\n\n> 1 . In Java this approach is limited by the length of the input strings a and b.\nOnce the string is long enough, the result of conversion into \nintegers will not fit into Integer, Long or BigInteger:\n\n- 33 1-bits - and b doesn't fit into Integer.\n\n- 65 1-bits - and b doesn't fit into Long.\n\n- [500000001](https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html) 1-bits - and b doesn't fit into BigInteger.\n\nTo fix the issue, one could use standard Bit-by-Bit Computation approach\nwhich is suitable for quite long input strings.\n\n> 2 . This method has quite low performance in the case of large input \nnumbers. \n\nOne could use Bit Manipulation approach to speed up the solution. \n<br /> \n<br />\n\n\n---\n#### Approach 1: Bit-by-Bit Computation\n\n**Algorithm**\n\nThat's a good old classical algorithm, and there is no\nconversion from binary string to decimal and back here. Let's consider the\nnumbers bit by bit starting from the lowest one and \ncompute the carry this bit will add. \n\nStart from carry = 0. \nIf number a has 1-bit in this lowest bit, add 1 to the carry.\nThe same for number b: if number b has 1-bit in the lowest bit, \nadd 1 to the carry. At this point the carry for the lowest bit could\nbe equal to $$(00)_2$$, $$(01)_2$$, or $$(10)_2$$.\n\nNow append the lowest bit of the carry to the answer, and \nmove the highest bit of the carry to the next order bit.  \n\nRepeat the same steps again, and again, till all bits in a and b\nare used up. If there is still nonzero carry to add, add it. \nNow reverse the answer string and the job is done.\n\n!?!../Documents/67_LIS.json:1000,387!?!\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/9eeUaMno/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"9eeUaMno\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(\\max(N, M))$$, \nwhere $$N$$ and $$M$$ are lengths of the input strings a and b.\n\n* Space complexity: $$\\mathcal{O}(\\max(N, M))$$ to keep the answer.\n<br /> \n<br />\n\n\n---\n#### Approach 2: Bit Manipulation\n \n**Intuition**\n \nHere the input is more adapted to push towards Approach 1,\nbut there is popular Facebook variation of this problem \nwhen interviewer provides you two numbers and \nasks to sum them up without using addition operation.  \n\n> No addition? OK, bit manipulation then.\n\nHow to start? There is an interview tip for bit manipulation problems:\nif you don't know how to start, start from computing XOR for your input data.\nStrangely, that helps to go out for quite a lot of problems,\n[Single Number II](https://leetcode.com/articles/single-number-ii/),\n[Single Number III](https://leetcode.com/articles/single-number-iii/),\n[Maximum XOR of Two Numbers in an Array](https://leetcode.com/articles/maximum-xor-of-two-numbers-in-an-array/),\n[Repeated DNA Sequences](https://leetcode.com/articles/repeated-dna-sequences/),\n[Maximum Product of Word Lengths](https://leetcode.com/articles/maximum-product-of-word-lengths/),\netc.\n\nHere XOR is a key as well, because it's a sum of two binaries \nwithout taking carry into account.\n\n![fig](../Figures/67/xor4.png) \n\nTo find current carry is quite easy as well, it's AND of two input numbers,\nshifted one bit to the left. \n\n![fig](../Figures/67/carry2.png)\n\nNow the problem is reduced: one has to find the sum of \nanswer without carry and carry. It's the same problem - to sum two numbers,\nand hence one could solve it in a loop with the condition statement \n\"while carry is not equal to zero\". \n\n**Algorithm**\n\n- Convert a and b into integers x and y, \nx will be used to keep an answer, and y for the carry.\n\n- While carry is nonzero: `y != 0`:\n\n    - Current answer without carry is XOR of x and y: `answer = x^y`.\n    \n    - Current carry is left-shifted AND of x and y: `carry = (x & y) << 1`.\n    \n    - Job is done, prepare the next loop: `x = answer`, `y = carry`.\n    \n- Return x in the binary form.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/yL3qxhji/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"yL3qxhji\"></iframe>\n\nThis solution could be written as 4-liner in Python\n\n<iframe src=\"https://leetcode.com/playground/FmSbY53h/shared\" frameBorder=\"0\" width=\"100%\" height=\"157\" name=\"FmSbY53h\"></iframe>\n\n**Performance Discussion**\n\nHere we deal with input numbers which are greater than $$2^{100}$$. \nThat forces to use slow [BigInteger](https://docs.oracle.com/javase/8/docs/api/java/math/BigInteger.html) \nin Java, and hence the performance gain will be present for the Python solution only.\nProvided here Java solution could make its best with Integers or Longs, but not\nwith BigIntegers.\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N + M)$$, \nwhere $$N$$ and $$M$$ are lengths of the input strings a and b.\n\n* Space complexity : $$\\mathcal{O}(\\max(N, M))$$ to keep the answer.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "add-binary",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.569,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "285",
                "title": "Minimum Window Substring",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "76",
                    "questionFrontendId": "76",
                    "sessionId": "968792",
                    "questionTitle": "Minimum Window Substring",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/minimum-window-substring/submit/",
                    "interpretUrl": "/problems/minimum-window-substring/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string minWindow(string s, string t) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String minWindow(String s, String t) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minWindow(self, s, t):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minWindow(self, s: str, t: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * minWindow(char * s, char * t){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string MinWindow(string s, string t) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {string}\\n */\\nvar minWindow = function(s, t) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} t\\n# @return {String}\\ndef min_window(s, t)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minWindow(_ s: String, _ t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minWindow(s string, t string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minWindow(s: String, t: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minWindow(s: String, t: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_window(s: String, t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $t\\n     * @return String\\n     */\\n    function minWindow($s, $t) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minWindow(s: string, t: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-window s t)\\n  (-> string? string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmin_window(S, T) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\\n  def min_window(s, t) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"ADOBECODEBANC\"\n\"ABC\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"minWindow\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window substring</strong> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window. If there is no such substring</em><em>, return the empty string </em><code>&quot;&quot;</code><em>.</em></p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Use two pointers to create a window of letters in <b>S</b>, which would have all the characters from <b>T</b>.",
                        "Since you have to find the minimum window in <b>S</b> which has all the characters from <b>T</b>, you need to expand and contract the window using the two pointers and keep checking the window for all the characters. This approach is also called Sliding Window Approach.\r\n\r\n<br><br>\r\n<pre>\r\nL ------------------------ R , Suppose this is the window that contains all characters of <b>T</b> \r\n                          \r\n&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp L----------------- R , this is the contracted window. We found a smaller window that still contains all the characters in <b>T</b>\r\n\r\nWhen the window is no longer valid, start expanding again using the right pointer. </pre>"
                    ],
                    "solution": {
                        "title": "Minimum Window Substring",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Sliding Window\n\n**Intuition**\n\nThe question asks us to return the minimum window from the string $$S$$ which has all the characters of the string $$T$$. Let us call a window `desirable` if it has all the characters from $$T$$.\n\nWe can use a simple sliding window approach to solve this problem.\n\nIn any sliding window based problem we have two pointers. One $$right$$ pointer whose job is to expand the current window and then we have the $$left$$ pointer whose job is to contract a given window. At any point in time only one of these pointers move and the other one remains fixed.\n\nThe solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired characters, we contract (if possible) and save the smallest window till now.\n\nThe answer is the smallest desirable window.\n\nFor eg. ` S = \"ABAACBAB\" T = \"ABC\"`. Then our answer window is `\"ACB\"` and shown below is one of the possible desirable windows.\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_1.png\" width=\"500\"/>\n</center>\n<br>\n\n**Algorithm**\n\n1. We start with two pointers, $$left$$ and $$right$$ initially pointing to the first element of the string $$S$$.\n\n2. We use the $$right$$ pointer to expand the window until we get a desirable window i.e. a window that contains all of the characters of $$T$$.\n\n3. Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one we keep on updating the minimum window size.\n\n4. If the window is not desirable any more, we repeat $$step \\; 2$$ onwards.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_2.png\" width=\"500\"/>\n</center>\n\nThe above steps are repeated until we have looked at all the windows. The smallest window is returned.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_3.png\" width=\"500\"/>\n</center>\n<br>\n\n<iframe src=\"https://leetcode.com/playground/XEVk3wZb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XEVk3wZb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$.\nIn the worst case we might end up visiting every element of string $$S$$ twice, once by left pointer and once by right pointer. $$|T|$$ represents the length of string $$T$$.\n\n* Space Complexity: $$O(|S| + |T|)$$. $$|S|$$ when the window size is equal to the entire string $$S$$. $$|T|$$ when $$T$$ has all unique characters.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Optimized Sliding Window\n\n**Intuition**\n\nA small improvement to the above approach can reduce the time complexity of the algorithm to $$O(2*|filtered\\_S| + |S| + |T|)$$, where $$filtered\\_S$$ is the string formed from S by removing all the elements not present in $$T$$.\n\nThis complexity reduction is evident when $$|filtered\\_S| <<< |S|$$.\n\nThis kind of scenario might happen when length of string $$T$$ is way too small than the length of string $$S$$ and string $$S$$ consists of numerous characters which are not present in $$T$$.\n\n**Algorithm**\n\nWe create a list called $$filtered\\_S$$ which has all the characters from string $$S$$ along with their indices in $$S$$, but these characters should be present in $$T$$.\n\n<pre>\n  S = \"ABCDDDDDDEEAFFBC\" T = \"ABC\"\n  filtered_S = [(0, 'A'), (1, 'B'), (2, 'C'), (11, 'A'), (14, 'B'), (15, 'C')]\n  Here (0, 'A') means in string S character A is at index 0.\n</pre>\n\n\nWe can now follow our sliding window approach on the smaller string $$filtered\\_S$$.\n\n<iframe src=\"https://leetcode.com/playground/EyRdt4FZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EyRdt4FZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$. The complexity is same as the previous approach. But in certain cases where $$|filtered\\_S|$$ <<< $$|S|$$, the complexity would reduce because the number of iterations would be $$2*|filtered\\_S| + |S| + |T|$$.\n* Space Complexity : $$O(|S| + |T|)$$.\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "minimum-window-substring",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.441,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "309",
                "title": "Merge Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "88",
                    "questionFrontendId": "88",
                    "sessionId": "968792",
                    "questionTitle": "Merge Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-sorted-array/submit/",
                    "interpretUrl": "/problems/merge-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def merge(self, nums1, m, nums2, n):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type m: int\\n        :type nums2: List[int]\\n        :type n: int\\n        :rtype: None Do not return anything, modify nums1 in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums1 in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number} m\\n * @param {number[]} nums2\\n * @param {number} n\\n * @return {void} Do not return anything, modify nums1 in-place instead.\\n */\\nvar merge = function(nums1, m, nums2, n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer} m\\n# @param {Integer[]} nums2\\n# @param {Integer} n\\n# @return {Void} Do not return anything, modify nums1 in-place instead.\\ndef merge(nums1, m, nums2, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func merge(nums1 []int, m int, nums2 []int, n int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer $m\\n     * @param Integer[] $nums2\\n     * @param Integer $n\\n     * @return NULL\\n     */\\n    function merge(&$nums1, $m, $nums2, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums1 in-place instead.\\n */\\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (merge nums1 m nums2 n)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?) exact-integer? void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,2,3,0,0,0]\n3\n[2,5,6]\n3",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"merge\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\",\r\n      \"implicitsizeparam\": false\r\n    },\r\n    {\r\n      \"name\": \"m\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\",\r\n      \"implicitsizeparam\": false\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
                        "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
                    ],
                    "solution": {
                        "title": "Merge Sorted Arrays",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1 : Merge and sort\n\n**Intuition**\n\nA naive approach would be to simply write the values from `nums2` into the end of `nums1`, and then sort `nums1`. Remember that we do not need to return a value, as we should modify `nums1` in-place. While straightforward to code, this approach has a high time complexity as we're not taking advantage of the existing sorting.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/2JaaHAz4/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"2JaaHAz4\"></iframe>\n\n\n* Time complexity : $$\\mathcal{O}((n + m)\\log(n + m))$$. \n\n    The cost of sorting a list of length $$x$$ using a built-in sorting algorithm is $$\\mathcal{O}(x \\log x)$$. Because in this case we're sorting a list of length $$m + n$$, we get a total time complexity of $$\\mathcal{O}((n + m) \\log (n + m))$$.\n\n* Space complexity : $$\\mathcal{O}(n)$$, but it can vary.\n\n    Most programming languages have a built-in sorting algorithm that uses $$\\mathcal{O}(n)$$ space.\n\n<br />\n\n---\n\n#### Approach 2 : Three Pointers (Start From the Beginning)\n\n**Intuition**\n\nBecause each array is already sorted, we can achieve an $$\\mathcal{O}(n + m)$$ time complexity with the help of the _two-pointer technique_.\n\n**Algorithm**\n\nThe simplest implementation would be to make a *copy* of the values in `nums1`, called `nums1Copy`, and then use two __read__ pointers and one __write__ pointer to read values from `nums1Copy` and `nums2` and write them into `nums1`.\n\n- Initialize `nums1Copy` to be a new array containing the first `m` values of `nums1`.\n- Initialize read pointer `p1` to the beginning of `nums1Copy`.\n- Initialize read pointer `p2` to the beginning of `nums2`.\n- Initialize write pointer `p` to the beginning of `nums1`.\n- While `p` is still within `nums1`: \n  - If `nums1Copy[p1]` exists and is less than or equal to `nums2[p2]`:\n    - Write `nums1Copy[p1]` into `nums1[p]`, and increment `p1` by `1`.\n  - Else \n    - Write `nums2[p2]` into `nums1[p]`, and increment `p2` by `1`.\n  - Increment `p` by `1`.\n\n![compute](../Figures/88/88_beginning.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/SnKcpgfm/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"SnKcpgfm\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$. \n    \n    We are performing $$n + 2 \\cdot m$$ reads and $$n + 2 \\cdot m$$ writes. Because constants are ignored in Big O notation, this gives us a time complexity of $$\\mathcal{O}(n + m)$$.\n\n* Space complexity : $$\\mathcal{O}(m)$$. \n    \n    We are allocating an additional array of length $$m$$.\n\n<br />\n\n---\n\n#### Approach 3 : Three Pointers (Start From the End)\n\n**Intuition**\n\n> **Interview Tip**: This is a medium-level solution to an easy-level problem. Many of LeetCode's easy-level problems have more difficult solutions, and good candidates are expected to find them.\n\nApproach 2 already demonstrates the best possible time \ncomplexity, $$\\mathcal{O}(n + m)$$, but still uses additional space.\nThis is because the elements of array `nums1` have to be stored somwhere so that\nthey aren't overwritten.\n\nSo, what if instead we start to overwrite `nums1` from the end, where \nthere is no information yet?\n\nThe algorithm is similar to before, except this time we set `p1` to point at index `m - 1` of `nums1`,\n`p2` to point at index `n - 1` of `nums2`, and `p` to point at index `m + n - 1` of `nums1`. \nThis way, it is guaranteed that once we start overwriting the first `m` values in `nums1`, \nwe will have already written each into its new position. In this way, we can eliminate the additional space.\n\n> **Interview Tip**: Whenever you're trying to solve an array problem in-place, always consider the possibility of iterating backwards instead of forwards through the array. It can completely change the problem, and make it a lot easier. \n\n![compute](../Figures/88/88_end.png)\n\n**Implementation**\n\n!?!../Documents/88_LIS.json:1000,470!?!\n\n<iframe src=\"https://leetcode.com/playground/Pir9ofvd/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"Pir9ofvd\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$. \n    \n    Same as Approach 2.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n    \n    Unlike Approach 2, we're not using an extra array.\n\n**Proof (optional)**\n\nYou might be a bit sceptical of this claim. Does it really work in every case? Is it safe to be making such a bold claim?\n\n> This way, it is guaranteed that once we start overwriting the first `m` values in `nums1`, \nwe will have already written each into its new position. In this way, we can eliminate the additional space.\n\nGreat question! So, why does this work? To prove it, we need to ensure that `p` never overwrites a value in `nums1` that `p1` hasn't yet read from `nums1`.\n\n> **Words of Advice**: Terrified of proofs? Many software engineers are. Good proofs are simply a series of logical assertions, each building on the next. In this way, we can go from \"obvious\" statements, all the way to the one we want to prove. I recommend reading each statement one-by-one, ensuring that you understand each before moving onto the next.\n\n1. *We know that* upon initialization, `p` is `n` steps ahead of `p1` (in other words, `p1 + n = p`).\n\n2. *We also know that* during each of the `p` iterations this algorithm performs, `p` is always decremented by `1`, and *either* `p1` *or* `p2` is decremented by `1`.\n\n3. *We can deduce that* when `p1` decremented, the gap between `p` and `p1` stays the same, so there can't be an \"overtake\" in that case.\n\n4. *We can also deduce that* when `p2` is decremented though, the gap between `p` and `p1` shrinks by `1` as `p` moves, but not `p1`.\n\n5. *And from that, we can deduce that* the maximum number of times that `p2` can be decremented is `n`. In other words, the gap between `p` and `p1` can shrink by `1`, at most `n` times.\n\n6. *In conclusion*, it's impossible for an overtake to occur, as they started `n` apart. And when `p = p1`, the gap has to have shrunk `n` times. This means that all of `nums2` have been merged in, and so there is nothing more to do.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "merge-sorted-arrays",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.483,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "288",
                "title": "Valid Palindrome",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "125",
                    "questionFrontendId": "125",
                    "sessionId": "968792",
                    "questionTitle": "Valid Palindrome",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-palindrome/submit/",
                    "interpretUrl": "/problems/valid-palindrome/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isPalindrome(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isPalindrome(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isPalindrome(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isPalindrome(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsPalindrome(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isPalindrome = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef is_palindrome(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isPalindrome(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPalindrome(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isPalindrome(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isPalindrome(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_palindrome(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function isPalindrome($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isPalindrome(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-palindrome s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\\nis_palindrome(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_palindrome(s :: String.t) :: boolean\\n  def is_palindrome(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"A man, a plan, a canal: Panama\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isPalindrome\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Valid Palindrome",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Compare with Reverse\n\n**Intuition**\n\nA palindrome is a word, phrase, or sequence that reads the same backwards as forwards. e.g. `madam`\n\nA palindrome, and its reverse, are identical to each other.\n\n**Algorithm**\n\nWe'll reverse the given string and compare it with the original. If those are equivalent, it's a palindrome.\n\nSince only alphanumeric characters are considered, we'll filter out all other types of characters before we apply our algorithm.\n\nAdditionally, because we're treating letters as case-insensitive, we'll convert the remaining letters to lower case. The digits will be left the same.\n\n<iframe src=\"https://leetcode.com/playground/JNcSr4tR/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JNcSr4tR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$, in length $$n$$ of the string.\n\n  We need to iterate thrice through the string:\n    1. When we filter out non-alphanumeric characters, and convert the remaining characters to lower-case.\n    2. When we reverse the string.\n    3. When we compare the original and the reversed strings.\n\n  Each iteration runs linear in time (since each character operation completes in constant time). Thus, the effective run-time complexity is linear.\n\n* Space complexity : $$O(n)$$, in length $$n$$ of the string. We need $$O(n)$$ additional space to stored the filtered string and the reversed string.\n\n<br />\n\n---\n\n#### Approach 2: Two Pointers\n\n**Intuition**\n\nIf you take any ordinary string, and concatenate its reverse to it, you'll get a palindrome. This leads to an interesting insight about the converse: every palindrome half is reverse of the other half.\n\nSimply speaking, if one were to start in the middle of a palindrome, and traverse outwards, they'd encounter the same characters, in the exact same order, in both halves!\n\n!?!../Documents/125_valid_palindrome.json:800,600!?!\n\n**Algorithm**\n\nSince the input string contains characters that we need to ignore in our palindromic check, it becomes tedious to figure out the real middle point of our palindromic input.\n\n> Instead of going outwards from the middle, we could just go inwards towards the middle!\n\nSo, if we start traversing inwards, from both ends of the input string, we can expect to _see_ the same characters, in the same order.\n\nThe resulting algorithm is simple:\n+ Set two pointers, one at each end of the input string\n+ If the input is palindromic, both the pointers should point to equivalent characters, _at all times_. [^note-1]\n  + If this condition is not met at any point of time, we break and return early.  [^note-2]\n+ We can simply ignore non-alphanumeric characters by continuing to traverse further.\n+ Continue traversing inwards until the pointers meet in the middle.\n\n<iframe src=\"https://leetcode.com/playground/ZZg94fK4/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"ZZg94fK4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$, in length $$n$$ of the string. We traverse over each character at-most once, until the two pointers meet in the middle, or when we break and return early.\n\n* Space complexity : $$O(1)$$. No extra space required, at all.\n\n\n\n[^note-1]: Such a property is formally known as a [loop invariant](https://en.wikipedia.org/wiki/Loop_invariant).\n\n[^note-2]: Such a property is often called a _loop termination condition_. It is one of several used in this solution. Can you identify the others?",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "valid-palindrome",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.956,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "268",
                "title": "Read N Characters Given Read4",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "157",
                    "questionFrontendId": "157",
                    "sessionId": "968792",
                    "questionTitle": "Read N Characters Given Read4",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/read-n-characters-given-read4/submit/",
                    "interpretUrl": "/problems/read-n-characters-given-read4/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char *buf4);\\n */\\n\\nclass Solution {\\npublic:\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    int read(char *buf, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char[] buf4);\\n */\\n\\npublic class Solution extends Reader4 {\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    public int read(char[] buf, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\nThe read4 API is already defined for you.\\n\\n    @param buf4, a list of characters\\n    @return an integer\\n    def read4(buf4):\\n\\n# Below is an example of how the read4 API can be called.\\nfile = File(\\\"abcdefghijk\\\") # File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def read(self, buf, n):\\n        \\\"\\\"\\\"\\n        :type buf: Destination buffer (List[str])\\n        :type n: Number of characters to read (int)\\n        :rtype: The number of actual characters read (int)\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\nThe read4 API is already defined for you.\\n\\n    @param buf4, a list of characters\\n    @return an integer\\n    def read4(buf4):\\n\\n# Below is an example of how the read4 API can be called.\\nfile = File(\\\"abcdefghijk\\\") # File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\nbuf4 = [' '] * 4 # Create buffer with enough space to store characters\\nread4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\nread4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\nread4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def read(self, buf, n):\\n        \\\"\\\"\\\"\\n        :type buf: Destination buffer (List[str])\\n        :type n: Number of characters to read (int)\\n        :rtype: The number of actual characters read (int)\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char *buf4);\\n */\\n\\n/**\\n * @param buf Destination buffer\\n * @param n   Number of characters to read\\n * @return    The number of actual characters read\\n */\\nint _read(char* buf, int n) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * The Read4 API is defined in the parent class Reader4.\\n *     int Read4(char[] buf4);\\n */\\n\\npublic class Solution : Reader4 {\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    public int Read(char[] buf, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for read4()\\n * \\n * @param {character[]} buf4 Destination buffer\\n * @return {number} The number of actual characters read\\n * read4 = function(buf4) {\\n *     ...\\n * };\\n */\\n\\n/**\\n * @param {function} read4()\\n * @return {function}\\n */\\nvar solution = function(read4) {\\n    /**\\n     * @param {character[]} buf Destination buffer\\n     * @param {number} n Number of characters to read\\n     * @return {number} The number of actual characters read\\n     */\\n    return function(buf, n) {\\n        \\n    };\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The read4 API is already defined for you.\\n# Below is an example of how the read4 API can be called.\\n# file = File.new(\\\"abcdefghijk\\\") File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\n# buf4 = [' '] * 4 Create buffer with enough space to store characters\\n# read4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\n# read4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\n# read4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n\\n# @param {List[str]} buf\\n# @param {int} n\\n# @return {int}\\ndef read(buf, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     func read4(_ buf4: inout [Character]) -> Int;\\n */\\n\\nclass Solution : Reader4 {\\n\\t/**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    func read(_ buf: inout [Character], _ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * The read4 API is already defined for you.\\n *\\n *     read4 := func(buf4 []byte) int\\n *\\n * // Below is an example of how the read4 API can be called.\\n * file := File(\\\"abcdefghijk\\\") // File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\n * buf4 := make([]byte, 4) // Create buffer with enough space to store characters\\n * read4(buf4) // read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\n * read4(buf4) // read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\n * read4(buf4) // read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n */\\n\\nvar solution = func(read4 func([]byte) int) func([]byte, int) int {\\n    // implement read below.\\n    return func(buf []byte, n int) int {\\n        \\n    }\\n}\\n\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n  * The read4 API is defined in the parent class Reader4.\\n  *     def read4(buf4: Array[Char]): Int = {}\\n  */\\n\\nclass Solution extends Reader4 {\\n    /**\\n      * @param buf Destination buffer\\n \\t  * @param n   Number of characters to read\\n      * @return    The number of actual characters read\\n      */\\n    def read(buf: Array[Char], n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n* The read4 API is defined in the parent class Reader4.\\n* fun read4(buf4:CharArray): Int {}\\n*/\\n\\nclass Solution:Reader4() {\\n    /**\\n      * @param buf Destination buffer\\n      * @param n Number of characters to read\\n      * @return The number of actual characters read\\n      */\\n    override fun read(buf:CharArray, n:Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"/**\\n * The read4 API is defined as.\\n *     fn read4(&self,buf4: &mut [char]) -> i32;\\n * You can call it using self.read4(buf4)\\n */\\n\\nimpl Solution {\\n    pub fn read(&self, buf: &mut [char], n: i32) -> i32 {\\n         \\n    }\\n}\\n\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/* The read4 API is defined in the parent class Reader4.\\n      public function read4(&$buf4){} */\\n\\nclass Solution extends Reader4 {\\n    /**\\n     * @param  Char[]   &$buf\\tDestination buffer\\n     * @param  Integer  $n\\t\\tNumber of characters to read\\n     * @return Integer \\t\\t\\tThe number of actual characters read\\n     */\\n    function read(&$buf, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for read4()\\n * read4 = function(buf4: string[]): number {\\n *     ...\\n * };\\n */\\n\\nvar solution = function(read4: any) {\\n\\n    return function(buf: string[], n: number): number {\\n        \\n    };\\n};\"}]",
                    "sampleTestCase": "\"abc\"\n4",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"read\",\n  \"params\": [\n    {\n      \"name\": \"file\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a <code>file</code> and assume that you can only read the file using a given method <code>read4</code>, implement a method to read <code>n</code> characters.</p>\n\n<p><strong>Method read4: </strong></p>\n\n<p>The API <code>read4</code> reads <strong>four consecutive characters</strong> from <code>file</code>, then writes those characters into the buffer array <code>buf4</code>.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p>Note that <code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.</p>\n\n<p><strong>Definition of read4:</strong></p>\n\n<pre>\n    Parameter:  char[] buf4\n    Returns:    int\n\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n</pre>\n\n<p>Below is a high-level example of how <code>read4</code> works:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/01/157_example.png\" style=\"width: 600px; height: 403px;\" />\n<pre>\nFile file(&quot;abcde<code>&quot;); // File is &quot;</code>abcde<code>&quot;, initially file pointer (fp) points to &#39;a&#39;\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = &quot;abcd&quot;, fp points to &#39;e&#39;\nread4(buf4); // read4 returns 1. Now buf4 = &quot;e&quot;, fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = &quot;&quot;, fp points to end of file</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Method read:</strong></p>\n\n<p>By using the <code>read4</code> method, implement the method read that reads <code>n</code> characters from <code>file</code> and store it in the buffer array <code>buf</code>. Consider that you cannot manipulate <code>file</code> directly.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p><strong>Definition of read: </strong></p>\n\n<pre>\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\n\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Consider that you cannot manipulate the file directly. The file is only accessible for <code>read4</code> but not for <code>read</code>.</li>\n\t<li>The <code>read</code> function will only be called once for each test case.</li>\n\t<li>You may assume the destination buffer array, <code>buf</code>, is guaranteed to have enough space for storing <code>n</code> characters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abc&quot;, n = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3.\nNote that &quot;abc&quot; is the file&#39;s content, not buf. buf is the destination buffer that you will have to write the results to.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abcde&quot;, n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcde&quot;. We read a total of 5 characters from the file, so return 5.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abcdABCD1234&quot;, n = 12\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;abcdABCD1234&quot;. We read a total of 12 characters from the file, so return 12.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;leetcode&quot;, n = 5\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> After calling your read method, buf should contain &quot;leetc&quot;. We read a total of 5 characters from the file, so return 5.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= file.length &lt;= 500</code></li>\n\t<li><code>file</code> consist of English letters and digits.</li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Read N Characters Given Read4",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Overview\r\n\r\n**Interview Tendencies: Google and Facebook**\r\n\r\nA long time ago, long ago, so long ago that no one can remember,\r\nalgorithm interview questions were less popular. \r\nTen years ago big companies mainly filtered the candidates by the university ranks, \r\nand the interview questions were like \r\n[please describe how DDR memory works](https://hexus.net/tech/tech-explained/ram/702-ddr-ii-how-it-works/).\r\n\r\nNowadays there are some tendencies to merge this \"old-style interview\" with the\r\nmodern algorithm questions interview. The idea is to ask a question which \r\nsounds like algorithmic but checks your knowledge of how do computers \r\nwork: [Round-robin CPU scheduling](https://en.wikipedia.org/wiki/Round-robin_scheduling),\r\n[C10k problem first solved by nginx](https://en.wikipedia.org/wiki/C10k_problem), etc. \r\n\r\n> Is it good or bad? That's a reality to deal with, \r\nespecially if we speak about Google or Facebook interviews.\r\n\r\n**Read N Characters Given Read4**\r\n\r\nBack to the problem, the question is \"how does the memory work\":\r\n\r\n- Because of the physical implementation, \r\nloading 4 bytes in DDR is faster than to load 1 byte 4 times.\r\n\r\n- On the majority of computers today, collection of 4 bytes, \r\nor 32 bits, is called a _word_.\r\nMost modern CPUs are optimized for the operations with _words_. \r\n\r\nTo sum up, the problem is a practical low-level question. \r\nThe standard approach (Approach 1) to solve it using \r\nthe _internal_ buffer of 4 characters:\r\n\r\nFile -> Internal Buffer of 4 Characters -> Buffer of N Characters.\r\n\r\n![img](../Figures/157/internal.png)\r\n*Figure 1. Approach 1: solution with internal buffer.*\r\n{:align=\"center\"}\r\n\r\nOnce it's done, and you show your understanding of memory operations,\r\nthe follow-up question is how to speed up.\r\nThe answer (Approach 2) is quite straightforward. \r\nIf it's possible, do not use the internal buffer of 4 characters \r\nto avoid the double copy:\r\n\r\nFile -> Buffer of N Characters.\r\n\r\n![img](../Figures/157/no_internal2.png)\r\n*Figure 2. Approach 2: solution without internal buffer.*\r\n{:align=\"center\"}\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: Use Internal Buffer of 4 Characters\r\n\r\n![img](../Figures/157/internal.png)\r\n*Figure 3. Solution with internal buffer.*\r\n{:align=\"center\"}\r\n\r\n**Algorithm**\r\n\r\nLet's use an internal buffer of 4 characters to solve this problem:\r\n\r\nFile -> Internal Buffer of 4 Characters -> Buffer of N Characters.\r\n\r\n- Initialize the number of copied characters `copiedChars = 0`,\r\nand the number of read characters: `readChars = 4`. It's convenient \r\ninitialize `readChars` to `4` and then use `readChars != 4` as EOF marker. \r\n\r\n- Initialize an internal buffer of 4 characters: `buf4`.\r\n\r\n- While number of copied characters is less than N: `copiedChars < n` \r\nand there are still characters in the file: `readChars == 4`:\r\n\r\n    - Read from file into internal buffer: `readChars = read4(buf4)`.\r\n    \r\n    - Copy the characters from internal buffer `buf4` into main buffer\r\n    `buf` one by one. Increase `copiedChars` after each character. \r\n    In the number of copied characters is equal to N: `copiedChars == n`, \r\n    interrupt the copy process and return `copiedChars`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/5mgwJ8N7/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"5mgwJ8N7\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$ to copy N characters.\r\n\r\n* Space complexity: $$\\mathcal{O}(1)$$ to keep `buf4` of 4 elements.\r\n\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Speed Up: No Internal Buffer\r\n\r\n![img](../Figures/157/one_buf.png)\r\n*Figure 4. Solution without internal buffer.*\r\n{:align=\"center\"}\r\n\r\nThis solution is mainly suitable for the languages (C, C++, Golang) \r\nwhere pointers allow to append directly to the primary buffer `buf`. \r\n\r\n**Algorithm**\r\n\r\n- Initialize the number of copied characters `copiedChars = 0`,\r\nand the number of read characters: `readChars = 4`.\r\n\r\n- While number of copied characters is less than N: `copiedChars < n` \r\nand there are still characters in the file: `readChars == 4`:\r\n\r\n    - Read from file directly into buffer: `read4(buf + copiedChars)`.\r\n    \r\n    - Increase `copiedChars`: `copiedChars += readChars`.\r\n    \r\n- Now `buf` contains at least N characters. \r\nReturn `min(n, copiedChars)`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/LdcUryBA/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"LdcUryBA\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$\\mathcal{O}(N)$$ to copy N characters.\r\n\r\n* Space complexity: $$\\mathcal{O}(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "read-n-characters-given-read4",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.952,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "269",
                "title": "Read N Characters Given Read4 II - Call multiple times",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "158",
                    "questionFrontendId": "158",
                    "sessionId": "968792",
                    "questionTitle": "Read N Characters Given Read4 II - Call multiple times",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/read-n-characters-given-read4-ii-call-multiple-times/submit/",
                    "interpretUrl": "/problems/read-n-characters-given-read4-ii-call-multiple-times/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char *buf4);\\n */\\n\\nclass Solution {\\npublic:\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    int read(char *buf, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char[] buf4); \\n */\\n\\npublic class Solution extends Reader4 {\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    public int read(char[] buf, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The read4 API is already defined for you.\\n# @param buf4, List[str]\\n# @return an integer\\n# def read4(buf4):\\n\\nclass Solution(object):\\n    def read(self, buf, n):\\n        \\\"\\\"\\\"\\n        :type buf: List[str]\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# The read4 API is already defined for you.\\n# def read4(buf4: List[str]) -> int:\\n\\nclass Solution:\\n    def read(self, buf: List[str], n: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     int read4(char *buf4);\\n */\\n\\ntypedef struct {\\n    \\n} Solution;\\n\\n/** initialize your data structure here. */\\nSolution* solutionCreate() {\\n\\n}\\n\\n/**\\n * @param buf Destination buffer\\n * @param n   Number of characters to read\\n * @return    The number of actual characters read\\n */\\nint _read(Solution* obj, char* buf, int n) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * The Read4 API is defined in the parent class Reader4.\\n *     int Read4(char[] buf4);\\n */\\n\\npublic class Solution : Reader4 {\\n    /**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    public int Read(char[] buf, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for read4()\\n * \\n * @param {character[]} buf Destination buffer\\n * @return {number} The number of characters read\\n * read4 = function(buf4) {\\n *     ...\\n * };\\n */\\n\\n/**\\n * @param {function} read4()\\n * @return {function}\\n */\\nvar solution = function(read4) {\\n    /**\\n     * @param {character[]} buf Destination buffer\\n     * @param {number} n Number of characters to read\\n     * @return {number} The number of actual characters read\\n     */\\n    return function(buf, n) {\\n        \\n    };\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The read4 API is already defined for you.\\n# Below is an example of how the read4 API can be called.\\n# file = File.new(\\\"abcdefghijk\\\") File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\n# buf4 = [' '] * 4 Create buffer with enough space to store characters\\n# read4(buf4) # read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\n# read4(buf4) # read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\n# read4(buf4) # read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n\\nclass Solution\\n    # @param {List[str]} buf\\n\\t# @param {int} n\\n\\t# @return {int}\\n    def read(buf, n)\\n        \\n    end\\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * The read4 API is defined in the parent class Reader4.\\n *     func read4(_ buf4: inout [Character]) -> Int;\\n */\\n\\nclass Solution : Reader4 {\\n\\t/**\\n     * @param buf Destination buffer\\n     * @param n   Number of characters to read\\n     * @return    The number of actual characters read\\n     */\\n    func read(_ buf: inout [Character], _ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * The read4 API is already defined for you.\\n *\\n *     read4 := func(buf4 []byte) int\\n *\\n * // Below is an example of how the read4 API can be called.\\n * file := File(\\\"abcdefghijk\\\") // File is \\\"abcdefghijk\\\", initially file pointer (fp) points to 'a'\\n * buf4 := make([]byte, 4) // Create buffer with enough space to store characters\\n * read4(buf4) // read4 returns 4. Now buf = ['a','b','c','d'], fp points to 'e'\\n * read4(buf4) // read4 returns 4. Now buf = ['e','f','g','h'], fp points to 'i'\\n * read4(buf4) // read4 returns 3. Now buf = ['i','j','k',...], fp points to end of file\\n */\\n\\nvar solution = func(read4 func([]byte) int) func([]byte, int) int {\\n    // implement read below.\\n    return func(buf []byte, n int) int {\\n        \\n    }\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n  * The read4 API is defined in the parent class Reader4.\\n  *     def read4(buf4: Array[Char]): Int = {}\\n  */\\n\\nclass Solution extends Reader4 {\\n    /**\\n      * @param  buf Destination buffer\\n \\t  * @param  n   Number of characters to read\\n      * @return     The number of actual characters read\\n      */\\n    def read(buf: Array[Char], n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n* The read4 API is defined in the parent class Reader4.\\n* fun read4(buf4:CharArray): Int {}\\n*/\\n\\nclass Solution:Reader4() {\\n    /**\\n      * @param  buf Destination buffer\\n      * @param  n   Number of characters to read\\n      * @return     The number of actual characters read\\n      */\\n    override fun read(buf:CharArray, n:Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/* The read4 API is defined in the parent class Reader4.\\n      public function read4(&$buf4){} */\\n\\nclass Solution extends Reader4 {\\n    /**\\n     * @param  Char[]   &$buf\\tDestination buffer\\n     * @param  Integer  $n\\t\\tNumber of characters to read\\n     * @return Integer \\t\\t\\tThe number of actual characters read\\n     */\\n    function read(&$buf, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for read4()\\n * read4 = function(buf4: string[]): number {\\n *     ...\\n * };\\n */\\n\\nvar solution = function(read4: any) {\\n\\n    return function(buf: string[], n: number): number {\\n        \\n    };\\n};\"}]",
                    "sampleTestCase": "\"abc\"\n[1,2,1]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"read\",\n  \"params\": [\n    {\n      \"name\": \"file\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"queries\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\",\n    \"dealloc\": true\n  },\n  \"manual\": true,\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"c\",\n    \"csharp\",\n    \"javascript\",\n    \"ruby\",\n    \"swift\",\n    \"golang\",\n    \"python3\",\n    \"scala\",\n    \"kotlin\",\n    \"php\",\n    \"typescript\"\n  ]\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a <code>file</code> and assume that you can only read the file using a given method <code>read4</code>, implement a method <code>read</code> to read <code>n</code> characters. Your method <code>read</code> may be <strong>called multiple times</strong>.</p>\n\n<p><strong>Method read4: </strong></p>\n\n<p>The API <code>read4</code> reads <strong>four consecutive characters</strong> from <code>file</code>, then writes those characters into the buffer array <code>buf4</code>.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p>Note that <code>read4()</code> has its own file pointer, much like <code>FILE *fp</code> in C.</p>\n\n<p><strong>Definition of read4:</strong></p>\n\n<pre>\n    Parameter:  char[] buf4\n    Returns:    int\n\nbuf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\n</pre>\n\n<p>Below is a high-level example of how <code>read4</code> works:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/07/01/157_example.png\" style=\"width: 600px; height: 403px;\" />\n<pre>\nFile file(&quot;abcde<code>&quot;); // File is &quot;</code>abcde<code>&quot;, initially file pointer (fp) points to &#39;a&#39;\nchar[] buf4 = new char[4]; // Create buffer with enough space to store characters\nread4(buf4); // read4 returns 4. Now buf4 = &quot;abcd&quot;, fp points to &#39;e&#39;\nread4(buf4); // read4 returns 1. Now buf4 = &quot;e&quot;, fp points to end of file\nread4(buf4); // read4 returns 0. Now buf4 = &quot;&quot;, fp points to end of file</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Method read:</strong></p>\n\n<p>By using the <code>read4</code> method, implement the method read that reads <code>n</code> characters from <code>file</code> and store it in the buffer array <code>buf</code>. Consider that you cannot manipulate <code>file</code> directly.</p>\n\n<p>The return value is the number of actual characters read.</p>\n\n<p><strong>Definition of read: </strong></p>\n\n<pre>\n    Parameters:\tchar[] buf, int n\n    Returns:\tint\n\nbuf[] is a destination, not a source. You will need to write the results to buf[].\n</pre>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Consider that you cannot manipulate the file directly. The file is only accessible for <code>read4</code> but not for <code>read</code>.</li>\n\t<li>The read function may be <strong>called multiple times</strong>.</li>\n\t<li>Please remember to <strong>RESET</strong> your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see <a href=\"https://leetcode.com/faq/\" target=\"_blank\">here</a> for more details.</li>\n\t<li>You may assume the destination buffer array, <code>buf</code>, is guaranteed to have enough space for storing <code>n</code> characters.</li>\n\t<li>It is guaranteed that in a given test case the same buffer <code>buf</code> is called by <code>read</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abc&quot;, queries = [1,2,1]\n<strong>Output:</strong> [1,2,0]\n<strong>Explanation:</strong> The test case represents the following scenario:\nFile file(&quot;abc&quot;);\nSolution sol;\nsol.read(buf, 1); // After calling your read method, buf should contain &quot;a&quot;. We read a total of 1 character from the file, so return 1.\nsol.read(buf, 2); // Now buf should contain &quot;bc&quot;. We read a total of 2 characters from the file, so return 2.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\nAssume buf is allocated and guaranteed to have enough space for storing all characters from the file.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> file = &quot;abc&quot;, queries = [4,1]\n<strong>Output:</strong> [3,0]\n<strong>Explanation:</strong> The test case represents the following scenario:\nFile file(&quot;abc&quot;);\nSolution sol;\nsol.read(buf, 4); // After calling your read method, buf should contain &quot;abc&quot;. We read a total of 3 characters from the file, so return 3.\nsol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= file.length &lt;= 500</code></li>\n\t<li><code>file</code> consist of English letters and digits.</li>\n\t<li><code>1 &lt;= queries.length &lt;= 10</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= 500</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3015",
                "title": "One Edit Distance",
                "type": 1,
                "info": null,
                "paidOnly": true,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "161",
                    "questionFrontendId": "161",
                    "sessionId": "968792",
                    "questionTitle": "One Edit Distance",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/one-edit-distance/submit/",
                    "interpretUrl": "/problems/one-edit-distance/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isOneEditDistance(string s, string t) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isOneEditDistance(String s, String t) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isOneEditDistance(self, s, t):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isOneEditDistance(self, s: str, t: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isOneEditDistance(char * s, char * t){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsOneEditDistance(string s, string t) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isOneEditDistance = function(s, t) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} t\\n# @return {Boolean}\\ndef is_one_edit_distance(s, t)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isOneEditDistance(_ s: String, _ t: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isOneEditDistance(s string, t string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isOneEditDistance(s: String, t: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isOneEditDistance(s: String, t: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_one_edit_distance(s: String, t: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $t\\n     * @return Boolean\\n     */\\n    function isOneEditDistance($s, $t) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isOneEditDistance(s: string, t: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-one-edit-distance s t)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_one_edit_distance(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> boolean().\\nis_one_edit_distance(S, T) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_one_edit_distance(s :: String.t, t :: String.t) :: boolean\\n  def is_one_edit_distance(s, t) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"ab\"\n\"acb\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isOneEditDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code>&nbsp;and <code>t</code>, return <code>true</code> if they are both one edit distance apart, otherwise return <code>false</code>.</p>\n\n<p>A string <code>s</code> is said to be one distance apart from a string <code>t</code> if you can:</p>\n\n<ul>\n\t<li>Insert <strong>exactly one</strong> character into <code>s</code>&nbsp;to get&nbsp;<code>t</code>.</li>\n\t<li>Delete <strong>exactly one</strong> character from&nbsp;<code>s</code>&nbsp;to get&nbsp;<code>t</code>.</li>\n\t<li>Replace <strong>exactly one</strong> character of&nbsp;<code>s</code>&nbsp;with <strong>a different character</strong> to get&nbsp;<code>t</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, t = &quot;acb&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can insert &#39;c&#39; into s&nbsp;to get&nbsp;t.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> We cannot get t from s by only one step.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;, t = &quot;A&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= t.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of lower-case letters, upper-case letters <strong>and/or</strong> digits.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "One Edit Distance",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: One pass algorithm\n\n**Intuition**\n\nFirst of all, let's ensure that the string lengths are not too far from each \nother. If the length difference is 2 or more characters, then `s` and `t` couldn't be \none edit away strings.\n\n![compute](../Figures/161/one_away.png)\n\nFor the next let's assume that `s` is always shorter or the same length as `t`.\nIf not, one could always call `isOneEditDistance(t, s)` to inverse the string order.\n\nNow it's time to pass along the strings and to look for the first different character.\n\nIf there is no differences between the first `len(s)` characters, \nonly two situations are possible :\n\n- The strings are equal.\n\n- The strings are one edit away distance.\n\n![compute](../Figures/161/161_pic2.png)\n\nNow what if there _is_ a different character so that `s[i] != t[i]`. \n\n- If the strings are of the same length, _all_ next \ncharacters should be equal to keep one edit away distance. To verify it,\none has to compare the substrings of `s` and `t` \nboth starting from the `i + 1`th character. \n\n- If `t` is one character longer than `s`, \nthe additional character `t[i]` should be the only difference\nbetween both strings. To verify it, one has to compare\na substring of `s` starting from the `i`th character and \na substring of `t` starting from the `i + 1`th character.\n\n![compute](../Figures/161/161_pic3.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/Hd4cXKBY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Hd4cXKBY\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the worst case when\nstring lengths are close enough `abs(ns - nt) <= 1`, \nwhere `N` is a number of characters in the longest string. \n$$\\mathcal{O}(1)$$ in the best case when `abs(ns - nt) > 1`.\n \n* Space complexity : $$\\mathcal{O}(N)$$ because strings are immutable\nin Python and Java and to create substring costs $$\\mathcal{O}(N)$$ space. \n\n**Problem generalization : Edit distance**\n\n[Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.](https://leetcode.com/articles/edit-distance/)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "one-edit-distance",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.5,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3016",
                "title": "Product of Array Except Self",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Facebook online assessment.",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "238",
                    "questionFrontendId": "238",
                    "sessionId": "968792",
                    "questionTitle": "Product of Array Except Self",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/product-of-array-except-self/submit/",
                    "interpretUrl": "/problems/product-of-array-except-self/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> productExceptSelf(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] productExceptSelf(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def productExceptSelf(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* productExceptSelf(int* nums, int numsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] ProductExceptSelf(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar productExceptSelf = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef product_except_self(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func productExceptSelf(nums []int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun productExceptSelf(nums: IntArray): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[]\\n     */\\n    function productExceptSelf($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function productExceptSelf(nums: number[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (product-except-self nums)\\n  (-> (listof exact-integer?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec product_except_self(Nums :: [integer()]) -> [integer()].\\nproduct_except_self(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec product_except_self(nums :: [integer]) :: [integer]\\n  def product_except_self(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"productExceptSelf\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)&nbsp;</code>extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Product of Array Except Self",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/574160642\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution\r\n\r\nFrom the looks of it, this seems like a simple enough problem to solve in linear time and space. We can simply take the product of all the elements in the given array and then, for each of the elements $$x$$ of the array, we can simply find `product of array except self` value by dividing the product by $$x$$. \r\n\r\nDoing this for each of the elements would solve the problem. However, there's a note in the problem which says that we are not allowed to use division operation. That makes solving this problem a bit harder. \r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 1: Left and Right product lists\r\n\r\nIt's much easier to build an intuition for solving this problem without division once you visualize how the different `products except self` look like for each of the elements. So, let's take a look at an example array and the different products.\r\n\r\n<center>\r\n<img src=\"../Figures/238/diag-1.png\" width=\"700\"></center>\r\n\r\nLooking at the figure about we can figure another way of computing those different product values. \r\n\r\n>Instead of dividing the product of all the numbers in the array by the number at a given index to get the corresponding product, we can make use of the product of all the numbers to the left and all the numbers to the right of the index. Multiplying these two individual products would give us the desired result as well.\r\n\r\nFor every given index, $$i$$, we will make use of the product of all the numbers to the left of it and multiply it by the product of all the numbers to the right. This will give us the product of all the numbers except the one at the given index $$i$$. Let's look at a formal algorithm describing this idea more concretely.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize two empty arrays, `L` and `R` where for a given index `i`, `L[i]` would contain the product of all the numbers to the left of `i` and `R[i]` would contain the product of all the numbers to the right of `i`. \r\n2. We would need two different loops to fill in values for the two arrays. For the array `L`, $$L[0]$$ would be `1` since there are no elements to the left of the first element. For the rest of the elements, we simply use $$L[i] = L[i - 1] * nums[i - 1]$$. Remember that `L[i]` represents product of all the elements *to the left of element at index i*.\r\n3. For the other array, we do the same thing but in reverse i.e. we start with the initial value of `1` in $$R[length - 1]$$ where $$length$$ is the number of elements in the array, and keep updating `R[i]` in reverse. Essentially, $$R[i] = R[i + 1] * nums[i + 1]$$. Remember that `R[i]` represents product of all the elements *to the right of element at index i*.\r\n4. Once we have the two arrays set up properly, we simply iterate over the input array one element at a time, and for each element at index `i`, we find the `product except self` as $$L[i] * R[i]$$. \r\n\r\nLet's go over a simple run of the algorithm that clearly depicts the construction of the two intermediate arrays and finally the answer array.\r\n\r\n!?!../Documents/238_anim1.json:770,460!?!\r\n\r\nFor the given array $$[4,5,1,8,2]$$, the `L` and `R` arrays would finally be:\r\n\r\n<center>\r\n<img src=\"../Figures/238/products.png\" width=\"700\"></center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/EWkKkCGw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EWkKkCGw\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(N)$$ where $$N$$ represents the number of elements in the input array. We use one iteration to construct the array $$L$$, one to construct the array $$R$$ and one last to construct the $$answer$$ array using $$L$$ and $$R$$.\r\n* Space complexity : $$O(N)$$ used up by the two intermediate arrays that we constructed to keep track of product of elements to the left and right.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: O(1) space approach\r\n\r\nAlthough the above solution is good enough to solve the problem since we are not using division anymore, there's a follow-up component as well which asks us to solve this using constant space. Understandably so, the output array *does not* count towards the space complexity. This approach is essentially an extension of the approach above. Basically, we will be using the output array as one of `L` or `R` and we will be constructing the other one on the fly. Let's look at the algorithm based on this idea.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize the empty `answer` array where for a given index `i`, `answer[i]` would contain the product of all the numbers to the left of `i`. \r\n2. We construct the `answer` array the same way we constructed the `L` array in the previous approach. These two algorithms are exactly the same except that we are trying to save up on space.\r\n3. The only change in this approach is that we don't explicitly build the `R` array from before. Instead, we simply use a variable to keep track of the running product of elements to the right and we keep updating the `answer` array by doing $$answer[i] = answer[i] * R$$. For a given index `i`, `answer[i]` contains the product of all the elements to the left and `R` would contain product of all the elements to the right. We then update `R` as $$R = R * nums[i]$$\r\n\r\n<iframe src=\"https://leetcode.com/playground/MucDzUdz/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"MucDzUdz\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(N)$$ where $$N$$ represents the number of elements in the input array. We use one iteration to construct the array $$L$$, one to update the array $$answer$$.\r\n* Space complexity : $$O(1)$$ since don't use any additional array for our computations. The problem statement mentions that using the $$answer$$ array doesn't add to the space complexity.\r\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "product-of-array-except-self",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.664,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "273",
                "title": "Integer to English Words",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook phone interview.",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "273",
                    "questionFrontendId": "273",
                    "sessionId": "968792",
                    "questionTitle": "Integer to English Words",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/integer-to-english-words/submit/",
                    "interpretUrl": "/problems/integer-to-english-words/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string numberToWords(int num) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String numberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numberToWords(self, num):\\n        \\\"\\\"\\\"\\n        :type num: int\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numberToWords(self, num: int) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * numberToWords(int num){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string NumberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} num\\n * @return {string}\\n */\\nvar numberToWords = function(num) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\\n# @return {String}\\ndef number_to_words(num)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numberToWords(_ num: Int) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberToWords(num int) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numberToWords(num: Int): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numberToWords(num: Int): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn number_to_words(num: i32) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $num\\n     * @return String\\n     */\\n    function numberToWords($num) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numberToWords(num: number): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (number-to-words num)\\n  (-> exact-integer? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec number_to_words(Num :: integer()) -> unicode:unicode_binary().\\nnumber_to_words(Num) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec number_to_words(num :: integer) :: String.t\\n  def number_to_words(num) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "123",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numberToWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 123\n<strong>Output:</strong> \"One Hundred Twenty Three\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = 12345\n<strong>Output:</strong> \"Twelve Thousand Three Hundred Forty Five\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> num = 1234567\n<strong>Output:</strong> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> num = 1234567891\n<strong>Output:</strong> \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
                        "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
                        "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
                    ],
                    "solution": {
                        "title": "Integer to English Words",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Divide and conquer \n\nLet's simplify the problem by representing it as a set of simple sub-problems.\nOne could split the initial integer `1234567890` on the groups \ncontaining not more than three digits `1.234.567.890`.\nThat results in representation `1 Billion 234 Million 567 Thousand 890` and \nreduces the initial problem to how to convert 3-digit integer to English word. \nOne could split further `234` -> `2 Hundred 34` into two sub-problems :\nconvert 1-digit integer and convert 2-digit integer. The first one is trivial. \nThe second one could be reduced to the first one for all 2-digit integers \nbut the ones from `10` to `19` which should be considered separately.\n\n<!--![LIS](../Figures/273/273_tr.gif)-->\n!?!../Documents/273_LIS.json:1000,632!?!\n\n<iframe src=\"https://leetcode.com/playground/hme62cME/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hme62cME\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity :  $$\\mathcal{O}(N)$$. \nIntuitively the output is proportional\nto the number `N` of digits in the input. \n* Space complexity : $$\\mathcal{O}(1)$$ since the output is just a string.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "integer-to-english-words",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.224,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "262",
                "title": "Move Zeroes",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "283",
                    "questionFrontendId": "283",
                    "sessionId": "968792",
                    "questionTitle": "Move Zeroes",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/move-zeroes/submit/",
                    "interpretUrl": "/problems/move-zeroes/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void moveZeroes(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void moveZeroes(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def moveZeroes(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def moveZeroes(self, nums: List[int]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid moveZeroes(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void MoveZeroes(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar moveZeroes = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Void} Do not return anything, modify nums in-place instead.\\ndef move_zeroes(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func moveZeroes(_ nums: inout [Int]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func moveZeroes(nums []int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def moveZeroes(nums: Array[Int]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun moveZeroes(nums: IntArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn move_zeroes(nums: &mut Vec<i32>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function moveZeroes(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums in-place instead.\\n */\\nfunction moveZeroes(nums: number[]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (move-zeroes nums)\\n  (-> (listof exact-integer?) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[0,1,0,3,12]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"moveZeroes\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\n\n<p><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1,0,3,12]\n<strong>Output:</strong> [1,3,12,0,0]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you minimize the total number of operations done?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
                        "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
                    ],
                    "solution": {
                        "title": "Move Zeroes",
                        "content": "[TOC]\r\n\r\n## Solution\r\n---\r\n\r\nThis question comes under a broad category of \"Array Transformation\". This category is the meat of tech interviews. Mostly because arrays are such a simple and easy to use data structure. Traversal or representation doesn't require any boilerplate code and most of your code will look like the Pseudocode itself.\r\n\r\nThe 2 requirements of the question are:\r\n\r\n1. Move all the 0's to the end of array.\r\n\r\n2. All the non-zero elements must retain their original order.\r\n\r\nIt's good to realize here that both the requirements are mutually exclusive, i.e., you can solve the individual sub-problems and then combine them for the final solution.\r\n\r\n#### Approach #1 (Space Sub-Optimal) [Accepted]\r\n\r\n\r\n**C++**\r\n\r\n```c++\r\nvoid moveZeroes(vector<int>& nums) {\r\n    int n = nums.size();\r\n\r\n    // Count the zeroes\r\n    int numZeroes = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        numZeroes += (nums[i] == 0);\r\n    }\r\n\r\n    // Make all the non-zero elements retain their original order.\r\n    vector<int> ans;\r\n    for (int i = 0; i < n; i++) {\r\n        if (nums[i] != 0) {\r\n            ans.push_back(nums[i]);\r\n        }\r\n    }\r\n\r\n    // Move all zeroes to the end\r\n    while (numZeroes--) {\r\n        ans.push_back(0);\r\n    }\r\n\r\n    // Combine the result\r\n    for (int i = 0; i < n; i++) {\r\n        nums[i] = ans[i];\r\n    }\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\nSpace Complexity : $$O(n)$$. Since we are creating the \"ans\" array to store results.\r\n\r\nTime Complexity: $$O(n)$$. However, the total number of operations are sub-optimal. We can achieve the same result in less number of operations.\r\n\r\nIf asked in an interview, the above solution would be a good start. You can explain the interviewer(not code) the above and build your base for the next Optimal Solution.\r\n\r\n---\r\n#### Approach #2 (Space Optimal, Operation Sub-Optimal) [Accepted]\r\n\r\n\r\nThis approach works the same way as above, i.e. , first fulfills one requirement and then another. The catch? It does it in a clever way. The above problem can also be stated in alternate way, \" Bring all the non 0 elements to the front of array keeping their relative order same\".\r\n\r\nThis is a 2 pointer approach. The fast pointer which is denoted by variable \"cur\" does the job of processing new elements. If the newly found element is not a 0, we record it just after the last found non-0 element. The position of last found non-0 element is denoted by the slow pointer \"lastNonZeroFoundAt\" variable. As we keep finding new non-0 elements, we just overwrite them at the \"lastNonZeroFoundAt + 1\" 'th index. This overwrite will not result in any loss of data because we already processed what was there(if it were non-0,it already is now written at it's corresponding index,or if it were 0 it will be handled later in time).\r\n\r\nAfter the \"cur\" index reaches the end of array, we now know that all the non-0 elements have been moved to beginning of array in their original order. Now comes the time to fulfil other requirement, \"Move all 0's to the end\". We now simply need to fill all the indexes after the \"lastNonZeroFoundAt\" index with 0.\r\n\r\n**C++**\r\n\r\n```c++\r\nvoid moveZeroes(vector<int>& nums) {\r\n    int lastNonZeroFoundAt = 0;\r\n    // If the current element is not 0, then we need to\r\n    // append it just in front of last non 0 element we found. \r\n    for (int i = 0; i < nums.size(); i++) {\r\n        if (nums[i] != 0) {\r\n            nums[lastNonZeroFoundAt++] = nums[i];\r\n        }\r\n    }\r\n \t// After we have finished processing new elements,\r\n \t// all the non-zero elements are already at beginning of array.\r\n \t// We just need to fill remaining array with 0's.\r\n    for (int i = lastNonZeroFoundAt; i < nums.size(); i++) {\r\n        nums[i] = 0;\r\n    }\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\nSpace Complexity : $$O(1)$$. Only constant space is used.\r\n\r\nTime Complexity: $$O(n)$$. However, the total number of operations are still sub-optimal. The total operations (array writes) that code does is $$n$$ (Total number of elements).\r\n\r\n---\r\n#### Approach #3 (Optimal) [Accepted]\r\n\r\nThe total number of operations of the previous approach is sub-optimal. For example, the array which has all (except last) leading zeroes: [0, 0, 0, ..., 0, 1].How many write operations to the array? For the previous approach, it writes 0's $$n-1$$ times, which is not necessary. We could have instead written just once. How?\r\n..... \r\nBy only fixing the non-0 element,i.e., 1.\r\n\r\nThe optimal approach is again a subtle extension of above solution. A simple realization is if the current element is non-0, its' correct position can at best be it's current position or a position earlier. If it's the latter one, the current position will be eventually occupied by a non-0 ,or a 0, which lies at a index greater than 'cur' index. We fill the current position by 0 right away,so that unlike the previous solution, we don't need to come back here in next iteration.\r\n\r\nIn other words, the code will maintain the following invariant:\r\n\r\n>1. All elements before the slow pointer (lastNonZeroFoundAt) are non-zeroes.\r\n>\r\n>2. All elements between the current and slow pointer are zeroes.\r\n\r\nTherefore, when we encounter a non-zero element, we need to swap elements pointed by current and slow pointer, then advance both pointers. If it's zero element, we just advance current pointer.\r\n\r\nWith this invariant in-place, it's easy to see that the algorithm will work.\r\n\r\n**C++**\r\n\r\n```c++\r\nvoid moveZeroes(vector<int>& nums) {\r\n    for (int lastNonZeroFoundAt = 0, cur = 0; cur < nums.size(); cur++) {\r\n        if (nums[cur] != 0) {\r\n            swap(nums[lastNonZeroFoundAt++], nums[cur]);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n**Complexity Analysis**\r\n\r\nSpace Complexity : $$O(1)$$. Only constant space is used.\r\n\r\nTime Complexity: $$O(n)$$. However, the total number of operations are optimal. The total operations (array writes) that code does is Number of non-0 elements.This gives us a much better best-case (when most of the elements are 0) complexity than last solution. However, the worst-case (when all elements are non-0) complexity for both the algorithms is same.\r\n\r\nAnalysis written by: @spandan.pathak",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "move-zeroes",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.388,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3017",
                "title": "Longest Substring with At Most K Distinct Characters",
                "type": 1,
                "info": null,
                "paidOnly": true,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "340",
                    "questionFrontendId": "340",
                    "sessionId": "968792",
                    "questionTitle": "Longest Substring with At Most K Distinct Characters",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-substring-with-at-most-k-distinct-characters/submit/",
                    "interpretUrl": "/problems/longest-substring-with-at-most-k-distinct-characters/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int lengthOfLongestSubstringKDistinct(string s, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int lengthOfLongestSubstringKDistinct(String s, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def lengthOfLongestSubstringKDistinct(self, s, k):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint lengthOfLongestSubstringKDistinct(char * s, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LengthOfLongestSubstringKDistinct(string s, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar lengthOfLongestSubstringKDistinct = function(s, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {Integer} k\\n# @return {Integer}\\ndef length_of_longest_substring_k_distinct(s, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func lengthOfLongestSubstringKDistinct(_ s: String, _ k: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLongestSubstringKDistinct(s string, k int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def lengthOfLongestSubstringKDistinct(s: String, k: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun lengthOfLongestSubstringKDistinct(s: String, k: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn length_of_longest_substring_k_distinct(s: String, k: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function lengthOfLongestSubstringKDistinct($s, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function lengthOfLongestSubstringKDistinct(s: string, k: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (length-of-longest-substring-k-distinct s k)\\n  (-> string? exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec length_of_longest_substring_k_distinct(S :: unicode:unicode_binary(), K :: integer()) -> integer().\\nlength_of_longest_substring_k_distinct(S, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec length_of_longest_substring_k_distinct(s :: String.t, k :: integer) :: integer\\n  def length_of_longest_substring_k_distinct(s, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"eceba\"\n2",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"lengthOfLongestSubstringKDistinct\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>that contains at most</em> <code>k</code> <em><strong>distinct</strong> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eceba&quot;, k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substring is &quot;ece&quot; with length 3.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The substring is &quot;aa&quot; with length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 50</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Substring with at Most K Distinct Characters",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/494864997\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Sliding Window + Hashmap.\n**Intuition**\n\nWe could take some inspiration from a simpler problem called\n[longest substring with at most two distinct\ncharacters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/).\n\nTo solve the problem in one pass\nlet's use here _sliding window_ approach with two set pointers\n`left` and `right` serving as the window boundaries.\n\nThe idea is to set both pointers in the position `0` and\nthen move `right` pointer to the right while the\nwindow contains not more than `k` distinct characters.\nIf at some point we've got `k + 1` distinct characters,\nlet's move `left` pointer to keep not more than `k + 1`\ndistinct characters in the window.\n\n![compute](../Figures/340/substring.png)\n\nBasically that's the algorithm : to move sliding window along the string,\nto keep not more than `k` distinct characters in the window, and\nto update max substring length at each step.\n\n> There is just one more question to reply -\nhow to move the left pointer\nto keep only `k` distinct characters in the string?\n\nLet's use for this purpose hashmap containing all characters\nin the sliding window as keys and their rightmost positions\nas values. At each moment, this hashmap could contain\nnot more than `k + 1` elements.\n\n![compute](../Figures/340/hash.png)\n\nFor example, using this hashmap one knows that the rightmost position\nof character `O` in `\"LOVELEE\"` window is `1` and so one has\nto move `left` pointer in the position `1 + 1 = 2` to\nexclude the character `O` from the sliding window.\n\n**Algorithm**\n\nNow one could write down the algortihm.\n\n- Return `0` if the string is empty or `k` is equal to zero.\n- Set both set pointers in the beginning\n of the string `left = 0` and `right = 0` and init max substring\n length `max_len = 1`.\n- While `right` pointer is less than `N`:\n    * Add the current character `s[right]` in the hashmap and\n    move `right` pointer to the right.\n    * If hashmap contains `k + 1` distinct characters,\n    remove the leftmost character from the hashmap\n    and move the `left` pointer so that sliding window contains\n    again `k` distinct characters only.\n    * Update `max_len`.\n\n**Implementation**\n\n!?!../Documents/340_LIS.json:1000,440!?!\n\n<iframe src=\"https://leetcode.com/playground/8Airbd8t/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"8Airbd8t\"></iframe>\n\n**Complexity Analysis**\n\n> Do we have here the best possible time complexity\n$$\\mathcal{O}(N)$$\nas it was for more simple [problem with at most two distinct\ncharacters](https://leetcode.com/articles/longest-substring-with-at-most-two-distinct-charac/)?\n\nFor the best case when input string contains not more than\n`k` distinct characters the answer is _yes_.\nIt's the only one pass along the string with\n`N` characters and the time complexity is $$\\mathcal{O}(N)$$.\n\nFor the worst case when the input string contains\n`n` distinct characters, the answer is _no_. In that case at each\nstep one uses $$\\mathcal{O}(k)$$ time to find a minimum value\nin the hashmap with `k` elements and so the overall time\ncomplexity is $$\\mathcal{O}(N k)$$.\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the best case\nof `k` distinct characters in the string and\n$$\\mathcal{O}(N k)$$ in the worst case\nof `N` distinct characters in the string.\n\n* Space complexity : $$\\mathcal{O}(k)$$ since additional\nspace is used only for a hashmap with at most `k + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Sliding Window + Ordered Dictionary.\n\n**How to achieve $$\\mathcal{O}(N)$$ time complexity**\n\nApproach 1 with a standard hashmap couldn't\nensure $$\\mathcal{O}(N)$$ time complexity.\n\nTo have $$\\mathcal{O}(N)$$ algorithm performance,\none would need a structure, which\nprovides four operations in $$\\mathcal{O}(1)$$ time :\n\n- Insert the key\n\n- Get the key and check if the key exists\n\n- Delete the key\n\n- Return the first or last added key/ value\n\nThe first three operations in $$\\mathcal{O}(1)$$ time are provided\nby the standard hashmap, and the forth one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines\nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nOrdered dictionary is quite popular for interviews. for\nexample, check out the [Implementing a LRU Cache](https://leetcode.com/problems/lru-cache/)\nquestion by Google.\n\n**Algorithm**\n\nLet's use ordered dictionary instead of standard hashmap to trim the\nalgorithm from approach 1 :\n\n- Return `0` if the string is empty or `k` is equal to zero.\n- Set both pointers to the beginning\n of the string `left = 0` and `right = 0` and initialize max substring\n length `max_len = 1`.\n- While `right` pointer is less than `N`:\n    * If the current character `s[right]` is already in the ordered dictionary\n    `hashmap` -- delete it, to ensure that the first key in `hashmap` is\n    the leftmost character.\n    * Add the current character `s[right]` in the ordered dictionary and\n    move `right` pointer to the right.\n    * If ordered dictionary `hashmap` contains `k + 1` distinct characters,\n    remove the leftmost one\n    and move the `left` pointer so that sliding window contains\n    again `k` distinct characters only.\n    * Update `max_len`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/XCPK33uS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XCPK33uS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since all operations with\nordered dictionary : `insert/get/delete/popitem`\n(`put/containsKey/remove`) are done in a constant time.\n\n* Space complexity : $$\\mathcal{O}(k)$$ since additional\nspace is used only for an ordered dictionary with at most `k + 1` elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.882,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3018",
                "title": "Validate IP Address",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "468",
                    "questionFrontendId": "468",
                    "sessionId": "968792",
                    "questionTitle": "Validate IP Address",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/validate-ip-address/submit/",
                    "interpretUrl": "/problems/validate-ip-address/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string validIPAddress(string IP) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String validIPAddress(String IP) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def validIPAddress(self, IP):\\n        \\\"\\\"\\\"\\n        :type IP: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def validIPAddress(self, IP: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * validIPAddress(char * IP){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string ValidIPAddress(string IP) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} IP\\n * @return {string}\\n */\\nvar validIPAddress = function(IP) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} ip\\n# @return {String}\\ndef valid_ip_address(ip)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func validIPAddress(_ IP: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func validIPAddress(IP string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def validIPAddress(IP: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun validIPAddress(IP: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn valid_ip_address(ip: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $IP\\n     * @return String\\n     */\\n    function validIPAddress($IP) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function validIPAddress(IP: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (valid-ip-address IP)\\n  (-> string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec valid_ip_address(IP :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nvalid_ip_address(IP) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec valid_ip_address(ip :: String.t) :: String.t\\n  def valid_ip_address(ip) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"172.16.254.1\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"validIPAddress\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"IP\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>IP</code>, return <code>&quot;IPv4&quot;</code> if IP is a valid IPv4 address, <code>&quot;IPv6&quot;</code> if IP is a valid IPv6 address or <code>&quot;Neither&quot;</code> if IP is not a correct IP of any type.</p>\n\n<p><strong>A valid IPv4</strong> address is an IP in the form <code>&quot;x<sub>1</sub>.x<sub>2</sub>.x<sub>3</sub>.x<sub>4</sub>&quot;</code> where <code>0 &lt;= x<sub>i</sub> &lt;= 255</code> and <code>x<sub>i</sub></code> <strong>cannot contain</strong> leading zeros. For example, <code>&quot;192.168.1.1&quot;</code> and <code>&quot;192.168.1.0&quot;</code> are valid IPv4 addresses but <code>&quot;192.168.01.1&quot;</code>, while <code>&quot;192.168.1.00&quot;</code> and <code>&quot;192.168@1.1&quot;</code> are invalid IPv4 addresses.</p>\n\n<p><strong>A valid IPv6</strong> address is an IP in the form <code>&quot;x<sub>1</sub>:x<sub>2</sub>:x<sub>3</sub>:x<sub>4</sub>:x<sub>5</sub>:x<sub>6</sub>:x<sub>7</sub>:x<sub>8</sub>&quot;</code> where:</p>\n\n<ul>\n\t<li><code>1 &lt;= x<sub>i</sub>.length &lt;= 4</code></li>\n\t<li><code>x<sub>i</sub></code> is a <strong>hexadecimal string</strong> which may contain digits, lower-case English letter (<code>&#39;a&#39;</code> to <code>&#39;f&#39;</code>) and upper-case English letters (<code>&#39;A&#39;</code> to <code>&#39;F&#39;</code>).</li>\n\t<li>Leading zeros are allowed in <code>x<sub>i</sub></code>.</li>\n</ul>\n\n<p>For example, &quot;<code>2001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> and &quot;<code>2001:db8:85a3:0:0:8A2E:0370:7334&quot;</code> are valid IPv6 addresses, while &quot;<code>2001:0db8:85a3::8A2E:037j:7334&quot;</code> and &quot;<code>02001:0db8:85a3:0000:0000:8a2e:0370:7334&quot;</code> are invalid IPv6 addresses.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;172.16.254.1&quot;\n<strong>Output:</strong> &quot;IPv4&quot;\n<strong>Explanation:</strong> This is a valid IPv4 address, return &quot;IPv4&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334&quot;\n<strong>Output:</strong> &quot;IPv6&quot;\n<strong>Explanation:</strong> This is a valid IPv6 address, return &quot;IPv6&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;256.256.256.256&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n<strong>Explanation:</strong> This is neither a IPv4 address nor a IPv6 address.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;2001:0db8:85a3:0:0:8A2E:0370:7334:&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> IP = &quot;1e1.4.5.6&quot;\n<strong>Output:</strong> &quot;Neither&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>IP</code> consists only of English letters, digits and the characters <code>&#39;.&#39;</code> and <code>&#39;:&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Validate IP Address",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nThe first idea is to use try/catch construct with built-in \nfacilities: [ipaddress](https://docs.python.org/3/library/ipaddress.html) \nlib in Python and [InetAddress](https://docs.oracle.com/javase/7/docs/api/java/net/InetAddress.html) \nclass in Java.\n\n**Note that the code below validates the _real-life_ IPv4, \nand _real-life_ IPv6. \nIt will not work for this problem because the problem validates \nnot _real-life_ but _\"simplified\"_ versions of IPv4 and IPv6.**\n\nSome big companies, for example, Microsoft and Amazon, \nredefine IPv4 and IPv6 on the interviews for the sake of simplicity.\nBelow one could find an extended discussion about the differences.\n\n<iframe src=\"https://leetcode.com/playground/MerLbXFX/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"MerLbXFX\"></iframe>\n\nNote that these facilities both refer to \n[POSIX-compatible](https://linux.die.net/man/3/inet_addr) \n`inet-addr()` routine for parsing addresses. \nThat's why they consider chunks with leading zeros\nnot as an error, but as an _octal_ representation.\n\n> Components of the dotted address can be specified in decimal, \n_octal (with a leading 0)_, or hexadecimal, with a leading 0X). \n\nAs a result, `01.01.01.012` will be a valid IP address in \noctal representation, as it should be. \nTo check this behaviour, one can run the command `ping 01.01.01.012` \nin the console. The address `01.01.01.012` will be considered \nas the one in octal representation, \nconverted into its decimal representation `1.1.1.10`,\ntherefore the ping command would be executed without errors.\n\nBy contrary, problem description directly states that \n_leading zeros in the IPv4 is invalid_.\nThat's not a real-life case, but probably done for the sake \nof simplicity.\nImho, that makes the problem to be a bit schoolish and less fun.\nThough let's deal with it anyway, since the problem is very popular recently \nin Microsoft and Amazon. \n\nThere are three main ways to solve it:\n \n- Regex (_i.e._ regular expression). Less performing one, though it's a good way to demonstrate \nyour knowledge of regex.\n\n- Divide and Conquer, the simplest one.\n\n- Mix of \"Divide and Conquer\" and \"Try/Catch with built-in facilities\", \nthis time with ones to convert string to integer. \nTry/catch in this situation is a sort of \"dirty\"\nsolution because [usually the code inside try blocks is not optimized as \nit'd otherwise be by the compiler](https://blogs.msmvps.com/peterritchie/2007/06/22/performance-implications-of-try-catch-finally/),\nand it's better not to use it during the interview.\n<br />\n<br />\n\n\n---\n#### Approach 1: Regex\n\nLet's construct step by step regex for \"IPv4\" \nas it's described in the problem description. Note, that it's not\na real-life IPv4 because of leading zeros problem as we've discussed above. \n\nAnyway, we start to construct regex pattern by using raw string in Python \n`r''` and standard string `\"\"` in Java. Here is how its skeleton looks like for Python\n\n![diff](../Figures/468/regex_ipv4.png)\n\nand here is for Java\n\n![diff](../Figures/468/java_ipv4.png)\n\nNow the problem is reduced to the construction of pattern to match each chunk.\nIt's an integer in range (0, 255), and the leading zeros are not allowed.\nThat results in five possible situations:\n\n1. Chunk contains only one digit, from 0 to 9.\n\n2. Chunk contains two digits. The first one could be from 1 to 9, and the second \none from 0 to 9.\n\n3. Chunk contains three digits, and the first one is `1`. The second and the third ones \ncould be from 0 to 9.\n\n4. Chunk contains three digits, the first one is `2` and the second one is from 0 to 4.\nThen the third one could be from 0 to 9.\n\n5. Chunk contains three digits, the first one is `2`,  and the second one is `5`.\nThen the third one could be from 0 to 5.\n\nLet's use pipe to create a regular expression that will match either case 1, or \ncase 2, ..., or case 5. \n\n![diff](../Figures/468/chunk_regex.png) \n\nThe job is done. The same logic could be used to construct \"IPv6\" regex pattern.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/GvZ6YH32/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"GvZ6YH32\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(1)$$ because the patterns to match have \nconstant length.\n    \n* Space complexity: $$\\mathcal{O}(1)$$. \n<br />\n<br />\n\n\n---\n#### Approach 2: Divide and Conquer\n\n**Intuition**\n\nBoth IPv4 and IPv6 addresses are composed of several substrings separated by certain delimiter,\nand each of the substrings is of the same format.\n\n![diff](../Figures/468/divide_conquer.png)\n\nTherefore, intuitively, we could break down the address into chunks, \nand then verify them one by one.\n\nThe address is valid _if and only if_ each of the chunks is valid.\nWe can call this methodology _divide and conquer_.\n\n**Algorithm**\n\n- For the IPv4 address, we split IP into four chunks by the delimiter `.`,\nwhile for IPv6 address, we split IP into eight chunks by the delimiter `:`.\n\n- For each substring of \"IPv4\" address, \nwe check if it is an integer between `0 - 255`, and there is no leading zeros.\n\n- For each substring of \"IPv6\" address, \nwe check if it's a hexadecimal number of length `1 - 4`.\n \n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/5cVP4s6p/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5cVP4s6p\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ because to count number of dots requires to\nparse the entire input string.\n    \n* Space complexity: $$\\mathcal{O}(1)$$. \n<br />\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "validate-ip-address",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.115,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3019",
                "title": "Subarray Sum Equals K",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "560",
                    "questionFrontendId": "560",
                    "sessionId": "968792",
                    "questionTitle": "Subarray Sum Equals K",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/subarray-sum-equals-k/submit/",
                    "interpretUrl": "/problems/subarray-sum-equals-k/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int subarraySum(vector<int>& nums, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int subarraySum(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def subarraySum(self, nums, k):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def subarraySum(self, nums: List[int], k: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint subarraySum(int* nums, int numsSize, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int SubarraySum(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar subarraySum = function(nums, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} k\\n# @return {Integer}\\ndef subarray_sum(nums, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func subarraySum(_ nums: [Int], _ k: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func subarraySum(nums []int, k int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def subarraySum(nums: Array[Int], k: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun subarraySum(nums: IntArray, k: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn subarray_sum(nums: Vec<i32>, k: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function subarraySum($nums, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function subarraySum(nums: number[], k: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (subarray-sum nums k)\\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec subarray_sum(Nums :: [integer()], K :: integer()) -> integer().\\nsubarray_sum(Nums, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec subarray_sum(nums :: [integer], k :: integer) :: integer\\n  def subarray_sum(nums, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,1,1]\n2",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"subarraySum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return <em>the total number of continuous subarrays whose sum equals to <code>k</code></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1], k = 2\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3], k = 3\n<strong>Output:</strong> 2\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= k &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Will Brute force work here? Try to optimize it.",
                        "Can we optimize it by using some extra space?",
                        "What about storing sum frequencies in a hash table? Will it be useful?",
                        "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
                    ],
                    "solution": {
                        "title": "Subarray Sum Equals K",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nThe simplest method is to consider every possible subarray of the given $$nums$$ array, find the sum of the elements of each of those subarrays and check for the equality of the sum obtained with the given $$k$$. Whenever the sum equals $$k$$, we can increment the $$count$$ used to store the required result.\n\n<iframe src=\"https://leetcode.com/playground/uzdLhWrz/shared\" frameBorder=\"0\" name=\"uzdLhWrz\" width=\"100%\" height=\"309\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$. Considering every possible subarray takes $$O(n^2)$$ time. For each of the subarray we calculate the sum taking $$O(n)$$ time in the worst case, taking a total of $$O(n^3)$$ time.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n<br/>\n\n---\n\n#### Approach 2: Using Cumulative Sum\n\n**Algorithm**\n\nInstead of determining the sum of elements every time for every new subarray considered, we can make use of a cumulative sum array , $$sum$$. Then, in order to calculate the sum of elements lying between two indices, we can subtract the cumulative sum corresponding to the two indices to obtain the sum directly, instead of iterating over the subarray to obtain the sum.\n\nIn this implementation, we make use of a cumulative sum array, $$sum$$, such that $$sum[i]$$ is used to store the cumulative sum of $$nums$$ array up to the element corresponding to the $$(i-1)^{th}$$ index. Thus, to determine the sum of elements for the subarray $$nums[i:j]$$, we can directly use $$sum[j+1] - sum[i]$$.\n\n<iframe src=\"https://leetcode.com/playground/YnknRnC6/shared\" frameBorder=\"0\" name=\"YnknRnC6\" width=\"100%\" height=\"326\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Considering every possible subarray takes $$O(n^2)$$ time. Finding out the sum of any subarray takes $$O(1)$$ time after the initial processing of $$O(n)$$ for creating the cumulative sum array.\n\n* Space complexity : $$O(n)$$. Cumulative sum array $$sum$$ of size $$n+1$$ is used.\n\n<br/>\n\n---\n\n#### Approach 3: Without Space\n\n**Algorithm**\n\nInstead of considering all the $$start$$ and $$end$$ points and then finding the sum for each subarray corresponding to those points, we can directly find the sum on the go while considering different $$end$$ points. i.e. We can choose a particular $$start$$ point and while iterating over the $$end$$ points, we can add the element corresponding to the $$end$$ point to the sum formed till now. Whenever the $$sum$$ equals the required $$k$$ value, we can update the $$count$$ value. We do so while iterating over all the $$end$$ indices possible for every $$start$$ index. Whenever, we update the $$start$$ index, we need to reset the $$sum$$ value to 0.\n\n<iframe src=\"https://leetcode.com/playground/MGuUEEUy/shared\" frameBorder=\"0\" name=\"MGuUEEUy\" width=\"100%\" height=\"292\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. We need to consider every subarray possible.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n<br/>\n\n---\n\n#### Approach 4: Using Hashmap\n\n**Algorithm**\n\nThe idea behind this approach is as follows: If the cumulative sum(represented by $$sum[i]$$ for sum up to $$i^{th}$$ index) up to two indices is the same, the sum of the elements lying in between those indices is zero. Extending the same thought further, if the cumulative sum up to two indices, say $$i$$ and $$j$$ is at a difference of $$k$$ i.e. if $$sum[i] - sum[j] = k$$, the sum of elements lying between indices $$i$$ and $$j$$ is $$k$$.\n\nBased on these thoughts, we make use of a hashmap $$map$$ which is used to store the cumulative sum up to all the indices possible along with the number of times the same sum occurs. We store the data in the form: $$(sum_i, no. of occurrences of sum_i)$$. We traverse over the array $$nums$$ and keep on finding the cumulative sum. Every time we encounter a new sum, we make a new entry in the hashmap corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. Further, for every sum encountered, we also determine the number of times the sum $$sum-k$$ has occurred already, since it will determine the number of times a subarray with sum $$k$$ has occurred up to the current index. We increment the $$count$$ by the same amount. \n\nAfter the complete array has been traversed, the $$count$$ gives the required result.\n\nThe animation below depicts the process.\n\n!?!../Documents/560_Subarray.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/S6xciAtN/shared\" frameBorder=\"0\" name=\"S6xciAtN\" width=\"100%\" height=\"292\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. The entire $$nums$$ array is traversed only once.\n\n* Space complexity : $$O(n)$$. Hashmap $$map$$ can contain up to $$n$$ distinct entries in the worst case.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "subarray-sum-equals-k",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.45,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "289",
                "title": "Valid Palindrome II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 5,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "680",
                    "questionFrontendId": "680",
                    "sessionId": "968792",
                    "questionTitle": "Valid Palindrome II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-palindrome-ii/submit/",
                    "interpretUrl": "/problems/valid-palindrome-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool validPalindrome(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean validPalindrome(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def validPalindrome(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def validPalindrome(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool validPalindrome(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool ValidPalindrome(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar validPalindrome = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef valid_palindrome(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func validPalindrome(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func validPalindrome(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def validPalindrome(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun validPalindrome(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn valid_palindrome(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function validPalindrome($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function validPalindrome(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (valid-palindrome s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec valid_palindrome(S :: unicode:unicode_binary()) -> boolean().\\nvalid_palindrome(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec valid_palindrome(s :: String.t) :: boolean\\n  def valid_palindrome(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aba\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"validPalindrome\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, return <code>true</code> <em>if the </em><code>s</code><em> can be palindrome after deleting <strong>at most one</strong> character from it</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abca&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You could delete the character &#39;c&#39;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Move Zeroes is a popular one for phone interviews. Note that you may be asked follow up about analyzing and optimizing the number of steps in your algorithm."
    },
    {
        "id": "6",
        "title": "Linked Lists",
        "slug": "linked-list",
        "items": [
            {
                "id": "319",
                "title": "Add Two Numbers",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 6,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "2",
                    "questionFrontendId": "2",
                    "sessionId": "968792",
                    "questionTitle": "Add Two Numbers",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/add-two-numbers/submit/",
                    "interpretUrl": "/problems/add-two-numbers/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \\\"\\\"\\\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef add_two_numbers(l1, l2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function addTwoNumbers($l1, $l2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (add-two-numbers l1 l2)\\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nadd_two_numbers(L1, L2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def add_two_numbers(l1, l2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,4,3]\n[5,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"addTwoNumbers\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"l1\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"l2\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Add Two Numbers",
                        "content": "## Solution\n---\n#### Approach 1: Elementary Math\n\n**Intuition**\n\nKeep track of the carry using a variable and simulate digits-by-digits sum starting from the head of list, which contains the least-significant digit.\n\n![Illustration of Adding two numbers](../Figures/2_add_two_numbers.svg){:width=\"539px\"}\n{:align=\"center\"}\n\n*Figure 1. Visualization of the addition of two numbers: $$342 + 465 = 807$$.  \nEach node contains a single digit and the digits are stored in reverse order.*\n{:align=\"center\"}\n\n**Algorithm**\n\nJust like how you would sum two numbers on a piece of paper, we begin by summing the least-significant digits, which is the head of $$l1$$ and $$l2$$. Since each digit is in the range of $$0 \\ldots 9$$, summing two digits may \"overflow\". For example $$5 + 7 = 12$$. In this case, we set the current digit to $$2$$ and bring over the $$carry = 1$$ to the next iteration. $$carry$$ must be either $$0$$ or $$1$$ because the largest possible sum of two digits (including the carry) is $$9 + 9 + 1 = 19$$.\n\nThe pseudocode is as following:\n\n* Initialize current node to dummy head of the returning list.\n* Initialize carry to $$0$$.\n* Initialize $$p$$ and $$q$$ to head of $$l1$$ and $$l2$$ respectively.\n* Loop through lists $$l1$$ and $$l2$$ until you reach both ends.\n    * Set $$x$$ to node $$p$$'s value. If $$p$$ has reached the end of $$l1$$, set to $$0$$.\n    * Set $$y$$ to node $$q$$'s value. If $$q$$ has reached the end of $$l2$$, set to $$0$$.\n    * Set $$sum = x + y + carry$$.\n    * Update $$carry = sum / 10$$.\n    * Create a new node with the digit value of $$(sum \\bmod 10)$$ and set it to current node's next, then advance current node to next.\n    * Advance both $$p$$ and $$q$$.\n* Check if $$carry = 1$$, if so append a new node with digit $$1$$ to the returning list.\n* Return dummy head's next node.\n\nNote that we use a dummy head to simplify the code. Without a dummy head, you would have to write extra conditional statements to initialize the head's value.\n\nTake extra caution of the following cases:\n\n| Test case | Explanation |\n| ------------- | ---------------- |\n| $$l1=[0,1]$$<br>$$l2=[0,1,2]$$ | When one list is longer than the other. |\n| $$l1=[]$$<br>$$l2=[0,1]$$ | When one list is null, which means an empty list. |\n| $$l1=[9,9]$$<br>$$l2=[1]$$ | The sum could have an extra carry of one at the end, which is easy to forget. |\n\n<iframe src=\"https://leetcode.com/playground/5onAHA8v/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"5onAHA8v\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\max(m, n))$$. Assume that $$m$$ and $$n$$ represents the length of $$l1$$ and $$l2$$ respectively, the algorithm above iterates at most $$\\max(m, n)$$ times.\n\n* Space complexity : $$O(\\max(m, n))$$. The length of the new list is at most $$\\max(m,n) + 1$$.\n\n**Follow up**\n\nWhat if the the digits in the linked list are stored in non-reversed order? For example:\n\n$$\n(3 \\to 4 \\to 2) + (4 \\to 6 \\to 5) = 8 \\to 0 \\to 7\n$$",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "add-two-numbers",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.633,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "301",
                "title": "Merge Two Sorted Lists",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 6,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "21",
                    "questionFrontendId": "21",
                    "sessionId": "968792",
                    "questionTitle": "Merge Two Sorted Lists",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-two-sorted-lists/submit/",
                    "interpretUrl": "/problems/merge-two-sorted-lists/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        \\\"\\\"\\\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef merge_two_lists(l1, l2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($l1, $l2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (merge-two-lists l1 l2)\\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_two_lists(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nmerge_two_lists(L1, L2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_two_lists(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def merge_two_lists(l1, l2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,4]\n[1,3,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"mergeTwoLists\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"l1\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"l2\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Merge two sorted linked lists and return it as a <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" style=\"width: 662px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> l1 = [1,2,4], l2 = [1,3,4]\n<strong>Output:</strong> [1,1,2,3,4,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>Both <code>l1</code> and <code>l2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge Two Sorted Lists",
                        "content": "[TOC]\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nWe can recursively define the result of a `merge` operation on two lists as\nthe following (avoiding the corner case logic surrounding empty lists):\n\n$$\n\\left\\{\n\\begin{array}{ll}\n      list1[0] + merge(list1[1:], list2) & list1[0] < list2[0] \\\\\n      list2[0] + merge(list1, list2[1:]) & otherwise\n\\end{array}\n\\right.\n$$\n\nNamely, the smaller of the two lists' heads plus the result of a `merge` on\nthe rest of the elements.\n\n**Algorithm**\n\nWe model the above recurrence directly, first accounting for edge cases.\nSpecifically, if either of `l1` or `l2` is initially `null`, there is no\nmerge to perform, so we simply return the non-`null` list. Otherwise, we\ndetermine which of `l1` and `l2` has a smaller head, and recursively set the\n`next` value for that head to the next merge result. Given that both lists\nare `null`-terminated, the recursion will eventually terminate.\n\n<iframe src=\"https://leetcode.com/playground/h6UFeZRd/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"h6UFeZRd\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n + m)$$\n\n    Because each recursive call increments the pointer to `l1` or `l2` by one (approaching the dangling `null` at the end of each list), there will be exactly one call to `mergeTwoLists` per element in each list. Therefore, the time complexity is linear in the combined size of the lists.\n\n* Space complexity : $$O(n + m)$$\n\n    The first call to `mergeTwoLists` does not return until the ends of both `l1` and `l2` have been reached, so $$n + m$$ stack frames consume $$O(n + m)$$ space.\n\n<br />\n\n---\n\n#### Approach 2: Iteration\n\n**Intuition**\n\nWe can achieve the same idea via iteration by assuming that `l1` is entirely\nless than `l2` and processing the elements one-by-one, inserting elements of\n`l2` in the necessary places in `l1`.\n\n**Algorithm**\n\nFirst, we set up a false \"`prehead`\" node that allows us to easily return the\nhead of the merged list later. We also maintain a `prev` pointer, which\npoints to the current node for which we are considering adjusting its `next`\npointer. Then, we do the following until at least one of `l1` and `l2` points\nto `null`: if the value at `l1` is less than or equal to the value at `l2`,\nthen we connect `l1` to the previous node and increment `l1`. Otherwise, we\ndo the same, but for `l2`. Then, regardless of which list we connected, we\nincrement `prev` to keep it one step behind one of our list heads.\n\nAfter the loop terminates, at most one of `l1` and `l2` is non-`null`.\nTherefore (because the input lists were in sorted order), if either list is\nnon-`null`, it contains only elements greater than all of the\npreviously-merged elements. This means that we can simply connect the\nnon-`null` list to the merged list and return it.\n\nTo see this in action on an example, check out the animation below:\n\n!?!../Documents/21_Merge_Two_Sorted_Lists.json:1280,720!?!\n\n<iframe src=\"https://leetcode.com/playground/PFrh6DKt/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"PFrh6DKt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n + m)$$\n\n    Because exactly one of `l1` and `l2` is incremented on each loop\n    iteration, the `while` loop runs for a number of iterations equal to the\n    sum of the lengths of the two lists. All other work is constant, so the\n    overall complexity is linear.\n\n* Space complexity : $$O(1)$$\n\n    The iterative approach only allocates a few pointers, so it has a\n    constant overall memory footprint.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "merge-two-sorted-lists",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.305,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3020",
                "title": "Copy List with Random Pointer",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 6,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "138",
                    "questionFrontendId": "138",
                    "sessionId": "968792",
                    "questionTitle": "Copy List with Random Pointer",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/copy-list-with-random-pointer/submit/",
                    "interpretUrl": "/problems/copy-list-with-random-pointer/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* next;\\n    Node* random;\\n    \\n    Node(int _val) {\\n        val = _val;\\n        next = NULL;\\n        random = NULL;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* copyRandomList(Node* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    int val;\\n    Node next;\\n    Node random;\\n\\n    public Node(int val) {\\n        this.val = val;\\n        this.next = null;\\n        this.random = null;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public Node copyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x, next=None, random=None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def copyRandomList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def copyRandomList(self, head: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     struct Node *next;\\n *     struct Node *random;\\n * };\\n */\\n\\nstruct Node* copyRandomList(struct Node* head) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node next;\\n    public Node random;\\n    \\n    public Node(int _val) {\\n        val = _val;\\n        next = null;\\n        random = null;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node CopyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, next, random) {\\n *    this.val = val;\\n *    this.next = next;\\n *    this.random = random;\\n * };\\n */\\n\\n/**\\n * @param {Node} head\\n * @return {Node}\\n */\\nvar copyRandomList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for Node.\\n# class Node\\n#     attr_accessor :val, :next, :random\\n#     def initialize(val = 0)\\n#         @val = val\\n#\\t\\t  @next = nil\\n#\\t\\t  @random = nil\\n#     end\\n# end\\n\\n# @param {Node} node\\n# @return {Node}\\ndef copyRandomList(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var next: Node?\\n *     public var random: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.next = nil\\n *    \\t   self.random = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func copyRandomList(_ head: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Next *Node\\n *     Random *Node\\n * }\\n */\\n\\nfunc copyRandomList(head *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var next: Node = null\\n *   var random: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def copyRandomList(head: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = Node(5)\\n * var v = ti.`val`\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var next: Node? = null\\n *     var random: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun copyRandomList(node: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $next = null;\\n *     public $random = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->next = null;\\n *         $this->random = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $head\\n     * @return Node\\n     */\\n    function copyRandomList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     next: Node | null\\n *     random: Node | null\\n *     constructor(val?: number, next?: Node, random?: Node) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *         this.random = (random===undefined ? null : random)\\n *     }\\n * }\\n */\\n\\nfunction copyRandomList(head: Node | null): Node | null {\\n    \\n};\"}]",
                    "sampleTestCase": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"copyRandomList\",\n  \"params\": [\n    {\n      \"name\": \"head\",\n      \"type\": \"ListNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"ListNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The given linked list is empty (null pointer), so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node.",
                        "You may want to use extra space to keep <b>old node ---> new node</b> mapping to prevent creating multiples copies of same node.",
                        "We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n<pre>\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'\r\n</pre>",
                        "The interweaving is done using <b>next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for <b>random</b> pointers."
                    ],
                    "solution": {
                        "title": "Copy List with Random Pointer",
                        "content": "[TOC]\n\n## Solution\n---\n\nLets first look at how the linked list looks like\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_1.png\" width=\"500\"/>\n</center>\n\nIn the above diagram, for a given node the `next` pointer points to the next node in the linked list. The `next` pointer is something standard for a linked list and this is what ***links*** the nodes together. What is interesting about the diagram and this problem is the `random` pointer which, as the name suggests can point to any node in the linked list or can be a null.\n\n#### Approach 1: Recursive\n\n**Intuition**\n\nThe basic idea behind the recursive solution is to consider the linked list like a graph. Every node of the Linked List has 2 pointers (edges in a graph). Since, random pointers add the randomness to the structure we might visit the same node again leading to cycles.\n\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_2.png\" width=\"500\"/>\n</center>\n\nIn the diagram above we can see the random pointer points back to the previously seen node hence leading to a cycle. We need to take care of these cycles in the implementation.\n\nAll we do in this approach is to just traverse the graph and clone it. Cloning essentially means creating a new node for every unseen node you encounter. The traversal part will happen recursively in a depth first manner. Note that we have to keep track of nodes already processed because, as pointed out earlier, we can have cycles because of the random pointers.\n\n**Algorithm**\n\n1. Start traversing the graph from `head` node.\n\n    Lets see the linked structure as a graph. Below is the graph representation of the above linked list example.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_7.png\" width=\"500\"/>\n    </center>\n\n    In the above example `head` is where we begin our graph traversal.\n\n2. If we already have a cloned copy of the current node in the visited dictionary, we use the cloned node reference.  \n3. If we don't have a cloned copy in the visited dictionary, we create a new node and add it to the visited dictionary.\n`visited_dictionary[current_node] = cloned_node_for_current_node.`\n4. We then make two recursive calls, one using the `random` pointer and the other using `next` pointer. The diagram from step 1, shows `random` and `next` pointers in red and blue color respectively. Essentially we are making recursive calls for the children of the current node. In this implementation, the children are the nodes pointed by the `random` and the `next` pointers.\n<pre>\ncloned_node_for_current_node.next = copyRandomList(current_node.next);\ncloned_node_for_current_node.random = copyRandomList(current_node.random);\n</pre>\n\n<br>\n\n<iframe src=\"https://leetcode.com/playground/gTqcFzpK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gTqcFzpK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ where N is the number of nodes in the linked list.\n* Space Complexity: $$O(N)$$. If we look closely, we have the recursion stack and we also have the space complexity to keep track of nodes already cloned i.e. using the visited dictionary. But asymptotically, the complexity is $$O(N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative with $$O(N)$$ Space\n\n**Intuition**\n\nThe iterative solution to this problem does not model it as a graph, instead simply treats it as a LinkedList.\nWhen we are iterating over the list, we can create new nodes via the random pointer or the next pointer whichever points to a node that doesn't exist in our old --> new dictionary.\n\n**Algorithm**\n\n1. Traverse the linked list starting at `head` of the linked list.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_3.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram we create a new cloned `head` node. The cloned node is shown using dashed lines. In the implementation we would even store the reference of this newly created node in a visited dictionary.\n\n2. Random Pointer\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_4.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `random` pointer of node $$A$$ points to a node $$C$$. Node $$C$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$C'$$ node corresponding to node $$C$$ and add it to visited dictionary.\n\n3. Next Pointer\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_5.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `next` pointer of node $$A$$ points to a node $$B$$. Node $$B$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$B'$$ node corresponding to node $$B$$ and add it to visited dictionary.\n\n4. We repeat steps 2 and 3 until we reach the end of the linked list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_6.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram, the `random` pointer of node $$B$$ points to an already visited node $$A$$. Hence in step 2, we don't create a new copy for the clone. Instead we point `random` pointer of cloned node $$B'$$ to already existing cloned node $$A'$$.\n\n    Also, the `next` pointer of node $$B$$ points to an already visited node $$C$$. Hence in step 3, we don't create a new copy for the clone. Instead we point `next` pointer of cloned node $$B'$$ to already existing cloned node $$C'$$.\n\n<iframe src=\"https://leetcode.com/playground/KBujstvq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KBujstvq\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$ because we make one pass over the original linked list.\n* Space Complexity : $$O(N)$$ as we have a dictionary containing mapping from old list nodes to new list nodes. Since there are $$N$$ nodes, we have $$O(N)$$ space complexity.\n<br/>\n<br/>\n\n---\n\n#### Approach 3: Iterative with $$O(1)$$ Space\n\n**Intuition**\n\nInstead of a separate dictionary to keep the old node --> new node mapping, we can tweak the original linked list and keep every cloned node next to its original node. This interleaving of old and new nodes allows us to solve this problem without any extra space. Lets look at how the algorithm works.\n\n**Algorithm**\n\n1. Traverse the original list and clone the nodes as you go and place the cloned copy next to its original node. This new linked list is essentially a interweaving of original and cloned nodes.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_1.png\" width=\"800\"/>\n    </center>\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_2.png\" width=\"800\"/>\n    </center>\n\n    As you can see we just use the value of original node to create the cloned copy. The `next` pointer is used to create the weaving. Note that this operation ends up modifying the original linked list.\n    <pre>\n    cloned_node.next = original_node.next\n    original_node.next = cloned_node\n    </pre>\n\n2. Iterate the list having both the new and old nodes intertwined with each other and use the original nodes' random pointers to assign references to random pointers for cloned nodes. For eg. If `B` has a random pointer to `A`, this means `B'` has a random pointer to `A'`.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_9_1.png\" width=\"800\"/>\n    </center>\n\n3. Now that the `random` pointers are assigned to the correct node, the `next` pointers need to be correctly assigned to unweave the current linked list and get back the original list and the cloned list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_10.png\" width=\"800\"/>\n    </center>\n\n\n<iframe src=\"https://leetcode.com/playground/ZbWnzEMt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZbWnzEMt\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$\n* Space Complexity : $$O(1)$$\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "copy-list-with-random-pointer",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.733,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3021",
                "title": "Reorder List",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 6,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "143",
                    "questionFrontendId": "143",
                    "sessionId": "968792",
                    "questionTitle": "Reorder List",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/reorder-list/submit/",
                    "interpretUrl": "/problems/reorder-list/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void reorderList(ListNode* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public void reorderList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def reorderList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: ListNode\\n        :rtype: None Do not return anything, modify head in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reorderList(self, head: Optional[ListNode]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify head in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nvoid reorderList(struct ListNode* head){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public void ReorderList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {void} Do not return anything, modify head in-place instead.\\n */\\nvar reorderList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} head\\n# @return {Void} Do not return anything, modify head in-place instead.\\ndef reorder_list(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func reorderList(_ head: ListNode?) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc reorderList(head *ListNode)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reorderList(head: ListNode): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun reorderList(head: ListNode?): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn reorder_list(head: &mut Option<Box<ListNode>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $head\\n     * @return NULL\\n     */\\n    function reorderList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\n/**\\n Do not return anything, modify head in-place instead.\\n */\\nfunction reorderList(head: ListNode | null): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (reorder-list head)\\n  (-> (or/c list-node? #f) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,2,3,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"reorderList\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>You are given the head of a singly linked-list. The list can be represented as:</p>\n\n<pre>\nL<sub>0</sub> &rarr; L<sub>1</sub> &rarr; &hellip; &rarr; L<sub>n - 1</sub> &rarr; L<sub>n</sub>\n</pre>\n\n<p><em>Reorder the list to be on the following form:</em></p>\n\n<pre>\nL<sub>0</sub> &rarr; L<sub>n</sub> &rarr; L<sub>1</sub> &rarr; L<sub>n - 1</sub> &rarr; L<sub>2</sub> &rarr; L<sub>n - 2</sub> &rarr; &hellip;\n</pre>\n\n<p>You may not modify the values in the list&#39;s nodes. Only nodes themselves may be changed.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg\" style=\"width: 422px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4]\n<strong>Output:</strong> [1,4,2,3]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [1,5,2,4,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[1, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Reorder List",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Solution Bricks\n\nThis problem is a combination of these three easy problems:\n\n- [Middle of the Linked List](https://leetcode.com/articles/middle-of-the-linked-list/).\n\n- [Reverse Linked List](https://leetcode.com/articles/reverse-linked-list/).\n\n- [Merge Two Sorted Lists](https://leetcode.com/articles/merged-two-sorted-lists/).\n\n<br /> \n<br />\n\n\n---\n#### Approach 1: Reverse the Second Part of the List and Merge Two Sorted Lists\n\n**Overview**\n\n- Find a middle node of the linked list. \nIf there are two middle nodes, return the second middle node.\nExample: for the list `1->2->3->4->5->6`, the middle element is `4`.\n\n- Once a middle node has been found, reverse the second part of the list.\nExample: convert `1->2->3->4->5->6` into `1->2->3->4` and `6->5->4`.\n\n- Now merge the two sorted lists.\nExample: merge `1->2->3->4` and `6->5->4` into `1->6->2->5->3->4`.\n\n![append](../Figures/143/overview.png)\n\nNow let's check each algorithm part in more detail.\n\n**Find a Middle Node**\n\nLet's use two pointers, `slow` and `fast`. \nWhile the slow pointer moves one step forward `slow = slow.next`, \nthe fast pointer moves two steps forward `fast = fast.next.next`, \n_i.e._ `fast` traverses twice as fast as `slow`. \nWhen the fast pointer reaches the end of the list, \nthe slow pointer should be in the middle.\n\n![append](../Figures/143/slow_fast.png)\n\n<iframe src=\"https://leetcode.com/playground/GeNJhikz/shared\" frameBorder=\"0\" width=\"100%\" height=\"174\" name=\"GeNJhikz\"></iframe>\n\n**Reverse the Second Part of the List**\n\nLet's traverse the list starting from the middle node `slow` and its virtual\npredecessor `None`.\nFor each current node, save its neighbours:\nthe previous node `prev` and the next node `tmp = curr.next`.\n\nWhile you're moving along the list, \nchange the node's next pointer to point to the previous node: `curr.next = prev`,\nand shift the current node to the right for the next iteration: \n`prev = curr`, `curr = tmp`. \n \n![append](../Figures/143/reverse2.png)\n\n<iframe src=\"https://leetcode.com/playground/Rngn8AQV/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"Rngn8AQV\"></iframe>\n\nThere is a more elegant way to do it in Python:\n\n<iframe src=\"https://leetcode.com/playground/u4cutXZn/shared\" frameBorder=\"0\" width=\"100%\" height=\"157\" name=\"u4cutXZn\"></iframe>\n\n**Merge Two Sorted Lists**\n\nThis algorithm is similar to the one for list reversal.\n\nLet's pick the first node of each list - first and second, and save their successors.\nWhile you're traversing the list, \nset the first node's next pointer to point to the second node, \nand the second node's next pointer to point to the successor of\nthe first node.\nFor this iteration the job is done, and for the next iteration \nmove to the previously saved nodes' successors.   \n\n![append](../Figures/143/first_second.png)\n\n<iframe src=\"https://leetcode.com/playground/9t4zjDtN/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"9t4zjDtN\"></iframe>\n\nOnce again, there is a way to make things simple in Python\n\n<iframe src=\"https://leetcode.com/playground/CKZJh2mw/shared\" frameBorder=\"0\" width=\"100%\" height=\"157\" name=\"CKZJh2mw\"></iframe>\n\n**Implementation**\n\nNow it's time to put all the pieces together.\n\n<iframe src=\"https://leetcode.com/playground/LRX8BZhb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"LRX8BZhb\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$. There are three steps here.\nTo identify the middle node takes $$\\mathcal{O}(N)$$ time. \nTo reverse the second part of the list, one needs \n$$N/2$$ operations. The final step, to merge two lists, requires $$N/2$$\noperations as well. In total, that results in $$\\mathcal{O}(N)$$ time \ncomplexity. \n\n* Space complexity: $$\\mathcal{O}(1)$$, since we do not allocate any \nadditional data structures.\n  \n<br /> \n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "reorder-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.87,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These are some popular Linked List questions being asked by Facebook. Add Two Numbers apparently is a popular one according to our user survey."
    },
    {
        "id": "52",
        "title": "Trees and Graphs",
        "slug": "trees-and-graphs",
        "items": [
            {
                "id": "266",
                "title": "Validate Binary Search Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "98",
                    "questionFrontendId": "98",
                    "sessionId": "968792",
                    "questionTitle": "Validate Binary Search Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/validate-binary-search-tree/submit/",
                    "interpretUrl": "/problems/validate-binary-search-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool isValidBST(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public boolean isValidBST(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def isValidBST(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nbool isValidBST(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public bool IsValidBST(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {boolean}\\n */\\nvar isValidBST = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Boolean}\\ndef is_valid_bst(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func isValidBST(_ root: TreeNode?) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc isValidBST(root *TreeNode) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isValidBST(root: TreeNode): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun isValidBST(root: TreeNode?): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Boolean\\n     */\\n    function isValidBST($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction isValidBST(root: TreeNode | null): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (is-valid-bst root)\\n  (-> (or/c tree-node? #f) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\\nis_valid_bst(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\\n  def is_valid_bst(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,1,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isValidBST\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\" style=\"width: 422px; height: 292px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,4,null,null,3,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Validate Binary Search Tree",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/490012303\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Tree definition\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use.\n\n<iframe src=\"https://leetcode.com/playground/jjcxt5FB/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"jjcxt5FB\"></iframe>\n<br />\n<br />\n\n\n---\n#### Intuition\n\nOn the first sight, the problem is trivial. Let's traverse the tree\nand check at each step if `node.right.val > node.val` and\n`node.left.val < node.val`. This approach would even work for some\ntrees\n![compute](../Figures/98/98_not_bst.png)\n\nThe problem is this approach will not work for all cases.\nNot only the right child should be larger than the node\nbut all the\nelements in the right subtree. Here is an example :\n\n![compute](../Figures/98/98_not_bst_3.png)\n\nThat means one should keep both upper\nand lower limits for each node while traversing the tree,\nand compare the node value not\nwith children values but with these limits.\n<br />\n<br />\n\n\n---\n#### Approach 1: Recursive Traversal with Valid Range\n\nThe idea above could be implemented as a recursion.\nOne compares the node value with its upper and lower limits\nif they are available. Then one repeats the same\nstep recursively for left and right subtrees.\n\n!?!../Documents/98_LIS.json:1000,462!?!\n\n<iframe src=\"https://leetcode.com/playground/WEXm78JJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"WEXm78JJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once.\n* Space complexity : $$\\mathcal{O}(N)$$ since we keep up to the entire tree.\n\n<br />\n<br />\n\n\n---\n#### Approach 2: Iterative Traversal with Valid Range\n\nThe above recursion could be converted into iteration,\nwith the help of an explicit stack. DFS would be better than BFS since\nit works faster here.\n\n<iframe src=\"https://leetcode.com/playground/Qdw3q7Na/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Qdw3q7Na\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once.\n* Space complexity : $$\\mathcal{O}(N)$$ since we keep up to the entire tree.\n\n<br />\n<br />\n\n---\n\n#### Approach 3: Recursive Inorder Traversal\n\n**Algorithm**\n\nLet's use the order of nodes in the\n[inorder traversal](https://leetcode.com/articles/binary-tree-inorder-traversal/)\n`Left -> Node -> Right`.\n\n![postorder](../Figures/145_transverse.png)\n\nHere the nodes are enumerated in the order you visit them,\nand you could follow `1-2-3-4-5` to compare different strategies.\n\n`Left -> Node -> Right` order of inorder traversal\nmeans for BST that each element should be smaller\nthan the next one.\n\nHence the algorithm with $$\\mathcal{O}(N)$$ time complexity\nand $$\\mathcal{O}(N)$$ space complexity could be simple:\n\n- Compute inorder traversal list `inorder`.\n\n- Check if each element in `inorder` is smaller than the next one.\n\n![postorder](../Figures/98/98_bst_inorder.png)\n\n> Do we need to keep the whole `inorder` traversal list?\n\nActually, no. The last added inorder element is enough\nto ensure at each step that the tree is BST (or not).\nHence one could merge both steps into one and\nreduce the used space.\n\n**Code**\n\nWe can implement the algorithm recursively.\n\n<iframe src=\"https://leetcode.com/playground/ag2ZyfBs/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"ag2ZyfBs\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the worst case\nwhen the tree is a BST or the \"bad\" element is a rightmost leaf.\n\n* Space complexity : $$\\mathcal{O}(N)$$ for the space on the run-time stack.\n\n<br />\n<br />\n\n---\n\n#### Approach 4: Iterative Inorder Traversal\n\nAlternatively, we could implement the above algorithm iteratively.\n\n<iframe src=\"https://leetcode.com/playground/ed3EicVG/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"ed3EicVG\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the worst case\nwhen the tree is BST or the \"bad\" element is a rightmost leaf.\n\n* Space complexity : $$\\mathcal{O}(N)$$ to keep `stack`.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "validate-binary-search-tree",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.336,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "322",
                "title": "Flatten Binary Tree to Linked List",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "114",
                    "questionFrontendId": "114",
                    "sessionId": "968792",
                    "questionTitle": "Flatten Binary Tree to Linked List",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/flatten-binary-tree-to-linked-list/submit/",
                    "interpretUrl": "/problems/flatten-binary-tree-to-linked-list/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void flatten(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public void flatten(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def flatten(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: None Do not return anything, modify root in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def flatten(self, root: Optional[TreeNode]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify root in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nvoid flatten(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public void Flatten(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {void} Do not return anything, modify root in-place instead.\\n */\\nvar flatten = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Void} Do not return anything, modify root in-place instead.\\ndef flatten(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func flatten(_ root: TreeNode?) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc flatten(root *TreeNode)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def flatten(root: TreeNode): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun flatten(root: TreeNode?): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn flatten(root: &mut Option<Rc<RefCell<TreeNode>>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return NULL\\n     */\\n    function flatten($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\n/**\\n Do not return anything, modify root in-place instead.\\n */\\nfunction flatten(root: TreeNode | null): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (flatten root)\\n  (-> (or/c tree-node? #f) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,2,5,3,4,null,6]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"flatten\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, flatten the tree into a &quot;linked list&quot;:</p>\n\n<ul>\n\t<li>The &quot;linked list&quot; should use the same <code>TreeNode</code> class where the <code>right</code> child pointer points to the next node in the list and the <code>left</code> child pointer is always <code>null</code>.</li>\n\t<li>The &quot;linked list&quot; should be in the same order as a <a href=\"https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR\" target=\"_blank\"><strong>pre-order</strong><strong> traversal</strong></a> of the binary tree.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg\" style=\"width: 500px; height: 226px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,5,3,4,null,6]\n<strong>Output:</strong> [1,null,2,null,3,null,4,null,5,null,6]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Can you flatten the tree in-place (with <code>O(1)</code> extra space)?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
                    ],
                    "solution": {
                        "title": "Flatten Binary Tree to Linked List",
                        "content": "[TOC]\n\n## Solution\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nA common strategy for tree modification problems is recursion. A tree is a recursive structure. Every node gets to be a root node of some tree and that tree further has a bunch of smaller subtrees each with their own root nodes. So, when it comes to problems where the structure of the tree has to be modified or we have to traverse the tree in general, recursion is one of the top approaches that comes to mind simply because it's easy enough to code up and also is very intuitive to understand. Let's quickly look at a binary tree structure and then we will talk about how we can solve this problem using a recursive strategy.\n\n<center>\n<img src=\"../Figures/114/img_1.png\" width=\"600\"/>\n</center>\n\nWe haven't drawn the entire tree in the above image so as to build that intuition for that recursive solution. The main idea behind a recursive solution is that we use the solutions for subproblems to solve an uber level problem. In the case of a tree, the subtrees are essentially our subproblems. So, a recursive solution for this problem is essentially based on the idea that assuming we have already transformed the left and the right halves of a given root node, how do we establish or modify the necessary connections so that we get a right skewed tree overall. Let's look at what this means diagrammatically to have a better understanding.\n\n<center>\n<img src=\"../Figures/114/img2.png\"/>\n</center>\n\nIn the above figure, we simply showcase the root node of a tree and its left and right subtrees. A great way to think about recursion here is that we \"suppose\" that recursion does all the hard work for us and flattens out the left and the right subtrees as shown in the figure. What is it that we have to do then to get our final result? We need a right skewed tree, right? Well, we simply have to shuffle around some pointers to get our final result as shown below. \n\n<center>\n<img src=\"../Figures/114/img3.png\"/>\n</center>\n\nLet's dive a bit deeper and take a look at an exact tree now to see what exact connections we'll need to establish exactly for this work.\n\n<center>\n<img src=\"../Figures/114/img4.png\"/>\n</center>\n\nThe figure shown below essentially highlights the exact set of nodes that are required for re-wiring the tree to our final right skewed tree. We've marked them \"L\" for left, \"R\" for right, and LT for \"left tail\". We'll get to the reason as to why we call that third node \"left tail\", later.\n\n<center>\n<img src=\"../Figures/114/img5.png\" width=\"600\"/>\n</center>\n\n<center>\n<img src=\"../Figures/114/img6.png\"/>\n</center>\n\nAnd finally, let's see how our tree looks like once we rewire the \"L\" and the \"R\" nodes properly as well.\n\n<center>\n<img src=\"../Figures/114/img8.png\"/>\n</center>\n\nYeah, we haven't exactly explained what this `left tail` means. So, if you go back a few figures to the point where we had the left and the right subtrees all flattened out and we hadn't done any pointer manipulation yet, you'll notice that each subtree actually looks like a `Linked List`. Every linked list has a head node and in this case, we also need the `tail` node. Once recursion does the hard work for us and flattens out the subtrees, we will essentially get two linked lists and we need the tail end of the left one to attach it to the right one. Let's see what all information we will need in our recursive function at a given node.\n\n\n* *\\_node_* = The current node \n* *\\_leftChild_* = the left child of our current node\n* *\\_rightChild_* = the right child of our current node \n* *\\_leftTail_* = The tail node of the flattened out left subtree\n* *\\_rightTail_* = The tail node of the fully formed tree rooted at *\\_node_*. This information is needed by the parent recursive calls since the tree rooted at the current node can be some other's node's left subtree or right subtree.\n\nWe have all the information available with us except the tail nodes. That's something that our recursion function will have to return. So, a recursion call for a given `node` will return the tail node of the flattened out tree. In our example, we will return the node `11` as the tail end of our final flattened out tree. \n\n**Algorithm**\n\n1. We'll have a separate function for flattening out the tree since the main function provided in the problem isn't supposed to return anything and our algorithm will return the `tail` node of the flattened out tree.\n2. For a given `node`, we will recursively flatten out the left and the right subtrees and store their corresponding tail nodes in `leftTail` and `rightTail` respectively.\n3. Next, we will make the following connections (only if there is a left child for the current node, else the leftTail would be null)\n    <pre>\n    leftTail.right = node.right\n    node.right = node.left\n    node.left = None\n    </pre>\n    \n4. Next we have to return the tail of the final, flattened out tree rooted at `node`. So, if the `node` has a right child, then we will return the `rightTail`, else, we'll return the `leftTail`. \n\n<iframe src=\"https://leetcode.com/playground/Yv6dVAAh/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Yv6dVAAh\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node of the tree exactly once.\n* Space Complexity: $$O(N)$$ which is occupied by the recursion stack. The problem statement doesn't mention anything about the tree being balanced or not and hence, the tree could be e.g. left skewed and in that case the longest branch (and hence the number of nodes in the recursion stack) would be $$N$$.\n<br>\n<br>\n\n---\n#### Approach 2: Iterative Solution using Stack \n\n**Intuition**\n\nThis approach is exactly the same as the previous one except the implementation. In the previous approach we rely on the system stack for our recursion's space requirements. However, as we all know, that stack is limited and for extremely long trees, it might not be feasible to use the system stack. So, we need to use our own stack that will be allocated memory on the heap and will be able to handle much larger sized trees easily. \n\n**Algorithm**\n\n1. So the implementation for this algorithm using a custom stack is a tad bit tricky because now, we have to go one step further and understand how the different states of recursion will unfold and more importantly, we'll have to see how and when to add different nodes to our stack and when to pop them out for good. The basic idea however still follows along the same lines as the previous approach.\n2. We will initialize a `stack` which will contain a tuple. The first entry in the tuple will represent our node. The second entry will represent the recursion state that the node is in. We have two different recursion states namely `START` and `END`. \n\n    * START basically means that we haven't started processing the node yet and so, we will try and process its left side if one exists. If not, we will process its right side. \n    * When the node is in an END state, that implies we are done processing one side (subtree) of it. If we did process the left subtree of the node, then we need to re-wire the connections so as to make this a right skewed tree. Also, in the END state, we add the right child of the current node to the stack.\n\n    It's important to understand the different cases around these recursion states based on different kinds of (sub)trees.\n\n    `Case 1: START recursion state, node has a left child`\n\n    <center>\n    <img src=\"../Figures/114/img_9.png\"/>\n    </center>\n\n    `Case 2: START recursion state, node has NO left child`\n\n    <center>\n    <img src=\"../Figures/114/img_10.png\"/>\n    </center>\n\n    `Case 3: END recursion state, node has a right child`\n\n    <center>\n    <img src=\"../Figures/114/img11.png\"/>\n    </center>\n\n    <center>\n    <img src=\"../Figures/114/img12.png\"/>\n    </center>\n\n3. If the recursion state of a popped node is `START`, we will check if the node has a left child or not. If it does, we will add the node back to the stack with the `END` recursion state and also add the left child with the `START` recursion state. If there is no left child, then we add the right child `only` with the `START` state.\n4. If a node popped from the stack is in the `END` state, that implies it must have had a left child and that means we have a valid `tailNode` set up for re-wiring the connections as shown in the previous figure. Once we are done re-wiring the connections, we push the right child into the stack with the `START` recursion state.\n5. Finally, for a popped node that is a leaf node, we will set our `tailNode`.\n\n<iframe src=\"https://leetcode.com/playground/ZZAoECY3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZZAoECY3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node of the tree exactly once.\n* Space Complexity: $$O(N)$$ which is occupied by the stack. The problem statement doesn't mention anything about the tree being balanced or not and hence, the tree could be e.g. left skewed and in that case the longest branch (and hence the number of nodes in the recursion stack) would be $$N$$. \n<br>\n<br>\n\n---\n#### Approach 3: O(1) Iterative Solution\n\n**Intuition**\n\nWe'll get to the intuition for this approach in a bit, but first let's talk about the motivation. For any kind of tree traversal, we always have the easiest of solutions which is based on recursion. Next, we have a custom stack based iterative version of the same solution. Finally, we want a tree traversal that doesn't use any kind of additional space at all. There is a well known tree traversal out there that doesn't use any additional space at all. It's known as `Morris Traversal`. Our solution is based off of the same ideology, but Morris Traversal is not a pre-requisite here. \n\nTo understand what's difference between the nodes processing of this approach and basic recursion, let's look at a sample tree.\n\n\n<center>\n<img src=\"../Figures/114/img13.png\" width=\"500\"/>\n</center>\n \nWith recursion, we only re-wire the connections for the \"current node\" once we are already done processing the left and the right subtrees *completely*. Let's see what that looks like in a figure. \n \n<center>\n<img src=\"../Figures/114/img_14.png\"/>\n</center> \n\nHowever, the `postponing` of rewiring of connections on the current node until the left subtree is done, is basically what recursion is. Recursion is all about postponing decisions until something else is completed. In order for us to be able to postpone stuff, we need to use the stack. However, in our current approach we want to get rid of the stack altogether. So, we will have to come up with a `greedy` way that will be costlier in terms of time, but will be space efficient in achieving the same results.\n\n> For a current node, we will check if it has a left child or not. If it does, we will find the last node in the rightmost branch of the subtree rooted at this left child. Once we find this \"rightmost\" node, we will hook it up with the right child of the current node.\n\nLet's look at this idea on our current sample tree.\n\n<center>\n<img src=\"../Figures/114/img15.png\"/>\n</center> \n\nThis might not make a lot of sense just yet. But, bear with me and read on. Let's see what connections we need to establish or shuffle once we find that \"rightmost node\". We are highlighting \"rightmost\" here because technically, even without knowing this approach, the node `23` would have made much more sense here, right? Instead, we are doing some vodoo with the node `6`. God knows why!\n\n<center>\n<img src=\"../Figures/114/img16.png\"/>\n</center> \n\nAs mentioned in the previous paragraph, this figure would make much more sense if we had just found out the node `23`, and set its right child to `1` instead of doing all this with `6`. Why did we do that you might ask? Well, it's an optimization of sorts. To find the actual \"rightmost\" node of subtree, we might have to potentially traverse most of that subtree. Like in our example. To actually get to the node `23`, we would have had to traverse all of the nodes: `2, 6, 44, 23`. Instead, we simply stop at the node 6. We'll see why that also achieves our final purpose. For now, let's move on.\n\nBy doing the following operation for every node, we are simply try ing to move stuff to the right hand side one step at a time. The reason we used the node `6` in the above example and not `23` is the very reason we called this approach somewhat `greedy`. \n\nProcessing of the node `2` is simple since it doesn't have a left child at all. So we have nothing to do here. Let's come over to the node `6` since this is where things get interesting and start to make sense. We'll again use the same logic as before. \n\n> For a current node, we will check if it has a left child or not. If it does, we will find the last node in the rightmost branch of the subtree rooted at this left child. Once we find this \"rightmost\" node, we will hook it up with the right child of the current node.\n\nAs we can clearly see from the previous figures, the rightmost node here would be `23`. So, let's look at the tree after we are done rewiring the connections. \n\n<center>\n<img src=\"../Figures/114/img_17.png\"/>\n</center> \n\nNow this looks just like the tree after the recursion would have completed on the left subtree and we rewired the connections, right? Exactly!. The reason we stopped at the `first rightmost node with no right child` was because we would eventually end up `rightyfying` all the subtrees through that connection. Even though before we didn't hook up the node `23`, we were able to do it when we arrived at the node `6` here. \n\n**Algorithm**\n\n1. So basically, this is going to be a super short algorithm and a short-er implementation :) \n2. We use a pointer for traversing the nodes of our tree starting from the root. We have a loop that keeps going until the node pointer becomes null which is when we would be done processing the entire tree.\n3. For every node we check if it has a left child or not. If it doesn't we simply move on to the right hand side i.e.\n\n    <pre>\n    node = node.right</pre>\n    \n4. If the node does have a left child, we find the first node on the rightmost branch of the left subtree which doesn't have a right child i.e. the almost rightmost node. \n\n    <pre>\n    rightmost = node.left\n    while rightmost != null:\n    rightmost = rightmost.right</pre>\n    \n5. Once we find this rightmost node, we rewire the connections as explained in the intuition section.\n\n    <pre>\n    rightmost.right = node.right\n    node.right = node.left\n    node.left = null</pre>\n    \n6. And we move on to the right node to continue processing of our tree. \n\n<iframe src=\"https://leetcode.com/playground/b2Wt8zXU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"b2Wt8zXU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node of the tree at most twice. If you think about it, we process the nodes once when we actually run our algorithm on them as the `currentNode`. The second time when we `come across` the nodes is when we are trying to find our `rightmost node`. Sure, this algorithm is `slower` than the previous two approaches but it doesn't use any additional space which is a big win.\n* Space Complexity: $$O(1)$$ boom!. \n<br>\n<br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "flatten-binary-tree-to-linked-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.89,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3022",
                "title": "Binary Tree Maximum Path Sum",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "124",
                    "questionFrontendId": "124",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Maximum Path Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-maximum-path-sum/submit/",
                    "interpretUrl": "/problems/binary-tree-maximum-path-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int maxPathSum(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public int maxPathSum(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def maxPathSum(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nint maxPathSum(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public int MaxPathSum(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number}\\n */\\nvar maxPathSum = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer}\\ndef max_path_sum(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func maxPathSum(_ root: TreeNode?) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc maxPathSum(root *TreeNode) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxPathSum(root: TreeNode): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun maxPathSum(root: TreeNode?): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer\\n     */\\n    function maxPathSum($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction maxPathSum(root: TreeNode | null): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (max-path-sum root)\\n  (-> (or/c tree-node? #f) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\\nmax_path_sum(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\\n  def max_path_sum(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxPathSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p>\n\n<p>The <strong>path sum</strong> of a path is the sum of the node&#39;s values in the path.</p>\n\n<p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any path</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" style=\"width: 322px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [-10,9,20,null,null,15,7]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Maximum Path Sum",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nFirst of all, let's simplify the problem and implement a function \n`max_gain(node)`\nwhich takes a node as an argument and computes a maximum contribution\nthat this node and one/zero of its subtrees could add.  \n\n> In other words, it's a _maximum gain_ one could have including \nthe node (and maybe one of its subtrees) into the path.\n\n![gains](../Figures/124/124_gains.png)\n\nHence if one would know for sure that the max path contains `root`, \nthe problem would be solved as `max_gain(root)`.\nUnfortunately, _the max path does not need to go through the root_, and\nhere is an example of such a tree\n\n![gains](../Figures/124/124_max_path.png)\n\nThat means one needs to modify the above function and to check at\neach step what is better : to continue the current path or\nto start a new path with the current node as a highest node\nin this new path. \n\n**Algorithm**\n\nNow everything is ready to write down an algorithm.\n\n* Initiate `max_sum` as the smallest possible integer and \ncall `max_gain(node = root)`.\n* Implement `max_gain(node)` \nwith a check to continue the old path/to start a new path:\n    * Base case : if node is null, the max gain is `0`.\n    * Call `max_gain` recursively for the node children to\n    compute max gain from the left and right subtrees :\n    `left_gain = max(max_gain(node.left), 0)` and  \n    `right_gain = max(max_gain(node.right), 0)`.\n    * Now check to continue the old path or to start a new path.\n    To start a new path would cost \n    `price_newpath = node.val + left_gain + right_gain`.\n    Update `max_sum` if it's better to start a new path.\n    * For the recursion return the max gain \n    the node and one/zero of its subtrees could add \n    to the current path : \n    `node.val + max(left_gain, right_gain)`.       \n\n**Tree Node**\n\nHere is the definition of the `TreeNode` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/UwSQTvV8/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"UwSQTvV8\"></iframe>\n\n**Implementation**\n\n!?!../Documents/124_LIS.json:1000,494!?!\n\n<iframe src=\"https://leetcode.com/playground/mvwsxCCt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mvwsxCCt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$, where `N` is number of nodes,\nsince we visit each node not more than 2 times.\n\n* Space complexity: $$\\mathcal{O}(H)$$, where $$H$$ is a tree height, \nto keep the recursion stack. In the average case of balanced tree, the tree height\n$$H = \\log N$$, in the worst case of skewed tree, $$H = N$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-maximum-path-sum",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.787,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "277",
                "title": "Clone Graph",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "133",
                    "questionFrontendId": "133",
                    "sessionId": "968792",
                    "questionTitle": "Clone Graph",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/clone-graph/submit/",
                    "interpretUrl": "/problems/clone-graph/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    vector<Node*> neighbors;\\n    Node() {\\n        val = 0;\\n        neighbors = vector<Node*>();\\n    }\\n    Node(int _val) {\\n        val = _val;\\n        neighbors = vector<Node*>();\\n    }\\n    Node(int _val, vector<Node*> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* cloneGraph(Node* node) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n    public Node() {\\n        val = 0;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val, ArrayList<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public Node cloneGraph(Node node) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val = 0, neighbors = None):\\n        self.val = val\\n        self.neighbors = neighbors if neighbors is not None else []\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def cloneGraph(self, node):\\n        \\\"\\\"\\\"\\n        :type node: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, val = 0, neighbors = None):\\n        self.val = val\\n        self.neighbors = neighbors if neighbors is not None else []\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def cloneGraph(self, node: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     int numNeighbors;\\n *     struct Node** neighbors;\\n * };\\n */\\n\\nstruct Node *cloneGraph(struct Node *s) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public IList<Node> neighbors;\\n\\n    public Node() {\\n        val = 0;\\n        neighbors = new List<Node>();\\n    }\\n\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new List<Node>();\\n    }\\n\\n    public Node(int _val, List<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node CloneGraph(Node node) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, neighbors) {\\n *    this.val = val === undefined ? 0 : val;\\n *    this.neighbors = neighbors === undefined ? [] : neighbors;\\n * };\\n */\\n\\n/**\\n * @param {Node} node\\n * @return {Node}\\n */\\nvar cloneGraph = function(node) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a Node.\\n# class Node\\n#     attr_accessor :val, :neighbors\\n#     def initialize(val = 0, neighbors = nil)\\n#\\t\\t  @val = val\\n#\\t\\t  neighbors = [] if neighbors.nil?\\n#         @neighbors = neighbors\\n#     end\\n# end\\n\\n# @param {Node} node\\n# @return {Node}\\ndef cloneGraph(node)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var neighbors: [Node?]\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.neighbors = []\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func cloneGraph(_ node: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Neighbors []*Node\\n * }\\n */\\n\\nfunc cloneGraph(node *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var neighbors: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def cloneGraph(graph: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var neighbors: ArrayList<Node?> = ArrayList<Node?>()\\n * }\\n */\\n\\nclass Solution {\\n    fun cloneGraph(node: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $neighbors = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->neighbors = array();\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $node\\n     * @return Node\\n     */\\n    function cloneGraph($node) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     neighbors: Node[]\\n *     constructor(val?: number, neighbors?: Node[]) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.neighbors = (neighbors===undefined ? [] : neighbors)\\n *     }\\n * }\\n */\\n\\nfunction cloneGraph(node: Node | null): Node | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[[2,4],[1,3],[2,4],[1,3]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"cloneGraph\",\n  \"params\": [\n    {\n      \"name\": \"edges\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a reference of a node in a <strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong> undirected graph.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph.</p>\n\n<p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\n\n<pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Test case format:</strong></p>\n\n<p>For simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p>\n\n<p><b>An adjacency list</b> is a collection of unordered <b>lists</b> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n\n<p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png\" style=\"width: 500px; height: 550px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]\n<strong>Explanation:</strong> There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph.png\" style=\"width: 163px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[]]\n<strong>Output:</strong> [[]]\n<strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> adjList = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> This an empty graph, it does not have any nodes.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph-1.png\" style=\"width: 272px; height: 133px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2],[1]]\n<strong>Output:</strong> [[2],[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>Node.val</code> is unique for each node.</li>\n\t<li>There are no repeated edges and no self-loops in the graph.</li>\n\t<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Clone Graph",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Depth First Search\n\n**Intuition**\n\n> Note: As we can see this question has garnered a lot of negative reviews. It has a lot more dislikes than the likes. We have tried to improve the problem statement to make it more understandable. However, these are the kinds of situations you might get into in an interview when the problem statement might look a little absurd. What is important then is to ask the interviewer to clarify the problem. This problem statement was confusing to me as well initially and that's why I decided to write the solution hoping to clarify most of the doubts that the readers might have had.\n\nThe basic intuition for this problem is to just copy as we go. We need to understand that we are dealing with a graph and this means a node could have any number of neighbors. This is why `neighbors` is a list. What is also crucial to understand is that we don't want to get stuck in a cycle while we are traversing the graph. According to the problem statement, any given undirected edge could be represented as two directional edges. So, if there is an undirected edge between node `A` and node `B`, the graph representation for it would have a `directed` edge from `A to B` and another from `B to A`. After all, an undirected graph is a set of nodes that are connected together, where all the edges are bidirectional. How else would you say that `A` could be reached from `B` and `B` could be reached from `A`?\n\n<center>\n<img src=\"../Figures/133/133_Clone_Graph_1.png\" width=\"200\"/>\n</center>\n\nTo avoid getting stuck in a loop we would need some way to keep track of the nodes which have already been copied. By doing this we don't end up traversing them again.\n\n**Algorithm**\n\n1. Start traversing the graph from the given node.\n\n2. We would take a hash map to store the reference of the copy of all the nodes that have already been visited and cloned. The `key` for the hash map would be the node of the original graph and corresponding `value` would be the corresponding cloned node of the cloned graph. If the node already exists in the `visited` we return corresponding stored reference of the cloned node.\n\n    For a given edge `A - B`, since `A` is connected to `B` and `B` is also connected to `A` if we don't use `visited` we will get stuck in a cycle.\n\n    <center>\n    <img src=\"../Figures/133/133_Clone_Graph_2.png\" width=\"600\"/>\n    </center>\n\n3. If we don't find the node in the `visited` hash map, we create a copy of it and put it in the hash map. Note, how it's important to create a copy of the node and add to the hash map before entering recursion.\n\n    <pre>\n      clone_node = Node(node.val, [])\n      visited[node] = clone_node\n    </pre>\n\n    In the absence of such an ordering, we would be caught in the recursion because on encountering the node again in somewhere down the recursion again, we will be traversing it again thus getting into cycles.\n\n    <center>\n    <img src=\"../Figures/133/133_Clone_Graph_3.png\" width=\"600\"/>\n    </center>\n\n4. Now make the recursive call for the neighbors of the `node`. Pay attention to how many recursion calls we will be making for any given `node`. For a given `node` the number of recursive calls would be equal to the number of its neighbors. Each recursive call made would return the clone of a neighbor. We will prepare the list of these clones returned and put into neighbors of clone `node` which we had created earlier. This way we will have cloned the given `node` and it's `neighbors`.\n\n> Tip: Recursion could get a bit cumbersome to grasp, if you try to get into every call yourself and try to see what's happening. And why look at every call when every call does the same thing with different inputs. So, you just worry about ONE such call and let the recursion do the rest. And of course always handle the base case or the termination condition of the recursion. Otherwise how would it end?\n<br>\n\n<iframe src=\"https://leetcode.com/playground/2LxbYFhX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"2LxbYFhX\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N + M)$$, where $$N$$ is a number of nodes (vertices) and $$M$$ is a number of edges.  \n* Space Complexity: $$O(N)$$. This space is occupied by the `visited` hash map and in addition to that, space would also be occupied by the recursion stack since we are adopting a recursive approach here. The space occupied by the recursion stack would be equal to $$O(H)$$ where $$H$$ is the height of the graph. Overall, the space complexity would be $$O(N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Breadth First Search\n\n**Intuition**\n\nWe could agree DFS is a good enough solution for this problem. However, if the recursion stack is what we are worried about then DFS is not our best bet. Sure, we can write an iterative version of depth first search by using our own stack. However, we also have the BFS way of doing iterative traversal of the graph and we'll be exploring that solution as well.\n\n<center>\n<img src=\"../Figures/133/133_Clone_Graph_4.png\" width=\"600\"/>\n</center>\n\nThe difference is only in the traversal of DFS and BFS. As the name says it all, DFS explores the depths of the graph first and BFS explores the breadth. Based on the kind of graph we are expecting we can chose one over the other. We would need the `visited` hash map in both the approaches to avoid cycles.\n\n**Algorithm**\n\n1. We will use a hash map to store the reference of the copy of all the nodes that have already been visited and copied. The `key` for the hash map would be the node of the original graph and corresponding `value` would be the corresponding cloned node of the cloned graph. The `visited` is used to prevent cycles and get the cloned copy of a node.\n\n2. Add the first node to the queue. Clone the first node and add it to `visited` hash map.\n\n3. Do the BFS traversal.\n    - Pop a node from the front of the queue.\n    - Visit all the neighbors of this node.\n    - If any of the neighbors was already visited then it must be present in the `visited` dictionary. Get the clone of this neighbor from `visited` in that case.\n    - Otherwise, create a clone and store in the `visited`.\n    - Add the clones of the neighbors to the corresponding list of the clone node.\n\n<iframe src=\"https://leetcode.com/playground/TUhTdi7G/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TUhTdi7G\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N + M)$$, where $$N$$ is a number of nodes (vertices) and $$M$$ is a number of edges.\n\n* Space Complexity : $$O(N)$$. This space is occupied by the `visited` dictionary and in addition to that, space would also be occupied by the queue since we are adopting the BFS approach here. The space occupied by the queue would be equal to $$O(W)$$ where $$W$$ is the width of the graph. Overall, the space complexity would be $$O(N)$$.\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "clone-graph",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.503,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3023",
                "title": "Binary Tree Right Side View",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "199",
                    "questionFrontendId": "199",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Right Side View",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-right-side-view/submit/",
                    "interpretUrl": "/problems/binary-tree-right-side-view/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<int> rightSideView(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<Integer> rightSideView(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def rightSideView(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* rightSideView(struct TreeNode* root, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<int> RightSideView(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[]}\\n */\\nvar rightSideView = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[]}\\ndef right_side_view(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func rightSideView(_ root: TreeNode?) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc rightSideView(root *TreeNode) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def rightSideView(root: TreeNode): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun rightSideView(root: TreeNode?): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn right_side_view(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[]\\n     */\\n    function rightSideView($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction rightSideView(root: TreeNode | null): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (right-side-view root)\\n  (-> (or/c tree-node? #f) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec right_side_view(Root :: #tree_node{} | null) -> [integer()].\\nright_side_view(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec right_side_view(root :: TreeNode.t | nil) :: [integer]\\n  def right_side_view(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,null,5,null,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"rightSideView\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return <em>the values of the nodes you can see ordered from top to bottom</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/14/tree.jpg\" style=\"width: 401px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5,null,4]\n<strong>Output:</strong> [1,3,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,null,3]\n<strong>Output:</strong> [1,3]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Right Side View",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\n**DFS vs. BFS**\n\nThere are two ways to traverse the tree: DFS _depth first search_ and \nBFS _breadth first search_. Here is a small summary \n\n![diff](../Figures/199_rewrite/traversals.png)\n\nBFS traverses level by level, and DFS first goes to the leaves.\n\n![diff](../Figures/199_rewrite/dfs_bfs2.png) \n\n> Which approach to choose, BFS or DFS? \n\n- The problem is to return a list of last elements from all levels, \nso it's the way more natural to implement BFS here. \n\n- Time complexity is the same $$\\mathcal{O}(N)$$ \nboth for DFS and BFS since one has to visit all nodes.\n\n- Space complexity is $$\\mathcal{O}(H)$$ for DFS and  \n$$\\mathcal{O}(D)$$ for BFS, where $$H$$ is a tree height,\nand $$D$$ is a tree diameter. They both result in \n$$\\mathcal{O}(N)$$ space in the worst-case scenarios:\nskewed tree for DFS and complete tree for BFS. \n\nBFS wins for this problem, so let's use the opportunity \nto check out three different BFS implementations with the queue.\n\n**BFS implementation**  \n\nAll three implementations use the queue in a standard BFS way:\n\n- Push the root into the queue. \n\n- Pop-out a node from the _left_.\n \n- Push the _left_ child into the queue, and then push the _right_ child. \n\n![diff](../Figures/199_rewrite/implem2.png)\n\n**Three BFS approaches**\n\nThe difference is how to find the end of the level, i.e. the rightmost\nelement:\n\n- Two queues, one for the previous level and one for the current.\n\n- One queue with sentinel to mark the end of the level.\n\n- One queue + level size measurement. \n\n<br />\n<br />\n\n\n---\n#### Approach 1: BFS: Two Queues\n\nLet's use two queues: one for the current level,\nand one for the next. The idea is to pop the nodes one by one from\nthe current level and push their children into the next level queue.\nEach time the current queue is empty, we have the right side element in hands. \n\n![diff](../Figures/199_rewrite/levels.png)\n\n**Algorithm**\n\n- Initiate the list of the right side view `rightside`.\n\n- Initiate two queues: one for the current level, \nand one for the next. Add root into `nextLevel` queue.\n\n- While `nextLevel` queue is not empty:\n\n    - Initiate the current level: `currLevel = nextLevel`,\n    and empty the next level `nextLevel`. \n    \n    - While current level queue is not empty:\n\n        - Pop out a node from the current level queue.\n        \n        - Add first _left_ and then _right_ child node into `nextLevel`\n        queue.\n    \n    - Now `currLevel` is empty, and the node we have in hands \n    is the last one, and makes a part of the right side view.\n    Add it into `rightside`.\n    \n- Return `rightside`.  \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/LLFwqumS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"LLFwqumS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node. \n    \n* Space complexity: $$\\mathcal{O}(D)$$ to keep the queues,\nwhere $$D$$ is a tree diameter. \nLet's use the last level to estimate the queue size. \nThis level could contain up to $$N/2$$ tree nodes in the case of \n[complete binary tree](https://leetcode.com/problems/count-complete-tree-nodes/).    \n<br />\n<br />\n\n\n---\n#### Approach 2: BFS: One Queue + Sentinel\n\nAnother approach is to push all the nodes in one queue and\nto use a [sentinel node](https://en.wikipedia.org/wiki/Sentinel_node)\nto separate the levels. Typically, one could use `null` as\na sentinel.\n\n![diff](../Figures/199_rewrite/sentinel.png)\n\nThe first step is to initiate the first level: `root` + `null` as\na sentinel. Once it's done, continue to pop the nodes one by one from the left and push their children to the right.\nStop each time the current node is `null` because it means we hit the end of the current level. Each stop is a time to\nupdate a right side view list and to push `null` in the queue to mark the end of the next level.\n\n**Algorithm**\n\n- Initiate the list of the right side view `rightside`.\n\n- Initiate the queue by adding a root. Add `null` sentinel\nto mark the end of the first level. \n\n- Initiate the current node as `root`. \n\n- While queue is not empty:\n\n    - Save the previous node `prev = curr` and pop the \n    current node from the queue `curr = queue.poll()`. \n    \n    - While the current node is not `null`:\n\n        - Add first _left_ and then _right_ child node into the\n        queue.\n        \n        - Update both previous and current nodes:\n        `prev = curr`, `curr = queue.poll()`.\n    \n    - Now the current node is null, _i.e._ we reached the end of the current level. Hence the previous node is the rightmost one and makes a part of the right side view.\n    Add it into `rightside`.\n    \n    - If the queue is not empty, push the null node as a sentinel,\n    to mark the end of the next level.\n    \n- Return `rightside`.  \n\n**Implementation**\n\nNote, that `ArrayDeque` in Java doesn't support null\nelements, and hence the data structure to use here \nis `LinkedList`.  \n\n<iframe src=\"https://leetcode.com/playground/doc7wZUu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"doc7wZUu\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node. \n    \n* Space complexity: $$\\mathcal{O}(D)$$ to keep the queues,\nwhere $$D$$ is a tree diameter. \nLet's use the last level to estimate the queue size. \nThis level could contain up to $$N/2$$ tree nodes in the case of \n[complete binary tree](https://leetcode.com/problems/count-complete-tree-nodes/).   \n<br />\n<br />\n\n\n---\n#### Approach 3: BFS: One Queue + Level Size Measurements\n\nInstead of using the sentinel, we could write down the length \nof the current level.\n\n![diff](../Figures/199_rewrite/length.png)\n\n**Algorithm**\n\n- Initiate the list of the right side view `rightside`.\n\n- Initiate the queue by adding a root. \n\n- While the queue is not empty:\n\n    - Write down the length of the current level:\n    `levelLength = queue.size()`.\n\n    - Iterate over `i` from `0` to `level_length - 1`:\n    \n        - Pop the current node from the queue: \n        `node = queue.poll()`.\n        \n        - If `i == levelLength - 1`, then it's the last node\n        in the current level, push it to `rightsize` list.\n\n        - Add first _left_ and then _right_ child node \n        into the queue.\n    \n- Return `rightside`. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/TQ8s6xwe/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TQ8s6xwe\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node. \n    \n* Space complexity: $$\\mathcal{O}(D)$$ to keep the queues,\nwhere $$D$$ is a tree diameter. \nLet's use the last level to estimate the queue size. \nThis level could contain up to $$N/2$$ tree nodes in the case of \n[complete binary tree](https://leetcode.com/problems/count-complete-tree-nodes/).   \n<br />\n<br />\n\n\n___\n#### Approach 4: Recursive DFS\n\nEveryone likes recursive DFS, so let's add it here as well.\nThe idea is simple: to traverse the tree level by level, \nstarting each time from the rightmost child.  \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/V39TSeby/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"V39TSeby\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ since one has to visit each node. \n    \n* Space complexity: $$\\mathcal{O}(H)$$ to keep the recursion stack,\nwhere $$H$$ is a tree height. \nThe worst-case situation is a skewed tree, when $$H = N$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-right-side-view",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.822,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "274",
                "title": "Number of Islands",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "200",
                    "questionFrontendId": "200",
                    "sessionId": "968792",
                    "questionTitle": "Number of Islands",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/number-of-islands/submit/",
                    "interpretUrl": "/problems/number-of-islands/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numIslands(vector<vector<char>>& grid) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numIslands(self, grid):\\n        \\\"\\\"\\\"\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numIslands(char** grid, int gridSize, int* gridColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} grid\\n * @return {number}\\n */\\nvar numIslands = function(grid) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} grid\\n# @return {Integer}\\ndef num_islands(grid)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numIslands(_ grid: [[Character]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numIslands(grid [][]byte) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numIslands(grid: Array[Array[Char]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numIslands(grid: Array<CharArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $grid\\n     * @return Integer\\n     */\\n    function numIslands($grid) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numIslands(grid: string[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-islands grid)\\n  (-> (listof (listof char?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_islands(Grid :: [[char()]]) -> integer().\\nnum_islands(Grid) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_islands(grid :: [[char]]) :: integer\\n  def num_islands(grid) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numIslands\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"character[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Number of Islands",
                        "content": "[TOC]\n\n#### Approach #1 DFS [Accepted]\n\n**Intuition**\n\nTreat the 2d grid map as an undirected graph and there is an edge\nbetween two horizontally or vertically adjacent nodes of value '1'.\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Depth First Search. During DFS, every visited node should be\nset as '0' to mark as visited node. Count the number of root nodes that trigger\nDFS, this number would be the number of islands since each DFS starting at some\nroot identifies an island.\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_dfs.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/eVGw9zoX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eVGw9zoX\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : worst case $$O(M \\times N)$$ in case that the grid map\n  is filled with lands where DFS goes by $$M \\times N$$ deep.\n\n---\n\n\n#### Approach #2: BFS [Accepted]\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Breadth First Search. Put it into a queue and set its value\nas '0' to mark as visited node. Iteratively search the neighbors of enqueued\nnodes until the queue becomes empty.\n\n<iframe src=\"https://leetcode.com/playground/jXzqritJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jXzqritJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : $$O(min(M, N))$$ because in worst case where the\n  grid is filled with lands, the size of queue can grow up to min($$M,N$$).\n\n---\n\n\n#### Approach #3: Union Find (aka Disjoint Set) [Accepted]\n\n**Algorithm**\n\nTraverse the 2d grid map and union adjacent lands horizontally or vertically,\nat the end, return the number of connected components maintained in the UnionFind\ndata structure.\n\nFor details regarding to Union Find, you can refer to this [article](https://leetcode.com/articles/redundant-connection/).\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_unionfind.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/k6Xzhgt6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"k6Xzhgt6\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns. Note that Union operation takes essentially constant\n  time[^1] when UnionFind is implemented with both path compression and union by rank.\n\n* Space complexity : $$O(M \\times N)$$ as required by UnionFind data structure.\n\n\n---\n\n**Footnotes**\n\n[^1]: [https://en.wikipedia.org/wiki/Disjoint-set_data_structure](https://en.wikipedia.org/wiki/Disjoint-set_data_structure)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "number-of-islands",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.326,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3024",
                "title": "Lowest Common Ancestor of a Binary Tree",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "236",
                    "questionFrontendId": "236",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n  \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\nFirst the given nodes `p` and `q` are to be searched in a binary tree and then their lowest common ancestor is to be found. We can resort to a normal tree traversal to search for the two nodes. Once we reach the desired nodes `p` and `q`, we can backtrack and find the lowest common ancestor.\n\n<center>\n<img src=\"../Figures/236/236_LCA_Binary_1.png\" width=\"600\"/>\n</center>\n\n#### Approach 1: Recursive Approach\n\n**Intuition**\n\nThe approach is pretty intuitive. Traverse the tree in a depth first manner. The moment you encounter either of the nodes `p` or `q`, return some boolean flag. The flag helps to determine if we found the required nodes in any of the paths. The least common ancestor would then be the node for which both the subtree recursions return a `True` flag. It can also be the node which itself is one of `p` or `q` and for which one of the subtree recursions returns a `True` flag.\n\nLet us look at the formal algorithm based on this idea.\n\n**Algorithm**\n\n1. Start traversing the tree from the root node.\n2. If the current node itself is one of `p` or `q`, we would mark a variable `mid` as `True` and continue the search for the other node in the left and right branches.\n3. If either of the left or the right branch returns `True`, this means one of the two nodes was found below.\n4. If at any point in the traversal, any two of the three flags `left`, `right` or `mid` become `True`, this means we have found the lowest common ancestor for the nodes `p` and `q`.\n\nLet us look at a sample tree and we search for the lowest common ancestor of two nodes `9` and `11` in the tree.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_1.json:770,460!?!\n\n</center>\n\nFollowing is the sequence of nodes that are followed in the recursion:\n\n<pre>\n1 --> 2 --> 4 --> 8\nBACKTRACK 8 --> 4\n4 --> 9 (ONE NODE FOUND, return True)\nBACKTRACK 9 --> 4 --> 2\n2 --> 5 --> 10\nBACKTRACK 10 --> 5\n5 --> 11 (ANOTHER NODE FOUND, return True)\nBACKTRACK 11 --> 5 --> 2\n\n2 is the node where we have left = True and right = True and hence it is the lowest common ancestor.\n</pre>\n\n\n<iframe src=\"https://leetcode.com/playground/SaUmkb92/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SaUmkb92\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative using parent pointers\n\n**Intuition**\n\nIf we have parent pointers for each node we can traverse back from `p` and `q` to get their ancestors. The first common node we get during this traversal would be the LCA node. We can save the parent pointers in a dictionary as we traverse the tree.\n\n**Algorithm**\n\n1. Start from the root node and traverse the tree.\n2. Until we find `p` and `q` both, keep storing the parent pointers in a dictionary.\n3. Once we have found both `p` and `q`, we get all the ancestors for `p` using the parent dictionary and add to a set called `ancestors`.\n4. Similarly, we traverse through ancestors for node `q`. If the ancestor is present in the ancestors set for `p`, this means this is the first ancestor common between `p` and `q` (while traversing upwards) and hence this is the LCA node.\n\n<iframe src=\"https://leetcode.com/playground/uh78aTxV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uh78aTxV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity : $$O(N)$$. In the worst case space utilized by the stack, the parent pointer dictionary and the ancestor set, would be $$N$$ each, since the height of a skewed binary tree could be $$N$$.\n<br>\n<br>\n\n---\n\n#### Approach 3: Iterative without parent pointers\n\n**Intuition**\n\nIn the previous approach, we come across the LCA during the backtracking process. We can get rid of the backtracking process itself. In this approach we always have a pointer to the probable LCA and the moment we find both the nodes we return the pointer as the answer.\n\n**Algorithm**\n\n1. Start with root node.\n2. Put the `(root, root_state)` on to the stack. `root_state` defines whether one of the children or both children of `root` are left for traversal.\n3. While the stack is not empty, peek into the top element of the stack represented as `(parent_node, parent_state)`.\n4. Before traversing any of the child nodes of `parent_node` we check if the `parent_node` itself is one of `p` or `q`.\n5. First time we find either of `p` or `q`, set a boolean flag called `one_node_found` to `True`. Also start keeping track of the lowest common ancestors by keeping a note of the top index of the stack in the variable `LCA_index`. Since all the current elements of the stack are ancestors of the node we just found.\n6. The second time `parent_node == p or parent_node == q` it means we have found both the nodes and we can return the `LCA node`.\n7. Whenever we visit a child of a `parent_node` we push the `(parent_node, updated_parent_state)` onto the stack. We update the state of the parent since a child/branch has been visited/processed and accordingly the state changes.\n8. A node finally gets popped off from the stack when the state becomes `BOTH_DONE` implying both left and right subtrees have been pushed onto the stack and processed. If `one_node_found` is `True` then we need to check if the top node being popped could be one of the ancestors of the found node. In that case we need to reduce `LCA_index` by one. Since one of the ancestors was popped off.\n\n> Whenever both `p` and `q` are found, `LCA_index` would be pointing to an index in the stack which would contain all the common ancestors between `p` and `q`. And the `LCA_index` element has the `lowest` ancestor common between p and q.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_2.json:770,460!?!\n\n</center>\n\nThe animation above shows how a stack is used to traverse the binary tree and keep track of the common ancestors between nodes `p` and `q`.\n\n<iframe src=\"https://leetcode.com/playground/j6C3VpYf/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"j6C3VpYf\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree. The advantage of this approach is that we can prune backtracking. We simply return once both the nodes are found.\n\n* Space Complexity : $$O(N)$$. In the worst case the space utilized by stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.14,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "280",
                "title": "Binary Tree Paths",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "257",
                    "questionFrontendId": "257",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Paths",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-paths/submit/",
                    "interpretUrl": "/problems/binary-tree-paths/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<string> binaryTreePaths(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<String> binaryTreePaths(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def binaryTreePaths(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** binaryTreePaths(struct TreeNode* root, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<string> BinaryTreePaths(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {string[]}\\n */\\nvar binaryTreePaths = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {String[]}\\ndef binary_tree_paths(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func binaryTreePaths(_ root: TreeNode?) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc binaryTreePaths(root *TreeNode) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def binaryTreePaths(root: TreeNode): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun binaryTreePaths(root: TreeNode?): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn binary_tree_paths(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return String[]\\n     */\\n    function binaryTreePaths($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction binaryTreePaths(root: TreeNode | null): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (binary-tree-paths root)\\n  (-> (or/c tree-node? #f) (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec binary_tree_paths(Root :: #tree_node{} | null) -> [unicode:unicode_binary()].\\nbinary_tree_paths(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec binary_tree_paths(root :: TreeNode.t | nil) :: [String.t]\\n  def binary_tree_paths(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,null,5]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"binaryTreePaths\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>all root-to-leaf paths in <strong>any order</strong></em>.</p>\n\n<p>A <strong>leaf</strong> is a node with no children.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg\" style=\"width: 207px; height: 293px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,5]\n<strong>Output:</strong> [&quot;1-&gt;2-&gt;5&quot;,&quot;1-&gt;3&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [&quot;1&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Paths",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Binary tree definition\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/uJU5jdnZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"uJU5jdnZ\"></iframe>\n<br />\n<br />\n\n\n---\n#### Approach 1: Recursion\n\nThe most intuitive way is to use a recursion here.\nOne is going through the tree \nby considering at each step the node itself and its children.\nIf node *is not* a leaf, one extends the current path by a node value and\ncalls recursively the path construction for its children.\nIf node *is* a leaf, one closes the current path and adds it into \nthe list of paths.\n\n<iframe src=\"https://leetcode.com/playground/ueSCRjpj/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"ueSCRjpj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : we visit each node exactly once, \nthus the time complexity is $$\\mathcal{O}(N)$$,\nwhere $$N$$ is the number of nodes.\n* Space complexity : $$\\mathcal{O}(N)$$. Here we use the space for a stack call and for a \n`paths` list to store the answer. `paths` contains as many elements as leafs in the tree and \nhence couldn't be larger than $$\\log N$$ for the trees containing more than one element. \nHence the space complexity is determined by a stack call.\nIn the worst case, when the tree is completely unbalanced,\n*e.g.* each node has only one child node, the recursion call would occur\n$$N$$ times (the height of the tree), therefore the storage to keep the call stack would be $$\\mathcal{O}(N)$$.\nBut in the best case (the tree is balanced), the height of the tree would be $$\\log(N)$$.\nTherefore, the space complexity in this case would be $$\\mathcal{O}(\\log(N))$$.\n<br/>\n<br/>\n\n\n---\n#### Approach 2: Iterations\n\nThe approach above could be rewritten with the help of iterations. \nThis way we initiate the stack by a root node and then at each step\nwe pop out one node and its path.\nIf the poped node *is* a leaf, one update the list of all paths.\nIf not, one pushes its child nodes and\ncorresponding paths into stack till all nodes are checked.\n\n<!--![LIS](../Figures/257/257_tr.gif)-->\n!?!../Documents/257_LIS.json:1000,491!?!\n\n<iframe src=\"https://leetcode.com/playground/4znAcEDG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4znAcEDG\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is visited exactly once. \n* Space complexity : $$\\mathcal{O}(N)$$ as we could keep up to the entire tree.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-paths",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.867,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3025",
                "title": "Alien Dictionary",
                "type": 1,
                "info": null,
                "paidOnly": true,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "269",
                    "questionFrontendId": "269",
                    "sessionId": "968792",
                    "questionTitle": "Alien Dictionary",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/alien-dictionary/submit/",
                    "interpretUrl": "/problems/alien-dictionary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string alienOrder(vector<string>& words) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String alienOrder(String[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def alienOrder(self, words):\\n        \\\"\\\"\\\"\\n        :type words: List[str]\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def alienOrder(self, words: List[str]) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * alienOrder(char ** words, int wordsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string AlienOrder(string[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar alienOrder = function(words) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\\n# @return {String}\\ndef alien_order(words)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func alienOrder(_ words: [String]) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func alienOrder(words []string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def alienOrder(words: Array[String]): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun alienOrder(words: Array<String>): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn alien_order(words: Vec<String>) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @return String\\n     */\\n    function alienOrder($words) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function alienOrder(words: string[]): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (alien-order words)\\n  (-> (listof string?) string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec alien_order(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nalien_order(Words) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec alien_order(words :: [String.t]) :: String.t\\n  def alien_order(words) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"alienOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.</p>\n\n<p>You are given a list of strings <code>words</code> from the alien language&#39;s dictionary, where the strings in <code>words</code> are <strong>sorted lexicographically</strong> by the rules of this new language.</p>\n\n<p>Return <em>a string of the unique letters in the new alien language sorted in <strong>lexicographically increasing order</strong> by the new language&#39;s rules. If there is no solution, return </em><code>&quot;&quot;</code><em>. If there are multiple solutions, return <strong>any of them</strong></em>.</p>\n\n<p>A string <code>s</code> is <strong>lexicographically smaller</strong> than a string <code>t</code> if at the first letter where they differ, the letter in <code>s</code> comes before the letter in <code>t</code> in the alien language. If the first <code>min(s.length, t.length)</code> letters are the same, then <code>s</code> is smaller if and only if <code>s.length &lt; t.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;wrt&quot;,&quot;wrf&quot;,&quot;er&quot;,&quot;ett&quot;,&quot;rftt&quot;]\n<strong>Output:</strong> &quot;wertf&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;]\n<strong>Output:</strong> &quot;zx&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;,&quot;z&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> The order is invalid, so return <code>&quot;&quot;</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Alien Dictionary",
                        "content": "[TOC]\n\n## Solution\n\n---\n\nThis article assumes you already have some confidence with **graph algorithms**, such as **breadth-first search** and **depth-first searching**. If you're familiar with those, but not with **topological sort** (the topic tag for this problem), don't panic, as you should still be able to make sense of it. It is one of the many more advanced algorithms that keen programmers tend to \"invent\" themselves before realizing it's already a widely known and used algorithm. There are a couple of approaches to topological sort; [Kahn's Algorithm](https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm) and DFS.\n\nA few things to keep in mind:\n\n- The letters *within a word* don't tell us anything about the relative order. For example, the presence of the word `kitten` in the list does *not* tell us that the letter `k` is before the letter `i`. \n- The input can contain words followed by their prefix, for example, `abcd` and then `ab`. These cases will never result in a valid alphabet (because in a valid alphabet, prefixes are always first). You'll need to make sure your solution detects these cases correctly.\n- There can be more than one valid alphabet ordering. It is fine for your algorithm to return any one of them.\n- Your output string must contain *all* unique letters that were within the input list, including those that could be in any position within the ordering. It should *not* contain any additional letters that were *not* in the input.\n\n<br/>\n\n---\n\n#### Overview of Approaches\n\nAll approaches break the problem into three steps.\n\n1. Extracting dependency rules from the input. For example \"A must be before C\", \"X must be before D\", or \"E must be before B\". \n2. Putting the dependency rules into a graph with letters as nodes and dependencies as edges (an adjacency list is best).\n3. Topologically sorting the graph nodes.\n\nWe encourage you to go and have another go at implementing these steps yourself if you think you now know what to do. If this all sounded overwhelming and confusing though, don't panic, because we're going to work through it all in detail.\n\n<br/>\n\n---\n\n#### Approach 1: Breadth-First Search\n\n**Intuition**\n\nThere are three parts to this problem. \n\n1. Getting as much information about the alphabet order as we can out of the input word list.\n2. Representing that information in a meaningful way.\n3. Assembling a valid alphabet ordering.\n\n***Part 1: Extracting Information***\n\nLet's start with a large example of a dictionary in an \"alien language\", and see how much we can conclude with some simple reasoning. This is likely to be your first step in tackling this question in a programming interview.\n\n![List of alien words:  wxqkj, whqg, cckgh, cdxg, cdxdt, cdht, ktgxt, ktgch, ktdw, ktdc, jqw, jmc, jmg](../Figures/269/words.png)\n\nRemember that in an ordinary English dictionary, all the words starting with `a` are at the start, followed by all the ones starting with `b`, then `c`, `d`, `e`, and at the very end, `z`.  In the \"alien dictionary\", we also expect the first letters of each word to be in alphabetical order. So, let's look at them.\n\n![First letters of each word: w, w, c, c, c, c, k, k, k, k, j, and j](../Figures/269/first_letters.png)\n\nRemoving the duplicates, we get:\n\n![First letters of each word without duplicates: w, c, k, and j](../Figures/269/first_letters_no_duplicates.png)\n\nGoing by this, we know the *relative order* of four letters in the \"alien dictionary\". However, we don't know how these four letters fit in with the other seven letters, or even how those other seven letters fit in with each other. To get more information, we'll need to look further.\n\nGoing back to the English dictionary analogy, the word `abacus` will appear before `algorithm`. This is because when the first letter of two words is the same, we instead look at the second letter; `b` and `l` in this case. `b` is before `l` in the alphabet. \n\nLet's take a closer look at the first two words of the \"alien dictionary\"; `wxqkj` and `whgg`. Seeing as the first letters are the same, `w`, we look at the second letters. The first word has `x`, and the second word has `h`. Therefore, we know that `x` is before `h` in the alien dictionary. We know have two fragments of the letter-order.\n\n![First two sequences, w, c, k, j and x, h](../Figures/269/first_two_sequences.png)\n\nWe don't know yet how these two fragments could fit together into a single ordering. For example, we don't know whether `w` is before `x`, or `x` is before `w`, or even whether or not there's enough information available in the input for us to know.\n\nAnyway, we've now gotten all the information we can out of the first two words. All letters after `x` in `wxqkj`, and after `h` in `whqg`, should be ignored because they did not impact the relative ordering of the two words (if you're confused, think back to `abacus` and `algorithm`. Because `b > l`, the `gorithm` and `acus` parts are unimportant for determining alphabetical ordering).\n\nHopefully, you're starting to see a pattern here. Where two words are adjacent, we need to look for the *first difference* between them. That difference tells us the relative order between two letters. Let's have a look at all the relations we can find by comparing adjacent words.\n\n![Relations between words](../Figures/269/words_relations.png)\n\nYou might notice that we haven't included some rules, such as `w \u2192 j`. This is fine though, as we can still derive it from the rules we have: `w \u2192 c`, `c \u2192 k`, `k \u2192 j`.\n\nThis completes the first part. There is no further information we can extract from the input. Therefore, our task is now to put together what we know.\n\n***Part 2: Representing the Relations***\n\nWe now have a set of relations stating how pairs of letters are ordered relative to each other.\n\n![Relations: x \u2192 h, w \u2192 c, c \u2192 d, g \u2192 d, c \u2192 k, x \u2192 c, k \u2192 j, q \u2192 m, and c \u2192 g](../Figures/269/relations.png)\n\nHow could we put these together? You may be tempted to start trying to build \"chains\" out of them. Here are a few possible chains.\n\n![Some combined chains: w\u2192c\u2192k\u2192j, w\u2192c\u2192d, x\u2192c\u2192k\u2192j, and q\u2192m](../Figures/269/chains.png)\n\nThe problem here though is that some letters are in more than one chain. Simply putting the chains into the output list one-after-the-other won't work. Some letters will be duplicated, which invalidates the ordering. Simply deleting the duplicates will not work either.\n\nWhen we have a set of relations, often drawing a graph is the best way to visualize them. The nodes are the letters, and an edge between two letters, `A` and `B` represents that `A` is before `B` in the \"alien alphabet\". \n\n![Graph with sources highlighted](../Figures/269/graph_bfs_step_1.png)\n\n***Part 3: Assembling a Valid Ordering***\n\nAs we can see from the graph, four of the letters have no arrows going into them. What this means is that there are no letters that *have* to be before any of these four (remember that the question states there could be multiple valid orderings, and if there are, then it's fine for us to return any of them). \n\nTherefore, a valid start to the ordering we return would be:\n\n![First group ordering: q w t x](../Figures/269/one_group_ordering.png)\n\nWe can now remove these letters and edges from the graph, because any other letters that required them first will now have this requirement satisfied.\n\n![Graph after first step with new sources highlighted](../Figures/269/graph_bfs_step_2.png)\n\nOn this new graph, there are now three new letters that have no in-arrows. We can add these to our output list.\n\n![Two groups ordering: q w t x, m h c](../Figures/269/two_groups_ordering.png)\n\nAgain, we can remove these from the graph.\n\n![Graph after second step with new sources highlighted](../Figures/269/graph_bfs_step_3.png)\n\nThen add the two new letters with no in-arrows.\n\n![Three groups ordering: q w t x, m h c, g k](../Figures/269/three_groups_ordering.png)\n\nWhich leaves the following graph.\n\n![Graph after third step with new sources highlighted](../Figures/269/graph_bfs_step_4.png)\n\nWith the final two letters.\n\n![All groups ordering: q w t x, m h c, g k, j d](../Figures/269/all_groups_ordering.png)\n\nWhich is a valid ordering that we can return.\n\nAs a side note, each of the four groups of letters we picked off could have been in any order within themselves (as another side note, it's not too difficult to calculate *how many* valid orderings there are. Have a think about this if you want, determining how many valid alphabet orderings there are is an interesting follow-up question!)\n\n**Algorithm**\n\nNow that we have come up with an approach, we need to figure out how to implement it efficiently. \n\nThe first and second parts are straightforward; we'll leave you to look at the code for these. It should extract the order relations and then insert them into an **adjacency list**. The only thing we need to be careful of is ensuring that we've handled the \"prefix\" edge case correctly.\n\n![Adjacency list](../Figures/269/adjacency_list.png)\n\nThe third part is more complicated. We need to somehow identify which letters have no incoming links left. With the adjacency list format above, this is a bit annoying to do, because determining whether or not a particular letter has any incoming links requires repeatedly checking over the adjacency lists of all the other letters to see whether or not they feature that letter.\n\nA na\u00efve solution would be to do exactly this. While this would be efficient enough with at most `26` letters, it may result in your interviewer quickly telling you that we might want to use the same algorithm on an \"alien language\" with millions of unique letters.\n\nAn alternative is to keep two adjacency lists; one the same as above, and another that is the reverse, showing the *incoming* links. Then, each time we traverse an edge, we could remove the corresponding edge in the reverse adjacency list. Seeing when a letter has no more incoming links would now be straightforward.\n\n![Reverse adjacency list](../Figures/269/reverse_adjacency_list.png)\n\nHowever, we can do even better than that. Instead of keeping track of all the other letters that must be before a particular letter, we only need to keep track of *how many* of them there are! While building the forward adjacency list, we can also count up how many incoming edges each letter has. We call the number of incoming edges the **indegree** of a node.\n\n![Count list](../Figures/269/indegree_count_list.png)\n\nThen, instead of removing an edge from a reverse adjacency list, we can simply decrement the count by 1. Once the count reaches 0, this is equivalent to there being no incoming edges left in the reverse adjacency list.\n\nWe'll do a BFS for all letters that are reachable, adding each letter to the output as soon as it's reachable. A letter is reachable once all of the letters that need to be before it have been added to the output. To do a BFS, recall that we use a queue. We should initially put all letters with an in-degree of `0` onto that queue. Each time a letter gets down to an in-degree of `0`, it is added to the queue.\n\nWe continue this until the queue is empty. After that, we check whether or not all letters were put in the output list. If some are missing, this is because we got to a point where all remaining letters had at least one edge going in; this means there must be a cycle! In that case, we should return `\"\"` as per the problem description. Otherwise, we should return the complete ordering we found.\n\nOne edge case we need to be careful of is where a word is *followed by* its own prefix. In these cases, it is impossible to come up with a valid ordering and so we should return `\"\"`. The best place to detect it is in the loop that compares each adjacent pair of words.\n\nAlso, remember that not all letters will necessarily have an edge going into or out of them. These letters can go *anywhere* in the output. But we need to be careful to not forget about them in our implementation.\n\nHere is an animation showing the entire algorithm on our example from earlier.\n\n!?!../Documents/269_bfs_animation.json:960,540!?!\n\n<iframe src=\"https://leetcode.com/playground/xC3Ymt6h/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"xC3Ymt6h\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of strings in the input list.\n\nLet $$C$$ be the total length of all the words in the input list, added together. \n\nLet $$U$$ be the total number of unique letters in the alien alphabet. While this is limited to $$26$$ in the question description, we'll still look at how it would impact the complexity if it was not limited (as this could potentially be a follow-up question).\n\n- Time complexity : $$O(C)$$.\n\n    There were three parts to the algorithm; identifying all the relations, putting them into an adjacency list, and then converting it into a valid alphabet ordering.\n\n    In the worst case, the first and second parts require checking every letter of every word (if the difference between two words was always in the last letter). This is $$O(C)$$.\n\n    For the third part, recall that a breadth-first search has a cost of $$O(V + E)$$, where $$V$$ is the number of vertices and $$E$$ is the number of edges. Our algorithm has the same cost as BFS, as it too is visiting each edge and node once (a node is visited once *all* of its edges are visited, unlike the traditional BFS where it is visited once one edge is visited). Therefore, determining the cost of our algorithm requires determining how many nodes and edges there are in the graph.\n\n    *Nodes:* We know that there is one vertex for each unique letter, i.e. $$O(U)$$ vertices.\n\n    *Edges:* Each edge in the graph was generated from comparing two adjacent words in the input list. There are $$N - 1$$ pairs of adjacent words, and only *one* edge can be generated from each pair. This might initially seem a bit surprising, so let's quickly look at an example. We'll use English words.\n\n    ```\n    abacus\n    algorithm\n    ```\n\n    The *only* conclusion we can draw is that *b is before l*. This is the reason `abacus` appears before `algorithm` in an English dictionary. The characters afterward are irrelevant. It is the same for the \"alien\" alphabets we're working with here. The only rule we can draw is the one based on the *first difference* between the two words.\n\n    Also, remember that we are only generating rules for adjacent words. We are not adding the \"implied\" rules to the adjacency list. For example, assume we have the following word list.\n\n    ```\n    rgh\n    xcd\n    tny\n    bcd\n    ```\n\n    We are only generating the following 3 edges.\n\n    ```\n    r -> x\n    x -> t\n    t -> b\n    ```\n\n    We are *not* generating these implied rules (the graph structure shows them indirectly).\n\n    ```\n    r -> t\n    r -> b\n    x -> b\n    ```\n\n    So with this, we know that there are *at most `N - 1` edges*. \n\n    There is an additional upper limit on the number of edges too\u2014it is impossible for there to be more than one edge between each pair of nodes. With $$U$$ nodes, this means there can't be more than $$U^2$$ edges.\n\n    It's not common in complexity analysis that we get two separate upper bounds like this. Because the number of edges has to be *lower than both $$N - 1$$ and $$U^2$$*, we know it is at *most* the *smallest* of these two values. Mathematically, we can say this is $$\\min(U^2, N - 1)$$.\n\n    Going all the way back to the cost of breadth first search, we can now substiute in the number of nodes and the number of edges: $$V = U$$ and $$E = \\min(U^2, N - 1)$$. This gives us:\n    \n    $$O(V + E) = O(U + \\min(U^2, N - 1)) = O(U + \\min(U^2, N))$$.\n\n    Finally, we need to combine the two parts: $$O(C)$$ for the first and second parts, and $$O(U + \\min(U^2, N))$$ for the third part. When we have two independent parts, we add the costs together, as we don't necessarily know which is larger. After we've done this, we should look at the final formula and see whether or not we can actually draw any conclusions about which is larger. Adding them together, we initially get the following:\n    \n    $$O(C) + O(U + \\min(U^2, N)) = O(C + U + \\min(U^2, N))$$. \n\n    So, what do we know about the relative values of $$N$$, $$C$$, and $$U$$? Well, we know that $$N < C$$, as each word contains at least one character (remember, $$C$$ is total characters across the words, not *unique* characters). Additionally, $$U < C$$ because there can't be more unique characters than there are characters. \n\n    In summary, $$C$$ is the biggest of the three, and $$N$$ and $$U$$ are smaller, although we don't know which is smaller out of those two.\n\n    So for starters, we know that the $$U$$ bit is insignificant compared to the $$C$$. Therefore, we can just remove it:\n    \n    $$O(C + U + \\min(U^2, N))  \u2192  O(C + \\min(U^2, N))$$\n    \n    Now, to simplify the rest, consider two cases:\n\n    1. If $$U^2$$ is smaller than $$N$$, then $$\\min(U^2, N) = U^2$$. By definition, we've just said that $$U^2$$ is smaller than $$N$$, which is in turn smaller than $$C$$, and so $$U^2$$ is definitely less than $$C$$. This leaves us with $$O(C)$$. \n    \n    2. If $$U^2$$ is larger than $$N$$, then $$\\min(U^2, N) = N$$. Because $$C > N$$, we're left with $$O(C)$$.\n    \n    <br/>\n\n    So in all cases, we know that $$C > \\min(U^2, N)$$. This gives us a final time complexity of $$O(C)$$.\n    \n- Space complexity : $$O(1)$$ or $$O(U + \\min(U^2, N))$$.\n\n    The adjacency list uses the most auxiliary memory. This list uses $$O(V + E)$$ memory, where $$V$$ is the number of unique letters, and $$E$$ is the number of relations.\n    \n    The number of vertices is simply $$U$$; the number of unique letters.\n    \n    The number of edges in the worst case is $$\\min(U^2, N)$$, as explained in the time complexity analysis.\n\n    So in total the adjacency list takes $$O(U + \\min(U^2, N))$$ space.\n\n    So for the question we're given, where $$U$$ is a constant fixed at a maximum of $$26$$, the space complexity is simply $$O(1)$$. This is because $$U$$ is fixed at $$26$$, and the number of relations is fixed at $$26^2$$, so $$O(\\min(26^2, N)) = O(26^2) = O(1)$$.\n\n    But when we consider an arbitrarily large number of possible letters, we use the size of the adjacency list; $$O(U + \\min(U^2, N))$$.\n\n<br/>\n\n---\n\n#### Approach 2: Depth-First Search\n\n**Intuition**\n\nAnother approach to the third part is to use a depth-first search. We still need to extract relations and then generate an adjacency list in the same way as before, but this time we don't need the `indegrees` map.\n\nRecall that in a depth-first search, nodes are returned once they either have no outgoing links left, or all their outgoing links have been visited. Therefore, the order in which nodes are returned by the depth-first search will be the reverse of a valid alphabet order.\n\n**Algorithm**\n\nIf we made a reverse adjacency list instead of a forward one, the output order would be correct (without needing to be reversed). Remember that when we reverse the edges of a directed graph, the nodes with no incoming edges became the ones with no outgoing edges. This means that the ones at the start of the alphabet will now be the ones returned first.\n\nOne issue we need to be careful of is cycles. In directed graphs, we often detect cycles by using **graph coloring**. All nodes start as white, and then once they're first visited they become grey, and then once all their outgoing nodes have been fully explored, they become black. We know there is a cycle if we *enter* a node that is currently grey (it works because all nodes that are currently on the stack are grey. Nodes are changed to black when they are removed from the stack).\n\nHere is an animation showing the DFS, starting from a reverse adjacency list of the input.\n\n!?!../Documents/269_dfs_animation.json:960,540!?!\n\n<iframe src=\"https://leetcode.com/playground/PYYBJUzC/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"PYYBJUzC\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(C)$$.\n\n    Building the adjacency list has a time complexity of $$O(C)$$ for the same reason as in Approach 1.\n\n    Again, like in Approach 1, we traverse every \"edge\", but this time we're using depth-first-search.\n\n- Space complexity : $$O(1)$$ or $$O(U + \\min(U^2, N))$$.\n\n    Like in Approach 1, we build an adjacency list. Even though this one is a reversed adjacency list, it still contains the same number of relations.\n\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "alien-dictionary",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.929,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3026",
                "title": "Shortest Distance from All Buildings",
                "type": 1,
                "info": null,
                "paidOnly": true,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "317",
                    "questionFrontendId": "317",
                    "sessionId": "968792",
                    "questionTitle": "Shortest Distance from All Buildings",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/shortest-distance-from-all-buildings/submit/",
                    "interpretUrl": "/problems/shortest-distance-from-all-buildings/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int shortestDistance(vector<vector<int>>& grid) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int shortestDistance(int[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def shortestDistance(self, grid):\\n        \\\"\\\"\\\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def shortestDistance(self, grid: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint shortestDistance(int** grid, int gridSize, int* gridColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int ShortestDistance(int[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar shortestDistance = function(grid) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} grid\\n# @return {Integer}\\ndef shortest_distance(grid)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func shortestDistance(_ grid: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func shortestDistance(grid [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def shortestDistance(grid: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun shortestDistance(grid: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn shortest_distance(grid: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $grid\\n     * @return Integer\\n     */\\n    function shortestDistance($grid) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function shortestDistance(grid: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (shortest-distance grid)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec shortest_distance(Grid :: [[integer()]]) -> integer().\\nshortest_distance(Grid) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec shortest_distance(grid :: [[integer]]) :: integer\\n  def shortest_distance(grid) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"shortestDistance\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an <code>m x n</code> grid <code>grid</code> of values <code>0</code>, <code>1</code>, or <code>2</code>, where:</p>\n\n<ul>\n\t<li>each <code>0</code> marks <strong>an empty land</strong> that you can pass by freely,</li>\n\t<li>each <code>1</code> marks <strong>a building</strong> that you cannot pass through, and</li>\n\t<li>each <code>2</code> marks <strong>an obstacle</strong> that you cannot pass through.</li>\n</ul>\n\n<p>You want to build a house on an empty land that reaches all buildings in the <strong>shortest total travel</strong> distance. You can only move up, down, left, and right.</p>\n\n<p>Return <em>the <strong>shortest travel distance</strong> for such a house</em>. If it is not possible to build such a house according to the above rules, return <code>-1</code>.</p>\n\n<p>The <strong>total travel distance</strong> is the sum of the distances between the houses of the friends and the meeting point.</p>\n\n<p>The distance is calculated using <a href=\"http://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan Distance</a>, where <code>distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/buildings-grid.jpg\" style=\"width: 413px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).\nThe point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.\nSo return 7.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0]]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1]]\n<strong>Output:</strong> -1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 50</code></li>\n\t<li><code>grid[i][j]</code> is either <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n\t<li>There will be <strong>at least one</strong> building in the <code>grid</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Shortest Distance from All Buildings",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nWe are asked to build a house with the shortest total travel distance to all other houses. To do so, we must be able to find the shortest distance between two cells (one empty land and a house). This process will then be repeated for every pair of empty land and house.\nAs such, an intuitive first step is to record the location of all houses (1-valued cells) and empty land (0-valued cells) in separate vectors.\n\nThen, for each empty land, traverse all houses, and add the Manhattan Distance:  \n`distance = |x1 - x2| + |y1 - y2|`, where `(x1, y1)` are the coordinates of empty land and `(x2, y2)` are the coordinates of a house.\n\nBut the problem here is that we have some blocked cells.\nFor example, in the below configuration the formula does not give the correct distance between P1 and P2. This is because there are **obstacles between the two points**.\n\n![blocked paths](../Figures/317/Slide1.PNG)\n\n<br />\n\nSince obstacles preclude us from using the formula, we will instead perform a level-wise Breadth-First Search (BFS) for each cell, where each level is 1 distance further away from the starting cell (traversing 4-directionally). As we expand our Breadth-First Search, we will not visit any cell that is blocked or any cell that has already been visited.\n\n<br />\n\n_Why did we choose to use BFS?_\n\n> Our graph is not weighted. We can consider each edge to have the same weight of 1.\n> Since the graph is unweighted, BFS can be used to find the shortest path between a starting cell and any other reachable cell.\n\n> The actual distance calculation measures grid distance in terms of only horizontal and vertical movements. Since we can only move up, down, left, and right, we can apply BFS to calculate the actual distance.  At each iteration in the BFS, we will only consider expanding our search in the horizontal or vertical direction.\n\n</br>\n\n---\n\n#### Approach 1: BFS from Empty Land to All Houses\n\n**Intuition**\n\nOur goal is to find the empty land cell with the shortest total distance to all houses, so we must first find the shortest total distance to all houses from each empty land cell.\nAs previously mentioned, this can be accomplished using BFS. For each empty cell (cell value equals 0) in the grid, start a BFS and sum all the distances to houses (cell value equals 1) from this cell. We will also keep track of the number of houses we have reached from this source cell (empty cell).\nIf we cannot reach all the houses from the current empty cell, then it is not a valid empty cell. Furthermore, we can be certain that any cell visited during this BFS also cannot reach all of the houses. So we will mark all cells visited during this BFS as obstacles to ensure that we do not start another BFS from this region.\n\n**Algorithm**\n\n1. For each empty cell (`grid[i][j]` equals 0), start a BFS:\n    - In the BFS, traverse all 4-directionally adjacent cells that are not blocked or visited and keep track of the distance from the start cell. Each iteration adds 1 to the distance.\n    - Every time we reach a house, increment houses reached counter `housesReached` by 1, and increase the total distance `distanceSum` by the current distance (i.e., the distance from the start cell to the house).\n    - If `housesReached` equals `totalHouses`, then return the total distance. \n    - Otherwise, the starting cell (and every cell visited during this BFS) cannot reach all of the houses.  So set every visited empty land cell equal to 2 so that we do not start a new BFS from that cell and return `INT_MAX`.\n2. Each time a total distance is returned from a BFS call, update the minimum distance (`minDistance`).\n3. If it is possible to reach all houses from any empty land cell, then return the minimum distance found. Otherwise, return `-1`.\n\n!?!../Documents/317/317_shortest_distance_from_all_buildings_1.json:960,540!?!\n\n<br />\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/7vp2CQZG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"7vp2CQZG\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ and $$M$$ be the number of rows and columns in `grid` respectively.\n\n-   Time Complexity: $$O(N^2 \\cdot M^2)$$\n\n    For each empty land, we will traverse to all other houses.\n    This will require $$O($$number of zeros $$\\cdot$$ number of ones$$)$$ time and the number of zeros and ones in the matrix is of order $$N \\cdot M$$.\n    Consider that when half of the values in grid are 0 and half of the values are 1, the total elements in grid would be $$(M \\cdot N)$$ so their counts are $$(M \\cdot N)/2$$ and $$(M \\cdot N)/2$$ respectively, thus giving time complexity $$(M \\cdot N)/2 \\cdot (M \\cdot N)/2$$, that results in $$O(N^2 \\cdot M^2)$$.\n\n> In JavaScript implementation, for simplicity, we have used an array for the queue.\n> Since popping elements from the front of an array is an O(n) operation, which is undesirable,\n> instead of popping from the front of the `queue`, we will iterate over the `queue` and record cells to be explored in the next level in `next_queue`.\n> Once the current `queue` has been traversed, we simply set `queue` equal to the `next_queue`.\n\n-   Space Complexity: $$O(N \\cdot M)$$\n\n    We use an extra matrix to track the visited cells, and the queue will store each matrix element at most once during each BFS call.\n    Hence, $$O(N \\cdot M)$$ space is required.\n\n<br/>\n\n---\n\n#### Approach 2: BFS from Houses to Empty Land\n\n**Intuition**\n\nIn the previous approach, to get the minimum distance we started a BFS from each empty land (cell value equal to 0) to all the houses (cell value equal to 1), but another way to look at the problem is starting from a house and finding all reachable empty lands.\n\nIf we can reach a house from an empty land, then we can also traverse the other way (i.e., reach empty land from a house).\n\nWhen there are fewer houses than empty lands, then this approach will require less time than the previous approach and vice versa. While, on average, this approach is not an improvement on the previous approach, it will serve as a mental stepping stone to better understand the third approach.\n\nPreviously, we were calculating the total minimum distance sum of one empty cell in one BFS traversal, hence we were only returning the distance sum from the BFS function for each cell.\nBut if we start BFS from a house instead of an empty cell, we will be generating partial distance (i.e., distance from only one house to the current cell and not the sum distance from all the houses to this empty cell), hence we need some extra space to store the sum of the partial distances from each house cell.\n\n\nWe will need to store 2 values at each cell position of empty cells: total distance sum from all houses to this empty land and number of houses that can reach this empty land.\n\n**Algorithm**\n\n1. For each house cell (`grid[i][j]` equals 1), start a BFS:\n    - For each empty cell we reach, increase the cell's sum of distances by the steps taken to reach the cell.\n    - For each empty cell we reach, also increment the cell's house counter by 1.\n2. After traversing all houses, get the minimum distance from all empty cells which have `housesReached` equal to `totalHouses`.\n3. If it is possible for all houses to reach a specific empty land cell, then return the minimum distance found. Otherwise, return `-1`.\n\n!?!../Documents/317/317_shortest_distance_from_all_buildings_2.json:960,540!?!\n\n<br />\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/WiyYyAEi/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"WiyYyAEi\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ and $$M$$ be the number of rows and columns in `grid` respectively.\n\n-   Time Complexity: $$O(N^2 \\cdot M^2)$$\n\n    For each house, we will traverse across all reachable land.\n    This will require $$O($$number of zeros $$\\cdot$$ number of ones$$)$$ time and the number of zeros and ones in the matrix is of order $$N \\cdot M$$.\n    Consider that when half of the values in grid are 0 and half of the values are 1, total elements in grid will be $$(M \\cdot N)$$ so their counts are $$(M \\cdot N)/2$$ and $$(M \\cdot N)/2$$ respectively, thus giving time complexity $$(M \\cdot N)/2 \\cdot (M \\cdot N)/2$$, which results in $$O(N^2 \\cdot M^2)$$.\n\n> In JavaScript implementation, for simplicity, we have used an array for the queue.\n> However, popping elements from the front of an array is an O(n) operation, which is undesirable.\n> So, instead of popping from the front of the `queue`, we will iterate over the `queue` and record cells to be explored in the next level in `next_queue`.\n> Once the current `queue` has been traversed, we simply set `queue` equal to the `next_queue`.\n\n-   Space Complexity: $$O(N \\cdot M)$$\n\n    We use an extra matrix to track the visited cells and another one to store distance sum along with the house counter for each empty cell, and the queue will store each matrix element at most once during each BFS call.\n    Hence, $$O(N \\cdot M)$$ space is required.\n\n<br/>\n\n---\n\n#### Approach 3: BFS from Houses to Empty Land (Optimized)\n\n**Intuition**\n\nInstead of making a new matrix each time to track the visited cells, we can use the input grid matrix for this purpose.\nDuring the first BFS we can change the visited empty land values from `0` to `-1`. Then during the next BFS we will only visit empty lands with a value of `-1`s (meaning they can reach the first house), then change `-1` to `-2` and then perform the next BFS only on `-2`s, and so on...\n\nThis approach allows us to avoid visiting any cell that cannot reach all houses.\n\n_Can we also use this decrement in empty land value to denote that the cell has been visited?_\n\n> Imagine we are currently at cell `(2, 3)` with value `-1` and we change its value to `-2`.  \n> In the queue the next element is `(2, 4)`, its value is also `-1` and we change its value to `-2`. While exploring paths from `(2, 4)`, we see that the cell `(2, 3)` is adjacent, and has the value `-2`. However, currently, we are checking for `-1` valued cells only. Hence, `(2, 3)` will not be inserted again in the queue, so this decrease in value can be used as a visited cell check because when a cell has been visited, then its value will be 1 less and it will not satisfy the condition to be inserted in the queue.\n\nIf there was an empty land cell that was not reachable in the previous iteration, then its value has not been decreased, hence we will not insert that cell in the queue when we start a BFS from another house cell.  \nTherefore, this approach prunes many iterations and saves some time since we are not creating a new matrix to track visited cells for each BFS call.\n\n!?!../Documents/317/317_shortest_distance_from_all_buildings_3.json:960,540!?!\n\n<br />\n\n**Algorithm**\n\n1. For each `grid[i][j]` that is equal to 1, start a BFS. During the BFS:\n    - All 4-directionally adjacent grid cells with values equal to `emptyLandValue` are valid.\n    - Visit them one by one and store the distances of these cells from the source in a `total` matrix.\n    - Decrease the value of visited cells by 1.\n2. After each BFS traversal, decrement `emptyLandValue` by 1.\n3. Before we start a BFS call for a house, we set `minDist` equal to `INT_MAX`.\n4. Then we will traverse all of the empty land cells with values equal to `emptyLandValue`\n5. After the last BFS traversal, if the minimum distance equals `INT_MAX`, then there has not been any cell that can be reached by all the houses, so return `-1`.\n6. Otherwise, return the minimum distance `minDist`.\n\n!?!../Documents/317/317_shortest_distance_from_all_buildings_4.json:960,540!?!\n\n<br />\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/W2Qv2gQr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"W2Qv2gQr\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ and $$M$$ be the number of rows and columns in `grid` respectively.\n\n-   Time Complexity: $$O(N^2 \\cdot M^2)$$\n\n    For each house, we will traverse across all reachable land.\n    This will require $$O($$number of zeros $$\\cdot$$ number of ones$$)$$ time and the number of zeros and ones in the matrix is of order $$N \\cdot M$$.\n    Consider that when half of the values in grid are 0 and half of the values are 1, total elements in grid would be $$(M \\cdot N)$$ so their counts are $$(M \\cdot N)/2$$ and $$(M \\cdot N)/2$$ respectively, thus giving time complexity $$(M \\cdot N)/2 \\cdot (M \\cdot N)/2$$, that results in $$O(N^2 \\cdot M^2)$$.\n\n-   Space Complexity: $$O(N \\cdot M)$$\n\n    We use an extra matrix to store distance sums, and the queue will store each matrix element at most once during each BFS call.\n    Hence, $$O(N \\cdot M)$$ space is required.\n\n<br/>\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "shortest-distance-from-all-buildings",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 5,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "291",
                "title": "Diameter of Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "543",
                    "questionFrontendId": "543",
                    "sessionId": "968792",
                    "questionTitle": "Diameter of Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/diameter-of-binary-tree/submit/",
                    "interpretUrl": "/problems/diameter-of-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int diameterOfBinaryTree(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public int diameterOfBinaryTree(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def diameterOfBinaryTree(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nint diameterOfBinaryTree(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public int DiameterOfBinaryTree(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number}\\n */\\nvar diameterOfBinaryTree = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer}\\ndef diameter_of_binary_tree(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func diameterOfBinaryTree(_ root: TreeNode?) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc diameterOfBinaryTree(root *TreeNode) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def diameterOfBinaryTree(root: TreeNode): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun diameterOfBinaryTree(root: TreeNode?): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn diameter_of_binary_tree(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer\\n     */\\n    function diameterOfBinaryTree($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction diameterOfBinaryTree(root: TreeNode | null): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (diameter-of-binary-tree root)\\n  (-> (or/c tree-node? #f) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec diameter_of_binary_tree(Root :: #tree_node{} | null) -> integer().\\ndiameter_of_binary_tree(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec diameter_of_binary_tree(root :: TreeNode.t | nil) :: integer\\n  def diameter_of_binary_tree(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"diameterOfBinaryTree\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the length of the <strong>diameter</strong> of the tree</em>.</p>\n\n<p>The <strong>diameter</strong> of a binary tree is the <strong>length</strong> of the longest path between any two nodes in a tree. This path may or may not pass through the <code>root</code>.</p>\n\n<p>The <strong>length</strong> of a path between two nodes is represented by the number of edges between them.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg\" style=\"width: 292px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Diameter of Binary Tree",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n\r\n---\r\n\r\n#### Approach 1: Depth-first Search\r\n\r\n**Intuition**\r\n\r\nThe key observation to make is: _the longest path has to be between two leaf nodes_. We can prove this with contradiction. Imagine that we have found the longest path, and it is **not** between two leaf nodes. We can extend that path by 1, by adding the child node of one of the end nodes (as at least one must have a child, given that they aren't both leaves). This contradicts the fact that our path is the longest path. Therefore, the longest path must be between two leaf nodes.\r\n\r\nMoreover, we know that in a tree, nodes are only connected with their parent node and 2 children. Therefore we know that the longest path in the tree would consist of a node, its longest left branch, and its longest right branch. So, our algorithm to solve this problem will find the node where the sum of its longest left and right branches is maximized. This would hint at us to apply Depth-first search (DFS) to count each node's branch lengths, because it would allow us to dive deep into the leaves first, and then start counting the edges upwards.\r\n\r\n\r\n> DFS is a widely-used graph traversal algorithm. If you are not familiar with it, feel free to visit our [Explore Cards](https://leetcode.com/explore/learn/card/data-structure-tree/) where you will see different ways to traverse a binary tree with DFS including preorder, inorder, postorder :)\r\n\r\n\r\nLet's try to be more specific about how to apply DFS to this question. To count the lengths of each node's left and right branches, we can implement a recursion function `longestPath` which takes a `TreeNode` as input and returns the longest path from it to the leaf node. It will recursively visit children nodes and retrieve the longest paths from them to the leaf first, and then add `1` to the longer one before returning it as the longest path.\r\n\r\n\r\nIn the midst of DFS, we also need to take the following two cases into account:\r\n\r\n1. the current node's both left and right branches might be a part of the longest path;\r\n2. one of the current node's left/right branches might be a part of the longest path.\r\n\r\n![Two cases of the longest path.](../Figures/543/543.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Two cases of the longest path.*\r\n{:align=\"center\"}\r\n\r\n\r\nYou will see we are going to address them by 1) applying DFS to recursively find the longest branches starting with the node's left and right children; 2) initializing a global variable `diameter` to keep track of the longest path and updating it at each node with the sum of the node's left and right branches; 3) returning the length of the longest branch between a node's left and right branches.\r\n\r\n\r\n**Algorithm**\r\n\r\n- Initalize an integer variable `diameter` to keep track of the longest path we find from the DFS.\r\n- Implement a recursive function `longestPath` which takes a `TreeNode` as input. It should recursively explore the entire tree rooted at the given node. Once it's finished, it should return the longest path out of its left and right branches:\r\n  - if `node` is `None`, we have reached the end of the tree, hence we should return `0`;\r\n  - we want to recursively explore `node`'s children, so we call `longestPath` again with `node`'s left and right children. In return, we get the longest path of its left and right children `leftPath` and `rightPath`;\r\n  - if `leftPath` plus `rightPath` is longer than the current longest diameter found, then we need to update `diameter`;\r\n  - finally, we return the longer one of `leftPath` and `rightPath`. Remember to add $$1$$ as the edge connecting it with its parent.\r\n-  Call `longestPath` with `root`.\r\n\r\n\r\n\r\n<iframe src=\"https://leetcode.com/playground/btjsoAGc/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"btjsoAGc\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the number of nodes in the tree.\r\n\r\n* Time complexity: $$O(N)$$. This is because in our recursion function `longestPath`, we only enter and exit from each node once. We know this because each node is entered from its parent, and in a tree, nodes only have one parent.\r\n\r\n\r\n* Space complexity: $$O(N)$$. The space complexity depends on the size of our implicit call stack during our DFS, which relates to the height of the tree. In the worst case, the tree is skewed so the height of the tree is $$O(N)$$. If the tree is balanced, it'd be $$O(\\log N)$$.\r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "diameter-of-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.821,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3027",
                "title": "Accounts Merge",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "721",
                    "questionFrontendId": "721",
                    "sessionId": "968792",
                    "questionTitle": "Accounts Merge",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/accounts-merge/submit/",
                    "interpretUrl": "/problems/accounts-merge/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def accountsMerge(self, accounts):\\n        \\\"\\\"\\\"\\n        :type accounts: List[List[str]]\\n        :rtype: List[List[str]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nchar *** accountsMerge(char *** accounts, int accountsSize, int* accountsColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<string>> AccountsMerge(IList<IList<string>> accounts) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[][]} accounts\\n * @return {string[][]}\\n */\\nvar accountsMerge = function(accounts) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[][]} accounts\\n# @return {String[][]}\\ndef accounts_merge(accounts)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func accountsMerge(_ accounts: [[String]]) -> [[String]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func accountsMerge(accounts [][]string) [][]string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def accountsMerge(accounts: List[List[String]]): List[List[String]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun accountsMerge(accounts: List<List<String>>): List<List<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn accounts_merge(accounts: Vec<Vec<String>>) -> Vec<Vec<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $accounts\\n     * @return String[][]\\n     */\\n    function accountsMerge($accounts) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function accountsMerge(accounts: string[][]): string[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (accounts-merge accounts)\\n  (-> (listof (listof string?)) (listof (listof string?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec accounts_merge(Accounts :: [[unicode:unicode_binary()]]) -> [[unicode:unicode_binary()]].\\naccounts_merge(Accounts) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec accounts_merge(accounts :: [[String.t]]) :: [[String.t]]\\n  def accounts_merge(accounts) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"accountsMerge\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"accounts\",\r\n      \"type\": \"list<list<string>>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a list of <code>accounts</code> where each element <code>accounts[i]</code> is a list of strings, where the first element <code>accounts[i][0]</code> is a name, and the rest of the elements are <strong>emails</strong> representing emails of the account.</p>\n\n<p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p>\n\n<p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails <strong>in sorted order</strong>. The accounts themselves can be returned in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[&quot;John&quot;,&quot;johnsmith@mail.com&quot;,&quot;john_newyork@mail.com&quot;],[&quot;John&quot;,&quot;johnsmith@mail.com&quot;,&quot;john00@mail.com&quot;],[&quot;Mary&quot;,&quot;mary@mail.com&quot;],[&quot;John&quot;,&quot;johnnybravo@mail.com&quot;]]\n<strong>Output:</strong> [[&quot;John&quot;,&quot;john00@mail.com&quot;,&quot;john_newyork@mail.com&quot;,&quot;johnsmith@mail.com&quot;],[&quot;Mary&quot;,&quot;mary@mail.com&quot;],[&quot;John&quot;,&quot;johnnybravo@mail.com&quot;]]\n<strong>Explanation:</strong>\nThe first and third John&#39;s are the same person as they have the common email &quot;johnsmith@mail.com&quot;.\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [[&#39;Mary&#39;, &#39;mary@mail.com&#39;], [&#39;John&#39;, &#39;johnnybravo@mail.com&#39;], \n[&#39;John&#39;, &#39;john00@mail.com&#39;, &#39;john_newyork@mail.com&#39;, &#39;johnsmith@mail.com&#39;]] would still be accepted.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> accounts = [[&quot;Gabe&quot;,&quot;Gabe0@m.co&quot;,&quot;Gabe3@m.co&quot;,&quot;Gabe1@m.co&quot;],[&quot;Kevin&quot;,&quot;Kevin3@m.co&quot;,&quot;Kevin5@m.co&quot;,&quot;Kevin0@m.co&quot;],[&quot;Ethan&quot;,&quot;Ethan5@m.co&quot;,&quot;Ethan4@m.co&quot;,&quot;Ethan0@m.co&quot;],[&quot;Hanzo&quot;,&quot;Hanzo3@m.co&quot;,&quot;Hanzo1@m.co&quot;,&quot;Hanzo0@m.co&quot;],[&quot;Fern&quot;,&quot;Fern5@m.co&quot;,&quot;Fern1@m.co&quot;,&quot;Fern0@m.co&quot;]]\n<strong>Output:</strong> [[&quot;Ethan&quot;,&quot;Ethan0@m.co&quot;,&quot;Ethan4@m.co&quot;,&quot;Ethan5@m.co&quot;],[&quot;Gabe&quot;,&quot;Gabe0@m.co&quot;,&quot;Gabe1@m.co&quot;,&quot;Gabe3@m.co&quot;],[&quot;Hanzo&quot;,&quot;Hanzo0@m.co&quot;,&quot;Hanzo1@m.co&quot;,&quot;Hanzo3@m.co&quot;],[&quot;Kevin&quot;,&quot;Kevin0@m.co&quot;,&quot;Kevin3@m.co&quot;,&quot;Kevin5@m.co&quot;],[&quot;Fern&quot;,&quot;Fern0@m.co&quot;,&quot;Fern1@m.co&quot;,&quot;Fern5@m.co&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= accounts.length &lt;= 1000</code></li>\n\t<li><code>2 &lt;= accounts[i].length &lt;= 10</code></li>\n\t<li><code>1 &lt;= accounts[i][j] &lt;= 30</code></li>\n\t<li><code>accounts[i][0]</code> consists of English letters.</li>\n\t<li><code>accounts[i][j] (for j &gt; 0)</code> is a valid email.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph."
                    ],
                    "solution": {
                        "title": "Accounts Merge",
                        "content": "[TOC]\n\n\n#### Approach #1: Depth-First Search [Accepted]\n\n**Intuition**\n\nDraw an edge between two emails if they occur in the same account.  The problem comes down to finding connected components of this graph.\n\n**Algorithm**\n\nFor each account, draw the edge from the first email to all other emails.  Additionally, we'll remember a map from emails to names on the side.  After finding each connected component using a depth-first search, we'll add that to our answer.\n\n**Python**\n```python\nclass Solution(object):\n    def accountsMerge(self, accounts):\n        em_to_name = {}\n        graph = collections.defaultdict(set)\n        for acc in accounts:\n            name = acc[0]\n            for email in acc[1:]:\n                graph[acc[1]].add(email)\n                graph[email].add(acc[1])\n                em_to_name[email] = name\n\n        seen = set()\n        ans = []\n        for email in graph:\n            if email not in seen:\n                seen.add(email)\n                stack = [email]\n                component = []\n                while stack:\n                    node = stack.pop()\n                    component.append(node)\n                    for nei in graph[node]:\n                        if nei not in seen:\n                            seen.add(nei)\n                            stack.append(nei)\n                ans.append([em_to_name[email]] + sorted(component))\n        return ans\n```\n\n**Java**\n```java\nclass Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        Map<String, String> emailToName = new HashMap();\n        Map<String, ArrayList<String>> graph = new HashMap();\n        for (List<String> account: accounts) {\n            String name = \"\";\n            for (String email: account) {\n                if (name == \"\") {\n                    name = email;\n                    continue;\n                }\n                graph.computeIfAbsent(email, x-> new ArrayList<String>()).add(account.get(1));\n                graph.computeIfAbsent(account.get(1), x-> new ArrayList<String>()).add(email);\n                emailToName.put(email, name);\n            }\n        }\n\n        Set<String> seen = new HashSet();\n        List<List<String>> ans = new ArrayList();\n        for (String email: graph.keySet()) {\n            if (!seen.contains(email)) {\n                seen.add(email);\n                Stack<String> stack = new Stack();\n                stack.push(email);\n                List<String> component = new ArrayList();\n                while (!stack.empty()) {\n                    String node = stack.pop();\n                    component.add(node);\n                    for (String nei: graph.get(node)) {\n                        if (!seen.contains(nei)) {\n                            seen.add(nei);\n                            stack.push(nei);\n                        }\n                    }\n                }\n                Collections.sort(component);\n                component.add(0, emailToName.get(email));\n                ans.add(component);\n            }\n        }\n        return ans;\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(\\sum a_i \\log a_i)$$, where $$a_i$$ is the length of `accounts[i]`.  Without the log factor, this is the complexity to build the graph and search for each component.  The log factor is for sorting each component at the end.\n\n* Space Complexity: $$O(\\sum a_i)$$, the space used by our graph and our search.\n\n---\n#### Approach #2: Union-Find [Accepted]\n\n**Intuition**\n\nAs in *Approach #1*, our problem comes down to finding the connected components of a graph.  This is a natural fit for a *Disjoint Set Union* (DSU) structure.\n\n**Algorithm**\n\nAs in *Approach #1*, draw edges between emails if they occur in the same account.  For easier interoperability between our DSU template, we will map each email to some integer index by using `emailToID`.  Then, `dsu.find(email)` will tell us a unique id representing what component that email is in.\n\nFor more information on DSU, please look at *Approach #2* in the [article here](https://leetcode.com/articles/redundant-connection/).  For brevity, the solutions showcased below do not use *union-by-rank*.\n\n**Python**\n```python\nclass DSU:\n    def __init__(self):\n        self.p = range(10001)\n    def find(self, x):\n        if self.p[x] != x:\n            self.p[x] = self.find(self.p[x])\n        return self.p[x]\n    def union(self, x, y):\n        self.p[self.find(x)] = self.find(y)\n\nclass Solution(object):\n    def accountsMerge(self, accounts):\n        dsu = DSU()\n        em_to_name = {}\n        em_to_id = {}\n        i = 0\n        for acc in accounts:\n            name = acc[0]\n            for email in acc[1:]:\n                em_to_name[email] = name\n                if email not in em_to_id:\n                    em_to_id[email] = i\n                    i += 1\n                dsu.union(em_to_id[acc[1]], em_to_id[email])\n\n        ans = collections.defaultdict(list)\n        for email in em_to_name:\n            ans[dsu.find(em_to_id[email])].append(email)\n\n        return [[em_to_name[v[0]]] + sorted(v) for v in ans.values()]\n```\n\n**Java**\n```java\nclass Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        DSU dsu = new DSU();\n        Map<String, String> emailToName = new HashMap();\n        Map<String, Integer> emailToID = new HashMap();\n        int id = 0;\n        for (List<String> account: accounts) {\n            String name = \"\";\n            for (String email: account) {\n                if (name == \"\") {\n                    name = email;\n                    continue;\n                }\n                emailToName.put(email, name);\n                if (!emailToID.containsKey(email)) {\n                    emailToID.put(email, id++);\n                }\n                dsu.union(emailToID.get(account.get(1)), emailToID.get(email));\n            }\n        }\n\n        Map<Integer, List<String>> ans = new HashMap();\n        for (String email: emailToName.keySet()) {\n            int index = dsu.find(emailToID.get(email));\n            ans.computeIfAbsent(index, x-> new ArrayList()).add(email);\n        }\n        for (List<String> component: ans.values()) {\n            Collections.sort(component);\n            component.add(0, emailToName.get(component.get(0)));\n        }\n        return new ArrayList(ans.values());\n    }\n}\nclass DSU {\n    int[] parent;\n    public DSU() {\n        parent = new int[10001];\n        for (int i = 0; i <= 10000; ++i)\n            parent[i] = i;\n    }\n    public int find(int x) {\n        if (parent[x] != x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n    public void union(int x, int y) {\n        parent[find(x)] = find(y);\n    }\n}\n```\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(A \\log A)$$, where $$A = \\sum a_i$$, and $$a_i$$ is the length of `accounts[i]`.  If we used union-by-rank, this complexity improves to $$O(A \\alpha(A)) \\approx O(A)$$, where $$\\alpha$$ is the *Inverse-Ackermann* function.\n\n* Space Complexity: $$O(A)$$, the space used by our DSU structure.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "accounts-merge",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.182,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "544",
                "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "758",
                    "questionFrontendId": "426",
                    "sessionId": "968792",
                    "questionTitle": "Convert Binary Search Tree to Sorted Doubly Linked List",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/submit/",
                    "interpretUrl": "/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* left;\\n    Node* right;\\n\\n    Node() {}\\n\\n    Node(int _val) {\\n        val = _val;\\n        left = NULL;\\n        right = NULL;\\n    }\\n\\n    Node(int _val, Node* _left, Node* _right) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* treeToDoublyList(Node* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n\\n    public Node() {}\\n\\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val,Node _left,Node _right) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n    }\\n};\\n*/\\n\\nclass Solution {\\n    public Node treeToDoublyList(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def treeToDoublyList(self, root):\\n        \\\"\\\"\\\"\\n        :type root: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, val, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def treeToDoublyList(self, root: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nstruct Node {\\n    int val;\\n    struct Node* left;\\n    struct Node* right;\\n};\\n*/\\n\\nstruct Node* treeToDoublyList(struct Node *root) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n\\n    public Node() {}\\n\\n    public Node(int _val) {\\n        val = _val;\\n        left = null;\\n        right = null;\\n    }\\n\\n    public Node(int _val,Node _left,Node _right) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node TreeToDoublyList(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, left, right) {\\n *      this.val = val;\\n *      this.left = left;\\n *      this.right = right;\\n *  };\\n */\\n\\n/**\\n * @param {Node} root\\n * @return {Node}\\n */\\nvar treeToDoublyList = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a Node.\\n# class Node\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val=0)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {Node} root\\n# @return {Node}\\ndef treeToDoublyList(root)\\n\\t\\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var left: Node?\\n *     public var right: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func treeToDoublyList(_ root: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Left *Node\\n *     Right *Node\\n * }\\n */\\n\\nfunc treeToDoublyList(root *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: Node = null\\n *   var right: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def treeToDoublyList(root: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var left: Node? = null\\n *     var right: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun treeToDoublyList(root:Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->left = null;\\n *         $this->right = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $root\\n     * @return Node\\n     */\\n    function treeToDoublyList($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class Node {\\n *     val: number\\n *     left: Node | null\\n *     right: Node | null\\n *     constructor(val?: number, left?: Node | null, right?: Node | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction treeToDoublyList(root: Node | null): Node | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[4,2,5,1,3]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"treeToDoublyList\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"ListNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"kotlin\",\n    \"ruby\",\n    \"scala\",\n    \"c\",\n    \"golang\",\n    \"swift\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Convert a <strong>Binary Search Tree</strong> to a sorted <strong>Circular Doubly-Linked List</strong> in place.</p>\n\n<p>You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.</p>\n\n<p>We want to do the transformation <strong>in place</strong>. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdlloriginalbst.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>Input:</strong> root = [4,2,5,1,3]\n\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturndll.png\" style=\"width: 100%; max-width: 450px;\" />\n<strong>Output:</strong> [1,2,3,4,5]\n\n<strong>Explanation:</strong> The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.\n<img src=\"https://assets.leetcode.com/uploads/2018/10/12/bstdllreturnbst.png\" style=\"width: 100%; max-width: 450px;\" />\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [1,2,3]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> Input is an empty tree. Output is also an empty Linked List.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n\t<li>All the values of the tree are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Convert Binary Search Tree to Sorted Doubly Linked List",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### How to traverse the tree\n\nThere are two general strategies to traverse a tree:\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n    \nOn the following figure the nodes are numerated in the order you visit them,\nplease follow `1-2-3-4-5` to compare different strategies.\n\n![postorder](../Figures/426/dfs_bfs.png)\n\nHere the problem is to implement DFS inorder traversal\nin a textbook recursion way because of in-place\nrequirement.\n<br /> \n<br />\n\n\n---\n#### Approach 1: Recursion\n\n**Algorithm**\n\nStandard inorder recursion follows `left -> node -> right` order,\nwhere `left` and `right` parts are the recursion calls and\n`node` part is where all processing is done.\n\nProcessing here is basically to link the previous node with the \ncurrent one, and because of that one has to track the last node\nwhich is the largest node in a new doubly linked list so far. \n\n![postorder](../Figures/426/process.png)\n\nOne more detail : one has to keep the first, or the smallest, node \nas well to close the ring of doubly linked list.\n\nHere is the algorithm :\n\n- Initiate the `first` and the `last` nodes as nulls.\n\n- Call the standard inorder recursion `helper(root)` :\n\n    - If node is not null :\n        \n        - Call the recursion for the left subtree `helper(node.left)`.\n        \n        - If the `last` node is not null, link the `last` and \n        the current `node` nodes.\n        \n        - Else initiate the `first` node.\n        \n        - Mark the current node as the last one : `last = node`.\n        \n        - Call the recursion for the right subtree `helper(node.right)`.\n\n- Link the first and the last nodes to close DLL ring and then \nreturn the `first` node.\n\n**Implementation**\n\n!?!../Documents/426_LIS.json:1000,519!?!\n\n<iframe src=\"https://leetcode.com/playground/JkKMRo5x/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JkKMRo5x\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is processed\nexactly once.\n \n* Space complexity : $$\\mathcal{O}(N)$$. We have to keep a \nrecursion stack of the size of the tree height, which is \n$$\\mathcal{O}(\\log N)$$ for the best case of completely balanced tree\nand $$\\mathcal{O}(N)$$ for the worst case of completely\nunbalanced tree.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "convert-binary-search-tree-to-sorted-doubly-linked-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.458,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3028",
                "title": "Is Graph Bipartite?",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "801",
                    "questionFrontendId": "785",
                    "sessionId": "968792",
                    "questionTitle": "Is Graph Bipartite?",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/is-graph-bipartite/submit/",
                    "interpretUrl": "/problems/is-graph-bipartite/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isBipartite(vector<vector<int>>& graph) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isBipartite(int[][] graph) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isBipartite(self, graph):\\n        \\\"\\\"\\\"\\n        :type graph: List[List[int]]\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isBipartite(self, graph: List[List[int]]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isBipartite(int** graph, int graphSize, int* graphColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsBipartite(int[][] graph) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} graph\\n * @return {boolean}\\n */\\nvar isBipartite = function(graph) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} graph\\n# @return {Boolean}\\ndef is_bipartite(graph)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isBipartite(_ graph: [[Int]]) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isBipartite(graph [][]int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isBipartite(graph: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isBipartite(graph: Array<IntArray>): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_bipartite(graph: Vec<Vec<i32>>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $graph\\n     * @return Boolean\\n     */\\n    function isBipartite($graph) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isBipartite(graph: number[][]): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-bipartite graph)\\n  (-> (listof (listof exact-integer?)) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_bipartite(Graph :: [[integer()]]) -> boolean().\\nis_bipartite(Graph) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_bipartite(graph :: [[integer]]) :: boolean\\n  def is_bipartite(graph) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,2,3],[0,2],[0,1,3],[0,2]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isBipartite\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"graph\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is an <strong>undirected</strong> graph with <code>n</code> nodes, where each node is numbered between <code>0</code> and <code>n - 1</code>. You are given a 2D array <code>graph</code>, where <code>graph[u]</code> is an array of nodes that node <code>u</code> is adjacent to. More formally, for each <code>v</code> in <code>graph[u]</code>, there is an undirected edge between node <code>u</code> and node <code>v</code>. The graph has the following properties:</p>\n\n<ul>\n\t<li>There are no self-edges (<code>graph[u]</code> does not contain <code>u</code>).</li>\n\t<li>There are no parallel edges (<code>graph[u]</code> does not contain duplicate values).</li>\n\t<li>If <code>v</code> is in <code>graph[u]</code>, then <code>u</code> is in <code>graph[v]</code> (the graph is undirected).</li>\n\t<li>The graph may not be connected, meaning there may be two nodes <code>u</code> and <code>v</code> such that there is no path between them.</li>\n</ul>\n\n<p>A graph is <strong>bipartite</strong> if the nodes can be partitioned into two independent sets <code>A</code> and <code>B</code> such that <strong>every</strong> edge in the graph connects a node in set <code>A</code> and a node in set <code>B</code>.</p>\n\n<p>Return <code>true</code><em> if and only if it is <strong>bipartite</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg\" style=\"width: 222px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,3],[0,2],[1,3],[0,2]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We can partition the nodes into two sets: {0, 2} and {1, 3}.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>graph.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= graph[u].length &lt; n</code></li>\n\t<li><code>0 &lt;= graph[u][i] &lt;= n - 1</code></li>\n\t<li><code>graph[u]</code>&nbsp;does not contain&nbsp;<code>u</code>.</li>\n\t<li>All the values of <code>graph[u]</code> are <strong>unique</strong>.</li>\n\t<li>If <code>graph[u]</code> contains <code>v</code>, then <code>graph[v]</code> contains <code>u</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Is Graph Bipartite",
                        "content": "[TOC]\n\n---\n#### Approach #1: Coloring by Depth-First Search [Accepted]\n\n**Intuition**\n\nColor a node blue if it is part of the first set, else red.  We should be able to greedily color the graph if and only if it is bipartite: one node being blue implies all it's neighbors are red, all those neighbors are blue, and so on.\n\n<br />\n<center>\n    <img src=\"../Figures/785/color.png\" alt=\"Diagram of coloring neighbors of nodes\" width=\"350\"/>\n</center>\n<br />\n\n**Algorithm**\n\nWe'll keep an array (or hashmap) to lookup the color of each node: `color[node]`.  The colors could be `0`, `1`, or uncolored (`-1` or `null`).\n\nWe should be careful to consider disconnected components of the graph, by searching each node.  For each uncolored node, we'll start the coloring process by doing a depth-first-search on that node.  Every neighbor gets colored the opposite color from the current node.  If we find a neighbor colored the same color as the current node, then our coloring was impossible.\n\nTo perform the depth-first search, we use a `stack`.  For each uncolored neighbor in `graph[node]`, we'll color it and add it to our `stack`, which acts as a sort of \"todo list\" of nodes to visit next.  Our larger loop `for start...` ensures that we color every node. Here is a visual dry-run of the algorithm whose Python code is below.\n\n<div>\n    <center>\n        <video controls preload=\"none\" width=\"100%\" poster=\"../Figures/785/RunningExample.png\">\n        <source src=\"../Figures/785/RunningExample.mp4\" type=\"video/mp4\">\n        </video>\n    </center>\n</div>\n\n<iframe src=\"https://leetcode.com/playground/XCyasS4z/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XCyasS4z\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N + E)$$, where $$N$$ is the number of nodes in the graph, and $$E$$ is the number of edges.  We explore each node once when we transform it from uncolored to colored, traversing all its edges in the process.\n\n* Space Complexity:  $$O(N)$$, the space used to store the `color`.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "is-graph-bipartite",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.507,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "298",
                "title": "Binary Tree Vertical Order Traversal",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 52,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "314",
                    "questionFrontendId": "314",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Vertical Order Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-vertical-order-traversal/submit/",
                    "interpretUrl": "/problems/binary-tree-vertical-order-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> verticalOrder(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> verticalOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def verticalOrder(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** verticalOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<IList<int>> VerticalOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar verticalOrder = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[][]}\\ndef vertical_order(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func verticalOrder(_ root: TreeNode?) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc verticalOrder(root *TreeNode) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def verticalOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun verticalOrder(root: TreeNode?): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn vertical_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[][]\\n     */\\n    function verticalOrder($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction verticalOrder(root: TreeNode | null): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (vertical-order root)\\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec vertical_order(Root :: #tree_node{} | null) -> [[integer()]].\\nvertical_order(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec vertical_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def vertical_order(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,null,null,15,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"verticalOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em><strong>the vertical order traversal</strong> of its nodes&#39; values</em>. (i.e., from top to bottom, column by column).</p>\n\n<p>If two nodes are in the same row and column, the order should be from <strong>left to right</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/vtree1.jpg\" style=\"width: 282px; height: 301px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[9],[3,15],[20],[7]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/vtree2-1.jpg\" style=\"width: 462px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,8,4,0,1,7]\n<strong>Output:</strong> [[4],[9],[3,0,1],[8],[7]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/28/vtree2.jpg\" style=\"width: 462px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,8,4,0,1,7,null,null,null,2,5]\n<strong>Output:</strong> [[4],[9,5],[3,0,1],[8,2],[7]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Vertical Order Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\nThis is yet another problem about Binary Tree traversals. As one would probably know, the common strategies to traverse a _Tree_ data structure are **_Breadth-First Search_** (_a.k.a_ BFS) and **_Depth-First Search_** (_a.k.a._ DFS).\n\nThe DFS strategy can be further distinguished as _preorder DFS_, _inorder DFS_ and _postorder DFS_, depending on the relative order of visit among the node itself and its child nodes.\n\nIf one is not familiar with the concepts of BFS and DFS, one can find the corresponding problems on LeetCode to practice with. Also, we have an Explore card called [Queue & Stack](https://leetcode.com/explore/learn/card/queue-stack/) where we cover both [the BFS traversal](https://leetcode.com/explore/learn/card/queue-stack/231/practical-application-queue/) as well as [the DFS traversal](https://leetcode.com/explore/learn/card/queue-stack/232/practical-application-stack/).\nHence, in this article, we won't repeat ourselves on these concepts.\n\nIn the problem description, we are asked to return the **_vertical_** order of a binary tree, which actually implies two sub-orders, where each node would have a 2-dimensional index (denoted as `<column, row>`) \n\n![tree in 2D coordinates](../Figures/314/314_coordinates.png)\n\n- **column-wise order**\n    <br/>\n\n    If we look at a binary tree _horizontally_, each node can be aligned to a specific `column`, based on its relative _offset_ to the root node of the tree.\n    <br/>\n\n    Let us assume that the root node has a column index of `0`, then its left child node would have a column index of `-1` and its right child node would have a column index of `+1`, and so on.\n    <br/>\n\n- **row-wise order**\n    <br>\n    Now if we put the nodes into a *vertical* dimension, each node would be assigned to a specific `row`, based on its _level_ (_i.e._ the vertical distance to the root node).\n    <br/>\n\n    Let us assume that the root node has a row index of `0`, then both its child nodes would have the row index of `1`.\n\n>Given the above definitions, we can now formulate the problem as a task to order the nodes based on the 2-dimensional coordinates that we defined above.\n\nMore specifically, the nodes should be ordered by `column` first, and further the nodes on the same column should be ordered _**vertically**_ based on their `row` indices.\n<br/>\n<br/>\n\n---\n#### Approach 1: Breadth-First Search (BFS)\n\n**Intuition**\n\nWith the formulation of the problem in the overview section, one of the most intuitive solutions to tackle the problem would be applying the BFS traversal, where the nodes would be visited _level by level_.\n\nWith the BFS traversal, we naturally can guarantee the vertical order of the visits, _i.e._ the nodes at _higher_ levels (large `row` values) would get visited later than the ones at lower levels.\n\nHowever, we are still missing the horizontal order ( the `column` order). To ensure this order, we need to do some additional processing during the BFS traversal.\n\n>The idea is that we keep a hash table (let's denote it as `columnTable<key, value>`), where we keep the node values grouped by the `column` index.\n\nThe `key` in the hash table would be the `column` index, and the corresponding `value` would be a list which contains the values of all the nodes that share the same column index.\n\nIn addition, the values in the corresponding list should be ordered by their `row` indices, which would be guaranteed by the BFS traversal as we mentioned before.\n\n\n**Algorithm**\n\nWe elaborate on the steps to implement the above idea. \n\n- First, we create a hash table named `columnTable` to keep track of the results.\n<br/>\n\n- As to the BFS traversal, a common code pattern would be to use a `queue` data structure to keep track of the order we need to visit nodes.\nWe initialize the queue by putting the root node along with its column index value (`0`).\n<br/>\n\n- We then run the BFS traversal with a loop consuming the elements from the queue.\n<br/>\n\n- At each iteration within the BFS, we pop out an element from the queue. The element consists of a `node` and its corresponding `column` index. If the node is not empty, we then populate the `columnTable` with the value of the node. Subsequently, we then put its child nodes along with their respective column indices (_i.e._ `column-1` and `column+1`) into the queue. \n<br/>\n\n- At the end of the BFS traversal, we obtain a hash table that contains the desired node values grouped by their `column` indices. For each group of values, they are further ordered by their `row` indices.\n<br/>\n\n- We then sort the hash table by its keys, _i.e._ `column` index in ascending order. And finally we return the results _column by column_.\n\n<iframe src=\"https://leetcode.com/playground/pP7tyjXN/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"pP7tyjXN\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N \\log N)$$ where $$N$$ is the number of nodes in the tree. \n\n    In the first part of the algorithm, we do the BFS traversal, whose time complexity is $$\\mathcal{O}(N)$$ since we traversed each node once and only once.\n\n    In the second part, in order to return the ordered results, we then sort the obtained hash table by its keys, which could result in the $$\\mathcal{O}(N \\log N)$$ time complexity in the worst case scenario where the binary tree is extremely imbalanced (for instance, each node has only left child node.)\n\n    As a result, the overall time complexity of the algorithm would be $$\\mathcal{O}(N \\log N)$$.\n\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of nodes in the tree.\n\n    First of all, we use a hash table to group the nodes with the same column index. The hash table consists of keys and values. In any case, the values would consume $$\\mathcal{O}(N)$$ memory. While the space for the keys could vary, in the worst case, each node has a unique column index, _i.e._ there would be as many keys as the values. Hence, the total space complexity for the hash table would still be $$\\mathcal{O}(N)$$.\n\n    During the BFS traversal, we use a `queue` data structure to keep track of the next nodes to visit. At any given moment, the queue would hold no more two levels of nodes. For a binary tree, the maximum number of nodes at a level would be $$\\frac{N+1}{2}$$ which is also the number of leafs in a full binary tree. As a result, in the worst case, our queue would consume at most $$\\mathcal{O}(\\frac{N+1}{2} \\cdot 2) = \\mathcal{O}(N) $$ space.\n\n    Lastly, we also need some space to hold the results, which is basically a reordered hash table of size $$\\mathcal{O}(N)$$ as we discussed before.\n\n    To sum up, the overall space complexity of our algorithm would be $$\\mathcal{O}(N)$$.\n\n<br/>\n<br/>\n\n---\n#### Approach 2: BFS without Sorting\n\n**Intuition**\n\nIn the previous approach, it is a pity that the sorting of results overshadows the main part of the algorithm which is the BFS traversal. One might wonder if we have a way to eliminate the need for sorting. And the answer is yes.\n\n>The key insight is that we only need to know the **range** of the column index (_i.e._ `[min_column, max_column]`). Then we can simply _**iterate**_ through this range to generate the outputs without the need for sorting.\n\nThe above insight would work under the _condition_ that there won't be any missing column index in the given range. And the condition always holds, since there won't be any broken branch in a binary tree.\n\n**Algorithm**\n\nTo implement this optimization, it suffices to make some small modifications to our previous BFS approach.\n\nDuring the BFS traversal, we could obtain the range of the column indices, _i.e._ with the variable of `min_column` and `max_column`.\n\nAt the end of the BFS traversal, we would then walk through the column range `[min_column, max_column]` and retrieve the results accordingly.\n\n!?!../Documents/314_LIS.json:1000,570!?!\n\n<iframe src=\"https://leetcode.com/playground/4JkwrYzy/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4JkwrYzy\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of nodes in the tree. \n    <br/>\n    Following the same analysis in the previous BFS approach, the only difference is that this time we don't need the costy sorting operation (_i.e._ $$\\mathcal{O}(N \\log N)$$).\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of nodes in the tree. The analysis follows the same logic as in the previous BFS approach.\n<br/>\n<br/>\n\n---\n#### Approach 3: Depth-First Search (DFS)\n\n**Intuition**\n\nAlthough we applied a BFS traversal in both of the previous approaches, it is not impossible to solve the problem with a DFS traversal.\n\n>As we discussed in the overview section, once we assign a 2-dimensional index (_i.e._ `<column, row>`) for each node in the binary tree, to output the tree in _**vertical**_ order is to sort the nodes based on the 2-dimensional index, firstly by `column` then by `row`, as shown in the following graph.\n\n![tree to table](../Figures/314/314_table.png)\n\nCompared to the DFS traversal, the BFS traversal gives us a head start, since the nodes in higher rows would be visited later than the ones in the lower lows. As a result, we only need to focus on the `column` order.\n\nThat being said, we could simply traverse the tree in any DFS order (preorder, inorder or postorder), then we sort the resulting list strictly based on two keys `<column, row>`, which would give us the same results as the BFS traversal.\n\n>An important note is that two nodes might share the same `<column, row>`, in the case, as stated in the problem, the order between these two nodes should be from **left** to **right** as we did for BFS traversals.\nAs a result, to ensure such a priority, one should make sure to visit the left child node before the right child node during the DFS traversal.\n\n\n**Algorithm**\n\n- Here we implement the above algorithm, with the trick that we applied in Approach 2 (BFS without sorting) where we obtained the range of `column` during the traversal.\n<br/>\n\n- First, we conduct a DFS traversal on the input tree. During the traversal, we would then build a similar `columnTable` with the `column` index as the key and the list of `(row, val)` tuples as the value. \n<br/>\n\n- At the end of the DFS traversal, we iterate through the `columnTable` via the key of `column` index. Accordingly, we have a list of `(row, val)` tuples associated with each key. We then sort this list, based on the `row` index.\n<br/>\n\n- After the above steps, we would then obtain a list of node values ordered firstly by its `column` index and then by its `row` index, which is exactly the the _vertical_ order traversal of binary tree as defined in the problem.\n\n<iframe src=\"https://leetcode.com/playground/GHLKjrSs/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GHLKjrSs\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}\\big(W \\cdot H \\log{H})\\big)$$ where $$W$$ is the width of the binary tree (_i.e._ the number of columns in the result) and $$H$$ is the height of the tree. \n    <br/>\n    In the first part of the algorithm, we traverse the tree in DFS, which results in $$\\mathcal{O}(N)$$ time complexity.\n    <br/>\n\n    Once we build the `columnTable`, we then have to sort it _column by column_.\n    <br/>\n\n    Let us assume the time complexity of the sorting algorithm to be $$\\mathcal{O}(K \\log K)$$ where $$K$$ is the length of the input. The maximal number of nodes in a column would be $$\\frac{H}{2}$$ where $$H$$ is the height of the tree, due to the zigzag nature of the node distribution. As a result, the upper bound of time complexity to sort a column in a binary tree would be $$\\mathcal{O}(\\frac{H}{2} \\log \\frac{H}{2})$$. \n    <br/>\n\n    Since we need to sort $$W$$ columns, the total time complexity of the sorting operation would then be $$\\mathcal{O}\\big(W \\cdot (\\frac{H}{2} \\log{\\frac{H}{2}})\\big) = \\mathcal{O}(W \\cdot H \\log{H}) $$. Note that, the total number of nodes $$N$$ in a tree is bounded by $$W \\cdot H$$, _i.e._ $$ N < W \\cdot H $$. As a result, the time complexity of $$\\mathcal{O}\\big(W \\cdot H \\log{H}\\big)$$ will dominate the $$\\mathcal{O}(N)$$ of the DFS traversal in the first part.\n    <br/>\n\n    At the end of the DFS traversal, we have to iterate through the `columnTable` in order to retrieve the values, which will take another $$\\mathcal{O}(N)$$ time.\n    <br/>\n\n    To sum up, the overall time complexity of the algorithm would be $$\\mathcal{O}\\big(W \\cdot H \\log{H}\\big)$$.\n    <br/>\n    \n    An interesting thing to note is that in the case where the binary tree is completely imbalanced (_e.g._ node has only left child.), this DFS approach would have the $$\\mathcal{O}(N)$$ time complexity, since the sorting takes no time on columns that contains only a single node. While the time complexity for our first BFS approach would be $$\\mathcal{O}{(N \\log N)}$$, since we have to sort the $$N$$ keys in the `columnTable`.\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of nodes in the tree.\n\n    We kept the `columnTable` which contains all the node values in the binary tree. Together with the keys, it would consume $$\\mathcal{O}(N)$$ space as we discussed in previous approaches.\n    <br/>\n\n    Since we apply the recursion for our DFS traversal, it would incur additional space consumption on the function call stack. In the worst case where the tree is completely imbalanced, we would have the size of call stack up to $$\\mathcal{O}(N)$$.\n    <br/>\n\n    Finally, we have the output which contains all the values in the binary tree, thus $$\\mathcal{O}(N)$$ space.\n    <br/>\n\n    So in total, the overall space complexity of this algorithm remains $$\\mathcal{O}(N)$$.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-vertical-order-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.711,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Facebook loves Tree types of problems. One of the Tree questions Facebook really likes to ask is Convert BST to Sorted Doubly Linked List, which you can practice below.\n\nYou should also know topological sort and graph traversal as those are still occasionally asked."
    },
    {
        "id": "53",
        "title": "Recursion",
        "slug": "recursion-3",
        "items": [
            {
                "id": "267",
                "title": "Letter Combinations of a Phone Number",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook phone and onsite interviews.",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "17",
                    "questionFrontendId": "17",
                    "sessionId": "968792",
                    "questionTitle": "Letter Combinations of a Phone Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/letter-combinations-of-a-phone-number/submit/",
                    "interpretUrl": "/problems/letter-combinations-of-a-phone-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> letterCombinations(string digits) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> letterCombinations(String digits) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def letterCombinations(self, digits):\\n        \\\"\\\"\\\"\\n        :type digits: str\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def letterCombinations(self, digits: str) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** letterCombinations(char * digits, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> LetterCombinations(string digits) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} digits\\n * @return {string[]}\\n */\\nvar letterCombinations = function(digits) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} digits\\n# @return {String[]}\\ndef letter_combinations(digits)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func letterCombinations(_ digits: String) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func letterCombinations(digits string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def letterCombinations(digits: String): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun letterCombinations(digits: String): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn letter_combinations(digits: String) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $digits\\n     * @return String[]\\n     */\\n    function letterCombinations($digits) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function letterCombinations(digits: string): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (letter-combinations digits)\\n  (-> string? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nletter_combinations(Digits) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec letter_combinations(digits :: String.t) :: [String.t]\\n  def letter_combinations(digits) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"23\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"letterCombinations\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"digits\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" style=\"width: 200px; height: 162px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Letter Combinations of a Phone Number",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nOne of the first things you should always do is look at the constraints. Quite often, you can figure out what sort of approach needs to be taken simply from looking at the input size. In an interview, asking your interviewer about the constraints will also show your attention to detail - on top of giving you information.\r\n\r\nIn this particular problem, the length of the input is **extremely** small, `0 <= digits.length <= 4`. With such small input sizes, we can safely assume that a brute force solution in which we generate all combinations of letters will be accepted.\r\n\r\nWhenever you have a problem where you need to generate all combinations/permutations of some group of letters/numbers, the first thought you should have is backtracking. If you're new to backtracking, check out our [backtracking explore card](https://leetcode.com/explore/featured/card/recursion-ii/472/backtracking/). Backtracking algorithms can often keep the _space complexity_ linear with the input size. \r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Backtracking\r\n\r\n**Intuition**\r\n\r\nThere aren't any smart tricks needed for this problem - the hard part is just figuring out how to correctly generate all possible combinations, and to do this using a standard backtracking algorithm template. Let's break down the problem, by starting with an input that is only 1-digit long, for example `digits = \"2\"`. This example is trivial - just generate all letters that correspond with `digit = \"2\"`, which would be `[\"a\", \"b\", \"c\"]`.\r\n\r\nWhat if instead we had a 2-digit long input, `digits = \"23\"`? Imagine taking each letter of `digit = \"2\"` as a *starting point*. That is, **lock the first letter in**, and solve all the possible combinations that **start with that letter**. If our first letter will always be `\"a\"`, then the problem is trivial again - it's the 1-digit case, and all we have to do is generate all the letters corresponding with `digit = \"3\"`, and add that to `\"a\"`, to get `[\"ad\", \"ae\",\"af\"]`. This was easy because we ignored the first letter, and said it will always be `\"a\"`. But we know how to generate all the first letters too - it's the 1-digit case which we already solved to be `[\"a\", \"b\", \"c\"]`.\r\n\r\nAs you can see, solving the 1-digit case is trivial, and solving the 2-digit case is just solving the 1-digit case twice. The same reasoning can be extended to `n` digits. For the 3-digit case, solve the 2-digit case to generate all combinations of the first 2 letters, and then solve the 1-digit case for the final digit. Now that we know how to solve the 3-digit case, to solve the 4-digit case, solve the 3-digit case for all combinations of the first 3 letters, and then solve the 1-digit case for the final digit. We could extend this to infinity, but, don't worry, for this problem we're finished after 4. \r\n\r\n!?!../Documents/17_Letter_Combinations_Phone.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\nAs mentioned previously, we need to **lock-in** letters when we generate new letters. The easiest way to save state like this is to use recursion. Our algorithm will be as follows:\r\n\r\n1. If the input is empty, return an empty array.\r\n\r\n2. Initialize a data structure (e.g. a hash map) that maps digits to their letters, for example, mapping \"6\" to \"m\", \"n\", and \"o\".\r\n\r\n3. Use a backtracking function to generate all possible combinations.\r\n    - The function should take 2 primary inputs: the current combination of letters we have, `path`, and the `index` we are currently checking.\r\n    - As a base case, if our current combination of letters is the same length as the input `digits`, that means we have a complete combination. Therefore, add it to our answer, and backtrack.\r\n    - Otherwise, get all the letters that correspond with the current digit we are looking at, `digits[index]`.\r\n    - Loop through these letters. For each letter, add the letter to our current `path`, and call `backtrack` again, but move on to the next digit by incrementing `index` by 1.\r\n    - Make sure to remove the letter from `path` once finished with it.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/a4vWh4VR/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"a4vWh4VR\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(4^N \\cdot N)$$, where $$N$$ is the length of `digits`. Note that $$4$$ in this expression is referring to the maximum *value* length in the *hash map*, and ***not*** to the length of the *input*.\r\n\r\n   The worst-case is where the input consists of only 7s and 9s. In that case, we have to explore 4 additional paths for every extra digit. Then, for each combination, it costs up to $$N$$ to build the combination. This problem can be generalized to a scenario where numbers correspond with up to $$M$$ digits, in which case the time complexity would be $$O(M^N \\cdot N)$$. For the problem constraints, we're given, $$M = 4$$, because of digits 7 and 9 having 4 letters each.\r\n\r\n* Space complexity: $$O(N)$$, where $$N$$ is the length of `digits`.\r\n\r\n    Not counting space used for the output, the extra space we use relative to input size is the space occupied by the recursion call stack. It will only go as deep as the number of digits in the input since whenever we reach that depth, we backtrack.\r\n\r\n    As the hash map does not grow as the inputs grows, it occupies $$O(1)$$ space. \r\n    \r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "letter-combinations-of-a-phone-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.486,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "292",
                "title": "Permutations",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "46",
                    "questionFrontendId": "46",
                    "sessionId": "968792",
                    "questionTitle": "Permutations",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/permutations/submit/",
                    "interpretUrl": "/problems/permutations/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> permute(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> permute(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def permute(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def permute(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** permute(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> Permute(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar permute = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef permute(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func permute(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permute(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def permute(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun permute(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn permute(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function permute($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function permute(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (permute nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec permute(Nums :: [integer()]) -> [[integer()]].\\npermute(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec permute(nums :: [integer]) :: [[integer]]\\n  def permute(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"permute\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": \"size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array <code>nums</code> of distinct integers, return <em>all the possible permutations</em>. You can return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [0,1]\n<strong>Output:</strong> [[0,1],[1,0]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 6</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Permutations",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Backtracking\n\n[Backtracking](https://en.wikipedia.org/wiki/Backtracking) \nis an algorithm for finding all\nsolutions by exploring all potential candidates.\nIf the solution candidate turns to be _not_ a solution \n(or at least not the _last_ one), \nbacktracking algorithm discards it by making some changes \non the previous step, *i.e.* _backtracks_ and then try again.\n\nHere is a backtrack function \nwhich takes the index of the first integer to consider \nas an argument `backtrack(first)`.\n\n* If the first integer to consider has index `n` that means \nthat the current permutation is done.\n* Iterate over the integers from index `first` to index `n - 1`.\n    * Place `i`-th integer first in the permutation, \n    i.e. `swap(nums[first], nums[i])`.\n    * Proceed to create all permutations which starts from \n    `i`-th integer : `backtrack(first + 1)`.\n    * Now backtrack, i.e. `swap(nums[first], nums[i])` back.\n        \n!?!../Documents/46_LIS.json:1000,548!?!\n\n<iframe src=\"https://leetcode.com/playground/cCeKUsLu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"cCeKUsLu\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\sum_{k = 1}^{N}{P(N, k)})$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$\nis so-called [_k-permutations_of_n_, or _partial permutation_](https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n). \n\nHere $$first + 1 = k$$ for the expression simplicity. \nThe formula is easy to understand : for each $$k$$ (each $$first$$) \none performs $$N(N - 1) ... (N - k + 1)$$ operations, \nand $$k$$ is going through the range of values from $$1$$ to $$N$$ (and $$first$$ from $$0$$ to $$N - 1$$). \n\nLet's do a rough estimation of the result : \n$$N! \\le \\sum_{k = 1}^{N}{\\frac{N!}{(N - k)!}} = \\sum_{k = 1}^{N}{P(N, k)} \\le N \\times N!$$,\ni.e. the algorithm performs better than $$\\mathcal{O}(N \\times N!)$$ and \na bit slower than $$\\mathcal{O}(N!)$$.\n \n* Space complexity : $$\\mathcal{O}(N!)$$ since one has to keep\n`N!` solutions.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "permutations",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.706,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "293",
                "title": "Permutations II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "47",
                    "questionFrontendId": "47",
                    "sessionId": "968792",
                    "questionTitle": "Permutations II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/permutations-ii/submit/",
                    "interpretUrl": "/problems/permutations-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> permuteUnique(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def permuteUnique(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> PermuteUnique(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar permuteUnique = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef permute_unique(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func permuteUnique(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn permute_unique(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function permuteUnique($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function permuteUnique(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (permute-unique nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec permute_unique(Nums :: [integer()]) -> [[integer()]].\\npermute_unique(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec permute_unique(nums :: [integer]) :: [[integer]]\\n  def permute_unique(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,1,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"permuteUnique\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": \"size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a collection of numbers, <code>nums</code>,&nbsp;that might contain duplicates, return <em>all possible unique permutations <strong>in any order</strong>.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong>\n[[1,1,2],\n [1,2,1],\n [2,1,1]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 8</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Permutations II",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Overview\r\n\r\nAs the name of the problem suggests, this problem is an extension of the [Permutation](https://leetcode.com/problems/permutations/) problem.\r\nThe problem is different from the previous permutation problem on the condition that the input array can contain **_duplicates_**.\r\n\r\nThe key to solve the problem is still the **_backtracking_** algorithm.\r\nHowever, we need some adaptation to ensure that the _enumerated_ solutions generated from our backtracking exploration do not have any duplicates.\r\n\r\n>As a reminder, **[backtracking](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/)** is a general algorithm for finding all (or some) solutions to some problems with constraints.\r\nIt incrementally builds candidates to the solutions, and abandons a candidate as soon as it determines that the candidate cannot possibly lead to a solution.\r\n\r\nIn this article, we will present a yet another backtracking solution to solve the problem.\r\n\r\n---\r\n#### Approach 1: Backtracking with Groups of Numbers\r\n\r\n**Intuition**\r\n\r\nFirst of all, let us review the general idea of permutation with an example.\r\n\r\nGiven the input array `[1, 1, 2]`, to generate a permutation of the array, we could follow the _Depth-First Search_ (DFS) approach, or more precisely the backtracking technique as one will see later.\r\n\r\n>The idea is that we pick the numbers one by one. For a permutation of length $$N$$, we would then need $$N$$ stages to generate a valid permutation.\r\nAt each stage, we need to pick one number into the permutation, out of the remaining available numbers.\r\nLater at the same stage, we will try out all available choices.\r\nBy trying out, we progressively build up candidates to the solution, and revert each choice with another alternative until there is no more choice.\r\n\r\nLet us walk through the example with paper and pencil, as follows:\r\n\r\n- Given the input of `[1, 1, 2]`, at the first stage, we have 2 choices to pick a number as the first number in the final permutation, _i.e._ `1` and `2`.\r\nSuppose that we pick the number `1`, now the remaining numbers would become `[1, 2]`.\r\n**Note:** The reason that we have only 2 choices instead of 3, is that there is a duplicate in the given input.\r\nPicking any of the duplicate numbers as the first number of the permutation would lead us to the same permutation at the end.\r\nShould the numbers in the array be all unique, we would then have the same number of choices as the length of the array. \r\n\r\n- At the second stage, we now then have again 2 choices, _i.e._ `[1, 2]`. \r\nLet us pick again the number `1`, which leaves us the only remaining number `2`.\r\n\r\n- Now at the third stage, we have only one candidate number left, _i.e._ `[2]`. We then pick the last remaining number, which leads to a final permutation sequence of `[1, 1, 2]`.\r\n\r\n- Moreover, we need to **_revisit_** each of the above stages, and make a different choice in order to try out all possibilities.\r\nThe reversion of the choices is what we call __*backtracking*__.\r\n\r\nWe illustrate all potential exploration in the following graph where each node represents a choice at a specific stage:\r\n\r\n![permutation tree](../Figures/47/47_permutations.png)\r\n\r\n>A key insight to avoid generating any **_redundant_** permutation is that at each step rather than viewing each number as a candidate, we consider each **_unique_** number as the true candidate.\r\nFor instance, at the very beginning, given in the input of `[1, 1, 2]`, we have only two true candidates instead of three.\r\n\r\n\r\n**Algorithm**\r\n\r\nGiven the above insight, in order to find out all the unique numbers at each stage, we can build a **_hash table_** (denoted as `counter`), with each unique number as the key and its occurrence as the corresponding value.\r\n\r\nTo implement the algorithm, first we define a function called `backtrack(comb, counter)` which generates all permutations, starting from the current combination (`comb`) and the remaining numbers (`counter`).\r\n\r\nOnce the function is implemented, it suffices to invoke the function with the initial empty combination and the hash table we built out of the input array, to solve the problem.\r\n\r\nHere are some sample implementations.\r\n\r\n<iframe src=\"https://leetcode.com/playground/KghC3tCD/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KghC3tCD\"></iframe>\r\n\r\n**Note:** for a backtracking algorithm, usually there are some explorations that would lead to a *dead end*, and we have to abandon those explorations in the middle.\r\n\r\nHowever, due to the specificity of this problem and our exploration strategy, each exploration will result in a valid permutation, _i.e._ none of the efforts is in vain.\r\nThis insight would prove to be useful in the following complexity analysis.\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the length of the input array.\r\nHence, the number of permutations would be at maximum $$N!$$, _i.e._ $$N \\cdot (N-1) \\cdot (N-2) ... 1$$, when each number in the array is unique.\r\n\r\n- Time Complexity: $$\\mathcal{O}\\big(\\sum_{k = 1}^{N}{P(N, k)}\\big)$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$\r\nis so-called [_k-permutations_of_N_ or _partial permutation_](https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n). \r\n\r\n    - As one can see in the exploration graph we have shown earlier, the execution of the backtracking algorithm will unfold itself as a tree, where each node is an invocation of the recursive function `backtrack(comb, counter)`.\r\n    The total number of steps to complete the exploration is _exactly_ the number of nodes in the tree.\r\n    Therefore, the time complexity of the algorithm is linked directly with the size of the tree.\r\n\r\n    - It now boils down to estimating the number of nodes in the tree.\r\n    As we know now, each level of the tree corresponds to a specific _stage_ of the exploration.\r\n    At each stage, the number of candidates to explore is **bounded**.\r\n    For instance, at the first stage, _at most_ we would have $$N$$ candidates to explore, _i.e._ the number of nodes at this level would be $$N$$.\r\n    Moving on to the next stage, for each of the nodes in the first stage, we would have $$N-1$$ child nodes. Therefore, the number of nodes at this stage would be $$N \\cdot (N-1)$$.\r\n    So on and so forwards.\r\n\r\n    ![number of nodes](../Figures/47/47_number_of_nodes.png)\r\n\r\n    - By summing up all the nodes across the stages, we would then obtain the total number of nodes as $$\\sum_{k = 1}^{N}{P(N, k)}$$ where $$P(N, k) = \\frac{N!}{(N - k)!} = N (N - 1) ... (N - k + 1)$$.\r\n    As a result, the exact time complexity of the algorithm is $$\\mathcal{O}\\big(\\sum_{k = 1}^{N}{P(N, k)}\\big)$$.\r\n\r\n    - The above complexity might appear a bit too abstract to comprehend.\r\n    Here we could provide another __*loose upper bound*__ on the complexity.\r\n\r\n    - It takes $$N$$ steps to generate a single permutation. Since there are in total $$N!$$ possible permutations, at most it would take us $$N \\cdot N!$$ steps to generate all permutations, simply assuming that there is no overlapping effort (which is not true).\r\n\r\n\r\n- Space Complexity: $$\\mathcal{O}(N)$$\r\n\r\n    - First of all, we build a hash table out of the input numbers. In the worst case where each number is unique, we would need $$\\mathcal{O}(N)$$ space for the table.\r\n\r\n    - Since we applied recursion in the algorithm which consumes some extra space in the function call stack, we would need another $$\\mathcal{O}(N)$$ space for the recursion.\r\n\r\n    - During the exploration, we keep a candidate of permutation along the way, which takes yet another $$\\mathcal{O}(N)$$.\r\n\r\n    - To sum up, the total space complexity would be $$\\mathcal{O}(N) + \\mathcal{O}(N) + \\mathcal{O}(N) = \\mathcal{O}(N)$$.\r\n\r\n    - **Note**, we did not take into account the space needed to hold the results. Otherwise, the space complexity would become $$\\mathcal{O}(N \\cdot N!)$$.\r\n\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "permutations-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.146,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "324",
                "title": "Remove Invalid Parentheses",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook phone interview.",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "301",
                    "questionFrontendId": "301",
                    "sessionId": "968792",
                    "questionTitle": "Remove Invalid Parentheses",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/remove-invalid-parentheses/submit/",
                    "interpretUrl": "/problems/remove-invalid-parentheses/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> removeInvalidParentheses(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> removeInvalidParentheses(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def removeInvalidParentheses(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def removeInvalidParentheses(self, s: str) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** removeInvalidParentheses(char * s, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> RemoveInvalidParentheses(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar removeInvalidParentheses = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String[]}\\ndef remove_invalid_parentheses(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func removeInvalidParentheses(_ s: String) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeInvalidParentheses(s string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def removeInvalidParentheses(s: String): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun removeInvalidParentheses(s: String): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn remove_invalid_parentheses(s: String) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String[]\\n     */\\n    function removeInvalidParentheses($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function removeInvalidParentheses(s: string): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (remove-invalid-parentheses s)\\n  (-> string? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec remove_invalid_parentheses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nremove_invalid_parentheses(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec remove_invalid_parentheses(s :: String.t) :: [String.t]\\n  def remove_invalid_parentheses(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"()())()\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"name\":\"removeInvalidParentheses\",\r\n    \"params\":[\r\n        {\r\n            \"name\":\"s\",\r\n            \"type\":\"string\"\r\n        }\r\n    ],\r\n    \"return\":{\r\n        \"type\":\"list<string>\"\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p>\n\n<p>Return <em>all the possible results</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()())()&quot;\n<strong>Output:</strong> [&quot;(())()&quot;,&quot;()()()&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(a)())()&quot;\n<strong>Output:</strong> [&quot;(a())()&quot;,&quot;(a)()()&quot;]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)(&quot;\n<strong>Output:</strong> [&quot;&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 25</code></li>\n\t<li><code>s</code> consists of lowercase English letters and parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li>There will be at most <code>20</code> parentheses in <code>s</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Since we don't know which of the brackets can possibly be removed, we try out all the options!",
                        "We can use recursion to try out all possibilities for the given expression. For each of the brackets, we have 2 options:\r\n\r\n<ol>\r\n<li> We keep the bracket and add it to the expression that we are building on the fly during recursion.</li>\r\n<li> OR, we can discard the bracket and move on.\r\n</ol>",
                        "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
                        "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
                        "For every left parenthesis, we should have a corresponding right parenthesis. We can make use of two counters which keep track of misplaced left and right parenthesis and in one iteration we can find out these two values. \r\n\r\n<pre>\r\n0 1 2 3 4 5 6 7\r\n( ) ) ) ( ( ( )  \r\ni = 0, left = 1, right = 0\r\ni = 1, left = 0, right = 0\r\ni = 2, left = 0, right = 1\r\ni = 3, left = 0, right = 2\r\ni = 4, left = 1, right = 2\r\ni = 5, left = 2, right = 2\r\ni = 6, left = 3, right = 2\r\ni = 7, left = 2, right = 2\r\n</pre>\r\n\r\nWe have 2 misplaced left and 2 misplaced right parentheses.",
                        "We found out that the exact number of left and right parenthesis that has to be removed to get a valid expression. So, e.g. in a 1000 parentheses string, if there are 2 misplaced left and 2 misplaced right parentheses, after we are done discarding 2 left and 2 right parentheses, we will have only one option per remaining character in the expression i.e. to consider them. We can't discard them."
                    ],
                    "solution": {
                        "title": "Remove Invalid Parentheses",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Backtracking\n\n**Intuition**\n\nFor this question, we are given an expression consisting of parentheses and there can be some misplaced or extra brackets in the expression that cause it to be invalid. An expression consisting of parentheses is considered valid only when every closing bracket has a corresponding opening bracket and vice versa.\n\nThis means if we start looking at each of the bracket from left to right, as soon as we encounter a closing bracket, there should be an unmatched opening bracket available to match it. Otherwise the expression would become invalid. The expression can also become invalid if the number of opening parentheses i.e. `(` are more than the number of closing parentheses i.e. `)`.\n\nLet us look at an invalid expression and all the possible valid expressions that can be formed from it by removing some of the brackets. There is no restriction on which parentheses we can remove. We simply have to make the expression valid.\n\n> The only condition is that we should be removing the minimum number of brackets to make an invalid expression, valid. If this condition was not present, we could potentially remove most of the brackets and come down to say 2 brackets in the end which form `()` and that would be a valid expression.\n\n<center>\n<img src=\"../Figures/301/Diag_1.png\" width=\"800\"></center>\n\nAn important thing to observe in the above diagram is that there are multiple ways of reaching the same solution i.e. say the optimal number of parentheses to be removed to make the original expression valid is K. We can remove multiple different sets of K brackets that will eventually give us the same final expression. But, each valid expression should be recorded only once. We have to take care of this in our solution. Note that there are other possible ways of reaching one of the two valid expressions shown above. We have simply shown 3 ways each for the two valid expressions.\n\nComing back to our problem, the question that now arises is, how to decide which of the parentheses to remove?\n\n> Since we don't know which of the brackets can possibly be removed, we try out all the options!\n\nFor every bracket we have two choices:\n\n* Either it can be considered a part of the final expression OR\n* It can be ignored i.e. we can delete it from our final expression.\n\nSuch kind of problems where we have multiple options and we have no strategy or metric of deciding greedily which option to take, we try out all of the options and see which ones lead to an answer. These type of problems are perfect candidates for the programming paradigm, `Recursion`.\n\n**Algorithm**\n\n1. Initialize an array that will store all of our valid expressions finally.\n2. Start with the leftmost bracket in the given sequence and proceed right in the recursion.\n3. The state of recursion is defined by the index which we are currently processing in the original expression. Let this index be represented by the character `i`. Also, we have two different variables `left_count` and `right_count` that represent the number of left and right parentheses we have added to our expression till now. These are the parentheses that were considered.\n4. If the current character i.e. `S[i]` (considering S is the expression string) is neither a closing or an opening parenthesis, then we simply add this character to our final solution string for the current recursion.\n5. However, if the current character is either of the two brackets i.e. `S[i] == '(' or S[i] == ')'`, then we have two options. We can either discard this character by marking it an invalid character or we can consider this bracket to be a part of the final expression.\n6. When all of the parentheses in the original expression have been processed, we simply check if the expression represented by `expr` i.e. the expression formed till now is valid one or not. The way we check if the final expression is valid or not is by looking at the values in `left_count` and `right_count`. For an expression to be valid `left_count == right_count`. If it is indeed valid, then it could be one of our possible solutions.\n    * Even though we have a valid expression, we also need to keep track of the number of removals we did to get this expression. This is done by another variable passed in recursion called `rem_count`.\n    * Once recursion finishes we check if the current value of `rem_count` is < the least number of steps we took to form a valid expression till now i.e. the global minima. If this is not the case, we don't record the new expression, else we record it.\n\nOne small optimization that we can do from an implementation perspective is introducing some sort of pruning in our algorithm. Right now we simply go till the very end i.e. process all of the parentheses and when we are done processing all of them, we check if the expression we have can be considered or not.\n\nWe have to wait till the very end to decide if the expression formed in recursion is a valid expression or not. Is there a way for us to cutoff from some of the recursion paths early on because they wouldn't lead to a solution? The answer to this is Yes! The optimization is based on the following idea.\n\nFor a left bracket encountered during recursion, if we decide to consider it, then it may or may not lead to an invalid final expression. It may lead to an invalid expression eventually if there are no matching closing bracket available afterwards. But, we don't know for sure if this will happen or not.\n\n> However, for a closing bracket, if we decide to keep it as a part of our final expression (remember for every bracket we have two options, either to keep it or to remove it and recurse further) and there is no corresponding opening bracket to match it in the expression till now, then it will definitely lead to an invalid expression no matter what we do afterwards.\n\ne.g.\n\n<pre>\n( (  ) ) )\n</pre>\n\nIn this case the third closing bracket will make the expression invalid. No matter what comes afterwards, this will give us an invalid expression and if such a thing happens, we shouldn't recurse further and simply prune the recursion tree.\n\nThat is why, in addition to having the index in the original string/expression which we are currently processing and the expression string formed till now, we also keep track of the number of left and right parentheses. Whenever we keep a left parenthesis in the expression, we increment its counter. For a right parenthesis, we check if `right_count < left_count`. If this is the case then only we consider that right parenthesis and recurse further. Otherwise we don't as we know it will make the expression invalid. This simple optimization saves a lot of runtime.\n\nNow, let us look at the implementation for this algorithm.\n\n<iframe src=\"https://leetcode.com/playground/VfQamz4z/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"VfQamz4z\"></iframe>\n\n**Complexity analysis**\n\n* Time Complexity : $$O(2^N)$$ since in the worst case we will have only left parentheses in the expression and for every bracket we will have two options i.e. whether to remove it or consider it. Considering that the expression has $$N$$ parentheses, the time complexity will be $$O(2^N)$$.\n* Space Complexity : $$O(N)$$ because we are resorting to a recursive solution and for a recursive solution there is always stack space used as internal function states are saved onto a stack during recursion. The maximum depth of recursion decides the stack space used. Since we process one character at a time and the base case for the recursion is when we have processed all of the characters of the expression string, the size of the stack would be $$O(N)$$. Note that we are not considering the space required to store the valid expressions. We only count the intermediate space here.\n<br />\n<br />\n---\n#### Approach 2: Limited Backtracking!\n\nAlthough the previous solution does get accepted on the platform, it is a very inefficient solution because we try removing each and every possible parentheses from the expression and in the end we check two things:\n\n1. if the expression is valid or not\n2. if the total number of removed parentheses removed in the current recursion is less than the global minimum till now or not.\n\nWe cannot determine which of the parentheses are misplaced because, as the problem statement puts across, we can remove multiple combinations of parentheses and end up with a valid expression. This means there can be multiple valid expressions from a single invalid expression and we have to find all of them.\n\n> The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed.\n\nWhat if we could determine this count?\n\nWhat if in addition to determining this count of characters to be removed, we could also determine the number of left parentheses and number of right parentheses to be removed from the original expression to get **any** valid expression?\n\nThis would cut down the computations immensely and the runtime would plummet as a result. The reason for this is, if we knew how many left and right parentheses are to be removed from the original expression to get a valid expression, we would cut down on so many unwanted recursive calls.\n\nImagine the original expression to be 1000 characters with only 3 misplaced `(` parentheses and 2 misplaced `)` parentheses. In our previous solution we would end up trying to remove each one of left and right parentheses and try to reach a valid expression in the end whereas we should only be trying out removing 3 `(` brackets and 2 `)` brackets.\n\n> This is the exact number of `(` and `)` that have to be removed to get a valid expression. No more, no less.\n\nLet us look at how we can find out the number of misplaced left and right parentheses in a given expression first and then we will slightly modify our original algorithm to incorporate these counts as well.\n\n1. We process the expression one bracket at a time starting from the left.\n2. Suppose we encounter an opening bracket i.e. `(`, it may or may not lead to an invalid expression because there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we simply increment the counter keeping track of left parentheses till now. `left += 1`\n3. If we encounter a closing bracket, this has two meanings:\n    * Either there was no matching opening bracket for this closing bracket and in that case we have an invalid expression. This is the case when `left == 0` i.e. when there are no unmatched left brackets available. In such a case we increment another counter say `right += 1` to represent misplaced right parentheses.\n    * Or, we had some unmatched opening bracket available to match this closing bracket. This is the case when `left > 0`. In this case we simply decrement the left counter we had i.e. `left -= 1`\n4. Continue processing the string until all parentheses have been processed.\n5. In the end the values of `left` and `right` would tell us the number of unmatched `(` and `)` parentheses respectively.\n\nNow that we have these two values available that tell us the total number of left i.e. `(` and right i.e. `)` parentheses that have to be removed to make the invalid expression valid, we will modify our original algorithm discussed in the previous session to avoid unwanted recursions.\n\n**Algorithm**\n\nThe overall algorithm remains exactly the same as before. The changes that we will incorporate are listed below:\n\n* The state of the recursion is now defined by five different variables:\n    1. `index` which represents the current character that we have to process in the original string.\n    2. `left_count` which represents the number of left parentheses that have been added to the expression we are building.\n    3. `right_count` which represents the number of right parentheses that have been added to the expression we are building.\n    4. `left_rem` is the number of left parentheses that remain to be removed.\n    5. `right_rem` represents the number of right parentheses that remain to be removed. Overall, for the final expression to be valid, `left_rem == 0` and `right_rem == 0`.\n* When we decide to not consider a parenthesis i.e. delete a parenthesis, be it a left or a right parentheses, we have to consider their corresponding remaining counts as well. This means that we can only discard a left parentheses if `left_rem > 0` and similarly for the right one we will check for `right_rem > 0`.\n* There are no changes to checks for **considering** a parenthesis. Only the conditions change for **discarding** a parenthesis.\n* Condition for an expression being valid in the base case would now become `left_rem == 0 and right_rem == 0`. Note that we don't have to check if `left_count == right_count` anymore because in the case of a valid expression, we would have removed all the misplaced or invalid parenthesis by the time the recursion ends. So, the only check we need if `left_rem == 0 and right_rem == 0`.\n\n> The most important thing here is that we have completely gotten rid of checking if the number of parentheses removed is lesser than the current minimum or not. The reason for this is we always remove the same number of parentheses as defined by `left_rem + right_rem` at the start of recursion.\n\nNow let us look at the implementation for this modified version of algorithm.\n\n<iframe src=\"https://leetcode.com/playground/GvFntTBm/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GvFntTBm\"></iframe>\n\n**Complexity analysis**\n\n* Time Complexity : The optimization that we have performed is simply a better form of pruning. Pruning here is something that will vary from one test case to another. In the worst case, we can have something like `(((((((((` and the `left_rem = len(S)` and in such a case we can discard all of the characters because all are misplaced. So, in the worst case we **still** have 2 options per parenthesis and that gives us a complexity of $$O(2^N)$$.\n* Space Complexity : The space complexity remains the same i.e. $$O(N)$$ as previous solution. We have to go to a maximum recursion depth of $$N$$ before hitting the base case. Note that we are not considering the space required to store the valid expressions. We only count the intermediate space here.\n\n<br />\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "remove-invalid-parentheses",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.774,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "307",
                "title": "Regular Expression Matching",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "10",
                    "questionFrontendId": "10",
                    "sessionId": "968792",
                    "questionTitle": "Regular Expression Matching",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/regular-expression-matching/submit/",
                    "interpretUrl": "/problems/regular-expression-matching/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isMatch(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isMatch(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isMatch(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isMatch(char * s, char * p){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsMatch(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {boolean}\\n */\\nvar isMatch = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Boolean}\\ndef is_match(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isMatch(_ s: String, _ p: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isMatch(s: String, p: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_match(s: String, p: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Boolean\\n     */\\n    function isMatch($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isMatch(s: string, p: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-match s p)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aa\"\n\"a\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isMatch\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"p\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, p = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;mississippi&quot;, p = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Regular Expression Matching",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Recursion\n\n**Intuition**\n\nIf there were no Kleene stars (the `*` wildcard character for regular expressions), the problem would be easier - we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.  A recursive solution is a straightforward way to represent this relationship.\n\n**Algorithm**\n\nWithout a Kleene star, our solution would look like this:\n\n\n<iframe src=\"https://leetcode.com/playground/Z2XSmAHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"123\" name=\"Z2XSmAHG\"></iframe>\n\nIf a star is present in the pattern, it will be in the second position $$\\text{pattern[1]}$$.  Then, we may ignore this part of the pattern, or delete a matching character in the text.  If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n<iframe src=\"https://leetcode.com/playground/EX8cYcs3/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"EX8cYcs3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  In the worst case, a call to `match(text[i:], pattern[2j:])` will be made $$\\binom{i+j}{i}$$ times, and strings of the order $$O(T - i)$$ and $$O(P - 2*j)$$ will be made.  Thus, the complexity has the order $$\\sum_{i = 0}^T \\sum_{j = 0}^{P/2} \\binom{i+j}{i} O(T+P-i-2j)$$.  With some effort outside the scope of this article, we can show this is bounded by $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$.\n\n* Space Complexity:  For every call to `match`, we will create those strings as described above, possibly creating duplicates.  If memory is not freed, this will also take a total of $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$ space, even though there are only order $$O(T^2 + P^2)$$ unique suffixes of $$P$$ and  $$T$$ that are actually required.\n<br />\n<br />\n---\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nAs the problem has an **optimal substructure**, it is natural to cache intermediate results.  We ask the question $$\\text{dp(i, j)}$$: does $$\\text{text[i:]}$$ and $$\\text{pattern[j:]}$$ match?  We can describe our answer in terms of answers to questions involving smaller strings.\n\n**Algorithm**\n\nWe proceed with the same recursion as in [Approach 1](#approach-1-recursion), except because calls will only ever be made to `match(text[i:], pattern[j:])`, we use $$\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results.\n\n\n*Top-Down Variation*\n<iframe src=\"https://leetcode.com/playground/Fpg6LXEX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Fpg6LXEX\"></iframe>\n\n*Bottom-Up Variation*\n\n<iframe src=\"https://leetcode.com/playground/dmAyPDG3/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"dmAyPDG3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  The work for every call to `dp(i, j)` for $$i=0, ... ,T$$; $$j=0, ... ,P$$ is done once, and it is $$O(1)$$ work.  Hence, the time complexity is $$O(TP)$$.\n\n* Space Complexity:  The only memory we use is the $$O(TP)$$ boolean entries in our cache.  Hence, the space complexity is $$O(TP)$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "regular-expression-matching",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.964,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "278",
                "title": "Subsets",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "78",
                    "questionFrontendId": "78",
                    "sessionId": "968792",
                    "questionTitle": "Subsets",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/subsets/submit/",
                    "interpretUrl": "/problems/subsets/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> subsets(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> subsets(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def subsets(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def subsets(self, nums: List[int]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> Subsets(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[][]}\\n */\\nvar subsets = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[][]}\\ndef subsets(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func subsets(_ nums: [Int]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func subsets(nums []int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def subsets(nums: Array[Int]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun subsets(nums: IntArray): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn subsets(nums: Vec<i32>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[][]\\n     */\\n    function subsets($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function subsets(nums: number[]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (subsets nums)\\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec subsets(Nums :: [integer()]) -> [[integer()]].\\nsubsets(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec subsets(nums :: [integer]) :: [[integer]]\\n  def subsets(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"subsets\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code> of <strong>unique</strong> elements, return <em>all possible subsets (the power set)</em>.</p>\n\n<p>The solution set <strong>must not</strong> contain duplicate subsets. Return the solution in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3]\n<strong>Output:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [[],[0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10</code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>All the numbers of&nbsp;<code>nums</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Subsets",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Solution Pattern\n\nLet us first review the problems of Permutations / Combinations / Subsets,\nsince they are quite similar to each other and\nthere are some common strategies to solve them.\n\nFirst, their solution space is often quite large:\n\n- [Permutations](https://en.wikipedia.org/wiki/Permutation#k-permutations_of_n): \n$$N!$$. \n\n- [Combinations](https://en.wikipedia.org/wiki/Combination#Number_of_k-combinations): $$C_N^k = \\frac{N!}{(N - k)! k!}$$\n\n- Subsets: $$2^N$$, since each element could be absent or present. \n\nGiven their exponential solution space, it is tricky to ensure that the generated solutions\nare _**complete**_ and _**non-redundant**_.\nIt is essential to have a clear and easy-to-reason strategy.\n\nThere are generally three strategies to do it:\n\n- Recursion\n\n- Backtracking\n\n- Lexicographic generation based on the mapping between binary bitmasks and the corresponding  \npermutations / combinations / subsets.\n\nAs one would see later, the third method could be a good candidate for the interview\nbecause it simplifies the problem to the generation of binary numbers,\ntherefore it is easy to implement and verify that no solution is missing.\n\nBesides, this method has the best time complexity,\nand as a bonus, it generates lexicographically sorted output for the sorted inputs.\n<br />\n<br />\n\n\n---\n#### Approach 1: Cascading\n\n**Intuition**\n\nLet's start from empty subset in output list.\nAt each step one takes new integer into consideration and generates\nnew subsets from the existing ones. \n\n![diff](../Figures/78/recursion.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/eRx6hDFA/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"eRx6hDFA\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N \\times 2^N)$$ to generate all subsets \nand then copy them into output list. \n    \n* Space complexity: $$\\mathcal{O}(N \\times 2^N)$$. This is exactly the number of solutions for subsets\nmultiplied by the number $$N$$ of elements to keep for each subset.  \n    - For a given number, it could be present or absent (_i.e._ binary choice) in a subset solution.\n    As as result, for $$N$$ numbers, we would have in total $$2^N$$ choices (solutions). \n<br />\n<br />\n\n\n---\n#### Approach 2: Backtracking\n\n**Algorithm**\n\n>Power set is all possible combinations of all possible _lengths_, from 0 to n.\n\nGiven the definition, the problem can also be interpreted as finding the _power set_ from a sequence.\n\nSo, this time let us loop over _the length of combination_,\nrather than the candidate numbers, and generate \nall combinations for a given length with the help of _backtracking_ technique.\n\n![diff](../Figures/78/combinations.png)\n\n>[Backtracking](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/2654/) \nis an algorithm for finding all\nsolutions by exploring all potential candidates.\nIf the solution candidate turns to be _not_ a solution \n(or at least not the _last_ one), \nbacktracking algorithm discards it by making some changes \non the previous step, *i.e.* _backtracks_ and then try again.\n\n![diff](../Figures/78/backtracking.png)\n\n**Algorithm**\n\nWe define a backtrack function named `backtrack(first, curr)`\nwhich takes the index of first element to add and \na current combination as arguments.\n\n- If the current combination is done, we add the combination to the final output.\n\n- Otherwise, we iterate over the indexes `i` from `first` to the length of the entire sequence `n`.\n\n    - Add integer `nums[i]` into the current combination `curr`.\n\n    - Proceed to add more integers into the combination : \n    `backtrack(i + 1, curr)`.\n\n    - Backtrack by removing `nums[i]` from `curr`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/DsJXnqza/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"DsJXnqza\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N \\times 2^N)$$ to generate all subsets \nand then copy them into output list.\n \n* Space complexity: $$\\mathcal{O}(N)$$. We are using $$O(N)$$ space to maintain `curr`, and are modifying `curr` in-place with backtracking. Note that for space complexity analysis, we do not count space that is *only* used for the purpose of returning output, so the `output` array is ignored.\n\n\n<br />\n<br />\n\n\n---\n#### Approach 3: Lexicographic (Binary Sorted) Subsets\n\n**Intuition**\n\nThe idea of this solution is originated from [Donald E. Knuth](https://www-cs-faculty.stanford.edu/~knuth/taocp.html).\n\n>The idea is that we map each subset to a bitmask of length n,\nwhere `1` on the i*th* position in bitmask means the presence of `nums[i]`\nin the subset, and `0` means its absence. \n\n![diff](../Figures/78/bitmask4.png)\n\nFor instance, the bitmask `0..00` (all zeros) corresponds to an empty subset, \nand the bitmask `1..11` (all ones) corresponds to the entire input array `nums`. \n\nHence to solve the initial problem, we just need to generate n bitmasks\nfrom `0..00` to `1..11`. \n\nIt might seem simple at first glance to generate binary numbers, but \nthe real problem here is how to deal with \n[zero left padding](https://en.wikipedia.org/wiki/Padding_(cryptography)#Zero_padding),\nbecause one has to generate bitmasks of fixed length, _i.e._ `001` and not just `1`.\nFor that one could use standard bit manipulation trick:\n\n<iframe src=\"https://leetcode.com/playground/3UgS4sHx/shared\" frameBorder=\"0\" width=\"100%\" height=\"123\" name=\"3UgS4sHx\"></iframe>\n\nor keep it simple stupid and shift iteration limits:\n\n<iframe src=\"https://leetcode.com/playground/SKuwq5PS/shared\" frameBorder=\"0\" width=\"100%\" height=\"106\" name=\"SKuwq5PS\"></iframe>\n\n**Algorithm**\n\n- Generate all possible binary bitmasks of length n.\n\n- Map a subset to each bitmask: \n`1` on the i*th* position in bitmask means the presence of `nums[i]`\nin the subset, and `0` means its absence. \n\n- Return output list.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/SfuBhgxk/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"SfuBhgxk\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N \\times 2^N)$$ to generate all subsets \nand then copy them into output list.\n    \n* Space complexity: $$\\mathcal{O}(N \\times 2^N)$$ to keep all the subsets\nof length $$N$$, \nsince each of $$N$$ elements could be present or absent. \n<br />\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "subsets",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.475,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3029",
                "title": "Strobogrammatic Number II",
                "type": 1,
                "info": null,
                "paidOnly": true,
                "chapterId": 53,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "247",
                    "questionFrontendId": "247",
                    "sessionId": "968792",
                    "questionTitle": "Strobogrammatic Number II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/strobogrammatic-number-ii/submit/",
                    "interpretUrl": "/problems/strobogrammatic-number-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> findStrobogrammatic(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> findStrobogrammatic(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findStrobogrammatic(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findStrobogrammatic(self, n: int) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** findStrobogrammatic(int n, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> FindStrobogrammatic(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} n\\n * @return {string[]}\\n */\\nvar findStrobogrammatic = function(n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\\n# @return {String[]}\\ndef find_strobogrammatic(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findStrobogrammatic(_ n: Int) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findStrobogrammatic(n int) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findStrobogrammatic(n: Int): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findStrobogrammatic(n: Int): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_strobogrammatic(n: i32) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @return String[]\\n     */\\n    function findStrobogrammatic($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findStrobogrammatic(n: number): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-strobogrammatic n)\\n  (-> exact-integer? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_strobogrammatic(N :: integer()) -> [unicode:unicode_binary()].\\nfind_strobogrammatic(N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_strobogrammatic(n :: integer) :: [String.t]\\n  def find_strobogrammatic(n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findStrobogrammatic\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer <code>n</code>, return all the <strong>strobogrammatic numbers</strong> that are of length <code>n</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>A <strong>strobogrammatic number</strong> is a number that looks the same when rotated <code>180</code> degrees (looked at upside down).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> n = 2\n<strong>Output:</strong> [\"11\",\"69\",\"88\",\"96\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> n = 1\n<strong>Output:</strong> [\"0\",\"1\",\"8\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 14</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Try to use recursion and notice that it should recurse with <i>n</i> - 2 instead of <i>n</i> - 1."
                    ],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Definitely know how to generate permutations and combinations (subsets), which are great backtracking exercises.\n\nRemove Invalid Parenthesis is a popular one being asked at Facebook, and is also one of our favorite interview questions."
    },
    {
        "id": "54",
        "title": "Sorting and Searching",
        "slug": "sorting-and-searching-3",
        "items": [
            {
                "id": "308",
                "title": "Divide Two Integers",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "29",
                    "questionFrontendId": "29",
                    "sessionId": "968792",
                    "questionTitle": "Divide Two Integers",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/divide-two-integers/submit/",
                    "interpretUrl": "/problems/divide-two-integers/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int divide(int dividend, int divisor) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int divide(int dividend, int divisor) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def divide(self, dividend, divisor):\\n        \\\"\\\"\\\"\\n        :type dividend: int\\n        :type divisor: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def divide(self, dividend: int, divisor: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint divide(int dividend, int divisor){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Divide(int dividend, int divisor) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} dividend\\n * @param {number} divisor\\n * @return {number}\\n */\\nvar divide = function(dividend, divisor) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} dividend\\n# @param {Integer} divisor\\n# @return {Integer}\\ndef divide(dividend, divisor)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func divide(dividend int, divisor int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def divide(dividend: Int, divisor: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun divide(dividend: Int, divisor: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn divide(dividend: i32, divisor: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $dividend\\n     * @param Integer $divisor\\n     * @return Integer\\n     */\\n    function divide($dividend, $divisor) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function divide(dividend: number, divisor: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (divide dividend divisor)\\n  (-> exact-integer? exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec divide(Dividend :: integer(), Divisor :: integer()) -> integer().\\ndivide(Dividend, Divisor) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec divide(dividend :: integer, divisor :: integer) :: integer\\n  def divide(dividend, divisor) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "10\n3",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"divide\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"dividend\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"divisor\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division, and mod operator.</p>\n\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\n\n<p>The integer division should truncate toward zero, which means losing its fractional part. For example, <code>truncate(8.345) = 8</code> and <code>truncate(-2.7335) = -2</code>.</p>\n\n<p><strong>Note: </strong>Assume we are dealing with an environment that could only store integers within the <strong>32-bit</strong> signed integer range: <code>[&minus;2<sup>31</sup>, 2<sup>31</sup> &minus; 1]</code>. For this problem, assume that your function <strong>returns </strong><code>2<sup>31</sup> &minus; 1</code><strong> when the division result overflows</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 10, divisor = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 10/3 = truncate(3.33333..) = 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 7, divisor = -3\n<strong>Output:</strong> -2\n<strong>Explanation:</strong> 7/-3 = truncate(-2.33333..) = -2.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 0, divisor = 1\n<strong>Output:</strong> 0\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> dividend = 1, divisor = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= dividend, divisor &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>divisor != 0</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Divide Integers",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nBefore we get started on the actual approaches, let's cover a few other important things.\n\nDoing this question \"properly\", following *all* the rules given, makes this one of our most difficult medium-level questions.\n\n**Don't panic, you don't need to know all the approaches**\n\nWe have provided a lot of different approaches to show how many different ways there are of solving this question. Approach 1 is a brute-force, and then Approaches 2 to 4 build on each other, and Approach 5 is similar, but approaches the thinking from a very different angle. If you only want to study the first 2 approaches, then that's fine. Approach 2 should be sufficient for an interview. However, we hope you enjoy learning about this question enough that you'll keep reading! :-)\n\n**Make sure you read the question carefully**\n\nThis question was designed with fixed-sized integers in mind. Some languages, such as Python and JavaScript, only have arbitrary-precision integers (meaning they can go *huge*, probably as big as you'll ever need!). Depending on which programming languages you're familiar with, the requirements of this question might seem a little tedious and silly to you. We recommend using a language such as C, C++, or Java for it if you're familiar with them. Otherwise, you'll just need to be really careful and think very carefully about whether or not your algorithm would work in a 32-bit-signed-integer environment. Unfortunately, Leetcode doesn't currently enforce these requirements in languages such as Python, so it's up to you to determine whether or not your solution really is a \"correct\" one. Hint: Throw heaps of `assert` statements into your code.\n\nMost of the upvoted posts on the discussion forum *aren't following the rules specified in the question*. Here are some of the problems I've seen:\n\n- The use of `long` in Java or `long long` in C++ is *not allowed*, because the question states that we're working in an environment where we only have integers within the range $$[\u22122^{31},  2^{31} \u2212 1]$$.\n- The use of `abs` in Python (and other arbitrary-precision integer languages) needs to be considered carefully, because $$abs(-2^{31}) = 2^{31}$$, *which is **outside** the allowed range by 1*.\n- While you might be tempted to use multiplication and division for a few \"simple\" tasks, this is unnecessary. Here are some alternatives:\n  - Instead of `a = a * -1` for making numbers negative, use `a = -a`.\n  - Instead of using `a / 2` for dividing by `2`, use the right shift operator; `a >> 1`.\n  - Instead of using `a * 2` for doubling, use `a = a + a`, `a += a`, or even the left shift operator; `a << 1`.\n\nAdditionally, we strongly advise against allowing overflows to happen *at all*. For some compilers/interpreters/languages, `INT_MAX + 1 \u2261 INT_MIN`. For others, `INT_MAX + 1 \u2261 INT_MAX`. And for others again, it is `undefined` or ***crash***. Some people on the discussion forum have written code that actually relies on specific overflow behaviour for correctness. While this can be quite \"clever\", it's not portable at all. For code like that to be shippable, you'd need to be *certain* of the behaviour of the specific system it is to run on, and that no future system upgrade would change the behaviour. If it works on your machine, but not on Leetcode's machine, it's *incorrect code*.\n\nIn this article, we'll be looking at a few techniques that can solve the problem elegantly and are portable.\n\n**In what cases will the *final result* be out of range?**\n\nWe're told the following about overflow in the problem description:\n\n> For the purpose of this problem, assume that your function returns $$31 \u2212 1$$ when the division result overflows.\n\nSo, keeping in mind that our integer range is $$[\u22122^{31},  2^{31} \u2212 1]$$, in what cases could we have an end result *outside* of this range?\n\nWell, when we do `a / b = c`, where `a` and `b` are both *positive integers*, we know that `c \u2264 a`. In other words, the answer (`c`) cannot end up bigger than the thing we divided (the dividend, `a`).\n\nSomething similar happens even when one or both of them are negative. In that case, `abs(a) \u2264 abs(c)`. Another way of thinking about it is that `c` will *always* be closer to zero than `a` is (or, they could also be equal).\n\nTherefore, for `a` and `b` within the range $$[\u22122^{31} + 1,  2^{31} \u2212 1]$$, the result `a / b` will be closer to zero, so has to be fine.\n\nHowever, notice we left $$-2^{31}$$ out of the above range. This is because there's a special case of $$-2^{31} / -1$$, which has an answer of $$2^{31}$$. But $$2^{31}$$ is outside of the integer range! So instead we return $$2^{31}-1$$ for this case (which is in range).\n\nMost algorithms for this question simply check for the case $$-2^{31} / -1$$ at the start, returning $$2^{31} - 1$$ if they detect it. This is a sensible approach.\n\n</br>\n\n---\n\n#### Approach 1: Repeated Subtraction\n\n**Intuition**\n\n*This approach won't pass the large test cases. However, we'll use it as a starting point, and to introduce a key idea we'll be using for all the approaches\u2014doing **all** intermediate working with negative numbers.*\n\nThink about what it means to divide two integers. In order to divide, say, `15` by `5`, we ask how many times we can put `5` into `15`. The simplest way of doing this is to subtract `5` from `15` repeatedly until we can no longer do so.\n\n```python\n15 - 5 = 10\n10 - 5 = 5\n 5 - 5  = 0\n```\n\nBecause we were able to do `3` subtractions, we know the answer to `15 / 5` is `3`.\n\nAs another example, consider dividing `20` by `3`.\n\n```python\n20 - 3 = 17\n17 - 3 = 14\n14 - 3 = 11\n11 - 3 = 8\n 8 - 3 = 5\n 5 - 3 = 2\n```\n\nWe had to stop when we got to `2`, because `3` is bigger than `2`. So, because we were able to do `6` subtractions, we know the answer to `20 / 3` is `6`.\n\nIn the example above, we call `20` the `dividend` and `3` the `divisor` (`2` is the *remainder*, which we ignore for this question). The result of dividing the `dividend` by the `divisor` is the number of times we could subtract the `divisor` from the `dividend`. A commonly used name for this result is the `quotient`.\n\nTherefore, our first algorithm will simply subtract the `divisor` from the `dividend` repeatedly until doing so would push it below `0`. It will keep count of the number of these subtractions done, so that it can return it at the end.\n\n*Assuming that both the dividend and divisor are positive*, here is a code snippet for this process.\n\n```java\npublic int divide(int dividend, int divisor) {\n    int quotient = 0;\n    while (dividend - divisor >= 0) {\n        quotient++;\n        dividend -= divisor;\n    }\n    return quotient;\n}\n```\n\nThis doesn't work if one, or both, of the `dividend` or `divisor` are negative\u2014the dividend will head *away* from zero! Trying to generalise this code to handle all four of the possible sign combinations is problematic, because some are repeated addition instead of subtraction, and some have a `<= 0` continuation case instead of `>= 0`.\n\nA logical solution here is to simply convert any negative inputs to positives, and then put a negative sign back on at the end if needed. Recall that `positive * negative = negative`, and `negative * negative = positive`. In other words, if there was exactly one negative sign in the inputs, the final result is negative. Otherwise, it's positive.\n\nFor example:\n\n```python\n 60 /  10 =  6\n-60 /  10 = -6\n 60 / -10 = -6\n-60 / -10 =  6\n```\n\nWe'll avoid using `abs` (it causes overflows, that we'll talk more about soon). So for now, let's just use some conditionals so that we can count the negative signs at the same time as making the numbers positive. At the end, we'll then need to put the sign back on if needed.\n\n```java\npublic int divide(int dividend, int divisor) {\n\n    // Count the number of negatives + convert parameters to positives.\n    int negatives = 0;\n    if (dividend < 0) {\n        negatives++;\n        dividend = -dividend;\n    }\n    if (divisor < 0) {\n        negatives++;\n        divisor = -divisor;\n    }\n\n    // Count the number of subtractions.\n    int subtractions = 0;\n    while (dividend - divisor >= 0) {\n        subtractions++;\n        dividend -= divisor;\n    }\n\n    // Convert back to negative if needed.\n    if (negatives == 1) {\n        subtractions = -subtractions;\n    }\n\n    return subtractions;\n}\n```\n\nHowever, there are still a couple of issues here.\n\nFirstly, we haven't handled the `-2147483648 / -1` case. Like we said in the Overview section, this case is best handled as a special case at the start of the algorithm.\n\n```java\nif (dividend == -2147483648 && divisor == -1) {\n    return 2147483647;\n}\n```\n\nThe second issue doesn't happen in Java, but it will happen with the same algorithm in `C`\u2014an integer overflow. In Java, the math happens to combine perfectly with Java's overflow behaviour to give the correct answers. Because our goal for this solution article is to develop portable algorithms that work with any compiler/interpreter/language, we still want to fix this (and will need this same idea for our other approaches anyway). Specifically, the potentially problematic code is on these lines:\n\n```java\ndividend = -dividend;\n```\n\nand\n\n```java\ndivisor = -divisor;\n```\n\nIf `dividend = -2147483648`, then converting it to a positive number will behave differently depending on the language/compiler/interpreter you're using. This is because the positive form (`2147483648`) is outside of the 32-bit signed integer range.\n\nTreating this as an edge case is impractical\u2014it affects billions of cases. We'll need a better way.\n\n> The key observation to make is that the problems are occurring because there are more negative signed 32-bit integers than there are positive signed 32-bit integers. Each positive signed 32-bit integer has a corresponding negative signed 32-bit integer. However, the same is not true for negative signed 32-bit integers. The smallest one, `-2147483648`, is alone. It is this number that causes the problems.\n\nThe best solution is to work with negative, instead of positive, numbers. This is allows us to use the largest possible range of numbers, and it covers all the ones we need.\n\nAt the start of the algorithm, we'll instead convert both inputs to *negative*. Then, we'll need to modify the loop so that it *subtracts* the negative divisor from the negative dividend. At the end, we'll need to convert the result back to a positive if the number of negative signs in the input was not 1.\n\nThe code for this is our complete approach 1, and can be found in the code box below.\n\n**Algorithm**\n\nRemember that we're converting the inputs to *negative* numbers. This is because we don't want separate code for all the possible combinations of positive/negative divisor and dividend. We converted them to negative instead of positive because the range of valid negative numbers is bigger, and therefore overflows can be cleanly avoided.\n\nThe looping condition is `while (dividend - divisor <= 0)` because the difference is moving towards zero from the *negative* side. Therefore, we want to continue while it is still under it. Once it goes over, we know we're done.\n\n<iframe src=\"https://leetcode.com/playground/mDkdkke2/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mDkdkke2\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the absolute value of $$dividend$$.\n\n- Time Complexity : $$O(n)$$.\n\n    Consider the worst case where the divisor is $$1$$. For any dividend $$n$$, we'll need to subtract $$1$$ a total of $$n$$ times to get to $$0$$. Therefore, the time complexity is $$O(n)$$ in the worst case.\n\n- Space Complexity : $$O(1)$$.\n\n    We only use a fixed number of integer variables, so the space complexity is $$O(1)$$.\n\nSeeing as $$n$$ can be up to $$2^{31}$$, this algorithm is **too slow** on the largest test cases. We'll need to do better!\n\n</br>\n\n---\n\n#### Approach 2: Repeated Exponential Searches\n\n**Intuition**\n\nLinear Search is too slow because at each step, we only subtract one copy of the divisor from the dividend. A better way would be to try and subtract multiple copies of the divisor each time.\n\nOne way of quickly increasing numbers, without using multiplication, is to double them repeatedly. So let's try doubling the divisor until it no longer fits into the dividend.\n\nIt'll be easiest to understand with an example, so let's say we have a dividend of `93706` and a divisor of `157`. We'll now just see what happens when we repeatedly double `157` until it's bigger than `93706`.\n\n```python\n157\n314\n628\n1256\n2512\n5024\n10048\n20096\n40192\n80384\n160768 # Too big\n```\n\nFrom this, we know that we can fit `80384` into `93706`, and that `80384` must be a multiple of `157`. But how many copies of `157` is this?\n\nWell, each time we double a number we also double the amount of copies of the original number. So because we doubled `157` nine times, we must have had `2\u2079` copies of `157`. Indeed, `2\u2079 \u00b7 157 = 80384`. Yay!\n\nBut, we still have some left over\u2014in fact we have `93706 - 80384 = 13322` left over! That's still a *lot* of copies of `157` we haven't counted! So what could we do about this? Well, if we work out how many times `157` fits into `13322`, we could just add that to `512` to get our result.\n\nHow can we work out how many times `157` fits into `13322`? Well, we just repeat the same process, adding to the result as we go, until there's nothing left for `157` to fit into.\n\nIf we do this, we'll find that `157 \u00b7 2\u2076 = 10048` is the highest power that fits into `13322`, leaving us with `13322 - 10048 = 3274` and a quotient so far of `2\u2076 + 2\u2079 = 576` (if you noticed that `10048` looks very familiar, well done. We'll be looking at this in approach 3).\n\nWe repeat this process until the dividend is less than `157`.\n\nHere is the algorithm in code (for this example we're pretending the numbers are positive, and we're ignoring the \"overflow\" case. In the actual code, we use negatives numbers to prevent the overflow).\n\n```java\nint quotient = 0;\n/* Once the divisor is bigger than the current dividend,\n * we can't fit any more copies of the divisor into it. */\nwhile (dividend >= divisor) {\n    /* Now that we're in the loop, we know it'll fit at least once as\n     * divivend >= divisor */\n    int powerOfTwo = 1;\n    int value = divisor;\n    /* Check if double the current value is too big. If not, continue doubling.\n     * If it is too big, stop doubling and continue with the next step */\n    while (value + value < dividend) {\n        value += value;\n        powerOfTwo += powerOfTwo;\n    }\n    // We have been able to subtract divisor another powerOfTwo times.\n    quotient += powerOfTwo;\n    // Remove value so far so that we can continue the process with remainder.\n    dividend -= value;\n}\n\nreturn quotient;\n```\n\nThis algorithm is known as exponential search and is commonly used for searching sorted spaces of unknown size for the first value that past a particular condition. It it a lot like binary search, having the same time complexity of $$O(\\log \\, n)$$. I believe this is why this question is tagged as binary search (there is technically a way of using binary search, but it is a lot more complicated and gives no real efficiency gain, and so we won't be talking about it in this article.)\n\nHere's an animation of using this algorithm to do `divide(93706, 157)`.\n\n!?!../Documents/29_animation_1.json:700,200!?!\n\n**Algorithm**\n\nIn Approach 1, we used negative numbers due to their larger range avoiding overflow problems. We do the same here.\n\nAgain, some of the conditions might initially seem like they're around the wrong way. Think carefully about them, and remember that we're *working entirely with negative numbers*.\n\n<iframe src=\"https://leetcode.com/playground/LBbbKEiL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"LBbbKEiL\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the absolute value of $$dividend$$.\n\n- Time Complexity : $$O(\\log^2 \\, n)$$.\n\n    We started by performing an exponential *search* to find the biggest number that fits into the current dividend. This search took $$O(\\log \\, n)$$ operations.\n\n    After doing this *search*, we updated the dividend by subtracting the number we found. In the worst case, we were left with a dividend slightly less than half of the previous dividend (if it was more than half, then we couldn't have found the maximum number that fit in by doubling!).\n\n    So how many of these searches did we need to do? Well, with the dividend *at least* halving after each one, there couldn't have been more than $$O(\\log \\, n)$$ of them.\n\n    So combined together, in the worst case, we have $$O(\\log \\, n)$$ searches with each search taking $$O(\\log \\, n)$$ time. This gives us $$O((\\log \\, n) \\cdot (\\log \\, n)) = O(\\log^2 \\, n)$$ as our total time complexity.\n\n- Space Complexity : $$O(1)$$.\n\n    Because only a constant number of single-value variables are used, the space complexity is $$O(1)$$.\n\n</br>\n\n---\n\n#### Approach 3: Adding Powers of Two\n\n**Intuition**\n\nIn the previous approach, we did repeated exponential searches for the largest value that would fit into the current dividend.\n\nHowever, notice that each time we do a search, we repeatedly go through the same doubles to find the largest. For example, consider the first and second step of our previous example: `divide(93706, 157)`.\n\nOn the first step we did this:\n\n```python\n157\n314\n628\n1256\n2512\n5024\n10048\n20096\n40192\n80384\n160768 # Too big\n```\n\nThis left us with a difference of `93706 - 80384 = 13322`.\n\nOn the second step we repeated this process again with `13322`:\n\n```python\n157\n314\n628\n1256\n2512\n5024\n10048\n20096 # Too big\n```\n\nNotice that we've just recomputed the first seven terms of the doubles *again!*\n\nInstead of doing this, we should find a way so that we can compute the sequence just once and then use the results from this to compute our quotient.\n\nIn order to do this, we need to notice one more property about the difference. That property is that the difference will *always* be less than the previous doubling of the divisor that fits into it. Why? Well, if it were equal, or bigger, than the largest doubling, then we must've stopped doubling too soon. So, the difference is always less than the biggest doubling.\n\nSo to use these properties, we'll put all the \"doubles\" of `157` into a List. Then we'll iterate backwards over the list taking all the numbers that will fit into the dividend. Here's an animation of the algorithm.\n\n!?!../Documents/29_animation_2.json:960,300!?!\n\nHere is the algorithm in code (like before, we're showing this example with positive inputs and pretending overflow doesn't exist, as our focus right now is on the approach and not the implementation. We'll do it correctly in the actual code of course!).\n\n```java\nList<Integer> doubles = new ArrayList<>();\nList<Integer> powersOfTwo = new ArrayList<>();\n\nint powerOfTwo = 1;\n\n/* Nothing too exciting here, we're just making a list of doubles of 1 and\n * the divisor. This is pretty much the same as Approach 2, except we're\n * actually storing the values this time. */\nwhile (divisor <= dividend) {\n    powersOfTwo.add(powerOfTwo);\n    doubles.add(divisor);\n    powerOfTwo += powerOfTwo;\n    divisor += divisor;\n}\n\nint quotient = 0;\n/* Go from largest double to smallest, checking if the current double fits.\n * into the remainder of the dividend */\nfor (int i = doubles.size() - 1; i >= 0; i--) {\n    if (doubles[i] <= dividend) {\n        // If it does fit, add the current powerOfTwo to the quotient.\n        quotient += powersOfTwo.get(i);\n        // Update dividend to take into account the bit we've now removed.\n        dividend -= doubles.get(i);\n    }\n}\n```\n\nWe also saved the powers of two, as we need to know which corresponded with each multiple of `157`.\n\n**Algorithm**\n\nAgain, we work with negative numbers to elegantly avoid overflow issues.\n\nHopefully you're getting the hang of the conditionals that have to work with negative, instead of positive, numbers!\n\n<iframe src=\"https://leetcode.com/playground/hud6tA4H/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hud6tA4H\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the absolute value of $$dividend$$.\n\n- Time Complexity : $$O(\\log \\, n)$$.\n\n    We take $$O(\\log \\, n)$$ time in the first loop to create our list of doubles (and powers of two).\n\n    For the second loop, because there's $$O(\\log \\, n)$$ items in the list of doubles, it only takes  $$O(\\log \\, n)$$time for this loop as well.\n\n    Combined, our total time complexity is just $$O(\\log \\, n + \\log \\, n) = O(\\log \\, n)$$.\n\n- Space Complexity :  $$O(\\log \\, n)$$.\n\n    The length of the list of doubles of the divisor is proportional to $$O(\\log \\, n)$$ so our space complexity is $$O(\\log \\, n)$$.\n\nThis approach is interesting in that the time complexity is lower than the previous one, but it requires a bit of space. Trading off space for time is very common practice.\n\nHowever, as we'll see in the next approach, we can modify the algorithm so that we don't need $$O(\\log \\, n)$$ space at all!\n\n</br>\n\n---\n\n#### Approach 4: Adding Powers of Two with Bit-Shifting\n\n**Intuition**\n\nIn Approach 3 we put doubles of the divisor, and powers of two into lists. This was so that we could easily refer back to them.\n\nHowever, we don't need to save them\u2014we can simply find the largest double, along with it's corresponding power of two, and then generate the rest by dividing by two repeatedly. *But we can't divide by two, that breaks the rules...*, you might be thinking. The solution is to use the **right-shift** bitwise operator!\n\n```java\nint a = 1020;\na = a >> 1;\nSystem.out.println(a);\n// Prints 510.\n```\n\nOne potential pitfall with the right-shift operator is using it on negative *odd* numbers. Two's complement makes the result one-off what you would expect/ probably wanted. This happens in *all* the programming languages we've checked, although there could be a few that behave differently.\n\n```java\nint a = -1020;\na = a >> 1;\nSystem.out.println(a);\n// Prints -510. Great!\nint b = -1021;\nb = b >> 1;\nSystem.out.println(b);\n// Prints -511. Ugghh.\n```\n\nThe solution is to add 1 before doing the bit-shift *on a negative number*. This way, it'll be \"correct\" regardless of whether the number was odd or even.\n\n```java\nint a = -1020;\na = (a + 1) >> 1;\nSystem.out.println(a);\n// Prints -510. Great!\nint b = -1021;\nb = (b + 1) >> 1;\nSystem.out.println(b);\n// Prints -510. Yay!\n```\n\nThe reason we brought this up is because it's a pitfall you might encounter with your own code, and potentially be driven crazy by, if you have limited experience working with bitwise operators. It turns out we can completely ignore the issue for the algorithm we've got here, as we know the numbers we're right shifting happen to *always be even*. This is because of the way they were generated.\n\nHere is the algorithm, again using only positive numbers (like before, check the next section to see the actual implementations).\n\n```java\n /* In the first loop, we simply find the largest double of divisor. This is\n  * very similar to the start of what we did in Approach 2. */\nint highestDouble = divisor;\nint highestPowerOfTwo = 1;\nwhile (highestDouble + highestDouble <= dividend) {\n    highestPowerOfTwo += highestPowerOfTwo;\n    highestDouble += highestDouble;\n}\n\n/* In the second loop, we work out which powers of two fit in, by\n * halving highestDouble and highestPowerOfTwo repeatedly. */\nint quotient = 0;\nwhile (divisor <= dividend) {\n    if (dividend >= highestDouble) {\n        quotient += highestPowerOfTwo;\n        dividend += highestDouble;\n    }\n    highestPowerOfTwo >>= 1;\n    highestDouble >>= 1;\n}\n\nreturn quotient;\n```\n\n**Algorithm**\n\nAgain, this algorithm works with negative numbers.\n\n<iframe src=\"https://leetcode.com/playground/i4buCodV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"i4buCodV\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$n$$ be the absolute value of $$dividend$$.\n\n- Time Complexity : $$O(\\log \\, n)$$.\n\n    Same as Approach 3, except instead of looping over a generated array, we simply perform an $$O(1)$$ halving operation to get the next values we need.\n\n- Space Complexity : $$O(1)$$.\n\n    We only use a fixed number of integer variables, so the space complexity is $$O(1)$$.\n\n</br>\n\n---\n\n#### Approach 5: Binary Long Division\n\n**Intuition**\n\nThe previous approaches are all fine for an interview. We provide this approach as an alternate way of thinking about the problem, that some people might relate better to.\n\nAnyway, another way we could divide two integers is to consider how we do division in math.\n\nOne of the common ways, which you may or may not have learned in school, is called long division.\n\nLike the previous two approaches, long division works by find a large multiple of the divisor which fits into the dividend. Then it subtracts this from the dividend and repeats the process.\n\n***Long Division in Base-10***\n\n*If you're familiar with long division feel free to skip this next bit.*\n\nLet's go through an example of long division. We'll start with a divisor of `379` and dividend of `872703948`. To perform division, we go through each digit looking at whether or not `379` fits into the right-most digits we've looked at so far.\n\nLet's start with the first digit:\n\n![Division of 872703948 by 379 where the first digit of result is unknown](../Figures/29/long_division_base_10_first_digit_unknown.png)\n\nClearly `379` does not fit into `8`, so we put a `0` and continue to the next digit.\n\n![Division of 872703948 by 379 where the second digit of result is unknown](../Figures/29/long_division_base_10_second_digit_unknown.png)\n\nSame thing again, `379` doesn't fit into `87`, so we put a `0` and continue to the next digit.\n\n![Division of 872703948 by 379 where the third digit of result is unknown](../Figures/29/long_division_base_10_third_digit_unknown.png)\n\nFinally we find `379` *does* fit into `872` (because `379` \u2264 `872`, it must fit in). Because it fits in two times we put the digit `2` onto our result. Don't worry about the multiplication we just referred to, we have a solution for that shortly!\n\n![Division of 872703948 by 379 where the third digit of result is 2](../Figures/29/long_division_base_10_third_digit_known.png)\n\nAt this point, you might wonder why we divide to see how many times `379` goes into `872`. This is because what it actually means is how many times `379000000` goes into `872703948`. It goes in `2` times. Okay, let's continue on.\n\nHowever `379000000` doesn't go into `872703948` exactly `2` times; `379000000 * 2 = 758000000`.\n\n`758000000` is quite a bit short of `872703948`. In fact, there's still `872703948 - 758000000 = 114703948` left over.\n\nWe now need to find how many times `379` goes into `114703948`.\n\n![Division of 872703948 by 379 with first difference](../Figures/29/long_division_base_10_first_difference.png)\n\nNow we simply repeat the process again with the difference. Let's start with the first digit again.\n\n![Division of 872703948 by 379 with first difference and showing trying to divide 379 into 1](../Figures/29/long_division_base_10_first_difference_digit_1.png)\n\nLike before, `379` doesn't fit into `1`. Repeating this again, we'll see that it doesn't go into `11` or `114` either. In fact, it's impossible for it to fit until the digit after the one where we placed our `2`. This shouldn't be too surprising\u2014if it did fit into the first three digits, we should've had a `3` (or higher) instead of a `2`.\n\nAs such, we can simply continue the process from the digit position after the `2`. Doing so, we discover that `379` goes into `1147` a total of `3` times. Let's add that to our result.\n\n(Remember this means `37900000` goes into `114703948` at most `3` times).\n\n![Division of 872703948 by 379 with first difference and 4th result digit](../Figures/29/long_division_base_10_first_difference_digit_4.png)\n\nWe continue to repeat this process. Eventually, we'll run out of digits and wind up with our final result.\n\n![Complete long division of 872703948 by 379](../Figures/29/long_division_base_10_complete.png)\n\nWith this final result, we now know that `379` goes into `114703948` a total of `2302648` times.\n\n***Long Division in Base-2***\n\nOne of the problems with using base-10 division for this problem is that in order to perform the algorithm, we'd need to be able to add the necessary `0`s onto the end of the divisor. Given that we aren't allowed to use multiplication, this would prove to be a bit of a challenge!\n\nAdditionally, the current divisor could fit into the current dividend up to `10` times. Again, without multiplication, this is a bit annoying to calculate.\n\nThere are ways we can hack around these problems, but a far better way is to simply do the division in base-2 so that we can use bitwise operators.\n\nIn base-2, division works exactly the same way. However, because there are only two digits (`1` and `0`), we can simply check if the divisor-padded-with-zeroes is greater than the current dividend, and then if it is, add a `0` digit to the quotient, otherwise add a `1` digit.\n\nHere's an animation showing base-2 long division.\n\n!?!../Documents/29_animation_3.json:960,540!?!\n\n**Algorithm**\n\nLike other approaches we use negative numbers so that the maximum possible range of numbers is available to us.\n\nWe can no longer assume the divisor, that we're right shifting, is always an *even* number. Therefore, we need to add 1 before doing the right shift. Otherwise, it could be off by 1: `(divisor + 1) >> 1;`.\n\nNot all programming languages support *left* shifting with negative numbers. In those that do, we need to be really careful with overflows.\n\n<iframe src=\"https://leetcode.com/playground/GQKt2NRa/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GQKt2NRa\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the absolute value of $$dividend$$.\n\n- Time Complexity : $$O(\\log \\, n)$$.\n\n    As we loop over the bits of our dividend, performing an $$O(1)$$ operation each time, the time complexity is just the number of bits of the dividend: $$O(\\log \\, n)$$.\n\n- Space Complexity : $$O(1)$$.\n\n    We only use a fixed number of int variables, so the space complexity is $$O(1)$$.\n\n</br>\n\n---\n\n#### Final Words\n\nThis question is quite difficult, and is one many people fear getting in an interview. If you get a question like this though, don't panic, but instead just work through it step-by-step.\n\nA good strategy for this particular question could be to first develop your algorithm to work with *positive integers*. In fact, you might like to even assume that the inputs could only possibly be positive integers. This removes a **lot** of the code at the start of the algorithm (remember how about half of most of the approaches was literally just generalising all the numbers to negatives?!).\n\nOnce you feel you have your approach working with positive integers, think about how you could adapt it to work with any integer inputs, and then to avoid overflow issues.\n\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "divide-integers",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.818,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "279",
                "title": "Search in Rotated Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "33",
                    "questionFrontendId": "33",
                    "sessionId": "968792",
                    "questionTitle": "Search in Rotated Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/search-in-rotated-sorted-array/submit/",
                    "interpretUrl": "/problems/search-in-rotated-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def search(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint search(int* nums, int numsSize, int target){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number}\\n */\\nvar search = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer}\\ndef search(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func search(_ nums: [Int], _ target: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func search(nums []int, target int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def search(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun search(nums: IntArray, target: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer\\n     */\\n    function search($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function search(nums: number[], target: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search nums target)\\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: integer\\n  def search(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,5,6,7,0,1,2]\n0",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"search\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Search in Rotated Sorted Array",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Binary search\n\nThe problem is to implement a search in $$\\mathcal{O}(\\log{N})$$ time\nthat gives an idea to use a binary search.\n\nThe algorithm is quite straightforward :\n\n* Find a rotation index `rotation_index`,\n_i.e._ index of the smallest element in the array.\nBinary search works just perfect here.\n\n* `rotation_index` splits array in two parts.\nCompare `nums[0]` and `target`\nto identify in which part one has to look for `target`.\n\n* Perform a binary search in the chosen part of the array.\n\n!?!../Documents/33_LIS.json:1000,510!?!\n\n<iframe src=\"https://leetcode.com/playground/Q6Yorxh3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Q6Yorxh3\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log{N})$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: One-pass Binary Search\n\nInstead of going through the input array in two passes, we could achieve the goal in one pass with an _revised_ binary search.\n\n>The idea is that we add some additional *condition checks* in the normal binary search in order to better _narrow down_ the scope of the search.\n\n**Algorithm**\n\nAs in the normal binary search, we keep two pointers (_i.e._ `start` and `end`) to track the search scope. At each iteration, we reduce the search scope into half, by moving either the `start` or `end` pointer to the middle (_i.e._ `mid`) of the previous search scope.\n\nHere are the detailed breakdowns of the algorithm:\n\n- Initiate the pointer `start` to `0`, and the pointer `end` to `n - 1`.\n\n- Perform standard binary search. While `start <= end`:\n\n    - Take an index in the middle `mid` as a pivot.\n\n    - If `nums[mid] == target`, the job is done, return `mid`.\n\n    - Now there could be two situations:\n\n        - Pivot element is larger than the first element in the array, _i.e._ the subarray from the first element to the pivot is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_small_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go left: `end = mid - 1`.\n\n            - Otherwise: go right: `start = mid + 1`.\n\n        - Pivot element is smaller than the first element of the array, _i.e._ the rotation index is somewhere between `0` and `mid`. It implies that the sub-array from the pivot element to the last one is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_big_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go right: `start = mid + 1`.\n\n            - Otherwise: go left: `end = mid - 1`.\n\n- We're here because the target is not found. Return -1.\n\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/UAxfNC7U/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"UAxfNC7U\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(\\log{N})$$.\n* Space complexity: $$\\mathcal{O}(1)$$.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "search-in-rotated-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.743,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3030",
                "title": "Find First and Last Position of Element in Sorted Array",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "34",
                    "questionFrontendId": "34",
                    "sessionId": "968792",
                    "questionTitle": "Find First and Last Position of Element in Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-first-and-last-position-of-element-in-sorted-array/submit/",
                    "interpretUrl": "/problems/find-first-and-last-position-of-element-in-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> searchRange(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] searchRange(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def searchRange(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def searchRange(self, nums: List[int], target: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* searchRange(int* nums, int numsSize, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] SearchRange(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer[]}\\ndef search_range(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func searchRange(_ nums: [Int], _ target: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchRange(nums []int, target int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def searchRange(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun searchRange(nums: IntArray, target: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search_range(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer[]\\n     */\\n    function searchRange($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function searchRange(nums: number[], target: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search-range nums target)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search_range(Nums :: [integer()], Target :: integer()) -> [integer()].\\nsearch_range(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search_range(nums :: [integer], target :: integer) :: [integer]\\n  def search_range(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[5,7,7,8,8,10]\n8",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"searchRange\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\n\n<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 8\n<strong>Output:</strong> [3,4]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [5,7,7,8,8,10], target = 6\n<strong>Output:</strong> [-1,-1]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [], target = 0\n<strong>Output:</strong> [-1,-1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i]&nbsp;&lt;= 10<sup>9</sup></code></li>\n\t<li><code>nums</code> is a non-decreasing array.</li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= target&nbsp;&lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find First and Last Position of Element in Sorted Array",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nLet's briefly look at a brute-force way of solving this problem. Given a target element, we can simply do a linear scan over the entire array to find the first and the last position. The first occurrence will be the first time when we encounter this target. Thereafter, we continue to scan elements until we find one that is greater than the target or until we reach the end of the array. This will help us determine the last position of the target. \r\n\r\nThe downside of this approach is that it doesn't take advantage of the *sorted* nature of the array. This linear scan approach has a time complexity of $$O(N)$$ because there are $$N$$ elements in the array. That doesn't sound too bad, right? Well, it does if we compare it to an approach with logarithmic time complexity. We'll look at a *binary search-based approach* to solve this problem which will take advantage of the sorted nature of the array.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach: Binary Search\r\n\r\n**Intuition**\r\n\r\nLet's review binary search a bit. Given a sorted array, binary search works by looking at the middle element of the given array, and based on the value of the middle element, it decides to discard one half of the array. At each step, we reduce the length of the array to search by half and that is what leads to the logarithmic time complexity of the algorithm. Usually, we employ the binary search algorithm to determine if an element is in a sorted array. Here, we can tweak the binary search algorithm to find the first and the last position of a given element. \r\n\r\nLet's look at the basic binary search algorithm one step at a time:\r\n\r\n* We use 2 variables to keep track of the subarray that we are scanning. Let's call them `begin` and `end`. Initially, `begin` is set to `0` and `end` is set to the last index of the array.\r\n* We iterate until `begin` is greater than or equal to `end`.\r\n* At each step, we calculate the middle element `mid = (begin + end) / 2`. We use the value of the middle element to decide which half of the array we need to search. \r\n    - If the target that we're searching for has a value lower than the `mid` element, we discard the right half of the array i.e. `end = mid - 1`. \r\n    - If the target that we're searching for has a value higher than the `mid` element, we discard the left half of the array i.e. `begin = mid + 1`. \r\n    - If `nums[mid] == element`, then we found our target and we return from there.\r\n\r\n**Binary Search and Bidirectional Scan**\r\n\r\nA naive way to use binary search to find the first and the last position of a target is to first determine the index of **any** occurrence of the given target. Suppose we know that the target is at the index `i` in the array. From there on, we do a linear scan to the left and keep going until we find the first occurrence of this target. Similarly, we do a linear scan to the right to find the last position. This works just fine. However, in the worst case when our entire array (or say 90% or more of it) is filled with the target, then this is a linear-time algorithm. In that case, the linear scan will end up taking more time than the binary-search itself.\r\n\r\n**Two Binary Searches**\r\n\r\nInstead of using a linear-scan approach to find the boundaries once the target has been found, let's use two binary searches to find the first and last position of the target. We can make a small tweak to the checks we perform on the middle element.  This tweak will help us determine the first and the last position of an element\r\n\r\nNormally, we compare `nums[mid] == target` because we simply need to check if we found our target or not. But now, apart from checking for equality, we also need to check if `mid` is the first or the last index where the target occurs. Let's see how we can do that. \r\n\r\n**First position in the array**\r\n\r\nThere are two situations where an index will be the first occurrence of the target in the array.\r\n\r\n1. If `mid` is the same as `begin` which implies our `mid` element is the *first* element in the remaining subarray.\r\n2. The element to the left of this index is not equal to the target that we are searching for. I.e. `nums[mid - 1] != target`. If this condition is not met, we should keep searching on the left side of the array for the first occurrence of the target. \r\n\r\nLet's take a look at an example depicting this idea. In the example below, we are searching for the first occurrence of the number `7`.\r\n\r\n![Example for finding the first position of a target](../Figures/34/img1.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Find the first position of \"7\" in the array.*\r\n{:align=\"center\"}\r\n\r\nInitially, the variables `begin` and `end` are `0` and `5` respectively. So, our `mid` element is `(0 + 5) / 2 = 2`. \r\n\r\n![Middle element not the first occurrence](../Figures/34/img2.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 2. The middle element is a match but it is not the first occurrence.*\r\n{:align=\"center\"}\r\n\r\nNow, `begin` is still `0` but `end` has moved to `mid - 1 = 1`. Now we have narrowed our search down to the first two elements of the array. Our updated `mid` is `(0 + 1) / 2 = 0`. This element is lower than the target we are looking for `2 < 7`. So, we discard the \"left\" side of this subarray and update `begin = mid + 1`.  This leaves us with a single index, which is in fact the first occurrence of the element \"7\".\r\n\r\n**Last position in the array**\r\n\r\nThere are two situations where an index will be the last occurrence of the target in the array.\r\n\r\n1. If `mid` is the same as `end` which implies our `mid` element is the *last* element of the remaining subarray.\r\n2. If the element to the right of `mid` is not equal to the target we are searching for. I.e. `nums[mid + 1] != target`. If this condition is not met, we should keep searching on the right side of the array for the last occurrence of the target. \r\n\r\nLet's take a look at an example depicting this idea. In the example below, we are searching for the last occurrence of the number `7`.\r\n\r\n![Example for finding the last position of an element](../Figures/34/img3.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 3. Find the last position of \"7\" in the array.*\r\n{:align=\"center\"}\r\n\r\nInitially, the variables `begin` and `end` are `0` and `5` respectively. So, our `mid` element is `(0 + 5) / 2 = 2`. \r\n\r\n![Middle element not the last occurrence](../Figures/34/img4.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 4. The middle element is not a match.*\r\n{:align=\"center\"}\r\n\r\nThe updated `mid` is greater than \"7\". So, we discard the right side of the array.  This leaves us with just a single element in the array which is \"7\" and it is also the last occurrence.\r\n\r\n**Algorithm**\r\n\r\n1. Define a function called `findBound` which takes three arguments: the `array`, the `target` to search for, and a boolean value `isFirst` which indicates if we are trying to find the first or the last occurrence of `target`.\r\n2. We use 2 variables to keep track of the subarray that we are scanning. Let's call them `begin` and `end`. Initially, `begin` is set to `0` and `end` is set to the last index of the array.\r\n3. We iterate until `begin` is greater than or equal to `end`.\r\n4. At each step, we calculate the middle element `mid = (begin + end) / 2`. We use the value of the middle element to decide which half of the array we need to search. \r\n    - *nums[mid] == target*\r\n        - *isFirst is true* ~ This implies that we are trying to find the first occurrence of the element. If `mid == begin` or `nums[mid - 1] != target`, then we return `mid` as the first occurrence of the `target`. Otherwise, we update `end = mid - 1`\r\n        - *isFirst is false* ~ This implies we are trying to find the last occurrence of the element. If `mid == end` or `nums[mid + 1] != target`, then we return `mid` as the last occurrence of the `target`. Otherwise, we update `begin = mid + 1`\r\n    - *nums[mid] > target* ~ We update `end = mid - 1` since we must discard the right side of the array as the middle element is greater than `target`.\r\n    - *nums[mid] < target* ~ We update `begin = mid + 1` since we must discard the left side of the array as the middle element is less than `target`.\r\n5. We return a value of `-1` at the end of our function which indicates that `target` was not found in the array.\r\n6. In the main `searchRange` function, we first call `findBound` with `isFirst` set to `true`. If this value is `-1`, we can simply return `[-1, -1]`. Otherwise, we call `findBound` with `isFirst` set to false to get the last occurrence and then return the result.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/23fEZggX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"23fEZggX\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(\\text{log} N)$$ considering there are $$N$$ elements in the array. This is because binary search takes logarithmic time to scan an array of $$N$$ elements. Why? Because at each step we discard half of the array we are scanning and hence, we're done after a logarithmic number of steps. We simply perform binary search twice in this case.\r\n\r\n* Space Complexity: $$O(1)$$ since we only use space for a few variables and our result array, all of which require constant space.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.742,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3031",
                "title": "Pow(x, n)",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "50",
                    "questionFrontendId": "50",
                    "sessionId": "968792",
                    "questionTitle": "Pow(x, n)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/powx-n/submit/",
                    "interpretUrl": "/problems/powx-n/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    double myPow(double x, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public double myPow(double x, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def myPow(self, x, n):\\n        \\\"\\\"\\\"\\n        :type x: float\\n        :type n: int\\n        :rtype: float\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def myPow(self, x: float, n: int) -> float:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\ndouble myPow(double x, int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public double MyPow(double x, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} x\\n * @param {number} n\\n * @return {number}\\n */\\nvar myPow = function(x, n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Float} x\\n# @param {Integer} n\\n# @return {Float}\\ndef my_pow(x, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func myPow(_ x: Double, _ n: Int) -> Double {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myPow(x float64, n int) float64 {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def myPow(x: Double, n: Int): Double = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun myPow(x: Double, n: Int): Double {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn my_pow(x: f64, n: i32) -> f64 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Float $x\\n     * @param Integer $n\\n     * @return Float\\n     */\\n    function myPow($x, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function myPow(x: number, n: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (my-pow x n)\\n  (-> flonum? exact-integer? flonum?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_pow(X :: float(), N :: integer()) -> float().\\nmy_pow(X, N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec my_pow(x :: float, n :: integer) :: float\\n  def my_pow(x, n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2.00000\n10",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"myPow\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"x\",\r\n      \"type\": \"double\"\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement <a href=\"http://www.cplusplus.com/reference/valarray/pow/\" target=\"_blank\">pow(x, n)</a>, which calculates <code>x</code> raised to the power <code>n</code> (i.e., <code>x<sup>n</sup></code>).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = 10\n<strong>Output:</strong> 1024.00000\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.10000, n = 3\n<strong>Output:</strong> 9.26100\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> x = 2.00000, n = -2\n<strong>Output:</strong> 0.25000\n<strong>Explanation:</strong> 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-100.0 &lt;&nbsp;x&nbsp;&lt; 100.0</code></li>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= n &lt;=&nbsp;2<sup>31</sup>-1</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sup>n</sup> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Pow(x, n)",
                        "content": "[TOC]\n\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nJust simulate the process, multiply `x` for `n` times.\n\nIf $$n < 0$$, we can substitute $$x, n$$ with $$\\dfrac{1}{x}, -n$$ to make sure $$n \\ge 0$$. This restriction can simplify our further discussion.\n\nBut we need to take care of the corner cases, especially different range limits for negative and positive integers.\n\n**Algorithm**\n\nWe can use a straightforward loop to compute the result.\n\n<iframe src=\"https://leetcode.com/playground/Ryg5YHbk/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"Ryg5YHbk\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We will multiply `x` for `n` times.\n\n* Space complexity : $$O(1)$$. We only need one variable to store the final product of `x`.\n<br />\n<br />\n---\n#### Approach 2: Fast Power Algorithm Recursive\n\n**Intuition**\n\nAssuming we have got the result of $$x ^ n$$, how can we get $$x ^ {2 * n}$$ ? Obviously we do not need to multiply `x` for another `n` times. Using the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$, we can get $$x ^ {2 * n}$$ at the cost of only one computation. Using this optimization, we can reduce the time complexity of our algorithm.\n\n**Algorithm**\n\nAssume we have got the result of $$x ^ {n / 2}$$, and now we want to get the result of $$x ^ n$$. Let `A` be result of $$x ^ {n / 2}$$, we can talk about $$x ^ n$$ based on the parity of `n` respectively. If `n` is even, we can use the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$ to get $$x ^ n = A * A$$. If `n` is odd, then $$A * A = x ^ {n - 1}$$. Intuitively, We need to multiply another $$x$$ to the result, so $$x ^ n = A * A * x$$. This approach can be easily implemented using recursion. We call this method \"**Fast Power**\", because we only need at most $$O(\\log n)$$ computations to get $$x ^ n$$.\n\n<iframe src=\"https://leetcode.com/playground/TVkdREcW/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"TVkdREcW\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\log n)$$. Each time we apply the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$, $$n$$ is reduced by half. Thus we need at most $$O(\\log n)$$ computations to get the result.\n\n* Space complexity : $$O(\\log n)$$. For each computation, we need to store the result of $$x ^ {n / 2}$$. We need to do the computation for $$O(\\log n)$$ times, so the space complexity is $$O(\\log n)$$.\n<br />\n<br />\n---\n#### Approach 3: Fast Power Algorithm Iterative\n\n**Intuition**\n\nUsing the formula $$x ^ {a + b} = x ^ a * x ^ b$$, we can write `n` as a sum of positive integers, $$n = \\sum_i b_i$$. If we can get the result of $$x ^ {b_i}$$ quickly, the total time for computing $$x ^ n$$ will be reduced.\n\n**Algorithm**\n\nWe can use the binary representation of `n` to better understand the problem. Let the binary representation of `n` to be $$b_1, b_2, ..., b_{length\\_limit}$$, from the Least Significant Bit(LSB) to the Most Significant Bit(MSB). For the `i`th bit, if $$b_i = 1$$, it means we need to multiply the result by $$x ^ {2 ^ i}$$.\n\nIt seems to have no improvement with this representation, since $$\\sum_i b_i * 2 ^ i = n$$. But using the formula $$(x ^ n) ^ 2 = x ^ {2 * n}$$ we mentioned above, we can see some differences. Initially $$x ^ 1 = x$$, and for each $$ i > 1$$, we can use the result of $$x ^ {2 ^ {i - 1}}$$ to get $$x ^ {2 ^ i}$$ in one step. Since the number of $$b_i$$ is at most $$O(\\log n)$$, we can get all $$x ^ {2 ^ i}$$ in $$O(\\log n)$$ time. After that, for all `i`s that satisfy $$b_i = 1$$, we can multiply $$x ^ {2 ^ i}$$ to the result. This also requires $$O(\\log n)$$ time.\n\nUsing fast power recursively or iteratively are actually taking different paths towards the same goal. For more information about fast power algorithm, you can visit its wiki[^1].\n\n\n<iframe src=\"https://leetcode.com/playground/yrWcLt6t/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"yrWcLt6t\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\log n)$$. For each bit of `n`\n's binary representation, we will at most multiply once. So the total time complexity is $$O(\\log n)$$.\n\n* Space complexity : $$O(1)$$. We only need two variables for the current product and the final result of `x`.\n\n\n**Footnotes**\n\n[^1]: [https://en.wikipedia.org/wiki/Exponentiation_by_squaring](https://en.wikipedia.org/wiki/Exponentiation_by_squaring)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "powx-n",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.842,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "310",
                "title": "Merge Intervals",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "56",
                    "questionFrontendId": "56",
                    "sessionId": "968792",
                    "questionTitle": "Merge Intervals",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-intervals/submit/",
                    "interpretUrl": "/problems/merge-intervals/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[][] merge(int[][] intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def merge(self, intervals):\\n        \\\"\\\"\\\"\\n        :type intervals: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** merge(int** intervals, int intervalsSize, int* intervalsColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[][] Merge(int[][] intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} intervals\\n * @return {number[][]}\\n */\\nvar merge = function(intervals) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} intervals\\n# @return {Integer[][]}\\ndef merge(intervals)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func merge(_ intervals: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func merge(intervals [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def merge(intervals: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun merge(intervals: Array<IntArray>): Array<IntArray> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn merge(intervals: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $intervals\\n     * @return Integer[][]\\n     */\\n    function merge($intervals) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function merge(intervals: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (merge intervals)\\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec merge(Intervals :: [[integer()]]) -> [[integer()]].\\nmerge(Intervals) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec merge(intervals :: [[integer]]) :: [[integer]]\\n  def merge(intervals) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,3],[2,6],[8,10],[15,18]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"merge\",\n  \"params\": [\n    {\n      \"name\": \"intervals\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[][]\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array&nbsp;of <code>intervals</code>&nbsp;where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return <em>an array of the non-overlapping intervals that cover all the intervals in the input</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]\n<strong>Output:</strong> [[1,6],[8,10],[15,18]]\n<strong>Explanation:</strong> Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> intervals = [[1,4],[4,5]]\n<strong>Output:</strong> [[1,5]]\n<strong>Explanation:</strong> Intervals [1,4] and [4,5] are considered overlapping.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge Intervals",
                        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/471861267\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Connected Components\n\n**Intuition**\n\nIf we draw a graph (with intervals as nodes) that contains undirected edges\nbetween all pairs of intervals that overlap, then all intervals in each\n*connected component* of the graph can be merged into a single interval.\n\n**Algorithm**\n\nWith the above intuition in mind, we can represent the graph as an adjacency\nlist, inserting directed edges in both directions to simulate undirected\nedges. Then, to determine which connected component each node is it, we\nperform graph traversals from arbitrary unvisited nodes until all nodes have\nbeen visited. To do this efficiently, we store visited nodes in a `Set`,\nallowing for constant time containment checks and insertion. Finally, we\nconsider each connected component, merging all of its intervals by\nconstructing a new `Interval` with `start` equal to the minimum start among\nthem and `end` equal to the maximum end.\n\nThis algorithm is correct simply because it is basically the brute force\nsolution. We compare every interval to every other interval, so we know\nexactly which intervals overlap. The reason for the connected component\nsearch is that two intervals may not directly overlap, but might overlap\nindirectly via a third interval. See the example below to see this more\nclearly.\n\n![Components Example](../Figures/56/component.png)\n{:align=\"center\"}\n\nAlthough (1, 5) and (6, 10) do not directly overlap, either would overlap\nwith the other if first merged with (4, 7). There are two connected\ncomponents, so if we merge their nodes, we expect to get the following two\nmerged intervals:\n\n(1, 10), (15, 20)\n\n\n<iframe src=\"https://leetcode.com/playground/QAwfL3U4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QAwfL3U4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$\n\n    Building the graph costs $$O(V + E) = O(V) + O(E) = O(n) + O(n^2) = O(n^2)$$\n    time, as in the worst case all intervals are mutually overlapping.\n    Traversing the graph has the same cost (although it might appear higher\n    at first) because our `visited` set guarantees that each node will be\n    visited exactly once. Finally, because each node is part of exactly one\n    component, the merge step costs $$O(V) = O(n)$$ time. This all adds up as\n    follows:\n\n    $$\n        O(n^2) + O(n^2) + O(n) = O(n^2)\n    $$\n\n* Space complexity : $$O(n^2)$$\n\n    As previously mentioned, in the worst case, all intervals are mutually\n    overlapping, so there will be an edge for every pair of intervals.\n    Therefore, the memory footprint is quadratic in the input size.\n\n<br/>\n\n---\n\n#### Approach 2: Sorting\n\n**Intuition**\n\nIf we sort the intervals by their `start` value, then each set of intervals\nthat can be merged will appear as a contiguous \"run\" in the sorted list.\n\n**Algorithm**\n\nFirst, we sort the list as described. Then, we insert the first interval into\nour `merged` list and continue considering each interval in turn as follows:\nIf the current interval begins *after* the previous interval ends, then they\ndo not overlap and we can append the current interval to `merged`. Otherwise,\nthey do overlap, and we merge them by updating the `end` of the previous\ninterval if it is less than the `end` of the current interval.\n\nA simple proof by contradiction shows that this algorithm always produces the\ncorrect answer. First, suppose that the algorithm at some point fails to\nmerge two intervals that should be merged. This would imply that there exists\nsome triple of indices $$i$$, $$j$$, and $$k$$ in a list of intervals\n$$\\text{ints}$$ such that $$i < j < k$$ and ($$\\text{ints[i]}$$, $$\\text{ints[k]}$$) can be\nmerged, but neither ($$\\text{ints[i]}$$, $$\\text{ints[j]}$$) nor ($$\\text{ints[j]}$$, $$\\text{ints[k]}$$)\ncan be merged. From this scenario follow several inequalities:\n\n$$\n\\begin{aligned}\n    \\text{ints[i].end} < \\text{ints[j].start} \\\\\n    \\text{ints[j].end} < \\text{ints[k].start} \\\\\n    \\text{ints[i].end} \\geq \\text{ints[k].start} \\\\\n\\end{aligned}\n$$\n\nWe can chain these inequalities (along with the following inequality, implied\nby the well-formedness of the intervals: $$\\text{ints[j].start} \\leq \\text{ints[j].end}$$) to\ndemonstrate a contradiction:\n\n$$\n\\begin{aligned}\n    \\text{ints[i].end} < \\text{ints[j].start} \\leq \\text{ints[j].end} < \\text{ints[k].start} \\\\\n    \\text{ints[i].end} \\geq \\text{ints[k].start}\n\\end{aligned}\n$$\n\nTherefore, all mergeable intervals must occur in a contiguous run of the\nsorted list.\n\n![Sorting Example](../Figures/56/sort.png)\n{:align=\"center\"}\n\n\nConsider the example above, where the intervals are sorted, and then all\nmergeable intervals form contiguous blocks.\n\n<iframe src=\"https://leetcode.com/playground/FmaPwUjH/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"FmaPwUjH\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n\\log{}n)$$\n\n    Other than the `sort` invocation, we do a simple linear scan of the list,\n    so the runtime is dominated by the $$O(n\\log{}n)$$ complexity of sorting.\n\n* Space complexity : $$O(\\log N)$$ (or $$O(n)$$)\n\n    If we can sort `intervals` in place, we do not need more than constant\n    additional space, although the sorting itself takes $$O(\\log n)$$ space.\n    Otherwise, we must allocate linear space to store a copy of `intervals` and sort that.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "merge-intervals",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": false,
                        "rating": {
                            "average": 4.535,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3032",
                "title": "Find Peak Element",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "162",
                    "questionFrontendId": "162",
                    "sessionId": "968792",
                    "questionTitle": "Find Peak Element",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-peak-element/submit/",
                    "interpretUrl": "/problems/find-peak-element/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findPeakElement(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findPeakElement(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findPeakElement(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findPeakElement(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findPeakElement(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindPeakElement(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findPeakElement = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef find_peak_element(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findPeakElement(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findPeakElement(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findPeakElement(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findPeakElement(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_peak_element(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function findPeakElement($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findPeakElement(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-peak-element nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_peak_element(Nums :: [integer()]) -> integer().\\nfind_peak_element(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_peak_element(nums :: [integer]) :: integer\\n  def find_peak_element(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,1]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findPeakElement\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A peak element is an element that is strictly greater than its neighbors.</p>\n\n<p>Given an integer array <code>nums</code>, find a peak element, and return its index. If&nbsp;the array contains multiple peaks, return the index to <strong>any of the peaks</strong>.</p>\n\n<p>You may imagine that <code>nums[-1] = nums[n] = -&infin;</code>.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(log n)</code> time.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 is a peak element and your function should return the index number 2.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,1,3,5,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>nums[i] != nums[i + 1]</code> for all valid <code>i</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find Peak Element",
                        "content": "[TOC]\n\n\n## Solution\n\n---\n#### Approach 1: Linear Scan\n\nIn this approach, we make use of the fact that two consecutive numbers $$nums[j]$$ and $$nums[j + 1]$$ are never equal. Thus, we can traverse over the $$nums$$ array starting from the beginning. Whenever, we find a number $$nums[i]$$, we only need to check if it is larger than the next number $$nums[i+1]$$ for determining if $$nums[i]$$ is the peak element. The reasoning behind this can be understood by taking the following three cases which cover every case into which any problem can be divided.\n\n\nCase 1. All the numbers appear in a descending order. In this case, the first element corresponds to the peak element. We start off by checking if the current element is larger than the next one. The first element satisfies this criteria, and is hence identified as the peak correctly. In this case, we didn't reach a point where we needed to compare $$nums[i]$$ with $$nums[i-1]$$ also, to determine if it is the peak element or not.\n\n![Graph](../Figures/162/Find_Peak_Case1.PNG)\n{:align=\"center\"}\n\nCase 2. All the elements appear in ascending order. In this case, we keep on comparing $$nums[i]$$ with $$nums[i+1]$$ to determine if $$nums[i]$$ is the peak element or not. None of the elements satisfy this criteria, indicating that we are currently on a rising slope and not on a peak. Thus, at the end, we need to return the last element as the peak element, which turns out to be correct. In this case also, we need not compare $$nums[i]$$ with $$nums[i-1]$$, since being on the rising slope is a sufficient condition to ensure that $$nums[i]$$ isn't the peak element.\n\n![Graph](../Figures/162/Find_Peak_Case2.PNG)\n{:align=\"center\"}\n\nCase 3. The peak appears somewhere in the middle. In this case, when we are traversing on the rising edge, as in Case 2, none of the elements will satisfy $$nums[i] > nums[i + 1]$$. We need not compare $$nums[i]$$ with $$nums[i-1]$$ on the rising slope as discussed above. When we finally reach the peak element, the condition $$nums[i] > nums[i + 1]$$ is satisfied. We again, need not compare $$nums[i]$$ with $$nums[i-1]$$. This is because, we could reach $$nums[i]$$ as the current element only when the check $$nums[i] > nums[i + 1]$$ failed for the previous($$(i-1)^{th}$$ element, indicating that $$nums[i-1] < nums[i]$$. Thus, we are able to identify the peak element correctly in this case as well.\n\n![Graph](../Figures/162/Find_Peak_Case3.PNG)\n{:align=\"center\"}\n\n<iframe src=\"https://leetcode.com/playground/MLfS4Quj/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"MLfS4Quj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. We traverse the $$nums$$ array of size $$n$$ once only.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.\n<br />\n<br />\n---\n#### Approach 2: Recursive Binary Search\n\n**Algorithm**\n\nWe can view any given sequence in $$nums$$ array as alternating ascending and descending sequences. By making use of this, and the fact that we can return any peak as the result, we can make use of Binary Search to find the required peak element.\n\nIn case of simple Binary Search, we work on a sorted sequence of numbers and try to find out the required number by reducing the search space at every step. In this case, we use a modification of this simple Binary Search to our advantage. We start off by finding the middle element, $$mid$$ from the given $$nums$$ array. If this element happens to be lying in a descending sequence of numbers. or a local falling slope(found by comparing $$nums[i]$$ to its right neighbour), it means that the peak will always lie towards the left of this element. Thus, we reduce the search space to the left of $$mid$$(including itself) and perform the same process on left subarray.\n\nIf the middle element, $$mid$$ lies in an ascending sequence of numbers, or a rising slope(found by comparing $$nums[i]$$ to its right neighbour), it obviously implies that the peak lies towards the right of this element. Thus, we reduce the search space to the right of $$mid$$ and perform the same process on the right subarray.\n\nIn this way, we keep on reducing the search space till we eventually reach a state where only one element is remaining in the search space. This single element is the peak element.\n\nTo see how it works, let's consider the three cases discussed above again.\n\nCase 1. In this case, we firstly find $$3$$ as the middle element. Since it lies on a falling slope, we reduce the search space to `[1, 2, 3]`. For this subarray, $$2$$ happens to be the middle element, which again lies on a falling slope, reducing the search space to `[1, 2]`. Now, $$1$$ acts as the middle element and it lies on a falling slope, reducing the search space to `[1]` only. Thus, $$1$$ is returned as the peak correctly.\n\n!?!../Documents/Find_Peak_Case1.json:1000,563!?!\n\nCase 2. In this case, we firstly find $$3$$ as the middle element. Since it lies on a rising slope, we reduce the search space to `[4, 5]`. Now, $$4$$ acts as the middle element for this subarray and it lies on a rising slope, reducing the search space to `[5]` only. Thus, $$5$$ is returned as the peak correctly.\n\n!?!../Documents/Find_Peak_Case2.json:1000,563!?!\n\nCase 3. In this case, the peak lies somewhere in the middle. The first middle element is $$4$$. It lies on a rising slope, indicating that the peak lies towards its right. Thus, the search space is reduced to `[5, 1]`. Now, $$5$$ happens to be the on a falling slope(relative to its right neighbour), reducing the search space to `[5]` only. Thus, $$5$$ is identified as the peak element correctly.\n\n!?!../Documents/Find_Peak_Case3.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/3MGjFqJ4/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"3MGjFqJ4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(log_2(n)\\big)$$. We reduce the search space in half at every step. Thus, the total search space will be consumed in $$log_2(n)$$ steps. Here, $$n$$ refers to the size of $$nums$$ array.\n\n* Space complexity : $$O\\big(log_2(n)\\big)$$. We reduce the search space in half at every step. Thus, the total search space will be consumed in $$log_2(n)$$ steps. Thus, the depth of recursion tree will go upto $$log_2(n)$$.\n<br />\n<br />\n---\n#### Approach 3: Iterative Binary Search\n\n**Algorithm**\n\nThe binary search discussed in the previous approach used a recursive method. We can do the same process in an iterative fashion also. This is done in the current approach.\n\n<iframe src=\"https://leetcode.com/playground/EnevWycv/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"EnevWycv\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(log_2(n)\\big)$$. We reduce the search space in half at every step. Thus, the total search space will be consumed in $$log_2(n)$$ steps. Here, $$n$$ refers to the size of $$nums$$ array.\n\n* Space complexity : $$O(1)$$. Constant extra space is used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "find-peak-element",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.438,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "272",
                "title": "First Bad Version",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "278",
                    "questionFrontendId": "278",
                    "sessionId": "968792",
                    "questionTitle": "First Bad Version",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/first-bad-version/submit/",
                    "interpretUrl": "/problems/first-bad-version/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"// The API isBadVersion is defined for you.\\n// bool isBadVersion(int version);\\n\\nclass Solution {\\npublic:\\n    int firstBadVersion(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\\n      boolean isBadVersion(int version); */\\n\\npublic class Solution extends VersionControl {\\n    public int firstBadVersion(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The isBadVersion API is already defined for you.\\n# @param version, an integer\\n# @return a bool\\n# def isBadVersion(version):\\n\\nclass Solution(object):\\n    def firstBadVersion(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# The isBadVersion API is already defined for you.\\n# @param version, an integer\\n# @return an integer\\n# def isBadVersion(version):\\n\\nclass Solution:\\n    def firstBadVersion(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"// The API isBadVersion is defined for you.\\n// bool isBadVersion(int version);\\n\\nint firstBadVersion(int n) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\\n      bool IsBadVersion(int version); */\\n\\npublic class Solution : VersionControl {\\n    public int FirstBadVersion(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for isBadVersion()\\n * \\n * @param {integer} version number\\n * @return {boolean} whether the version is bad\\n * isBadVersion = function(version) {\\n *     ...\\n * };\\n */\\n\\n/**\\n * @param {function} isBadVersion()\\n * @return {function}\\n */\\nvar solution = function(isBadVersion) {\\n    /**\\n     * @param {integer} n Total versions\\n     * @return {integer} The first bad version\\n     */\\n    return function(n) {\\n        \\n    };\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The is_bad_version API is already defined for you.\\n# @param {Integer} version\\n# @return {boolean} whether the version is bad\\n# def is_bad_version(version):\\n\\n# @param {Integer} n\\n# @return {Integer}\\ndef first_bad_version(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class VersionControl.\\n *     func isBadVersion(_ version: Int) -> Bool{}\\n */\\n\\nclass Solution : VersionControl {\\n    func firstBadVersion(_ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/** \\n * Forward declaration of isBadVersion API.\\n * @param   version   your guess about first bad version\\n * @return \\t \\t      true if current version is bad \\n *\\t\\t\\t          false if current version is good\\n * func isBadVersion(version int) bool;\\n */\\n\\nfunc firstBadVersion(n int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\\n      def isBadVersion(version: Int): Boolean = {} */\\n\\nclass Solution extends VersionControl {\\n    def firstBadVersion(n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\\n      def isBadVersion(version: Int): Boolean = {} */\\n\\nclass Solution: VersionControl() {\\n    override fun firstBadVersion(n: Int) : Int {\\n        \\n\\t}\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// The API isBadVersion is defined for you.\\n// isBadVersion(versions:i32)-> bool;\\n// to call it use self.isBadVersion(versions)\\n\\nimpl Solution {\\n    pub fn first_bad_version(&self, n: i32) -> i32 {\\n\\t\\t\\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/* The isBadVersion API is defined in the parent class VersionControl.\\n      public function isBadVersion($version){} */\\n\\nclass Solution extends VersionControl {\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function firstBadVersion($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class Relation.\\n * isBadVersion(version: number): boolean {\\n *     ...\\n * };\\n */\\n\\nvar solution = function(isBadVersion: any) {\\n\\n    return function(n: number): number {\\n        \\n    };\\n};\"}]",
                    "sampleTestCase": "5\n4",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"firstBadVersion\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"bad\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p>\n\n<p>Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad.</p>\n\n<p>You are given an API <code>bool isBadVersion(version)</code> which returns whether <code>version</code> is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 5, bad = 4\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\ncall isBadVersion(3) -&gt; false\ncall isBadVersion(5)&nbsp;-&gt; true\ncall isBadVersion(4)&nbsp;-&gt; true\nThen 4 is the first bad version.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, bad = 1\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bad &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "First Bad Version",
                        "content": "[TOC]\r\n\r\n## Summary\r\n\r\nThis is a very simple problem. There is a subtle trap that you may fall into if you are not careful. Other than that, it is a direct application of a very famous algorithm.\r\n\r\n## Solution\r\n\r\n---\r\n#### Approach #1 (Linear Scan) [Time Limit Exceeded]\r\n\r\nThe straight forward way is to brute force it by doing a linear scan.\r\n\r\n<iframe src=\"https://leetcode.com/playground/Ezb8JYsL/shared\" frameBorder=\"0\" name=\"Ezb8JYsL\" width=\"100%\" height=\"190\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$.\r\nAssume that $$isBadVersion(version)$$ takes constant time to check if a *version* is bad. It takes at most $$n - 1$$ checks, therefore the overall time complexity is $$O(n)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\n\r\n---\r\n#### Approach #2 (Binary Search) [Accepted]\r\n\r\nIt is not difficult to see that this could be solved using a classic algorithm - Binary search. Let us see how the search space could be halved each time below.\r\n\r\n    Scenario #1: isBadVersion(mid) => false\r\n\r\n     1 2 3 4 5 6 7 8 9\r\n     G G G G G G B B B       G = Good, B = Bad\r\n     |       |       |\r\n    left    mid    right\r\n\r\nLet us look at the first scenario above where $$isBadVersion(mid) \\Rightarrow  false$$. We know that all versions preceding and including $$mid$$ are all good. So we set $$left = mid + 1$$ to indicate that the new search space is the interval $$[mid + 1, right]$$ (inclusive).\r\n\r\n    Scenario #2: isBadVersion(mid) => true\r\n\r\n     1 2 3 4 5 6 7 8 9\r\n     G G G B B B B B B       G = Good, B = Bad\r\n     |       |       |\r\n    left    mid    right\r\n\r\nThe only scenario left is where $$isBadVersion(mid) \\Rightarrow true$$. This tells us that $$mid$$ may or may not be the first bad version, but we can tell for sure that all versions after $$mid$$ can be discarded. Therefore we set $$right = mid$$ as the new search space of interval $$[left,mid]$$ (inclusive).\r\n\r\nIn our case, we indicate $$left$$ and $$right$$ as the boundary of our search space (both inclusive). This is why we initialize $$left = 1$$ and $$right = n $$. How about the terminating condition? We could guess that $$left$$ and $$right$$ eventually both meet and it must be the first bad version, but how could you tell for sure?\r\n\r\nThe formal way is to [prove by induction](http://www.cs.cornell.edu/courses/cs211/2006sp/Lectures/L06-Induction/binary_search.html), which you can read up yourself if you are interested. Here is a helpful tip to quickly prove the correctness of your binary search algorithm\r\nduring an interview. We just need to test an input of size 2. Check if it reduces the search space to a single element (which must be the answer) for both of the scenarios above. If not, your algorithm will never terminate.\r\n\r\nIf you are setting $$mid = \\frac{left + right}{2}$$, you have to be very careful. Unless you are using a language that does not overflow such as [Python](https://www.reddit.com/r/Python/comments/36xu5z/can_integer_operations_overflow_in_python/), $$left + right$$ could overflow. One way to fix this is to use $$left + \\frac{right - left}{2}$$ instead.\r\n\r\nIf you fall into this subtle overflow bug, you are not alone. Even Jon Bentley's own implementation of binary search had this [overflow bug](https://en.wikipedia.org/wiki/Binary_search_algorithm#Implementation_issues) and remained undetected for over twenty years.\r\n\r\n<iframe src=\"https://leetcode.com/playground/VQBrosDg/shared\" frameBorder=\"0\" name=\"VQBrosDg\" width=\"100%\" height=\"275\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(\\log n)$$.\r\nThe search space is halved each time, so the time complexity is $$O(\\log n)$$.\r\n\r\n* Space complexity : $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "first-bad-version",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.608,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3033",
                "title": "Intersection of Two Arrays",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "349",
                    "questionFrontendId": "349",
                    "sessionId": "968792",
                    "questionTitle": "Intersection of Two Arrays",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/intersection-of-two-arrays/submit/",
                    "interpretUrl": "/problems/intersection-of-two-arrays/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] intersection(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def intersection(self, nums1, nums2):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] Intersection(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number[]}\\n */\\nvar intersection = function(nums1, nums2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer[]} nums2\\n# @return {Integer[]}\\ndef intersection(nums1, nums2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func intersection(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intersection(nums1 []int, nums2 []int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def intersection(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun intersection(nums1: IntArray, nums2: IntArray): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn intersection(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Integer[]\\n     */\\n    function intersection($nums1, $nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function intersection(nums1: number[], nums2: number[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (intersection nums1 nums2)\\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec intersection(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nintersection(Nums1, Nums2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec intersection(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def intersection(nums1, nums2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,2,1]\n[2,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"intersection\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [9,4]\n<strong>Explanation:</strong> [4,9] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Intersection of Two Arrays",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Two Sets\n\n**Intuition**\n\nThe naive approach would be to iterate along the first array `nums1`\nand to check for each value if this value in `nums2` or not. \nIf yes - add the value to output. Such an approach would result \nin a pretty bad\n$$\\mathcal{O}(n \\times m)$$ time complexity, where `n` and `m` are \narrays' lengths.\n\n> To solve the problem in linear time, let's use the structure `set`,\nwhich provides `in/contains` operation in $$\\mathcal{O}(1)$$ time in\naverage case.\n\nThe idea is to convert both arrays into sets, and then iterate over \nthe smallest set checking the presence of each element in the larger set.\nTime complexity of this approach is $$\\mathcal{O}(n + m)$$ in the average case.\n\n!?!../Documents/349_LIS.json:1000,352!?!\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/QbhdgTQp/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"QbhdgTQp\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$, where `n` and `m` are \narrays' lengths. $$\\mathcal{O}(n)$$ time is used to convert `nums1`\ninto set, $$\\mathcal{O}(m)$$ time is used to convert `nums2`, and\n`contains/in` operations are $$\\mathcal{O}(1)$$ in the average case.\n \n* Space complexity : $$\\mathcal{O}(m + n)$$ in the worst case when\nall elements in the arrays are different.\n<br />\n<br />\n\n\n---\n#### Approach 2: Built-in Set Intersection\n\n**Intuition**\n\nThere are built-in intersection facilities,\nwhich provide $$\\mathcal{O}(n + m)$$ time complexity in the \naverage case and $$\\mathcal{O}(n \\times m)$$ time complexity in the \nworst case. \n\n> In Python it's [intersection operator](https://wiki.python.org/moin/TimeComplexity#set), \nin Java - [retainAll() function](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html#retainAll-java.util.Collection-).\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/ukbkHM7f/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"ukbkHM7f\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$ in the average case \n and $$\\mathcal{O}(n \\times m)$$ [in the worst case\n when load factor is high enough](https://wiki.python.org/moin/TimeComplexity#set).\n \n* Space complexity : $$\\mathcal{O}(n + m)$$ in the worst case when\nall elements in the arrays are different.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "intersection-of-two-arrays",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.878,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "270",
                "title": "Intersection of Two Arrays II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 54,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "350",
                    "questionFrontendId": "350",
                    "sessionId": "968792",
                    "questionTitle": "Intersection of Two Arrays II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/intersection-of-two-arrays-ii/submit/",
                    "interpretUrl": "/problems/intersection-of-two-arrays-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] intersect(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def intersect(self, nums1, nums2):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] Intersect(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number[]}\\n */\\nvar intersect = function(nums1, nums2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer[]} nums2\\n# @return {Integer[]}\\ndef intersect(nums1, nums2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func intersect(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intersect(nums1 []int, nums2 []int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def intersect(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun intersect(nums1: IntArray, nums2: IntArray): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn intersect(nums1: Vec<i32>, nums2: Vec<i32>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Integer[]\\n     */\\n    function intersect($nums1, $nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function intersect(nums1: number[], nums2: number[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (intersect nums1 nums2)\\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec intersect(Nums1 :: [integer()], Nums2 :: [integer()]) -> [integer()].\\nintersect(Nums1, Nums2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec intersect(nums1 :: [integer], nums2 :: [integer]) :: [integer]\\n  def intersect(nums1, nums2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,2,1]\n[2,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"intersect\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their intersection</em>. Each element in the result must appear as many times as it shows in both arrays and you may return the result in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,2,1], nums2 = [2,2]\n<strong>Output:</strong> [2,2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n<strong>Output:</strong> [4,9]\n<strong>Explanation:</strong> [9,4] is also accepted.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>What if the given array is already sorted? How would you optimize your algorithm?</li>\n\t<li>What if <code>nums1</code>&#39;s size is small compared to <code>nums2</code>&#39;s size? Which algorithm is better?</li>\n\t<li>What if elements of <code>nums2</code> are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Intersection of Two Arrays II",
                        "content": "[TOC]\n\n## Solution\n\nIf an interviewer gives you this problem, your first question should be - *how should I handle duplicates?* Your second question, perhaps, can be about the order of inputs and outputs. Such questions manifest your problem-solving skills, and help you steer to the right solution.\n\n The [solution](https://leetcode.com/problems/intersection-of-two-arrays/solution/) for the previous problem, [349. Intersection of Two Arrays](https://leetcode.com/problems/intersection-of-two-arrays/), talks about approaches when each number in the output must be unique. For this problem, we need to adapt those approaches so that numbers in the result appear as many times as they do in both arrays.\n\n---\n\n#### Approach 1: Hash Map\n\nFor the previous problem, we used a hash set to achieve a linear time complexity. Here, we need to use a hash map to track the count for each number.\n\nWe collect numbers and their counts from one of the arrays into a hash map. Then, we iterate along the second array, and check if the number exists in the hash map and its count is positive. If so - add the number to the result and decrease its count in the hash map.\n\n![Hash Map Illustration](../Figures/350/350_approach1-v2.png)\n\n> It's a good idea to check array sizes and use a hash map for the smaller array. It will reduce memory usage when one of the arrays is very large.\n\n**Algorithm**\n\n1. If `nums1` is larger than `nums2`, swap the arrays.\n\n2. For each element in `nums1`:\n\n      - Add it to the hash map `m`.\n\n          - Increment the count if the element is already there.\n\n3. Initialize the insertion pointer (`k`) with zero.\n\n4. Iterate along `nums2`:\n\n      - If the current number is in the hash map and count is positive:\n\n          - Copy the number into `nums1[k]`, and increment `k`.\n\n          - Decrement the count in the hash map.\n\n5. Return first `k` elements of `nums1`.\n\n> For our solutions here, we use one of the arrays to store the result. As we find common numbers, we copy them to the first array starting from the beginning. This idea is from [this solution](https://leetcode.com/problems/intersection-of-two-arrays-ii/discuss/82405/Simple-Java-Solution) by [sankitgupta](https://leetcode.com/sankitgupta/).\n\n<iframe src=\"https://leetcode.com/playground/e7E5KUw2/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"e7E5KUw2\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(n + m)$$, where $$n$$ and $$m$$ are the lengths of the arrays. We iterate through the first, and then through the second array; insert and lookup operations in the hash map take a constant time.\n\n- Space Complexity: $$\\mathcal{O}(\\min(n, m))$$. We use hash map to store numbers (and their counts) from the smaller array.\n\n---\n\n#### Approach 2: Sort\n\nYou can recommend this method when the input is sorted, or when the output needs to be sorted. Here, we sort both arrays (assuming they are not sorted) and use two pointers to find common numbers in a single scan.\n\n![Sort Illustration](../Figures/350/350_approach2-v2.png)\n\n**Algorithm**\n\n1. Sort `nums1` and `nums2`.\n\n2. Initialize `i`, `j` and `k` with zero.\n\n3. Move indices `i` along `nums1`, and `j` through `nums2`:\n\n      - Increment `i` if `nums1[i]` is smaller.\n\n      - Increment `j` if `nums2[j]` is smaller.\n\n      - If numbers are the same, copy the number into `nums1[k]`, and increment `i`, `j` and `k`.\n\n4. Return first `k` elements of `nums1`.\n\n<iframe src=\"https://leetcode.com/playground/dw5zVRuJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"dw5zVRuJ\"></iframe>\n\n**Complexity Analysis** <a name=\"approach2complexity\"></a>\n\n- Time Complexity: $$\\mathcal{O}(n\\log{n} + m\\log{m})$$, where $$n$$ and $$m$$ are the lengths of the arrays. We sort two arrays independently, and then do a linear scan.\n\n- Space Complexity: from $$\\mathcal{O}(\\log{n} + \\log{m})$$ to $$\\mathcal{O}(n + m)$$, depending on the implementation of the sorting algorithm. For the complexity analysis purposes, we ignore the memory required by inputs and outputs.\n\n---\n\n#### Approach 3: Built-in Intersection\n\nThis is similar to [Approach 2](#approach-2-sort). Instead of iterating with two pointers, we use a built-in function to find common elements. In C++, we can use `set_intersection` for sorted arrays (or multisets).\n\nThe [retainAll](https://docs.oracle.com/javase/8/docs/api/java/util/AbstractCollection.html#retainAll-java.util.Collection-) method in Java, unfortunately, does not care how many times an element occurs in the other collection. You can use the [retainOccurrences](https://guava.dev/releases/23.0/api/docs/com/google/common/collect/Multisets.html#retainOccurrences-com.google.common.collect.Multiset-com.google.common.collect.Multiset-) method of the multiset implementation in [Guava](https://guava.dev/releases/16.0/api/docs/com/google/common/collect/Multiset.html).\n\n**Algorithm**\n\n> Note that `set_intersection` returns the position past the end of the produced range, so it can be used as an input for the `erase` function. The idea is from [this solution](https://leetcode.com/problems/intersection-of-two-arrays-ii/discuss/82269/Short-Python-C%2B%2B) by [StefanPochmann](https://leetcode.com/stefanpochmann/).\n\n<iframe src=\"https://leetcode.com/playground/nYgLkLcv/shared\" frameBorder=\"0\" width=\"100%\" height=\"174\" name=\"nYgLkLcv\"></iframe>\n\n**Complexity Analysis**\n\n- Same as for [approach 2](#approach2complexity) above.\n\n---\n\n#### Follow-up Questions\n\n1. What if the given array is already sorted? How would you optimize your algorithm?\n\n      - We can use either [Approach 2](#approach-2-sort) or [Approach 3](#approach-3-built-in-intersection), dropping the sort of course. It will give us linear time and constant memory complexity.\n\n2. What if *nums1's* size is small compared to *nums2's* size? Which algorithm is better?\n\n      - [Approach 1](#approach-1-hash-map) is a good choice here as we use a hash map for the smaller array.\n\n3. What if elements of *nums2* are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n      - If `nums1` fits into the memory, we can use [Approach 1](#approach-1-hash-map) to collect counts for `nums1` into a hash map. Then, we can sequentially load and process `nums2`.\n\n      - If neither of the arrays fit into the memory, we can apply some partial processing strategies:\n\n          - Split the numeric range into subranges that fits into the memory. Modify [Approach 1](#approach-1-hash-map) to collect counts only within a given subrange, and call the method multiple times (for each subrange).\n\n          - Use an external sort for both arrays. Modify [Approach 2](#approach-2-sort) to load and process arrays sequentially.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "intersection-of-two-arrays-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.741,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Interval related problems are quite often asked at Facebook interviews, such as Meeting Rooms II and Merge Intervals. These interval problems typically require you to sort it in order and apply some kind of linear search or binary search technique."
    },
    {
        "id": "55",
        "title": "Dynamic Programming",
        "slug": "dynamic-programming-3",
        "items": [
            {
                "id": "3034",
                "title": "Longest Palindromic Substring",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "5",
                    "questionFrontendId": "5",
                    "sessionId": "968792",
                    "questionTitle": "Longest Palindromic Substring",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-palindromic-substring/submit/",
                    "interpretUrl": "/problems/longest-palindromic-substring/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string longestPalindrome(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String longestPalindrome(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def longestPalindrome(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def longestPalindrome(self, s: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * longestPalindrome(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string LongestPalindrome(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar longestPalindrome = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String}\\ndef longest_palindrome(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func longestPalindrome(_ s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestPalindrome(s string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def longestPalindrome(s: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun longestPalindrome(s: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn longest_palindrome(s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String\\n     */\\n    function longestPalindrome($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function longestPalindrome(s: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (longest-palindrome s)\\n  (-> string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nlongest_palindrome(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec longest_palindrome(s :: String.t) :: String.t\\n  def longest_palindrome(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"babad\"",
                    "enableTestMode": false,
                    "metaData": "{ \n  \"name\": \"longestPalindrome\",\n  \"params\": [\n    { \n      \"name\": \"s\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, return&nbsp;<em>the longest palindromic substring</em> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ac&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "How can we reuse a previously computed palindrome to compute a larger palindrome?",
                        "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
                        "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
                    ],
                    "solution": {
                        "title": "Longest Palindromic Substring",
                        "content": "[TOC]\n\n## Summary\nThis article is for intermediate readers. It introduces the following ideas:\nPalindrome, Dynamic Programming and String Manipulation. Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. For example, $$S$$ = \"aba\" is a palindrome, $$S$$ = \"abc\" is not.\n\n## Solution\n---\n#### Approach 1: Longest Common Substring\n\n**Common mistake**\n\nSome people will be tempted to come up with a quick solution, which is unfortunately flawed (however can be corrected easily):\n\n> Reverse $$S$$ and become $$S'$$. Find the longest common substring between $$S$$ and $$S'$$, which must also be the longest palindromic substring.\n\nThis seemed to work, let\u2019s see some examples below.\n\nFor example, $$S$$ = \"caba\", $$S'$$ = \"abac\".\n\nThe longest common substring between $$S$$ and $$S'$$ is \"aba\", which is the answer.\n\nLet\u2019s try another example: $$S$$ = \"abacdfgdcaba\", $$S'$$ = \"abacdgfdcaba\".\n\nThe longest common substring between $$S$$ and $$S'$$ is \"abacd\". Clearly, this is not a valid palindrome.\n\n**Algorithm**\n\nWe could see that the longest common substring method fails when there exists a reversed copy of a non-palindromic substring in some other part of $$S$$. To rectify this, each time we find a longest common substring candidate, we check if the substring\u2019s indices are the same as the reversed substring\u2019s original indices. If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.\n\nThis gives us an $$O(n^2)$$ Dynamic Programming solution which uses $$O(n^2)$$ space (could be improved to use $$O(n)$$ space). Please read more about Longest Common Substring [here](http://en.wikipedia.org/wiki/Longest_common_substring).\n<br />\n<br />\n\n---\n#### Approach 2: Brute Force\n\nThe obvious brute force solution is to pick all possible starting and ending positions for a substring, and verify if it is a palindrome.\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$.\nAssume that $$n$$ is the length of the input string, there are a total of $$\\binom{n}{2} = \\frac{n(n-1)}{2}$$ such substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes $$O(n)$$ time, the run time complexity is $$O(n^3)$$.\n\n* Space complexity : $$O(1)$$.\n<br />\n<br />\n\n---\n#### Approach 3: Dynamic Programming\n\nTo improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. Consider the case \"ababa\". If we already knew that \"bab\" is a palindrome, it is obvious that \"ababa\" must be a palindrome since the two left and right end letters are the same.\n\nWe define $$P(i,j)$$ as following:\n\n$$\nP(i,j) =\n     \\begin{cases}\n       \\text{true,} &\\quad\\text{if the substring } S_i \\dots S_j \\text{ is a palindrome}\\\\\n       \\text{false,} &\\quad\\text{otherwise.} \\\n     \\end{cases}\n$$\n\nTherefore,\n\n$$\nP(i, j) = ( P(i+1, j-1) \\text{ and } S_i == S_j )\n$$\n\nThe base cases are:\n\n$$\nP(i, i) = true\n$$\n\n$$\nP(i, i+1) = ( S_i == S_{i+1} )\n$$\n\nThis yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$.\nThis gives us a runtime complexity of $$O(n^2)$$.\n\n* Space complexity : $$O(n^2)$$.\nIt uses $$O(n^2)$$ space to store the table.\n\n**Additional Exercise**\n\nCould you improve the above space complexity further and how?\n<br />\n<br />\n\n---\n#### Approach 4: Expand Around Center\n\nIn fact, we could solve it in $$O(n^2)$$ time using only constant space.\n\nWe observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only $$2n - 1$$ such centers.\n\nYou might be asking why there are $$2n - 1$$ but not $$n$$ centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as \"abba\") and its center are between the two 'b's.\n\n<iframe src=\"https://leetcode.com/playground/D5gn4CJn/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"D5gn4CJn\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$.\nSince expanding a palindrome around its center could take $$O(n)$$ time, the overall complexity is $$O(n^2)$$.\n\n* Space complexity : $$O(1)$$.\n<br />\n<br />\n---\n\n#### Approach 5: Manacher's Algorithm\n\nThere is even an $$O(n)$$ algorithm called Manacher's algorithm, explained [here in detail](https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm).\nHowever, it is a non-trivial algorithm, and no one expects you to come up with this algorithm in a 45 minutes coding session. But, please go ahead and understand it, I promise it will be a lot of fun.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "longest-palindromic-substring",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.394,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3035",
                "title": "Longest Valid Parentheses",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "32",
                    "questionFrontendId": "32",
                    "sessionId": "968792",
                    "questionTitle": "Longest Valid Parentheses",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-valid-parentheses/submit/",
                    "interpretUrl": "/problems/longest-valid-parentheses/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int longestValidParentheses(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int longestValidParentheses(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def longestValidParentheses(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def longestValidParentheses(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint longestValidParentheses(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LongestValidParentheses(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar longestValidParentheses = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef longest_valid_parentheses(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func longestValidParentheses(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestValidParentheses(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def longestValidParentheses(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun longestValidParentheses(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn longest_valid_parentheses(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function longestValidParentheses($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function longestValidParentheses(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (longest-valid-parentheses s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec longest_valid_parentheses(S :: unicode:unicode_binary()) -> integer().\\nlongest_valid_parentheses(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec longest_valid_parentheses(s :: String.t) :: integer\\n  def longest_valid_parentheses(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"(()\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"longestValidParentheses\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(()&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)()())&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest valid parentheses substring is &quot;()()&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;&quot;\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s[i]</code> is <code>&#39;(&#39;</code>, or <code>&#39;)&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Valid Parentheses",
                        "content": "[TOC]\n## Summary\n\nWe need to determine the length of the largest valid substring of parentheses from a given string.\n\n## Solution\n---\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nIn this approach, we consider every possible non-empty even length substring from the given string and check whether it's\na valid string of parentheses or not. In order to check the validity, we use the Stack's Method.\n\nEvery time we\nencounter a $$\\text{\u2018(\u2019}$$, we push it onto the stack. For every $$\\text{\u2018)\u2019}$$ encountered, we pop a $$\\text{\u2018(\u2019}$$ from the stack. If $$\\text{\u2018(\u2019}$$ isn't\n available on the stack for popping at anytime or if stack contains some elements after processing complete substring, the substring of parentheses is invalid. In this way, we repeat the\n process for every possible substring and we keep on\n  storing the length of the longest valid string found so far.\n```\nExample:\n\"((())\"\n\n(( --> invalid\n(( --> invalid\n() --> valid, length=2\n)) --> invalid\n((()--> invalid\n(())--> valid, length=4\nmaxlength=4\n```\n\n<iframe src=\"https://leetcode.com/playground/smDecW2X/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"smDecW2X\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$. Generating every possible substring from a string of length $$n$$ requires $$O(n^2)$$. Checking validity of a string of length $$n$$ requires $$O(n)$$.\n\n* Space complexity : $$O(n)$$. A stack of depth $$n$$ will be required for the longest substring.\n<br />\n<br />\n---\n\n#### Approach 2: Using Dynamic Programming\n\n**Algorithm**\n\nThis problem can be solved by using Dynamic Programming. We make use of a $$\\text{dp}$$ array where $$i$$th element of $$\\text{dp}$$ represents the length of the longest valid substring ending at $$i$$th index. We initialize the complete $$\\text{dp}$$ array with 0's. Now, it's obvious that the valid substrings must end with $$\\text{\u2018)\u2019}$$. This further leads to the conclusion that the substrings ending with $$\\text{\u2018(\u2019}$$ will always contain '0' at their corresponding $$\\text{dp}$$ indices. Thus, we update the $$\\text{dp}$$ array only when $$\\text{\u2018)\u2019}$$ is encountered.\n\nTo fill $$\\text{dp}$$ array we will check every two consecutive characters of the string and if\n\n1. $$\\text{s}[i] = \\text{\u2018)\u2019}$$ and $$\\text{s}[i - 1] = \\text{\u2018(\u2019}$$, i.e. string looks like $$``.......()\" \\Rightarrow$$\n\n    $$\n    \\text{dp}[i]=\\text{dp}[i-2]+2\n    $$\n\n    We do so because the ending \"()\" portion is a valid substring anyhow and leads to an increment of 2 in the length of the just previous valid substring's length.\n\n2. $$\\text{s}[i] = \\text{\u2018)\u2019}$$ and $$\\text{s}[i - 1] = \\text{\u2018)\u2019}$$, i.e. string looks like $$``.......))\" \\Rightarrow$$\n\n    if $$\\text{s}[i - \\text{dp}[i - 1] - 1] = \\text{\u2018(\u2019}$$ then\n\n    $$\n    \\text{dp}[i]=\\text{dp}[i-1]+\\text{dp}[i-\\text{dp}[i-1]-2]+2\n    $$\n\n   The reason behind this is that if the 2nd last $$\\text{\u2018)\u2019}$$ was a part of a valid substring (say $$sub_s$$), for the last $$\\text{\u2018)\u2019}$$ to be a part of a larger substring, there must be a corresponding starting $$\\text{\u2018(\u2019}$$ which lies before the valid substring of which the 2nd last $$\\text{\u2018)\u2019}$$ is a part (i.e. before $$sub_s$$). Thus, if the character before $$sub_s$$ happens to be $$\\text{\u2018(\u2019}$$, we update the $$\\text{dp}[i]$$ as an addition of $$2$$ in the length of $$sub_s$$ which is $$\\text{dp}[i-1]$$. To this, we also add the length of the valid substring just before the term \"(,sub_s,)\" , i.e. $$\\text{dp}[i-\\text{dp}[i-1]-2]$$.\n\nFor better understanding of this method, see this example:\n\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisDP.gif)-->\n!?!../Documents/32_Longest_Valid2.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/YGuAh4tp/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"YGuAh4tp\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single traversal of string to fill dp array is done.\n\n* Space complexity : $$O(n)$$. dp array of size $$n$$ is used.\n<br />\n<br />\n---\n#### Approach 3: Using Stack\n\n**Algorithm**\n\nInstead of finding every possible string and checking its validity, we can make use of stack while scanning\nthe given string to check if the string scanned so far is valid, and also the length of the longest valid string. In order to do so, we start by pushing $$-1$$ onto the stack.\n\n For every $$\\text{\u2018(\u2019}$$ encountered, we push its index onto the stack.\n\n For every $$\\text{\u2018)\u2019}$$ encountered, we pop the topmost element and subtract the current element's index from the top element of the stack, which gives the length of the currently encountered valid string of parentheses. If while popping the element, the stack becomes empty, we push the current element's index onto the stack. In this way, we keep on calculating the lengths of the valid substrings, and return the length of the longest valid string at the end.\n\nSee this example for better understanding.\n\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisSTACK.gif)-->\n!?!../Documents/32_Longest_Valid_stack_new.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/A2oPe4yE/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"A2oPe4yE\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. $$n$$ is the length of the given string..\n\n* Space complexity : $$O(n)$$. The size of stack can go up to $$n$$.\n<br />\n<br />\n---\n#### Approach 4: Without extra space\n\n**Algorithm**\n\nIn this approach, we make use of two counters $$left$$ and $$right$$. First, we start traversing the string from the left towards the right and for every $$\\text{\u2018(\u2019}$$ encountered, we increment the $$left$$ counter and for every $$\\text{\u2018)\u2019}$$ encountered, we increment the $$right$$ counter. Whenever $$left$$ becomes equal to $$right$$, we calculate the length of the current valid string and keep track of maximum length substring found so far. If $$right$$ becomes greater than $$left$$ we reset $$left$$ and $$right$$ to $$0$$.\n\nNext, we start traversing the string from right to left and similar procedure is applied.\n\nExample of this approach:\n\n<!--![Longest_Valid_Parenthesis](../Figures/32_LongestValidParenthesisLR.gif)-->\n!?!../Documents/32_Longest_Validlr.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/RsBpRHK7/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RsBpRHK7\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Two traversals of the string.\n\n* Space complexity : $$O(1)$$. Only two extra variables $$left$$ and $$right$$ are needed.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "longest-valid-parentheses",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.816,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "264",
                "title": "Decode Ways",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "91",
                    "questionFrontendId": "91",
                    "sessionId": "968792",
                    "questionTitle": "Decode Ways",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/decode-ways/submit/",
                    "interpretUrl": "/problems/decode-ways/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numDecodings(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numDecodings(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numDecodings(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numDecodings(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numDecodings(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumDecodings(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar numDecodings = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef num_decodings(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numDecodings(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numDecodings(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numDecodings(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numDecodings(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_decodings(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function numDecodings($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numDecodings(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-decodings s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\\nnum_decodings(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_decodings(s :: String.t) :: integer\\n  def num_decodings(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"12\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"numDecodings\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p>\n\n<pre>\n&#39;A&#39; -&gt; &quot;1&quot;\n&#39;B&#39; -&gt; &quot;2&quot;\n...\n&#39;Z&#39; -&gt; &quot;26&quot;\n</pre>\n\n<p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>&quot;11106&quot;</code> can be mapped into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1 1 10 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11 10 6)</code></li>\n</ul>\n\n<p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>&quot;06&quot;</code> cannot be mapped into <code>&#39;F&#39;</code> since <code>&quot;6&quot;</code> is different from <code>&quot;06&quot;</code>.</p>\n\n<p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p>\n\n<p>The answer is guaranteed to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;226&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no character that is mapped to a number starting with 0.\nThe only valid mappings with 0 are &#39;J&#39; -&gt; &quot;10&quot; and &#39;T&#39; -&gt; &quot;20&quot;, neither of which start with 0.\nHence, there are no valid ways to decode this since all digits need to be mapped.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;06&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Decode Ways",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/493947967\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\nThe most important point to understand in this problem is that at any given step when you are trying to decode a string of numbers it can either be a single digit decode e.g. `1` to `A` or a double digit decode e.g. `25` to `Y`. As long as it's a valid decoding we move ahead to decode the rest of the string.\n\nThe subproblem could be thought of as number of ways decoding a substring.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_1.png\" width=\"800\"/>\n</center>\n<br>\nThe above diagram shows string \"326\" could be decoded in two ways.\n<br/>\n<br/>\n\n---\n\n#### Approach 1: Recursive Approach with Memoization\n\n**Intuition**\n\nThe problem deals with finding number of ways of decoding a string. What helps to crack the problem is to think why there would be many ways to decode a string. The reason is simple since at any given point we either decode using `two digits` or `single` digit. This choice while decoding can lead to different combinations.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_2.png\" width=\"800\"/>\n</center>\n<br>\n\nThus at any given time for a string we enter a recursion after successfully decoding two digits to a single character or a single digit to a character. This leads to multiple paths to decoding the entire string. If a given path leads to the end of the string this means we could successfully decode the string. If at any point in the traversal we encounter digits which cannot be decoded, we backtrack from that path.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_3.png\" width=\"500\"/>\n</center>\n<br>\n\nIn the following diagram we can see how the paths have to deal with similar subproblems. Overlapping subproblems means we can reuse the answer. Thus, we do memoization to solve this problem.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_4.png\" width=800\"/>\n</center>\n<br>\n\n**Algorithm**\n\n1. Enter recursion with the given string i.e. start with index 0.\n\n2. For the terminating case of the recursion we check for the end of the string. If we have reached the end of the string we return `1`.\n\n3. Every time we enter recursion it's for a substring of the original string. For any recursion if the first character is `0` then terminate that path by returning `0`. Thus this path won't contribute to the number of ways.\n\n4. Memoization helps to reduce the complexity which would otherwise be exponential. We check the dictionary `memo` to see if the result for the given substring already exists.\n\n5. If the result is already in `memo` we return the result. Otherwise the number of ways for the given string is determined by making a recursive call to the function with `index + 1` for next substring string and `index + 2` after checking for valid 2-digit decode. The result is also stored in `memo` with key as current index, for saving for future overlapping subproblems.\n\n<iframe src=\"https://leetcode.com/playground/a8HJf3Yq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"a8HJf3Yq\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. Memoization helps in pruning the recursion tree and hence decoding for an index only once. Thus this solution is linear time complexity.\n\n* Space Complexity: $$O(N)$$. The dictionary used for memoization would take the space equal to the length of the string. There would be an entry for each index value. The recursion stack would also be equal to the length of the string.\n\n<br/>\n\n---\n\n#### Approach 2: Iterative Approach\n\nThe iterative approach might be a little bit less intuitive. Let's try to understand it. We use an array for DP to store the results for subproblems. A cell with index `i` of the `dp` array is used to store the number of decode ways for substring of `s` from index `0` to index `i-1`.\n\nWe initialize the starting two indices of the `dp` array. It's similar to relay race where the first runner is given a `baton` to be passed to the subsequent runners. The first two indices of the `dp` array hold a baton. As we iterate the `dp` array from left to right this baton which signifies the number of ways of decoding is passed to the next index or not depending on whether the decode is possible.\n\n`dp[i]` can get the baton from two other previous indices, either `i-1` or `i-2`. Two previous indices are involved since both single and two digit decodes are possible.\n\nUnlike the relay race we don't get only one baton in the end. The batons add up as we pass on. If someone has one baton, they can provide a copy of it to everyone who comes to them with a success. Thus, leading to number of ways of reaching the end.\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_5.png\" width=\"800\"/>\n</center>\n<br>\n\n`dp[i]` = Number of ways of decoding substring `s[:i]`. So we might say `dp[i] = dp[i-1] + dp[i-2]`, which is not always true for this decode ways problem. As shown in the above diagram, only when the decode is possible we add the results of the previous indices. Thus, in this race we don't just pass the baton. The baton is passed to the next index or not depending on possibility of the decode.\n\n**Algorithm**\n\n1. If the string `s` is empty or null we return the result as `0`.\n\n2. Initialize `dp` array. dp[0] = 1 to provide the baton to be passed.\n\n3. If the first character of the string is zero then no decode is possible hence initialize dp[1] to `0`, otherwise the first character is valid to pass on the baton, dp[1] = 1.\n\n3. Iterate the `dp` array starting at index 2. The index `i` of dp is the i-th character of the string `s`, that is character at index `i-1` of s.\n\n4. We check if valid single digit decode is possible. This just means the character at index `s[i-1]` is non-zero. Since we do not have a decoding for zero. If the valid single digit decoding is possible then we add `dp[i-1]` to `dp[i]`. Since all the ways up to (i-1)-th character now lead up to i-th character too.\n\n5. We check if valid two digit decode is possible. This means the substring `s[i-2]s[i-1]` is between 10 to 26. If the valid two digit decoding is possible then we add `dp[i-2]` to `dp[i]`.\n\n6. Once we reach the end of the `dp` array we would have the number of ways of decoding string `s`.\n\n<iframe src=\"https://leetcode.com/playground/fPtbGrHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fPtbGrHG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. We iterate the length of `dp` array which is $$N+1$$.\n\n* Space Complexity: $$O(N)$$. The length of the DP array.\n\n<br/>\n\n---\n\n#### Approach 3: Iterative, Constant Space\n\n**Intuition**\n\nIn Approach 2 we are using an array `dp` to save the results for future. As we move ahead character by character of the given string, we look back only two steps. For calculating `dp[i]` we need to know `dp[i-1]` and `dp[i-2]` only. Thus, we can easily cut down our $$O(N)$$ space requirement to $$O(1)$$ by using only two variables to store the last two results.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/i5cdnBHM/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"i5cdnBHM\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. We're essentially doing the same work as what we were in Approach 2, except this time we're throwing away calculation results when we no longer need them.\n\n* Space Complexity: $$O(1)$$. Instead of a `dp` array, we're simply using two variables.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "decode-ways",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.524,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "304",
                "title": "Best Time to Buy and Sell Stock",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook online assessment.",
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "121",
                    "questionFrontendId": "121",
                    "sessionId": "968792",
                    "questionTitle": "Best Time to Buy and Sell Stock",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/best-time-to-buy-and-sell-stock/submit/",
                    "interpretUrl": "/problems/best-time-to-buy-and-sell-stock/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxProfit(vector<int>& prices) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxProfit(self, prices):\\n        \\\"\\\"\\\"\\n        :type prices: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxProfit(int* prices, int pricesSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} prices\\n * @return {number}\\n */\\nvar maxProfit = function(prices) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\\n# @return {Integer}\\ndef max_profit(prices)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxProfit(_ prices: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxProfit(prices: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $prices\\n     * @return Integer\\n     */\\n    function maxProfit($prices) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxProfit(prices: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-profit prices)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[7,1,5,3,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxProfit\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"prices\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>\n\n<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Best Time to Buy and Sell Stock",
                        "content": "[TOC]\n\n## Solution\n\nWe need to find out the maximum difference (which will be the maximum profit) between two numbers in the given array. Also, the second number (selling price) must be larger than the first one (buying price).\n\nIn formal terms, we need to find $$\\max(\\text{prices[j]} - \\text{prices[i]})$$, for every $$i$$ and $$j$$ such that $$j > i$$.\n\n---\n#### Approach 1: Brute Force\n\n<iframe src=\"https://leetcode.com/playground/tVDNcEFQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"tVDNcEFQ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Loop runs $$\\dfrac{n (n-1)}{2}$$ times.\n\n* Space complexity : $$O(1)$$. Only two variables - $$\\text{maxprofit}$$ and $$\\text{profit}$$ are used.\n<br />\n<br />\n---\n#### Approach 2: One Pass\n\n**Algorithm**\n\nSay the given array is:\n\n[7, 1, 5, 3, 6, 4]\n\nIf we plot the numbers of the given array on a graph, we get:\n\n![Profit Graph](https://leetcode.com/media/original_images/121_profit_graph.png)\n\nThe points of interest are the peaks and valleys in the given graph. We need to find the largest peak following the smallest valley.\nWe can maintain two variables - minprice and maxprofit corresponding to the smallest valley and maximum profit (maximum difference between selling price and minprice) obtained so far respectively.\n\n<iframe src=\"https://leetcode.com/playground/WQBerWww/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"WQBerWww\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Only a single pass is needed.\n\n* Space complexity : $$O(1)$$. Only two variables are used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "best-time-to-buy-and-sell-stock",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.502,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3036",
                "title": "Word Break",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "139",
                    "questionFrontendId": "139",
                    "sessionId": "968792",
                    "questionTitle": "Word Break",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-break/submit/",
                    "interpretUrl": "/problems/word-break/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool wordBreak(string s, vector<string>& wordDict) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean wordBreak(String s, List<String> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def wordBreak(self, s, wordDict):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type wordDict: List[str]\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool wordBreak(char * s, char ** wordDict, int wordDictSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool WordBreak(string s, IList<string> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string[]} wordDict\\n * @return {boolean}\\n */\\nvar wordBreak = function(s, wordDict) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String[]} word_dict\\n# @return {Boolean}\\ndef word_break(s, word_dict)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordBreak(s string, wordDict []string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String[] $wordDict\\n     * @return Boolean\\n     */\\n    function wordBreak($s, $wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function wordBreak(s: string, wordDict: string[]): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (word-break s wordDict)\\n  (-> string? (listof string?) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\\nword_break(S, WordDict) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\\n  def word_break(s, word_dict) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"leetcode\"\n[\"leet\",\"code\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"wordBreak\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"wordDict\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.\nNote that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Word Break",
                        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/487458046\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nThe naive approach to solve this problem is to use recursion and backtracking.\nFor finding the solution, we check every possible prefix of that string in the dictionary of words, if it is found in the dictionary, then the recursive function is called for the remaining portion of that string. And, if in some function call it is found that the complete string is in dictionary, then it will return true.\n\n<iframe src=\"https://leetcode.com/playground/WU7Ko323/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"WU7Ko323\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(2^n)$$.\nGiven a string of length $$n$$, there are $$n + 1$$ ways to split it into two parts.\nAt each step, we have a choice: to split or not to split.\nIn the worse case, when all choices are to be checked, that results in $$O(2^n)$$.\n\n* Space complexity : $$O(n)$$. The depth of the recursion tree can go upto $$n$$.\n\n<br />\n\n---\n\n#### Approach 2: Recursion with memoization\n\n**Algorithm**\n\nIn the previous approach we can see that many subproblems were redundant, i.e we were calling the recursive function multiple times for a particular string. To avoid this we can use memoization method, where an array $$memo$$ is used to store the result of the subproblems. Now, when the function is called again for a particular string, value will be fetched and returned using the $$memo$$ array, if its value has been already evaluated.\n\nWith memoization many redundant subproblems are avoided and recursion tree is pruned and thus it reduces the time complexity by a large factor.\n\n<iframe src=\"https://leetcode.com/playground/AoWyyN8i/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"AoWyyN8i\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. Size of recursion tree can go up to $$n^2$$.\n\n* Space complexity : $$O(n)$$. The depth of recursion tree can go up to $$n$$.\n\n\n<br />\n---\n\n#### Approach 3: Using Breadth-First-Search\n\n**Algorithm**\n\nAnother approach is to use Breadth-First-Search. Visualize the string as a tree where each node represents the prefix upto index $$end$$.\nTwo nodes are connected only if the substring between the indices linked with those nodes is also a valid string which is present in the dictionary.\nIn order to form such a tree, we start with the first character of the given string (say $$s$$) which acts as the root of the tree being formed and find every possible substring starting with that character which is a part of the dictionary. Further, the ending index (say $$i$$) of every such substring is pushed at the back of a queue which will be used for Breadth First Search. Now, we pop an element out from the front of the queue and perform the same process considering the string $$s(i+1,end)$$ to be the original string and the popped node as the root of the tree this time. This process is continued, for all the nodes appended in the queue during the course of the process. If we are able to obtain the last element of the given string as a node (leaf) of the tree, this implies that the given string can be partitioned into substrings which are all a part of the given dictionary.\n\nThe formation of the tree can be better understood with this example:\n<!--![Word Break](../Figures/139_wordbreak.gif)-->\n!?!../Documents/139_Word_Break.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/bQwBSJLH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"bQwBSJLH\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. For every starting index, the search can continue till the end of the given string.\n\n* Space complexity : $$O(n)$$. Queue of at most $$n$$ size is needed.\n\n<br />\n\n---\n\n#### Approach 4: Using Dynamic Programming\n\n**Algorithm**\n\nThe intuition behind this approach is that the given problem ($$s$$) can be divided into subproblems $$s1$$ and $$s2$$. If these subproblems individually satisfy the required conditions, the complete problem, $$s$$ also satisfies the same. e.g. \"$$\\text{catsanddog}$$\" can be split into two substrings \"$$\\text{catsand}$$\", \"$$\\text{dog}$$\". The subproblem \"$$\\text{catsand}$$\" can be further divided into \"$$\\text{cats}$$\",\"$$\\text{and}$$\", which individually are a part of the dictionary making \"$$\\text{catsand}$$\" satisfy the condition. Going further backwards, \"$$\\text{catsand}$$\", \"$$\\text{dog}$$\" also satisfy the required criteria individually leading to the complete string \"$$\\text{catsanddog}$$\" also to satisfy the criteria.\n\nNow, we'll move onto the process of $$\\text{dp}$$ array formation. We make use of $$\\text{dp}$$ array of size $$n+1$$, where $$n$$ is the length of the given string. We also use two index pointers $$i$$ and $$j$$, where $$i$$ refers to the length of the substring ($$s'$$) considered currently starting from the beginning, and $$j$$ refers to the index partitioning the current substring ($$s'$$) into smaller substrings $$s'(0,j)$$ and $$s'(j+1,i)$$. To fill in the $$\\text{dp}$$ array, we initialize the element $$\\text{dp}[0]$$ as $$\\text{true}$$, since the null string is always present in the dictionary, and the rest of the elements of $$\\text{dp}$$ as $$\\text{false}$$. We consider substrings of all possible lengths starting from the beginning by making use of index $$i$$. For every such substring, we partition the string into two further substrings $$s1'$$ and $$s2'$$ in all possible ways using the index $$j$$ (Note that the $$i$$ now refers to the ending index of $$s2'$$). Now, to fill in the entry $$\\text{dp}[i]$$, we check if the $$\\text{dp}[j]$$ contains $$\\text{true}$$, i.e. if the substring $$s1'$$ fulfills the required criteria. If so, we further check if $$s2'$$ is present in the dictionary. If both the strings fulfill the criteria, we make $$\\text{dp}[i]$$ as $$\\text{true}$$, otherwise as $$\\text{false}$$.\n\n<iframe src=\"https://leetcode.com/playground/3U4EDoNd/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"3U4EDoNd\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. There are two nested loops,\nand substring computation at each iteration. Overall that results in $$O(n^3)$$\ntime complexity.\n\n* Space complexity : $$O(n)$$. Length of $$p$$ array is $$n+1$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "word-break",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.028,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3037",
                "title": "Range Sum Query 2D - Immutable",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "304",
                    "questionFrontendId": "304",
                    "sessionId": "968792",
                    "questionTitle": "Range Sum Query 2D - Immutable",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/range-sum-query-2d-immutable/submit/",
                    "interpretUrl": "/problems/range-sum-query-2d-immutable/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class NumMatrix {\\npublic:\\n    NumMatrix(vector<vector<int>>& matrix) {\\n        \\n    }\\n    \\n    int sumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n};\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix* obj = new NumMatrix(matrix);\\n * int param_1 = obj->sumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class NumMatrix {\\n\\n    public NumMatrix(int[][] matrix) {\\n        \\n    }\\n    \\n    public int sumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix obj = new NumMatrix(matrix);\\n * int param_1 = obj.sumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class NumMatrix(object):\\n\\n    def __init__(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        \\\"\\\"\\\"\\n        \\n\\n    def sumRegion(self, row1, col1, row2, col2):\\n        \\\"\\\"\\\"\\n        :type row1: int\\n        :type col1: int\\n        :type row2: int\\n        :type col2: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix(matrix)\\n# param_1 = obj.sumRegion(row1,col1,row2,col2)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class NumMatrix:\\n\\n    def __init__(self, matrix: List[List[int]]):\\n        \\n\\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\\n        \\n\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix(matrix)\\n# param_1 = obj.sumRegion(row1,col1,row2,col2)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} NumMatrix;\\n\\n\\nNumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {\\n    \\n}\\n\\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\\n  \\n}\\n\\nvoid numMatrixFree(NumMatrix* obj) {\\n    \\n}\\n\\n/**\\n * Your NumMatrix struct will be instantiated and called as such:\\n * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);\\n * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);\\n \\n * numMatrixFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class NumMatrix {\\n\\n    public NumMatrix(int[][] matrix) {\\n        \\n    }\\n    \\n    public int SumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix obj = new NumMatrix(matrix);\\n * int param_1 = obj.SumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n */\\nvar NumMatrix = function(matrix) {\\n    \\n};\\n\\n/** \\n * @param {number} row1 \\n * @param {number} col1 \\n * @param {number} row2 \\n * @param {number} col2\\n * @return {number}\\n */\\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\\n    \\n};\\n\\n/** \\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class NumMatrix\\n\\n=begin\\n    :type matrix: Integer[][]\\n=end\\n    def initialize(matrix)\\n        \\n    end\\n\\n\\n=begin\\n    :type row1: Integer\\n    :type col1: Integer\\n    :type row2: Integer\\n    :type col2: Integer\\n    :rtype: Integer\\n=end\\n    def sum_region(row1, col1, row2, col2)\\n        \\n    end\\n\\n\\nend\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix.new(matrix)\\n# param_1 = obj.sum_region(row1, col1, row2, col2)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass NumMatrix {\\n\\n    init(_ matrix: [[Int]]) {\\n        \\n    }\\n    \\n    func sumRegion(_ row1: Int, _ col1: Int, _ row2: Int, _ col2: Int) -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * let obj = NumMatrix(matrix)\\n * let ret_1: Int = obj.sumRegion(row1, col1, row2, col2)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type NumMatrix struct {\\n    \\n}\\n\\n\\nfunc Constructor(matrix [][]int) NumMatrix {\\n    \\n}\\n\\n\\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\\n    \\n}\\n\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * obj := Constructor(matrix);\\n * param_1 := obj.SumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class NumMatrix(_matrix: Array[Array[Int]]) {\\n\\n    def sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class NumMatrix(matrix: Array<IntArray>) {\\n\\n    fun sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = NumMatrix(matrix)\\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct NumMatrix {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl NumMatrix {\\n\\n    fn new(matrix: Vec<Vec<i32>>) -> Self {\\n        \\n    }\\n    \\n    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * let obj = NumMatrix::new(matrix);\\n * let ret_1: i32 = obj.sum_region(row1, col1, row2, col2);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class NumMatrix {\\n    /**\\n     * @param Integer[][] $matrix\\n     */\\n    function __construct($matrix) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $row1\\n     * @param Integer $col1\\n     * @param Integer $row2\\n     * @param Integer $col2\\n     * @return Integer\\n     */\\n    function sumRegion($row1, $col1, $row2, $col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * $obj = NumMatrix($matrix);\\n * $ret_1 = $obj->sumRegion($row1, $col1, $row2, $col2);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class NumMatrix {\\n    constructor(matrix: number[][]) {\\n\\n    }\\n\\n    sumRegion(row1: number, col1: number, row2: number, col2: number): number {\\n\\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * var param_1 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define num-matrix%\\n  (class object%\\n    (super-new)\\n\\n    ; matrix : (listof (listof exact-integer?))\\n    (init-field\\n      matrix)\\n    \\n    ; sum-region : exact-integer? exact-integer? exact-integer? exact-integer? -> exact-integer?\\n    (define/public (sum-region row1 col1 row2 col2)\\n\\n      )))\\n\\n;; Your num-matrix% object will be instantiated and called as such:\\n;; (define obj (new num-matrix% [matrix matrix]))\\n;; (define param_1 (send obj sum-region row1 col1 row2 col2))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_matrix_init_(Matrix :: [[integer()]]) -> any().\\nnum_matrix_init_(Matrix) ->\\n  .\\n\\n-spec num_matrix_sum_region(Row1 :: integer(), Col1 :: integer(), Row2 :: integer(), Col2 :: integer()) -> integer().\\nnum_matrix_sum_region(Row1, Col1, Row2, Col2) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% num_matrix_init_(Matrix),\\n%% Param_1 = num_matrix_sum_region(Row1, Col1, Row2, Col2),\\n\\n%% num_matrix_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule NumMatrix do\\n  @spec init_(matrix :: [[integer]]) :: any\\n  def init_(matrix) do\\n\\n  end\\n\\n  @spec sum_region(row1 :: integer, col1 :: integer, row2 :: integer, col2 :: integer) :: integer\\n  def sum_region(row1, col1, row2, col2) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# NumMatrix.init_(matrix)\\n# param_1 = NumMatrix.sum_region(row1, col1, row2, col2)\\n\\n# NumMatrix.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"NumMatrix\",\n    \"maxbytesperline\": 150000,\n    \"constructor\": {\n        \"params\": [\n            {\n                \"type\": \"integer[][]\",\n                \"name\": \"matrix\"\n            },\n            {\n                \"type\": \"integer\",\n                \"name\": \"matrixRowSize\",\n                \"lang\": \"c\",\n                \"value\": \"size_1\"\n            },\n            {\n                \"type\": \"integer\",\n                \"name\": \"matrixColSize\",\n                \"lang\": \"c\",\n                \"value\": \"col_size_1\"\n            }\n        ]\n    },\n    \"methods\": [\n        {\n            \"name\" : \"sumRegion\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"row1\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"col1\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"row2\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"col2\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            }\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following type:</p>\n\n<ul>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>Implement the NumMatrix class:</p>\n\n<ul>\n\t<li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li>\n\t<li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg\" style=\"width: 415px; height: 415px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;, &quot;sumRegion&quot;]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n<strong>Output</strong>\n[null, 8, 11, 12]\n\n<strong>Explanation</strong>\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li>\n\t<li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Range Sum Query 2D - Immutable",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Approach #1 (Brute Force) [Time Limit Exceeded]\r\n\r\n**Algorithm**\r\n\r\nEach time *sumRegion* is called, we use a double for loop to sum all elements from $$(row1, col1) \\rightarrow (row2, col2)$$.\r\n\r\n```java\r\nprivate int[][] data;\r\n\r\npublic NumMatrix(int[][] matrix) {\r\n    data = matrix;\r\n}\r\n\r\npublic int sumRegion(int row1, int col1, int row2, int col2) {\r\n    int sum = 0;\r\n    for (int r = row1; r <= row2; r++) {\r\n        for (int c = col1; c <= col2; c++) {\r\n            sum += data[r][c];\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(mn)$$ time per query.\r\nAssume that $$m$$ and $$n$$ represents the number of rows and columns respectively, each *sumRegion* query can go through at most $$m \\times n$$ elements.\r\n\r\n* Space complexity : $$O(1)$$. Note that `data` is a *reference* to `matrix` and is not a copy of it.\r\n\r\n---\r\n#### Approach #2 (Caching) [Memory Limit Exceeded]\r\n\r\n**Intuition**\r\n\r\nSince *sumRegion* could be called many times, we definitely need to do some pre-processing.\r\n\r\n**Algorithm**\r\n\r\nWe could trade in extra space for speed by pre-calculating all possible rectangular region sum and store them in a hash table. Each *sumRegion* query now takes only constant time complexity.\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(1)$$ time per query, $$O(m^2n^2)$$ time pre-computation.\r\nEach *sumRegion* query takes $$O(1)$$ time as the hash table lookup's time complexity is constant. The pre-computation will take $$O(m^2n^2)$$ time as there are a total of $$m^2 \\times n^2$$ possibilities need to be cached.\r\n\r\n* Space complexity : $$O(m^2n^2)$$.\r\nSince there are $$mn$$ different possibilities for both top left and bottom right points of the rectangular region, the extra space required is $$O(m^2n^2)$$.\r\n\r\n---\r\n#### Approach #3 (Caching Rows) [Accepted]\r\n\r\n**Intuition**\r\n\r\nRemember from the [1D version](https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/) where we used a cumulative sum array? Could we apply that directly to solve this 2D version?\r\n\r\n**Algorithm**\r\n\r\nTry to see the 2D matrix as $$m$$ rows of 1D arrays. To find the region sum, we just accumulate the sum in the region row by row.\r\n\r\n```java\r\nprivate int[][] dp;\r\n\r\npublic NumMatrix(int[][] matrix) {\r\n    if (matrix.length == 0 || matrix[0].length == 0) return;\r\n    dp = new int[matrix.length][matrix[0].length + 1];\r\n    for (int r = 0; r < matrix.length; r++) {\r\n        for (int c = 0; c < matrix[0].length; c++) {\r\n            dp[r][c + 1] = dp[r][c] + matrix[r][c];\r\n        }\r\n    }\r\n}\r\n\r\npublic int sumRegion(int row1, int col1, int row2, int col2) {\r\n    int sum = 0;\r\n    for (int row = row1; row <= row2; row++) {\r\n        sum += dp[row][col2 + 1] - dp[row][col1];\r\n    }\r\n    return sum;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(m)$$ time per query, $$O(mn)$$ time pre-computation.\r\nThe pre-computation in the constructor takes $$O(mn)$$ time. The *sumRegion* query takes $$O(m)$$ time.\r\n\r\n* Space complexity : $$O(mn)$$.\r\nThe algorithm uses $$O(mn)$$ space to store the cumulative sum of all rows.\r\n\r\n---\r\n#### Approach #4 (Caching Smarter) [Accepted]\r\n\r\n**Algorithm**\r\n\r\nWe used a cumulative sum array in the [1D version](https://leetcode.com/course/chapters/leetcode-101/range-sum-query-immutable/). We notice that the cumulative sum is computed with respect to the origin at index 0. Extending this analogy to the 2D case, we could pre-compute a cumulative region sum with respect to the origin at $$(0, 0)$$.\r\n\r\n![Sum OD](https://leetcode.com/static/images/courses/sum_od.png)  \r\n<small>Sum(OD) is the cumulative region sum with respect to the origin at (0, 0).</small>\r\n\r\nHow do we derive $$Sum(ABCD)$$ using the pre-computed cumulative region sum?\r\n\r\n![Sum OB](https://leetcode.com/static/images/courses/sum_ob.png)  \r\n<small>Sum(OB) is the cumulative region sum on top of the rectangle.</small>\r\n\r\n![Sum OC](https://leetcode.com/static/images/courses/sum_oc.png)  \r\n<small>Sum(OC) is the cumulative region sum to the left of the rectangle.</small>\r\n\r\n![Sum OA](https://leetcode.com/static/images/courses/sum_oa.png)  \r\n<small>Sum(OA) is the cumulative region sum to the top left corner of the rectangle.</small>\r\n\r\nNote that the region $$Sum(OA)$$ is covered twice by both $$Sum(OB)$$ and $$Sum(OC)$$. We could use the principle of inclusion-exclusion to calculate $$Sum(ABCD)$$ as following:\r\n\r\n$$\r\nSum(ABCD) = Sum(OD) - Sum(OB) - Sum(OC) + Sum(OA)\r\n$$\r\n\r\n```java\r\nprivate int[][] dp;\r\n\r\npublic NumMatrix(int[][] matrix) {\r\n    if (matrix.length == 0 || matrix[0].length == 0) return;\r\n    dp = new int[matrix.length + 1][matrix[0].length + 1];\r\n    for (int r = 0; r < matrix.length; r++) {\r\n        for (int c = 0; c < matrix[0].length; c++) {\r\n            dp[r + 1][c + 1] = dp[r + 1][c] + dp[r][c + 1] + matrix[r][c] - dp[r][c];\r\n        }\r\n    }\r\n}\r\n\r\npublic int sumRegion(int row1, int col1, int row2, int col2) {\r\n    return dp[row2 + 1][col2 + 1] - dp[row1][col2 + 1] - dp[row2 + 1][col1] + dp[row1][col1];\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(1)$$ time per query, $$O(mn)$$ time pre-computation.\r\nThe pre-computation in the constructor takes $$O(mn)$$ time. Each *sumRegion* query takes $$O(1)$$ time.\r\n\r\n* Space complexity : $$O(mn)$$.\r\nThe algorithm uses $$O(mn)$$ space to store the cumulative region sum.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "range-sum-query-2d-immutable",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.904,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3038",
                "title": "Continuous Subarray Sum",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 55,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "523",
                    "questionFrontendId": "523",
                    "sessionId": "968792",
                    "questionTitle": "Continuous Subarray Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/continuous-subarray-sum/submit/",
                    "interpretUrl": "/problems/continuous-subarray-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool checkSubarraySum(vector<int>& nums, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean checkSubarraySum(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def checkSubarraySum(self, nums, k):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool checkSubarraySum(int* nums, int numsSize, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool CheckSubarraySum(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {boolean}\\n */\\nvar checkSubarraySum = function(nums, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} k\\n# @return {Boolean}\\ndef check_subarray_sum(nums, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func checkSubarraySum(_ nums: [Int], _ k: Int) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkSubarraySum(nums []int, k int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def checkSubarraySum(nums: Array[Int], k: Int): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun checkSubarraySum(nums: IntArray, k: Int): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn check_subarray_sum(nums: Vec<i32>, k: i32) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Boolean\\n     */\\n    function checkSubarraySum($nums, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function checkSubarraySum(nums: number[], k: number): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (check-subarray-sum nums k)\\n  (-> (listof exact-integer?) exact-integer? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec check_subarray_sum(Nums :: [integer()], K :: integer()) -> boolean().\\ncheck_subarray_sum(Nums, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec check_subarray_sum(nums :: [integer], k :: integer) :: boolean\\n  def check_subarray_sum(nums, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[23,2,4,6,7]\n6",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"checkSubarraySum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n        \"name\": \"k\",\r\n        \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <code>true</code> <em>if </em><code>nums</code><em> has a continuous subarray of size <strong>at least two</strong> whose elements sum up to a multiple of</em> <code>k</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>An integer <code>x</code> is a multiple of <code>k</code> if there exists an integer <code>n</code> such that <code>x = n * k</code>. <code>0</code> is <strong>always</strong> a multiple of <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,<u>2,4</u>,6,7], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [<u>23,2,6,4,7</u>], k = 6\n<strong>Output:</strong> true\n<strong>Explanation:</strong> [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [23,2,6,4,7], k = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Decode Ways is a popular one being asked by Facebook. It is actually a simplified version of Squished Status, which appeared in Facebook's coding competition. We also have its variation Decode Ways II for you to practice."
    },
    {
        "id": "56",
        "title": "Design",
        "slug": "design-3",
        "items": [
            {
                "id": "311",
                "title": "LRU Cache",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 56,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "146",
                    "questionFrontendId": "146",
                    "sessionId": "968792",
                    "questionTitle": "LRU Cache",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lru-cache/submit/",
                    "interpretUrl": "/problems/lru-cache/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LRUCache {\\npublic:\\n    LRUCache(int capacity) {\\n        \\n    }\\n    \\n    int get(int key) {\\n        \\n    }\\n    \\n    void put(int key, int value) {\\n        \\n    }\\n};\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache* obj = new LRUCache(capacity);\\n * int param_1 = obj->get(key);\\n * obj->put(key,value);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int get(int key) {\\n        \\n    }\\n    \\n    public void put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.get(key);\\n * obj.put(key,value);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LRUCache(object):\\n\\n    def __init__(self, capacity):\\n        \\\"\\\"\\\"\\n        :type capacity: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def put(self, key, value):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :type value: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class LRUCache:\\n\\n    def __init__(self, capacity: int):\\n        \\n\\n    def get(self, key: int) -> int:\\n        \\n\\n    def put(self, key: int, value: int) -> None:\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} LRUCache;\\n\\n\\nLRUCache* lRUCacheCreate(int capacity) {\\n    \\n}\\n\\nint lRUCacheGet(LRUCache* obj, int key) {\\n  \\n}\\n\\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\\n  \\n}\\n\\nvoid lRUCacheFree(LRUCache* obj) {\\n    \\n}\\n\\n/**\\n * Your LRUCache struct will be instantiated and called as such:\\n * LRUCache* obj = lRUCacheCreate(capacity);\\n * int param_1 = lRUCacheGet(obj, key);\\n \\n * lRUCachePut(obj, key, value);\\n \\n * lRUCacheFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int Get(int key) {\\n        \\n    }\\n    \\n    public void Put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} capacity\\n */\\nvar LRUCache = function(capacity) {\\n    \\n};\\n\\n/** \\n * @param {number} key\\n * @return {number}\\n */\\nLRUCache.prototype.get = function(key) {\\n    \\n};\\n\\n/** \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */\\nLRUCache.prototype.put = function(key, value) {\\n    \\n};\\n\\n/** \\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LRUCache\\n\\n=begin\\n    :type capacity: Integer\\n=end\\n    def initialize(capacity)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :rtype: Integer\\n=end\\n    def get(key)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :type value: Integer\\n    :rtype: Void\\n=end\\n    def put(key, value)\\n        \\n    end\\n\\n\\nend\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache.new(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key, value)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass LRUCache {\\n\\n    init(_ capacity: Int) {\\n        \\n    }\\n    \\n    func get(_ key: Int) -> Int {\\n        \\n    }\\n    \\n    func put(_ key: Int, _ value: Int) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache(capacity)\\n * let ret_1: Int = obj.get(key)\\n * obj.put(key, value)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LRUCache struct {\\n    \\n}\\n\\n\\nfunc Constructor(capacity int) LRUCache {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Get(key int) int {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Put(key int, value int)  {\\n    \\n}\\n\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * obj := Constructor(capacity);\\n * param_1 := obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LRUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class LRUCache(capacity: Int) {\\n\\n    fun get(key: Int): Int {\\n        \\n    }\\n\\n    fun put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct LRUCache {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl LRUCache {\\n\\n    fn new(capacity: i32) -> Self {\\n        \\n    }\\n    \\n    fn get(&self, key: i32) -> i32 {\\n        \\n    }\\n    \\n    fn put(&self, key: i32, value: i32) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache::new(capacity);\\n * let ret_1: i32 = obj.get(key);\\n * obj.put(key, value);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class LRUCache {\\n    /**\\n     * @param Integer $capacity\\n     */\\n    function __construct($capacity) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @return Integer\\n     */\\n    function get($key) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @param Integer $value\\n     * @return NULL\\n     */\\n    function put($key, $value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * $obj = LRUCache($capacity);\\n * $ret_1 = $obj->get($key);\\n * $obj->put($key, $value);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class LRUCache {\\n    constructor(capacity: number) {\\n\\n    }\\n\\n    get(key: number): number {\\n\\n    }\\n\\n    put(key: number, value: number): void {\\n\\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define lru-cache%\\n  (class object%\\n    (super-new)\\n\\n    ; capacity : exact-integer?\\n    (init-field\\n      capacity)\\n    \\n    ; get : exact-integer? -> exact-integer?\\n    (define/public (get key)\\n\\n      )\\n    ; put : exact-integer? exact-integer? -> void?\\n    (define/public (put key value)\\n\\n      )))\\n\\n;; Your lru-cache% object will be instantiated and called as such:\\n;; (define obj (new lru-cache% [capacity capacity]))\\n;; (define param_1 (send obj get key))\\n;; (send obj put key value)\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec lru_cache_init_(Capacity :: integer()) -> any().\\nlru_cache_init_(Capacity) ->\\n  .\\n\\n-spec lru_cache_get(Key :: integer()) -> integer().\\nlru_cache_get(Key) ->\\n  .\\n\\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\\nlru_cache_put(Key, Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% lru_cache_init_(Capacity),\\n%% Param_1 = lru_cache_get(Key),\\n%% lru_cache_put(Key, Value),\\n\\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule LRUCache do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n\\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n\\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# LRUCache.init_(capacity)\\n# param_1 = LRUCache.get(key)\\n# LRUCache.put(key, value)\\n\\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"LRUCache\",\n    \"maxbytesperline\": 200000,\n    \"constructor\": {\n        \"params\": [\n            {\n                \"type\": \"integer\",\n                \"name\": \"capacity\"\n            }\n        ]\n    },\n    \"methods\": [\n        {\n            \"name\" : \"get\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            }\n        },\n        {\n            \"name\" : \"put\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"value\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\"\n            }\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code>&nbsp;Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions&nbsp;<code data-stringify-type=\"code\">get</code>&nbsp;and&nbsp;<code data-stringify-type=\"code\">put</code>&nbsp;must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most 2<code>&nbsp;* 10<sup>5</sup></code>&nbsp;calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "LRU Cache",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Ordered dictionary\n\n**Intuition**\n\nWe're asked to implement [the structure](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) \nwhich provides the following operations in $$\\mathcal{O}(1)$$ time :\n\n- Get the key / Check if the key exists \n\n- Put the key\n\n- Delete the first added key\n\nThe first two operations in $$\\mathcal{O}(1)$$ time are provided \nby the standard hashmap, and the last one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines \nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nLet's use this structure here.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/hfQBGVXK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hfQBGVXK\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get` since all operations with\nordered dictionary : `get/in/set/move_to_end/popitem` \n(`get/containsKey/put/remove`) are done in a constant time.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for an ordered dictionary with at most `capacity + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Hashmap + DoubleLinkedList\n\n**Intuition**\n\nThis Java solution is an extended version of the \n[the article published on the Discuss forum](https://leetcode.com/problems/lru-cache/discuss/45911/Java-Hashtable-%2B-Double-linked-list-(with-a-touch-of-pseudo-nodes)).\n\nThe problem can be solved with a hashmap\nthat keeps track of the keys and its values in the double linked list. \nThat results in $$\\mathcal{O}(1)$$ time for `put` and `get` operations and\nallows to remove the first added node in $$\\mathcal{O}(1)$$ time as well.\n\n![compute](../Figures/146/structure.png)\n\nOne advantage of _double_ linked list is that the node can remove itself without other reference. \nIn addition, it takes constant time to add and remove nodes from the head or tail.\n\nOne particularity about the double linked list implemented here\nis that there are _pseudo head_ and _pseudo tail_ to mark the boundary, \nso that we don't need to check the `null` node during the update. \n\n![compute](../Figures/146/new_node.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/dcSrw233/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dcSrw233\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get`.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for a hashmap and double linked list \nwith at most `capacity + 1` elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "lru-cache",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.763,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "303",
                "title": "Binary Search Tree Iterator",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 56,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "173",
                    "questionFrontendId": "173",
                    "sessionId": "968792",
                    "questionTitle": "Binary Search Tree Iterator",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-search-tree-iterator/submit/",
                    "interpretUrl": "/problems/binary-search-tree-iterator/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass BSTIterator {\\npublic:\\n    BSTIterator(TreeNode* root) {\\n        \\n    }\\n    \\n    int next() {\\n        \\n    }\\n    \\n    bool hasNext() {\\n        \\n    }\\n};\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator* obj = new BSTIterator(root);\\n * int param_1 = obj->next();\\n * bool param_2 = obj->hasNext();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass BSTIterator {\\n\\n    public BSTIterator(TreeNode root) {\\n        \\n    }\\n    \\n    public int next() {\\n        \\n    }\\n    \\n    public boolean hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator obj = new BSTIterator(root);\\n * int param_1 = obj.next();\\n * boolean param_2 = obj.hasNext();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass BSTIterator(object):\\n\\n    def __init__(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n    def next(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def hasNext(self):\\n        \\\"\\\"\\\"\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your BSTIterator object will be instantiated and called as such:\\n# obj = BSTIterator(root)\\n# param_1 = obj.next()\\n# param_2 = obj.hasNext()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass BSTIterator:\\n\\n    def __init__(self, root: Optional[TreeNode]):\\n        \\n\\n    def next(self) -> int:\\n        \\n\\n    def hasNext(self) -> bool:\\n        \\n\\n\\n# Your BSTIterator object will be instantiated and called as such:\\n# obj = BSTIterator(root)\\n# param_1 = obj.next()\\n# param_2 = obj.hasNext()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n\\ntypedef struct {\\n    \\n} BSTIterator;\\n\\n\\nBSTIterator* bSTIteratorCreate(struct TreeNode* root) {\\n    \\n}\\n\\nint bSTIteratorNext(BSTIterator* obj) {\\n  \\n}\\n\\nbool bSTIteratorHasNext(BSTIterator* obj) {\\n  \\n}\\n\\nvoid bSTIteratorFree(BSTIterator* obj) {\\n    \\n}\\n\\n/**\\n * Your BSTIterator struct will be instantiated and called as such:\\n * BSTIterator* obj = bSTIteratorCreate(root);\\n * int param_1 = bSTIteratorNext(obj);\\n \\n * bool param_2 = bSTIteratorHasNext(obj);\\n \\n * bSTIteratorFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class BSTIterator {\\n\\n    public BSTIterator(TreeNode root) {\\n        \\n    }\\n    \\n    public int Next() {\\n        \\n    }\\n    \\n    public bool HasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * BSTIterator obj = new BSTIterator(root);\\n * int param_1 = obj.Next();\\n * bool param_2 = obj.HasNext();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n */\\nvar BSTIterator = function(root) {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nBSTIterator.prototype.next = function() {\\n    \\n};\\n\\n/**\\n * @return {boolean}\\n */\\nBSTIterator.prototype.hasNext = function() {\\n    \\n};\\n\\n/** \\n * Your BSTIterator object will be instantiated and called as such:\\n * var obj = new BSTIterator(root)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\nclass BSTIterator\\n\\n=begin\\n    :type root: TreeNode\\n=end\\n    def initialize(root)\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Integer\\n=end\\n    def next()\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Boolean\\n=end\\n    def has_next()\\n        \\n    end\\n\\n\\nend\\n\\n# Your BSTIterator object will be instantiated and called as such:\\n# obj = BSTIterator.new(root)\\n# param_1 = obj.next()\\n# param_2 = obj.has_next()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\n\\nclass BSTIterator {\\n\\n    init(_ root: TreeNode?) {\\n        \\n    }\\n    \\n    func next() -> Int {\\n        \\n    }\\n    \\n    func hasNext() -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * let obj = BSTIterator(root)\\n * let ret_1: Int = obj.next()\\n * let ret_2: Bool = obj.hasNext()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\ntype BSTIterator struct {\\n    \\n}\\n\\n\\nfunc Constructor(root *TreeNode) BSTIterator {\\n    \\n}\\n\\n\\nfunc (this *BSTIterator) Next() int {\\n    \\n}\\n\\n\\nfunc (this *BSTIterator) HasNext() bool {\\n    \\n}\\n\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * obj := Constructor(root);\\n * param_1 := obj.Next();\\n * param_2 := obj.HasNext();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nclass BSTIterator(_root: TreeNode) {\\n\\n    def next(): Int = {\\n        \\n    }\\n\\n    def hasNext(): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * var obj = new BSTIterator(root)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass BSTIterator(root: TreeNode?) {\\n\\n    fun next(): Int {\\n        \\n    }\\n\\n    fun hasNext(): Boolean {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * var obj = BSTIterator(root)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nstruct BSTIterator {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl BSTIterator {\\n\\n    fn new(root: Option<Rc<RefCell<TreeNode>>>) -> Self {\\n        \\n    }\\n    \\n    fn next(&self) -> i32 {\\n        \\n    }\\n    \\n    fn has_next(&self) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * let obj = BSTIterator::new(root);\\n * let ret_1: i32 = obj.next();\\n * let ret_2: bool = obj.has_next();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass BSTIterator {\\n    /**\\n     * @param TreeNode $root\\n     */\\n    function __construct($root) {\\n        \\n    }\\n  \\n    /**\\n     * @return Integer\\n     */\\n    function next() {\\n        \\n    }\\n  \\n    /**\\n     * @return Boolean\\n     */\\n    function hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * $obj = BSTIterator($root);\\n * $ret_1 = $obj->next();\\n * $ret_2 = $obj->hasNext();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nclass BSTIterator {\\n    constructor(root: TreeNode | null) {\\n\\n    }\\n\\n    next(): number {\\n\\n    }\\n\\n    hasNext(): boolean {\\n\\n    }\\n}\\n\\n/**\\n * Your BSTIterator object will be instantiated and called as such:\\n * var obj = new BSTIterator(root)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define bst-iterator%\\n  (class object%\\n    (super-new)\\n\\n    ; root : (or/c tree-node? #f)\\n    (init-field\\n      root)\\n    \\n    ; next : -> exact-integer?\\n    (define/public (next)\\n\\n      )\\n    ; has-next : -> boolean?\\n    (define/public (has-next)\\n\\n      )))\\n\\n;; Your bst-iterator% object will be instantiated and called as such:\\n;; (define obj (new bst-iterator% [root root]))\\n;; (define param_1 (send obj next))\\n;; (define param_2 (send obj has-next))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec bst_iterator_init_(Root :: #tree_node{} | null) -> any().\\nbst_iterator_init_(Root) ->\\n  .\\n\\n-spec bst_iterator_next() -> integer().\\nbst_iterator_next() ->\\n  .\\n\\n-spec bst_iterator_has_next() -> boolean().\\nbst_iterator_has_next() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% bst_iterator_init_(Root),\\n%% Param_1 = bst_iterator_next(),\\n%% Param_2 = bst_iterator_has_next(),\\n\\n%% bst_iterator_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule BSTIterator do\\n  @spec init_(root :: TreeNode.t | nil) :: any\\n  def init_(root) do\\n\\n  end\\n\\n  @spec next() :: integer\\n  def next() do\\n\\n  end\\n\\n  @spec has_next() :: boolean\\n  def has_next() do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# BSTIterator.init_(root)\\n# param_1 = BSTIterator.next()\\n# param_2 = BSTIterator.has_next()\\n\\n# BSTIterator.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"classname\": \"BSTIterator\",\n  \"maxbytesperline\": 200000,\n  \"constructor\": {\n    \"params\": [\n      {\n        \"type\": \"TreeNode\",\n        \"name\": \"root\"\n      }\n    ]\n  },\n  \"methods\": [\n    {\n      \"params\": [],\n      \"name\": \"next\",\n      \"return\": {\n        \"type\": \"integer\"\n      }\n    },\n    {\n      \"params\": [],\n      \"name\": \"hasNext\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    }\n  ],\n  \"systemdesign\": true,\n  \"params\": [\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\",\n    \"dealloc\": true\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement the <code>BSTIterator</code> class that represents an iterator over the <strong><a href=\"https://en.wikipedia.org/wiki/Tree_traversal#In-order_(LNR)\" target=\"_blank\">in-order traversal</a></strong> of a binary search tree (BST):</p>\n\n<ul>\n\t<li><code>BSTIterator(TreeNode root)</code> Initializes an object of the <code>BSTIterator</code> class. The <code>root</code> of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there exists a number in the traversal to the right of the pointer, otherwise returns <code>false</code>.</li>\n\t<li><code>int next()</code> Moves the pointer to the right, then returns the number at the pointer.</li>\n</ul>\n\n<p>Notice that by initializing the pointer to a non-existent smallest number, the first call to <code>next()</code> will return the smallest element in the BST.</p>\n\n<p>You may assume that <code>next()</code> calls will always be valid. That is, there will be at least a next number in the in-order traversal when <code>next()</code> is called.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png\" style=\"width: 189px; height: 178px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;BSTIterator&quot;, &quot;next&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;, &quot;next&quot;, &quot;hasNext&quot;]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n<strong>Output</strong>\n[null, 3, 7, true, 9, true, 15, true, 20, false]\n\n<strong>Explanation</strong>\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next();    // return 3\nbSTIterator.next();    // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next();    // return 20\nbSTIterator.hasNext(); // return False\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>5</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>6</sup></code></li>\n\t<li>At most <code>10<sup>5</sup></code> calls will be made to <code>hasNext</code>, and <code>next</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you implement <code>next()</code> and <code>hasNext()</code> to run in average <code>O(1)</code> time and use&nbsp;<code>O(h)</code> memory, where <code>h</code> is the height of the tree?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Search Tree Iterator",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\nBefore looking at the solutions for this problem, let's try and boil down what the problem statement essentially asks us to do. So, we need to implement an iterator class with two functions namely `next()` and `hasNext()`. The `hasNext()` function returns a boolean value indicating whether there are any more elements left in the binary search tree or not. The `next()` function returns the next smallest element in the BST. Therefore, the first time we call the `next()` function, it should return the smallest element in the BST and likewise, when we call `next()` for the very last time, it should return the largest element in the BST.\r\n\r\nYou might be wondering as to what could be the use case for an iterator. Essentially, an iterator can be used to *iterate over* any container object. For our purpose, the container object is a binary search tree. If such an iterator is defined, then the traversal logic can be abstracted out and we can simply make use of the iterator to process the elements in a certain order.\r\n\r\n```python\r\n1. new_iterator = BSTIterator(root);\r\n2. while (new_iterator.hasNext())\r\n3.     process(new_iterator.next());\r\n```\r\n\r\nNow that we know the motivation behind designing a good iterator class for a data structure, let's take a look at another interesting aspect about the iterator that we have to build for this problem. Usually, an iterator simply goes over each of the elements of the container one by one. For the BST, we want the iterator to return elements in an ascending order.\r\n\r\n> An important property of the binary search tree is that the inorder traversal of a BST gives us the elements in a sorted order. Thus, the inorder traversal will be the core of the solutions that we will look ahead.\r\n\r\n!?!../Documents/173_anim.json:770,405!?!\r\n\r\n---\r\n\r\n#### Approach 1: Flattening the BST\r\n\r\n**Intuition**\r\n\r\nIn computer programming, an iterator is an object that enables a programmer to traverse a container, particularly lists. This is the Wikipedia definition of an iterator. Naturally, the easiest way to implement an iterator would be on an array like container interface. So, if we had an array, all we would need is a pointer or an index and we could easily implement the two required functions `next()` and `hasNext()`.\r\n\r\nHence, the first approach that we will look at is based on this idea. We will be using additional memory and we will flatten the binary search tree into an array. Since we need the elements to be in a sorted order, we will do an inorder traversal over the tree and store the elements in a new array and then build the iterator functions using this new array.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize an empty array that will contain the nodes of the binary search tree in the sorted order.\r\n2. We traverse the binary search tree in the inorder fashion and for each node that we process, we add it to our array `nodes`. Note that before processing a node, its left subtree has to be processed (or recursed upon) and after processing a node, its right subtree has to be recursed upon.\r\n3. Once we have all the nodes in an array, we simply need a pointer or an index in that array to implement the two functions `next` and `hasNext`. Whenever there's a call to `hasNext`, we simply check if the index has reached the end of the array or not. For the call to `next` function, we simply return the element pointed by the index. Also, after a the `next` function call is made, we have to move the index one step forward to simulate the progress of our iterator.\r\n\r\n<center>\r\n<img src=\"../Figures/173/appr_1.png\"></center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/ZPfsqFvW/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZPfsqFvW\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(N)$$ is the time taken by the constructor for the iterator. The problem statement only asks us to analyze the complexity of the two functions, however, when implementing a class, it's important to also note the time it takes to initialize a new object of the class and in this case it would be linear in terms of the number of nodes in the BST. In addition to the space occupied by the new array we initialized, the recursion stack for the inorder traversal also occupies space but that is limited to $$O(h)$$ where $$h$$ is the height of the tree.\r\n    - `next()` would take $$O(1)$$\r\n    - `hasNext()` would take $$O(1)$$\r\n* Space complexity : $$O(N)$$ since we create a new array to contain all the nodes of the BST. This doesn't comply with the requirement specified in the problem statement that the maximum space complexity of either of the functions should be $$O(h)$$ where $$h$$ is the height of the tree and for a well balanced BST, the height is usually $$logN$$. So, we get great time complexities but we had to compromise on the space. Note that the new array is used for both the function calls and hence the space complexity for both the calls is $$O(N)$$.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: Controlled Recursion\r\n\r\n**Intuition**\r\n\r\nThe approach we saw earlier uses space which is linear in the number of nodes in the binary search tree. However, the reason we had to resort to such an approach was because we can control the iteration over the array. We can't really *pause* a recursion in between and then start it off sometime later.\r\n\r\n>However, if we could simulate a controlled recursion for an inorder traversal, we wouldn't really need to use any additional space other than the space used by the stack for our recursion simulation.\r\n\r\nSo, this approach essentially uses a custom stack to simulate the inorder traversal i.e. we will be taking an iterative approach to inorder traversal rather than going with the recursive approach and in doing so, we will be able to easily implement the two function calls without any other additional space.\r\n\r\nThings however, do get a bit complicated as far as the time complexity of the two operations is concerned and that is where we will spend a little bit of time to understand if this approach complies with all the asymptotic complexity requirements of the question. Let's move on to the algorithm for now to look at this idea more concretely.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize an empty stack `S` which will be used to simulate the inorder traversal for our binary search tree. Note that we will be following the same approach for inorder traversal as before except that now we will be using our own stack rather than the system stack. Since we are using a custom data structure, we can *pause* and *resume* the recursion at will.\r\n2. Let's also consider a helper function that we will be calling again and again in the implementation. This function, called `_inorder_left` will essentially add all the nodes in the leftmost branch of the tree rooted at the given node `root` to the stack and it will keep on doing so until there is no `left` child of the `root` node. Something like the following code:\r\n\r\n      <pre>def inorder_left(root):\r\n      while (root):\r\n        S.append(root)\r\n        root = root.left</pre>\r\n\r\n      For a given node `root`, the next smallest element will *always* be the leftmost element in its tree. So, for a given root node, we keep on following the leftmost branch until we reach a node which doesn't have a left child and that will be the next smallest element. For the root of our BST, this leftmost node would be the smallest node in the tree. Rest of the nodes are added to the stack because they are pending processing. Try and relate this with a dry run of a simple recursive inorder traversal and things will make a bit more sense.\r\n\r\n3. The first time `next()` function call is made, the smallest element of the BST has to be returned and then our simulated recursion has to move one step forward i.e. move onto the next smallest element in the BST. The invariant that will be maintained in this algorithm is that the stack top always contains the element to be returned for the `next()` function call. However, there is additional work that needs to be done to maintain that invariant. It's very easy to implement the `hasNext()` function since all we need to check is if the stack is empty or not. So, we will only focus on the `next()` call from now.\r\n\r\n4. Initially, given the root node of the BST, we call the function `_inorder_left` and that ensures our invariant holds. Let's see this first step with an example.\r\n\r\n    <center>\r\n    <img src=\"../Figures/173/approach_2-1.png\" width=\"700\"></center>\r\n\r\n5. Suppose we get a call to the `next()` function. The node which we have to return i.e. the next smallest element in the binary search tree iterator is the one sitting at the top of our stack. So, for the example above, that node would be `2` which is the correct value. Now, there are two possibilities that we have to deal with:\r\n      * One is where the node at the top of the stack is actually a leaf node. This is the best case and here we don't have to do anything. Simply pop the node off the stack and return its value. So, this would be a constant time operation.\r\n      * Second is where the node has a `right` child. We don't need to check for the left child because of the way we have added nodes onto the stack. The topmost node either won't have a `left` child or would already have the `left` subtree processed. If it has a `right` child, then we call our helper function on the node's right child. This would comparatively be a costly operation depending upon the structure of the tree.\r\n\r\n        <center>\r\n        <img src=\"../Figures/173/approach_2-2.png\" width=\"700\"></center>\r\n\r\n6. We keep on maintaining the invariant this way in the function call for `next` and this way we will always be able to return the next smallest element in the BST from the top of the stack. Again, it's important to understand that obtaining the next smallest element doesn't take much time. However, some time is spent in maintaining the invariant that the stack top will *always* have the node we are looking for.\r\n\r\n<iframe src=\"https://leetcode.com/playground/oKUvDwGX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"oKUvDwGX\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : The time complexity for this approach is very interesting to analyze. Let's look at the complexities for both the functions in the class:\r\n    - `hasNext` is the easier of the lot since all we do in this is to return true if there are any elements left in the stack. Otherwise, we return false. So clearly, this is an $$O(1)$$ operation every time. Let's look at the more complicated function now to see if we satisfy all the requirements in the problem statement\r\n    - `next` involves two major operations. One is where we pop an element from the stack which becomes the next smallest element to return. This is a $$O(1)$$ operation. However, we then make a  call to our helper function `_inorder_left` which iterates over a bunch of nodes. This is clearly a linear time operation i.e. $$O(N)$$ in the worst case. This is true.\r\n\r\n        >However, the important thing to note here is that we only make such a call for nodes which have a right child. Otherwise, we simply return. Also, even if we end up calling the helper function, it won't always process N nodes. They will be much lesser. Only if we have a skewed tree would there be N nodes for the root. But that is the only node for which we would call the helper function.\r\n\r\n        Thus, the amortized (average) time complexity for this function would still be $$O(1)$$ which is what the question asks for. We don't need to have a solution which gives constant time operations for *every* call. We need that complexity on average and that is what we get.\r\n\r\n* Space complexity: The space complexity is $$O(N)$$ ($$N$$ is the number of nodes in the tree), which is occupied by our custom stack for simulating the inorder traversal. Again, we satisfy the space requirements as well as specified in the problem statement.\r\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-search-tree-iterator",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.916,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "300",
                "title": "Add and Search Word - Data structure design",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 56,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "211",
                    "questionFrontendId": "211",
                    "sessionId": "968792",
                    "questionTitle": "Design Add and Search Words Data Structure",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/design-add-and-search-words-data-structure/submit/",
                    "interpretUrl": "/problems/design-add-and-search-words-data-structure/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class WordDictionary {\\npublic:\\n    /** Initialize your data structure here. */\\n    WordDictionary() {\\n        \\n    }\\n    \\n    void addWord(string word) {\\n        \\n    }\\n    \\n    bool search(string word) {\\n        \\n    }\\n};\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * WordDictionary* obj = new WordDictionary();\\n * obj->addWord(word);\\n * bool param_2 = obj->search(word);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class WordDictionary {\\n\\n    /** Initialize your data structure here. */\\n    public WordDictionary() {\\n        \\n    }\\n    \\n    public void addWord(String word) {\\n        \\n    }\\n    \\n    public boolean search(String word) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * WordDictionary obj = new WordDictionary();\\n * obj.addWord(word);\\n * boolean param_2 = obj.search(word);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class WordDictionary(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def addWord(self, word):\\n        \\\"\\\"\\\"\\n        :type word: str\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def search(self, word):\\n        \\\"\\\"\\\"\\n        :type word: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your WordDictionary object will be instantiated and called as such:\\n# obj = WordDictionary()\\n# obj.addWord(word)\\n# param_2 = obj.search(word)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class WordDictionary:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def addWord(self, word: str) -> None:\\n        \\n\\n    def search(self, word: str) -> bool:\\n        \\n\\n\\n# Your WordDictionary object will be instantiated and called as such:\\n# obj = WordDictionary()\\n# obj.addWord(word)\\n# param_2 = obj.search(word)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} WordDictionary;\\n\\n/** Initialize your data structure here. */\\n\\nWordDictionary* wordDictionaryCreate() {\\n    \\n}\\n\\nvoid wordDictionaryAddWord(WordDictionary* obj, char * word) {\\n  \\n}\\n\\nbool wordDictionarySearch(WordDictionary* obj, char * word) {\\n  \\n}\\n\\nvoid wordDictionaryFree(WordDictionary* obj) {\\n    \\n}\\n\\n/**\\n * Your WordDictionary struct will be instantiated and called as such:\\n * WordDictionary* obj = wordDictionaryCreate();\\n * wordDictionaryAddWord(obj, word);\\n \\n * bool param_2 = wordDictionarySearch(obj, word);\\n \\n * wordDictionaryFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class WordDictionary {\\n\\n    /** Initialize your data structure here. */\\n    public WordDictionary() {\\n        \\n    }\\n    \\n    public void AddWord(string word) {\\n        \\n    }\\n    \\n    public bool Search(string word) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * WordDictionary obj = new WordDictionary();\\n * obj.AddWord(word);\\n * bool param_2 = obj.Search(word);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar WordDictionary = function() {\\n    \\n};\\n\\n/** \\n * @param {string} word\\n * @return {void}\\n */\\nWordDictionary.prototype.addWord = function(word) {\\n    \\n};\\n\\n/** \\n * @param {string} word\\n * @return {boolean}\\n */\\nWordDictionary.prototype.search = function(word) {\\n    \\n};\\n\\n/** \\n * Your WordDictionary object will be instantiated and called as such:\\n * var obj = new WordDictionary()\\n * obj.addWord(word)\\n * var param_2 = obj.search(word)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class WordDictionary\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    :type word: String\\n    :rtype: Void\\n=end\\n    def add_word(word)\\n        \\n    end\\n\\n\\n=begin\\n    :type word: String\\n    :rtype: Boolean\\n=end\\n    def search(word)\\n        \\n    end\\n\\n\\nend\\n\\n# Your WordDictionary object will be instantiated and called as such:\\n# obj = WordDictionary.new()\\n# obj.add_word(word)\\n# param_2 = obj.search(word)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass WordDictionary {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    func addWord(_ word: String) {\\n        \\n    }\\n    \\n    func search(_ word: String) -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * let obj = WordDictionary()\\n * obj.addWord(word)\\n * let ret_2: Bool = obj.search(word)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type WordDictionary struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() WordDictionary {\\n    \\n}\\n\\n\\nfunc (this *WordDictionary) AddWord(word string)  {\\n    \\n}\\n\\n\\nfunc (this *WordDictionary) Search(word string) bool {\\n    \\n}\\n\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.AddWord(word);\\n * param_2 := obj.Search(word);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class WordDictionary() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    def addWord(word: String) {\\n        \\n    }\\n\\n    def search(word: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * var obj = new WordDictionary()\\n * obj.addWord(word)\\n * var param_2 = obj.search(word)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class WordDictionary() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    fun addWord(word: String) {\\n        \\n    }\\n\\n    fun search(word: String): Boolean {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * var obj = WordDictionary()\\n * obj.addWord(word)\\n * var param_2 = obj.search(word)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct WordDictionary {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl WordDictionary {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    fn add_word(&self, word: String) {\\n        \\n    }\\n    \\n    fn search(&self, word: String) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * let obj = WordDictionary::new();\\n * obj.add_word(word);\\n * let ret_2: bool = obj.search(word);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class WordDictionary {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param String $word\\n     * @return NULL\\n     */\\n    function addWord($word) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $word\\n     * @return Boolean\\n     */\\n    function search($word) {\\n        \\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * $obj = WordDictionary();\\n * $obj->addWord($word);\\n * $ret_2 = $obj->search($word);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class WordDictionary {\\n    constructor() {\\n\\n    }\\n\\n    addWord(word: string): void {\\n\\n    }\\n\\n    search(word: string): boolean {\\n\\n    }\\n}\\n\\n/**\\n * Your WordDictionary object will be instantiated and called as such:\\n * var obj = new WordDictionary()\\n * obj.addWord(word)\\n * var param_2 = obj.search(word)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define word-dictionary%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; add-word : string? -> void?\\n    (define/public (add-word word)\\n\\n      )\\n    ; search : string? -> boolean?\\n    (define/public (search word)\\n\\n      )))\\n\\n;; Your word-dictionary% object will be instantiated and called as such:\\n;; (define obj (new word-dictionary%))\\n;; (send obj add-word word)\\n;; (define param_2 (send obj search word))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec word_dictionary_init_() -> any().\\nword_dictionary_init_() ->\\n  .\\n\\n-spec word_dictionary_add_word(Word :: unicode:unicode_binary()) -> any().\\nword_dictionary_add_word(Word) ->\\n  .\\n\\n-spec word_dictionary_search(Word :: unicode:unicode_binary()) -> boolean().\\nword_dictionary_search(Word) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% word_dictionary_init_(),\\n%% word_dictionary_add_word(Word),\\n%% Param_2 = word_dictionary_search(Word),\\n\\n%% word_dictionary_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule WordDictionary do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec add_word(word :: String.t) :: any\\n  def add_word(word) do\\n\\n  end\\n\\n  @spec search(word :: String.t) :: boolean\\n  def search(word) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# WordDictionary.init_()\\n# WordDictionary.add_word(word)\\n# param_2 = WordDictionary.search(word)\\n\\n# WordDictionary.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"classname\": \"WordDictionary\",\n  \"maxbytesperline\": 400000,\n  \"constructor\": {\n    \"params\": [],\n    \"comment\": \"Initialize your data structure here.\"\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"word\"\n        }\n      ],\n      \"name\": \"addWord\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"word\"\n        }\n      ],\n      \"name\": \"search\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    }\n  ],\n  \"systemdesign\": true,\n  \"params\": [\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"inputs\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<String>\",\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>\n\n<p>Implement the <code>WordDictionary</code> class:</p>\n\n<ul>\n\t<li><code>WordDictionary()</code>&nbsp;Initializes the object.</li>\n\t<li><code>void addWord(word)</code> Adds <code>word</code> to the data structure, it can be matched later.</li>\n\t<li><code>bool search(word)</code>&nbsp;Returns <code>true</code> if there is any string in the data structure that matches <code>word</code>&nbsp;or <code>false</code> otherwise. <code>word</code> may contain dots <code>&#39;.&#39;</code> where dots can be matched with any letter.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;]\n[[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]\n<strong>Output</strong>\n[null,null,null,null,false,true,true,true]\n\n<strong>Explanation</strong>\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(&quot;bad&quot;);\nwordDictionary.addWord(&quot;dad&quot;);\nwordDictionary.addWord(&quot;mad&quot;);\nwordDictionary.search(&quot;pad&quot;); // return False\nwordDictionary.search(&quot;bad&quot;); // return True\nwordDictionary.search(&quot;.ad&quot;); // return True\nwordDictionary.search(&quot;b..&quot;); // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 500</code></li>\n\t<li><code>word</code> in <code>addWord</code> consists lower-case English letters.</li>\n\t<li><code>word</code> in <code>search</code> consist of&nbsp; <code>&#39;.&#39;</code> or lower-case English letters.</li>\n\t<li>At most <code>50000</code>&nbsp;calls will be made to <code>addWord</code>&nbsp;and <code>search</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
                    ],
                    "solution": {
                        "title": "Add and Search Word",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Data Structure Trie\n\nThis article introduces the data structure [trie](https://en.wikipedia.org/wiki/Trie).\nIt could be pronounced in two different ways:\nas \"tree\" or \"try\".\nTrie  which is also called a digital tree or a prefix tree\nis a kind of search ordered tree data structure\nmostly used for the efficient dynamic add/search operations with the strings.\n\nTrie is widely used in real life:\nautocomplete search, spell checker, T9 predictive text,\n[IP routing (longest prefix matching)](https://www.researchgate.net/figure/An-example-routing-table-and-the-corresponding-binary-trie-built-from-it_fig3_4236637),\n[some GCC containers](https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/trie_based_containers.html).\n\nHere is how it looks like\n\n![fig](../Figures/211/trie.png)\n{:align=\"center\"}\n\n*Figure 1. Data structure trie.*\n{:align=\"center\"}\n\nThere are two main types of trie interview questions:\n\n- [Standard Trie](https://en.wikipedia.org/wiki/Trie). Design a structure to dynamically add and search strings, for example\n\n    - [Add and Search Word]().\n\n    - [Word Search II](https://leetcode.com/articles/word-search-ii).\n\n    - [Design Search Autocomplete System](https://leetcode.com/articles/design-search-autocomplete-system/).\n\n- [Bitwise Trie](https://en.wikipedia.org/wiki/Trie#Bitwise_tries). Design a structure to dynamically add *binary* strings and compute\nmaximum/minimum XOR/AND/etc,\nfor example\n\n    - [Maximum XOR of Two Number in an Array](https://leetcode.com/articles/maximum-xor-of-two-numbers-in-an-array/).\n\n#### Why Trie and not HashMap\n\nIt's quite easy to write the solution using such data structures as\nhashmap or balanced tree.\n\n<iframe src=\"https://leetcode.com/playground/HpHktUTv/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"HpHktUTv\"></iframe>\n\nThis solution passes all leetcode test cases, and\nformally has $$\\mathcal{O}(M \\cdot N)$$ time complexity for the search,\nwhere $$M$$ is a length of the word to find, and $$N$$ is the number of words.\nAlthough this solution is not efficient for the most important\npractical use cases:\n\n- Finding all keys with a common prefix.\n\n- Enumerating a dataset of strings in lexicographical order.\n\n- Scaling for the large datasets. Once the hash table increases in size,\nthere are a lot of hash collisions and the search time complexity\ncould degrade to $$\\mathcal{O}(N^2 \\cdot M)$$,\nwhere $$N$$ is the number of the inserted keys.\n\n    Trie could use less space compared to hashmap when storing\n    many keys with the same prefix.\n    In this case, using trie has only $$\\mathcal{O}(M \\cdot N)$$ time complexity,\n    where $$M$$ is the key length, and $$N$$ is the number of keys.\n\n<br />\n<br />\n\n\n---\n#### Approach 1: Trie\n\n**How to Implement Trie: addWord function**\n\n![fig](../Figures/211/add_word.png)\n{:align=\"center\"}\n\n*Figure 2. Trie implementation.*\n{:align=\"center\"}\n\nIn trie, each path from the root to the \"word\" node represents one of the input words,\nfor example, o -> a -> t -> h is \"oath\".\n\nTrie implementation is pretty straightforward,\nit's basically nested hashmaps.\nAt each step, one has to verify,\nif the child node to add is already present.\nIf yes, just go one step down.\nIf not, add it into the trie and then go one step down.\n\n!?!../Documents/211_LIS.json:1000,472!?!\n\n<iframe src=\"https://leetcode.com/playground/PHeGQxUb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"PHeGQxUb\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(M)$$, where $$M$$ is the key length.\nAt each step, we either examine or create a node in the trie. That takes only $$M$$ operations.\n\n* Space complexity: $$\\mathcal{O}(M)$$. In the worst-case newly inserted\nkey doesn't share a prefix with the keys already inserted in the trie.\nWe have to add $$M$$ new nodes, which takes $$\\mathcal{O}(M)$$ space.\n\n**Search in Trie**\n\nIn the absence of '.' characters, the search would be as simple as `addWord`.\nEach key is represented in the trie as a path from the root\nto the internal node or leaf.\nWe start from the root and go down in trie, checking character by character.\n\n![fig](../Figures/211/search2.png)\n{:align=\"center\"}\n\n*Figure 3. Search in trie.*\n{:align=\"center\"}\n\nThe presence of '.' characters forces us to explore all possible paths\nat each `.` level.\n\n![fig](../Figures/211/search_dot.png)\n{:align=\"center\"}\n\n*Figure 4. Search in trie.*\n{:align=\"center\"}\n\n<iframe src=\"https://leetcode.com/playground/chDCBoXR/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"chDCBoXR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(M)$$ for the \"well-defined\" words\nwithout dots, where $$M$$ is the key length, and $$N$$ is a number of keys,\nand $$\\mathcal{O}(N \\cdot 26 ^ M)$$ for the \"undefined\" words.\nThat corresponds to the worst-case situation of searching an undefined word $$\\underbrace{.........}_\\text{M times}$$ which is one character longer than all inserted keys.\n\n* Space complexity: $$\\mathcal{O}(1)$$ for the search of \"well-defined\" words without dots, and up to $$\\mathcal{O}(M)$$ for the \"undefined\" words, to keep the recursion stack.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/nEmd4GZn/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"nEmd4GZn\"></iframe>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "add-and-search-word",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.348,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "271",
                "title": "Serialize and Deserialize Binary Tree",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Facebook phone interview.",
                "paidOnly": false,
                "chapterId": 56,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "297",
                    "questionFrontendId": "297",
                    "sessionId": "968792",
                    "questionTitle": "Serialize and Deserialize Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/serialize-and-deserialize-binary-tree/submit/",
                    "interpretUrl": "/problems/serialize-and-deserialize-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        \\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/** Encodes a tree to a single string. */\\nchar* serialize(struct TreeNode* root) {\\n    \\n}\\n\\n/** Decodes your encoded data to tree. */\\nstruct TreeNode* deserialize(char* data) {\\n    \\n}\\n\\n// Your functions will be called as such:\\n// char* data = serialize(root);\\n// deserialize(data);\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    \\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    \\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# Encodes a tree to a single string.\\n#\\n# @param {TreeNode} root\\n# @return {string}\\ndef serialize(root)\\n    \\nend\\n\\n# Decodes your encoded data to tree.\\n#\\n# @param {string} data\\n# @return {TreeNode}\\ndef deserialize(data)\\n    \\nend\\n\\n\\n# Your functions will be called as such:\\n# deserialize(serialize(data))\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Codec {\\n    func serialize(_ root: TreeNode?) -> String {\\n        \\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// var ser = Codec()\\n// var deser = Codec()\\n// deser.deserialize(ser.serialize(root))\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\ntype Codec struct {\\n    \\n}\\n\\nfunc Constructor() Codec {\\n    \\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    \\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    \\n}\\n\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * ser := Constructor();\\n * deser := Constructor();\\n * data := ser.serialize(root);\\n * ans := deser.deserialize(data);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a list of strings to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes a single string to a list of strings.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = new Codec()\\n * var deser = new Codec()\\n * val s = ser.serialize(root)\\n * val ans = deser.deserialize(s)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Codec() {\\n\\t// Encodes a URL to a shortened URL.\\n    fun serialize(root: TreeNode?): String {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    fun deserialize(data: String): TreeNode? {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = Codec()\\n * var deser = Codec()\\n * var data = ser.serialize(longUrl)\\n * var ans = deser.deserialize(data)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nstruct Codec {\\n\\t\\n}\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Codec {\\n    fn new() -> Self {\\n        \\n    }\\n\\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\\n        \\n    }\\n\\t\\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * let obj = Codec::new();\\n * let data: String = obj.serialize(strs);\\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Codec {\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param TreeNode $root\\n     * @return String\\n     */\\n    function serialize($root) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $data\\n     * @return TreeNode\\n     */\\n    function deserialize($data) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * $ser = Codec();\\n * $deser = Codec();\\n * $data = $ser->serialize($root);\\n * $ans = $deser->deserialize($data);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\n/*\\n * Encodes a tree to a single string.\\n */\\nfunction serialize(root: TreeNode | null): string {\\n\\n};\\n\\n/*\\n * Decodes your encoded data to tree.\\n */\\nfunction deserialize(data: string): TreeNode | null {\\n\\n};\\n\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}]",
                    "sampleTestCase": "[1,2,3,null,null,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"Codec\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Serialize and Deserialize Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Depth First Search (DFS)\n\n\n**Intuition**\n\n<center><img src=\"../Figures/297_BST.png\" width=\"550px\" /></center>\n\nThe **serialization** of a `Binary Search Tree` is essentially to encode\nits values and more importantly its structure. \nOne can traverse the tree to accomplish the above task.\nAnd it is well know that we have two general strategies to do so:\n\n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \nIn this task, however, the `DFS` strategy is more adapted for our needs,\nsince the linkage among the adjacent nodes is naturally encoded in the order,\nwhich is rather helpful for the later task of **deserialization**. \n\nTherefore, in this solution, we demonstrate an example with the `preorder` DFS strategy.\nOne can check out more tutorial about `Binary Search Tree` on \nthe [LeetCode Explore](https://leetcode.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/).\n\n**Algorithm**\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/gKbx4EPz/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"gKbx4EPz\"></iframe>\n\n\n\nThe preorder DFS traverse follows *recursively* the order of  \n`root -> left subtree -> right subtree`.\n\nAs an example, let's serialize the following tree.\nNote that serialization contains information about the node values\nas well as the information about the tree structure.\n\n\n<!--![LIS](../Figures/297/297_tr.gif)-->\n!?!../Documents/297_LIS.json:1000,622!?!\n\n\nWe start from the root, node `1`, the serialization string is ```1,```.\nThen we jump to its left subtree with the root node `2`, and the serialization string becomes ```1,2,```.\nNow starting from node `2`, \nwe visit its left node `3` (```1,2,3,None,None,```) \nand right node `4` (```1,2,3,None,None,4,None,None```) sequentially.\nNote that ```None,None,``` appears for each leaf to mark the absence of left and right child node, \nthis is how we save the tree structure during the serialization.\nAnd finally, we get back to the root node `1` and visit its right subtree\nwhich happens to be a leaf node `5`. Finally, the serialization string is done\nas ```1,2,3,None,None,4,None,None,5,None,None,```.\n\n\n<iframe src=\"https://leetcode.com/playground/KzKSosy9/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"KzKSosy9\"></iframe>\n\nNow let's deserialize the serialization string constructed above ```1,2,3,None,None,4,None,None,5,None,None,```.\nIt goes along the string, initiate the node value and \nthen calls itself to construct its left and right child nodes. \n\n<iframe src=\"https://leetcode.com/playground/byCTAyWj/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"byCTAyWj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : in both serialization and deserialization functions,\n we visit each node exactly once, thus the time complexity is $$O(N)$$,\n where $$N$$ is the number of nodes, *i.e.* the size of tree. \n\n* Space complexity : in both serialization and deserialization functions,\n we keep the entire tree, either at the beginning or at the end,\n therefore, the space complexity is $$O(N)$$. \n \nThe solutions with BFS or other DFS strategies normally will have the same\ntime and space complexity.\n \n**Further Space Optimization**\n\nIn the above solution, we store the node value and \nthe references to ```None``` child nodes, \nwhich means $$N \\cdot V + 2N$$ complexity, \nwhere $$V$$ is the size of value. \nThat is called *natural serialization*, and has was implemented above.\n\nThe $$N \\cdot V$$ component here is the encoding of values, can't be optimized further,\nbut there is a way to reduce $$2N$$ part \nwhich is the encoding of the tree structure.\n\nThe number of unique binary tree structures that can be \nconstructed using `n` nodes is $$C(n)$$, where $$C(n)$$ is the `nth` Catalan\nnumber. Please refer to [this article](https://leetcode.com/articles/unique-binary-search-trees/) for more information.\n\nThere are $$C(n)$$ possible structural configurations of \na binary tree with n nodes, so the largest index value \nthat we might need to store is $$C(n) - 1$$.\nThat means storing the index value could require up to \n1 bit for $$n \\leq 2$$, or $$\\lceil log_2(C(n) - 1) \\rceil$$ bits for $$n > 2$$.\n\nIn this way one could reduce the encoding of the tree structure by $$\\log N$$.\nMore precisely, the [Catalan numbers](https://en.wikipedia.org/wiki/Catalan_number) grow as\n$$C(n) \\sim \\frac{4^n}{n^{3/2}\\sqrt{\\pi}}$$ and hence the theoretical minimum of storage\n for the tree structure that could be achieved\nis $$log(C(n)) \\sim 2n - \\frac{3}{2}\\log(n) - \\frac{1}{2}\\log(\\pi)$$",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "serialize-and-deserialize-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.781,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Read N Characters Given Read4 and its follow up (part II) are quite often asked at Facebook according to our user survey. This is a pure coding problem, which corresponds well to the type of questions Facebook prefers. It is simple to think of an idea, but translating it to code and taking care of all edge cases is no trivial task."
    },
    {
        "id": "57",
        "title": "Others",
        "slug": "others-3",
        "items": [
            {
                "id": "3039",
                "title": "Expression Add Operators",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 57,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "282",
                    "questionFrontendId": "282",
                    "sessionId": "968792",
                    "questionTitle": "Expression Add Operators",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/expression-add-operators/submit/",
                    "interpretUrl": "/problems/expression-add-operators/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> addOperators(string num, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> addOperators(String num, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def addOperators(self, num, target):\\n        \\\"\\\"\\\"\\n        :type num: str\\n        :type target: int\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def addOperators(self, num: str, target: int) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** addOperators(char * num, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> AddOperators(string num, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} num\\n * @param {number} target\\n * @return {string[]}\\n */\\nvar addOperators = function(num, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} num\\n# @param {Integer} target\\n# @return {String[]}\\ndef add_operators(num, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func addOperators(_ num: String, _ target: Int) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func addOperators(num string, target int) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def addOperators(num: String, target: Int): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun addOperators(num: String, target: Int): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn add_operators(num: String, target: i32) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $num\\n     * @param Integer $target\\n     * @return String[]\\n     */\\n    function addOperators($num, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function addOperators(num: string, target: number): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (add-operators num target)\\n  (-> string? exact-integer? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec add_operators(Num :: unicode:unicode_binary(), Target :: integer()) -> [unicode:unicode_binary()].\\nadd_operators(Num, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec add_operators(num :: String.t, target :: integer) :: [String.t]\\n  def add_operators(num, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"123\"\n6",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"name\":\"addOperators\",\r\n    \"params\":[\r\n        {\r\n            \"name\":\"num\",\r\n            \"type\":\"string\"\r\n        },\r\n        {\r\n            \"name\":\"target\",\r\n            \"type\":\"integer\"\r\n        }\r\n    ],\r\n    \"return\":{\r\n        \"type\":\"list<string>\"\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>num</code> that contains only digits and an integer <code>target</code>, return <em>all possibilities to add the binary operators</em> <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <em>or</em> <code>&#39;*&#39;</code> <em>between the digits of</em> <code>num</code> <em>so that the resultant expression evaluates to the</em> <code>target</code> <em>value</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = \"123\", target = 6\n<strong>Output:</strong> [\"1*2*3\",\"1+2+3\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = \"232\", target = 8\n<strong>Output:</strong> [\"2*3+2\",\"2+3*2\"]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> num = \"105\", target = 5\n<strong>Output:</strong> [\"1*0+5\",\"10-5\"]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> num = \"00\", target = 0\n<strong>Output:</strong> [\"0*0\",\"0+0\",\"0-0\"]\n</pre><p><strong>Example 5:</strong></p>\n<pre><strong>Input:</strong> num = \"3456237490\", target = 9191\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10</code></li>\n\t<li><code>num</code> consists of only digits.</li>\n\t<li><code>-2<sup>31</sup> &lt;= target &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Note that a number can contain multiple digits.",
                        "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
                        "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
                        "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
                        "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
                    ],
                    "solution": {
                        "title": "Expression Add Operators",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Backtracking\n\n**Intuition**\n\nLet us first look at what the question asks us to do before getting at the approach to solve it. So, we are given a string of numbers and 3 different operators:\n\n* `+` Addition,\n* `-` Subtraction or\n* `*` Multiplication\n\nWe have to find all possible combinations of binary operators between the digits so that the overall value of the resulting expression becomes equal to a given target value. Let us look at a few possibilities of what it means exactly to *place the operators between digits* so that the question becomes clearer.\n\nLet's say we are given the following set of digits `\"123456789\"` and the target value given to us is `45`. Let us see some of the possible resulting expressions that we can get by placing the operators in different locations.\n\n<pre>\n1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n1 + 2 - 3 + 4 - 5 + 6 - 7 + 8 - 9 = -3\n1 + 2 * 3 - 4 + 5 + 6 - 7 * 8 - 9 = -51\n1 + 2 + 3 + 4 + 5 - 6 * 7 + 8 * 9 = 45\n</pre>\n\nThese are just 4 of the many resulting expressions that are possible by using the given string of digits and the three operators.\n\nBy looking at the above examples we can't really figure out any specific pattern among the resulting expressions that tells us which of them will give us the resulting target.\n\nSince the question explicitly states that we are given binary operators, this means that each of the operator would require two operands.\n\n> We can consider each of our digits as an operand.\n\nThis means that between every pair of digits we can have any of the three operators i.e. $$+$$, $$-$$ or $$\\times$$.\n\nIf you've looked at the question's statement and the examples that are given in the question, you would realize that there is an example where the digits are `\"105\"` and the target value is `5`. For this particular example, there are two expressions given to us and they are `1*0+5` and `10-5`.\n\nThe second expression is something that you need to look out for before getting to solve this question because this complicates things a bit.\n\nIt would have been an easier question to solve if we just had to consider those expressions that simply had *digits as operands*.\n\nBut, in this question, we can have all sorts of digits getting together and forming a bigger number that becomes a part of the expression. Let us look at some example expressions for the digits `\"123456\"` and target `30`.\n\n<pre>\n1 * 23 - 4 + 5 + 6 = 30\n12 - 3 * 4 + 5 * 6 = 30\n1 - 23 - 4 + 56 = 30\n</pre>\n\nSo this means that although the number of operators are defined for us i.e. 3 different binary operators, but the number of operands are **not really well defined for us**.\n\nThis is a big portion of the original problem that we need to address in our solution.\n\nSince we are asked to find out all of the valid expressions whose value equals the given target and we don't really know what specific operator between two operands would eventually give us a valid expression,\n\n> We try out all of the options.\n\nThis means once we have defined what the operands are for our given expression, we would have three possible choices of operators between each consecutive pair of operands.\n\nFrom an implementation perspective, what would an operand imply with respect to our original string?\n\n> An operand would be an integer formed from a substring of our original string.\n\nLet's look at two different array partitions for the given string `\"123456789\"`\n\n<center>\n<img src=\"../Figures/282/282_Expression_Add_Operators_Diag_1.png\" height=\"300\"></center>\n\nSince we are required to return all of the valid expressions that evaluate to a given target value, we have to try all possible partitions of the given array thereby considering all of the possible operands that can be formed from the digits.\n\nThere is a very simple way of incorporating this into our algorithm. Right now, at every point in the algorithm, we have three different choices corresponding to the three different operators.\n\n>The way we incorporate these partitions is by considering a 4th operator as well which simply moves one step forward and extends the current operand by one digit. Essentially, going from 12 --> 123 is a NO OP operand in our implementation. (12 * 10) + 3.\n\nNow we have 4 different recursion paths in our algorithm and we have to try out all of them to see which ones lead to a potential solution.\n\nThis `try out everything` hints at a backtracking solution and that is exactly what we are going to look at here.\n\n**Algorithm**\n\nLet's quickly look at the steps involved in our backtracking algorithm before looking at the pseudo-code.\n\n1. As discussed above, we have multiple choices of what operators to use and what the operands can be and hence, we have to look at all the possibilities to find ***all*** valid expressions.\n2. Our recursive call will have an `index` which represents the current digit we're looking at in the original `nums` string and also the expression string built till now.\n3. At every step, we have exactly 4 different recursive calls. The `NO OP` call simply extends the `current_operand` by the current digit and moves ahead. Rest of the recursive calls correspond to `+`, `-`, and `*`.\n4. We keep on building our expression like this and eventually, the entire `nums` string would be processed. At that time we check if the expression we built till now is a valid expression or not and we record it if it is a valid one.\n\n<pre>\n1. procedure recurse(digits, index, expression):\n2.     if we have reached the end of the string:\n3.         if the expression evaluates to the target:\n4.             Valid Expression found!\n5.     else:\n6.         try out operator 'NO OP' and recurse\n7.         try out operator * and recurse\n8.         try out operator + and recurse\n9.         try out operator - and recurse\n</pre>\n\nThe algorithm now looks pretty straightforward. However, the implementation is something that needs more thought and there are some things that we need to address before actually looking at the implementation.\n\nWhen we are done building an expression out of all of the digits in our original string i.e. the base case, then we check if the expression is a valid expression or not. Right ?\n\n> How do we actually check if an expression is a valid one or not if all we have is a string representing the expression and not the integer value for the same?\n\nWell, one way to go about this is to write a custom `eval` function that takes in a string and returns the value of that expression. If you do that (Python people can use the inbuilt function `eval` for this), you will get a TLE i.e. time limit exceeded error.\n\n<br/>\n\n**Can't we keep track of the expression's value on the fly?**\n\nWell yes. That's the idea we will go with. Instead of just keeping track of what the expression string is, we will also keep track of it's value along the way so that when the recursion hits the base case, we can check in $$O(1)$$ time if the expression's value equals the target value or not.\n\nThe implementation would have been straightforward had it just been `+` and `-` operators involved. This is because both these operators have an equal precedence. That means that we can continue to evaluate the expression on the fly without any problems. Have a look at the following example.\n\n<center>\n<img src=\"../Figures/282/282_Expression_Add_Operators_Diag_2.png\" width=\"550\"></center>\n\nSo far so good. Now let us add the `*` operator as well and see how building the expression on the fly like this breaks.\n\n<center>\n<img src=\"../Figures/282/282_Expression_Add_Operators_Diag_3.png\" width=\"550\"></center>\n\nWhat we mean by building the expression on the fly is that we keep track of the expression's value till now and we simply consider that value as one of the two operands for our operators. As we can see from the two examples above, this would have worked had it just been `+` and `-` operators.\n\nBut, this approach is bound to fail because the `*` operator takes precedence over `+` and `-`. The `*` operator would require the ***actual*** previous operand in our expression rather than the current value of the expression. i.e. In the above example, the `*` operator needed `2` rather than `12` to get us the correct value of `18`.\n\n<br/>\n\n**How to handle this?**\n\nThe idea on how to handle this problem springs from the discussion above. We simply need to keep track of the last operand in our expression and how it modified the expression's value overall so that when we consider the `*` operator, we can **reverse** the effects of the previous operand and consider it for multiplication. Let's take a look at the example that was breaking before.\n\n<center>\n<img src=\"../Figures/282/282_Expression_Add_Operators_Diag_4.png\" width=\"550\"></center>\n\nNow we can look at the actual implementation of this algorithm.\n\n<iframe src=\"https://leetcode.com/playground/CRogWTi4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"CRogWTi4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:\n    * At every step along the way, we consider exactly 4 different choices or 4 different recursive paths. The base case is when the value of `index` reaches $$N$$ i.e. the length of the `nums` array. Hence, our complexity would be $$O(4^N)$$.\n    * For the base case we use a `StringBuilder::toString` operation in Java and `.join()` operation in Python and that takes $$O(N)$$ time. Here $$N$$ represents the length of our expression. In the worst case, each digit would be an operand and we would have $$N$$ digits and $$N - 1$$ operators. So $$O(N)$$. This is for one expression. In the worst case, we can have $$O(4^N)$$ valid expressions.\n    * Overall time complexity = $$O(N \\times 4^N)$$.\n\n* Space Complexity:\n    * For both Python and Java implementations we have a list data structure that we update on the fly and only for valid expressions do we create a new string and add to our `answers` array. So, the space occupied by the intermediate list would be $$O(N)$$ since in the worst case the expression would be built out of all the digits as operands.\n    * Additionally, the space used up by the recursion stack would also be $$O(N)$$ since the size of recursion stack is determined by the value of `index` and it goes from $$0$$ all the way to $$N$$.\n    * We don't consider the space occupied by the `answers` array since that is a part of the question's requirement and we can't reduce that in any way\n\n**EDIT:**\nThe previous implementation of the algorithm, although correct, lead me to write an incorrect complexity analysis section. I've re-written the algorithm from scratch and corrected the complexity analysis as well. Sorry for the inconvenience to all the readers. The core idea of the algorithm is still the same. That hasn't changed.\n\nSpecial thanks to [@ufarooqi](https://leetcode.com/ufarooqi/), [@vortexwolf](https://leetcode.com/vortexwolf) for providing correct complexity analysis in the discussion forum leading to corrections in the article. Pardon me if I've missed out on any other names :)\n\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "expression-add-operators",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.203,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3040",
                "title": "Find All Anagrams in a String",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 57,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "438",
                    "questionFrontendId": "438",
                    "sessionId": "968792",
                    "questionTitle": "Find All Anagrams in a String",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-all-anagrams-in-a-string/submit/",
                    "interpretUrl": "/problems/find-all-anagrams-in-a-string/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> findAnagrams(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<Integer> findAnagrams(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findAnagrams(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findAnagrams(self, s: str, p: str) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* findAnagrams(char * s, char * p, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<int> FindAnagrams(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {number[]}\\n */\\nvar findAnagrams = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Integer[]}\\ndef find_anagrams(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findAnagrams(_ s: String, _ p: String) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findAnagrams(s string, p string) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findAnagrams(s: String, p: String): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findAnagrams(s: String, p: String): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_anagrams(s: String, p: String) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Integer[]\\n     */\\n    function findAnagrams($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findAnagrams(s: string, p: string): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-anagrams s p)\\n  (-> string? string? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_anagrams(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> [integer()].\\nfind_anagrams(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_anagrams(s :: String.t, p :: String.t) :: [integer]\\n  def find_anagrams(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"cbaebabacd\"\n\"abc\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findAnagrams\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n        \"name\": \"p\",\r\n        \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code> and <code>p</code>, return <em>an array of all the start indices of </em><code>p</code><em>&#39;s anagrams in </em><code>s</code>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;\n<strong>Output:</strong> [0,6]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.\nThe substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;, p = &quot;ab&quot;\n<strong>Output:</strong> [0,1,2]\n<strong>Explanation:</strong>\nThe substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.\nThe substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> and <code>p</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find All Anagrams in a String",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Solution Template\n\n![traversal](../Figures/438/snake3.png)\n\nThis is a problem of multiple pattern search in a string.\nAll such problems usually could be solved by sliding window approach in a linear\ntime. The challenge here is how to implement constant-time slice \nto fit into this linear time. \n\nIf the patterns are not known in advance, i.e. it's \"find duplicates\" problem,\none could use one of two ways to implement constant-time slice: Bitmasks or Rabin-Karp.\nPlease check article [Repeated DNA Sequences](https://leetcode.com/articles/repeated-dna-sequences/)\nfor the detailed comparison of these two algorithms. \n\nHere the situation is more simple: patterns are known in advance, and the set\nof characters in the patterns is very limited as well: 26 lowercase English letters. \nHence one could allocate array or hashmap with 26 elements and use it as a \nletter counter in the sliding window. \n\n![traversal](../Figures/438/anagrams2.png)\n<br />\n<br />\n\n\n---\n#### Approach 1: Sliding Window with HashMap\n\nLet's start from the simplest approach: sliding window + two counter hashmaps \n`letter -> its count`. \nThe first hashmap is a reference counter `pCount` for string `p`, \nand the second one is a counter `sCount` for string in the sliding window.\n\nThe idea is to move sliding window along the string `s`, \nrecompute the second hashmap `sCount` in a \nconstant time and compare it with the first hashmap `pCount`. \nIf `sCount == pCount`, then the string in the sliding window is a permutation\nof string `p`, and one could add its start position in the output list. \n\n**Algorithm**\n\n- Build reference counter `pCount` for string `p`. \n\n- Move sliding window along the string `s`:\n\n    - Recompute sliding window counter `sCount` at each step by adding \n    one letter on the right and removing one letter on the left. \n    \n    - If `sCount == pCount`, update the output list.\n    \n- Return output list.   \n\n**Implementation**\n\n!?!../Documents/438_LIS.json:1000,535!?!\n\n<iframe src=\"https://leetcode.com/playground/6CxR9J56/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6CxR9J56\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N_s + N_p)$$ since it's one pass along both strings.\n\n* Space complexity: $$\\mathcal{O}(1)$$, because `pCount` and `sCount`\ncontain not more than 26 elements.\n<br /> \n<br />\n\n\n---\n#### Approach 2: Sliding Window with Array\n\n**Algorithm**\n\nHashmap is quite complex structure, \n[with known performance issues in Java](https://github.com/vavr-io/vavr/issues/571).\nLet's implement approach 1 using 26-elements array instead of hashmap: \n\n- Element number 0 contains count of letter `a`.\n\n- Element number 1 contains count of letter `b`.\n\n- ...\n\n- Element number 26 contains count of letter `z`.\n\n**Algorithm**\n\n- Build reference array `pCount` for string `p`. \n\n- Move sliding window along the string `s`:\n\n    - Recompute sliding window array `sCount` at each step by adding \n    one letter on the right and removing one letter on the left. \n    \n    - If `sCount == pCount`, update the output list.\n    \n- Return output list. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/AAD2cGnD/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"AAD2cGnD\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N_s + N_p)$$ since it's one pass along both strings.\n\n* Space complexity: $$\\mathcal{O}(1)$$, because `pCount` and `sCount`\ncontain 26 elements each.\n<br /> \n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-all-anagrams-in-a-string",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.34,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3041",
                "title": "Permutation in String",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 57,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "567",
                    "questionFrontendId": "567",
                    "sessionId": "968792",
                    "questionTitle": "Permutation in String",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/permutation-in-string/submit/",
                    "interpretUrl": "/problems/permutation-in-string/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool checkInclusion(string s1, string s2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean checkInclusion(String s1, String s2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def checkInclusion(self, s1, s2):\\n        \\\"\\\"\\\"\\n        :type s1: str\\n        :type s2: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def checkInclusion(self, s1: str, s2: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool checkInclusion(char * s1, char * s2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool CheckInclusion(string s1, string s2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s1\\n * @param {string} s2\\n * @return {boolean}\\n */\\nvar checkInclusion = function(s1, s2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s1\\n# @param {String} s2\\n# @return {Boolean}\\ndef check_inclusion(s1, s2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func checkInclusion(_ s1: String, _ s2: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func checkInclusion(s1 string, s2 string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def checkInclusion(s1: String, s2: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun checkInclusion(s1: String, s2: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn check_inclusion(s1: String, s2: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s1\\n     * @param String $s2\\n     * @return Boolean\\n     */\\n    function checkInclusion($s1, $s2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function checkInclusion(s1: string, s2: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (check-inclusion s1 s2)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec check_inclusion(S1 :: unicode:unicode_binary(), S2 :: unicode:unicode_binary()) -> boolean().\\ncheck_inclusion(S1, S2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec check_inclusion(s1 :: String.t, s2 :: String.t) :: boolean\\n  def check_inclusion(s1, s2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"ab\"\n\"eidbaooo\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"checkInclusion\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s1\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"s2\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>true</code><em> if </em><code>s2</code><em> contains a permutation of </em><code>s1</code><em>, or </em><code>false</code><em> otherwise</em>.</p>\n\n<p>In other words, return <code>true</code> if one of <code>s1</code>&#39;s permutations is the substring of <code>s2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidbaooo&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> s2 contains one permutation of s1 (&quot;ba&quot;).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s1 = &quot;ab&quot;, s2 = &quot;eidboaoo&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Obviously, brute force will result in TLE. Think of something else.",
                        "How will you check whether one string is a permutation of another string?",
                        "One way is to sort the string and then compare. But, Is there a better way?",
                        "If one string is a permutation of another string then they must one common metric. What is that?",
                        "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
                        "What about hash table?  An array of size 26?"
                    ],
                    "solution": {
                        "title": "Short Permutation in a Long String",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Brute Force [Time Limit Exceeded]\n\n**Algorithm**\n\nThe simplest method is to generate all the permutations of the short string  and to check if the generated permutation is a substring of the longer string.\n\nIn order to generate all the possible pairings, we make use of a function `permute(string_1, string_2, current_index)`. This function creates all the possible permutations of the short string $$s1$$.\n\nTo do so, permute takes the index of the current element $$current_index$$ as one of the arguments. Then, it swaps the current element with every other element in the array, lying towards its right, so as to generate a new ordering of the array elements. After the swapping has been done, it makes another call to permute but this time with the index of the next element in the array. While returning back, we reverse the swapping done in the current function call.\n\nThus, when we reach the end of the array, a new ordering of the array's elements is generated. The following animation depicts the process of generating the permutations.\n\n!?!../Documents/561_Array.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/p3HAqkFZ/shared\" frameBorder=\"0\" name=\"p3HAqkFZ\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n!)$$. We match all the permutations of the short string $$s1$$, of length $$s1$$, with $$s2$$. Here, $$n$$ refers to the length of $$s1$$.\n\n* Space complexity : $$O(n^2)$$. The depth of the recursion tree is $$n$$($$n$$ refers to the length of the short string $$s1$$). Every node of the recursion tree contains a string of max. length $$n$$.\n\n---\n\n#### Approach #2 Using sorting [Time Limit Exceeded]:\n\n**Algorithm**\n\nThe idea behind this approach is that one string will be a permutation of another string only if both of them contain the same characters the same number of times. One string $$x$$ is a permutation of other string $$y$$ only if $$sorted(x)=sorted(y)$$. \n\nIn order to check this, we can sort the two strings and compare them.  We sort the short string $$s1$$ and all the substrings of $$s2$$, sort them and compare them with the sorted $$s1$$ string. If the two match completely, $$s1$$'s permutation is a substring of $$s2$$, otherwise not.\n\n<iframe src=\"https://leetcode.com/playground/zWvWj8oK/shared\" frameBorder=\"0\" name=\"zWvWj8oK\" width=\"100%\" height=\"326\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(l_1log(l_1)+(l_2-l_1)l_1log(l_1)\\big)$$. where $$l_1$$ is the length of string $$l_1$$ and $$l_2$$ is the length of string $$l_2$$.\n\n* Space complexity : $$O(l_1)$$. $$t$$ array is used .\n\n---\n\n#### Approach #3 Using Hashmap [Time Limit Exceeded]\n\n**Algorithm**\n\nAs discussed above, one string will be a permutation of another string only if both of them contain the same charaters with the same frequency. We can consider every possible substring in the long string $$s2$$ of the same length as that of $$s1$$ and check the frequency of occurence of the characters appearing in the two. If the frequencies of every letter match exactly, then only $$s1$$'s permutation can be a substring of $$s2$$. \n\nIn order to implement this approach, instead of sorting and then comparing the elements for equality, we make use of a hashmap $$s1map$$ which stores the frequency of occurence of all the characters in the short string $$s1$$. We consider every possible substring of $$s2$$ of the same length as that of $$s1$$, find its corresponding hashmap as well, namely $$s2map$$. Thus, the substrings considered can be viewed as a window of length as that of $$s1$$ iterating over $$s2$$. If the two hashmaps obtained are identical for any such window, we can conclude that $$s1$$'s permutation is a substring of $$s2$$, otherwise not.\n\n<iframe src=\"https://leetcode.com/playground/SvwMjwJX/shared\" frameBorder=\"0\" name=\"SvwMjwJX\" width=\"100%\" height=\"513\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(l_1+26*l_1*(l_2-l_1))$$. hashmap contains atmost 26 keys. where $$l_1$$ is the length of string $$l_1$$ and $$l_2$$ is the length of string $$l_2$$.\n\n* Space complexity : $$O(1)$$. hashmap contains atmost 26 key-value pairs.\n\n---\n#### Approach #4 Using Array [Accepted]\n\n**Algorithm**\n\nInstead of making use of a special HashMap datastructure just to store the frequency of occurence of characters, we can use a simpler array data structure to store the frequencies. Given strings contains only lowercase alphabets ('a' to 'z'). So we need to take an array of size 26.The rest of the process remains the same as the last approach.\n\n<iframe src=\"https://leetcode.com/playground/48H3F2LJ/shared\" frameBorder=\"0\" name=\"48H3F2LJ\" width=\"100%\" height=\"496\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(l_1+26*l_1*(l_2-l_1))$$,  where $$l_1$$ is the length of string $$l_1$$ and $$l_2$$ is the length of string $$l_2$$.\n\n* Space complexity : $$O(1)$$. $$s1map$$ and $$s2map$$ of size 26 is used.\n\n---\n#### Approach #5 Sliding Window  [Accepted]:\n\n**Algorithm**\n\nInstead of generating the hashmap afresh for every window considered in $$s2$$, we can create the hashmap just once for the first window in $$s2$$. Then, later on when we slide the window, we know that we remove one preceding character and add a new succeeding character to the new window considered. Thus, we can update the hashmap by just updating the indices associated with those two characters only. Again, for every updated hashmap, we compare all the elements of the hashmap for equality to get the required result.\n\n<iframe src=\"https://leetcode.com/playground/o4pqWwhn/shared\" frameBorder=\"0\" name=\"o4pqWwhn\" width=\"100%\" height=\"496\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(l_1+26*(l_2-l_1))$$,  where $$l_1$$ is the length of string $$l_1$$ and $$l_2$$ is the length of string $$l_2$$.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n\n---\n#### Approach #6 Optimized Sliding Window [Accepted]:\n\n**Algorithm**\n\nThe last approach can be optimized, if instead of comparing all the elements of the hashmaps for every updated $$s2map$$ corresponding to every window of $$s2$$ considered, we keep a track of the number of elements which were already matching in the earlier hashmap and update just the count of matching elements when we shift the window towards the right.\n\nTo do so, we maintain a $$count$$ variable, which stores the number of characters(out of the 26 alphabets), which have the same frequency of occurence in $$s1$$ and the current window in $$s2$$. When we slide the window, if the deduction of the last element and the addition of the new element leads to a new frequency match of any of the characters, we increment the $$count$$ by 1. If not, we keep the $$count$$ intact. But, if a character whose frequency was the same earlier(prior to addition and removal) is added, it now leads to a frequency mismatch which is taken into account by decrementing the same $$count$$ variable. If, after the shifting of the window, the $$count$$ evaluates to 26, it means all the characters match in frequency totally. So, we return a True in that case immediately.\n\n<iframe src=\"https://leetcode.com/playground/T5J3SxqR/shared\" frameBorder=\"0\" name=\"T5J3SxqR\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(l_1+(l_2-l_1))$$. where $$l_1$$ is the length of string $$l_1$$ and $$l_2$$ is the length of string $$l_2$$.\n\n* Space complexity : $$O(1)$$. Constant space is used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "short-permutation-in-a-long-string",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.407,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3042",
                "title": "Verifying an Alien Dictionary",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 57,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "990",
                    "questionFrontendId": "953",
                    "sessionId": "968792",
                    "questionTitle": "Verifying an Alien Dictionary",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/verifying-an-alien-dictionary/submit/",
                    "interpretUrl": "/problems/verifying-an-alien-dictionary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isAlienSorted(vector<string>& words, string order) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isAlienSorted(String[] words, String order) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isAlienSorted(self, words, order):\\n        \\\"\\\"\\\"\\n        :type words: List[str]\\n        :type order: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isAlienSorted(self, words: List[str], order: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isAlienSorted(char ** words, int wordsSize, char * order){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsAlienSorted(string[] words, string order) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} words\\n * @param {string} order\\n * @return {boolean}\\n */\\nvar isAlienSorted = function(words, order) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\\n# @param {String} order\\n# @return {Boolean}\\ndef is_alien_sorted(words, order)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isAlienSorted(_ words: [String], _ order: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isAlienSorted(words []string, order string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isAlienSorted(words: Array[String], order: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isAlienSorted(words: Array<String>, order: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_alien_sorted(words: Vec<String>, order: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @param String $order\\n     * @return Boolean\\n     */\\n    function isAlienSorted($words, $order) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isAlienSorted(words: string[], order: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-alien-sorted words order)\\n  (-> (listof string?) string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_alien_sorted(Words :: [unicode:unicode_binary()], Order :: unicode:unicode_binary()) -> boolean().\\nis_alien_sorted(Words, Order) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_alien_sorted(words :: [String.t], order :: String.t) :: boolean\\n  def is_alien_sorted(words, order) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"hello\",\"leetcode\"]\n\"hlabcdefgijkmnopqrstuvwxyz\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isAlienSorted\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    },\r\n    {\r\n      \"name\": \"order\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}\r\n",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p>\n\n<p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;\n<strong>Output:</strong> true\n<strong>Explanation: </strong>As &#39;h&#39; comes before &#39;l&#39; in this language, then the sequence is sorted.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>As &#39;d&#39; comes after &#39;l&#39; in this language, then words[0] &gt; words[1], hence the sequence is unsorted.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;\n<strong>Output:</strong> false\n<strong>Explanation: </strong>The first three characters &quot;app&quot; match, and the second string is shorter (in size.) According to lexicographical rules &quot;apple&quot; &gt; &quot;app&quot;, because &#39;l&#39; &gt; &#39;&empty;&#39;, where &#39;&empty;&#39; is defined as the blank character which is less than any other character (<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\">More info</a>).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>order.length == 26</code></li>\n\t<li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Verifying an Alien Dictionary",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n#### Overview\r\n\r\nTo check if the given `words` are sorted, for each word we need to check if every word on its right is lexicographically larger.  Likewise, for each word we could check if every word on its left is lexicographically smaller. That said, we don't need to compare every word to all of the words to its right. Instead, we can just compare each pair of adjacent words. If all pairs of adjacent words are sorted, then we can safely conclude that `words` is sorted.  Furthermore, if any pair of adjacent words is not sorted, then we know that `words` is not sorted.\r\n\r\n\r\n\r\n\r\n\r\n![Compare adjacent words.](../Figures/953/953.png)\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Compare adjacent words.*\r\n{:align=\"center\"}\r\n\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Compare adjacent words\r\n\r\n**Intuition**\r\n\r\nFollowing the above overview, we want to compare each pair of adjacent words to see if they are sorted lexicographically. This can be achieved by a naive for-loop iterating over the input array. We can store the `letter-order` relation of each letter with its ranking in `order`, so that we can easily access the order of letters when we compare them.\r\n\r\nThe remaining piece of the puzzle is how to compare two words lexicographically. This is not difficult, but there are a few edge cases that we must consider. To compare two adjacent words `words[i]` and `words[i+1]`, we want to find the first letter that is different: if `words[i]` has the lexicographically smaller letter, then we can exit from the iteration because we know `words[i]` and `words[i+1]` are in the right order; however, if `words[i]` has the lexicographically larger letter, then we immediately return `false`, because we found one pair of words that are in the wrong order.\r\n\r\nWe also need to consider the boundaries. While we loop from the beginning to the end of one word, we need to check if the other word has ended. Take the words `apple` and `app` as an example, we cannot iterate over all of the letters in `apple` because the word `app` is shorter. In this case, we reach the end of one word before finding the first different letter.  When this happens, we must examine the length of each word: if the words are the same length or the former word is shorter, then `words` is sorted.  However, if the latter word is shorter, then `words` is not sorted.\r\n\r\n\r\n\r\n\r\n**Algorithm**\r\n\r\n- Initialize a hashmap/array to record the relations between each letter and its ranking in `order`.\r\n- Iterate over `words` and compare each pair of adjacent words.\r\n  - Iterate over each letter to find the first different letter between `words[i]` and `words[i + 1]`.\r\n    - If `words[i + 1]` ends before `words[i]` and no different letters are found, then we need to return false because `words[i + 1]` should come before `words[i]` (for example, `apple` and `app`).\r\n    - If we find the first different letter and the two words are in the correct order, then we can exit from the current iteration and proceed to the next pair of words.\r\n    - If we find the first different letter and the two words are in the wrong order, then we can safely return false.\r\n- If we reach this point, it means that we have examined all pairs of adjacent words and that they are all sorted. Therefore we can return true.\r\n\r\n\r\n\r\n<iframe src=\"https://leetcode.com/playground/JxNcaknG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JxNcaknG\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\nLet $$N$$ be the length of `order`, and $$M$$ be the total number of characters in `words`.\r\n\r\n* Time complexity : $$O(M)$$.\r\n\r\n  Storing the `letter-order` relation of each letter takes $$O(N)$$ time. For the nested for-loops, we examine each pair of words in the outer-loop and for the inner loop, we check each letter in the current word. Therefore, we will iterate over all of letters in `words`.\r\n\r\n  Taking both into consideration, the time complexity is $$O(M + N)$$. However, we know that $$N$$ is fixed as $$26$$. Therefore, the time complexity is $$O(M)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\n  The only extra data structure we use is the hashmap/array that serves to store the `letter-order` relations for each word in `order`. Because the length of `order` is fixed as $$26$$, this approach achieves constant space complexity.\r\n\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "verifying-an-alien-dictionary",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.931,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "3043",
                "title": "Interval List Intersections",
                "type": 1,
                "info": null,
                "paidOnly": false,
                "chapterId": 57,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "1028",
                    "questionFrontendId": "986",
                    "sessionId": "968792",
                    "questionTitle": "Interval List Intersections",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/interval-list-intersections/submit/",
                    "interpretUrl": "/problems/interval-list-intersections/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def intervalIntersection(self, firstList, secondList):\\n        \\\"\\\"\\\"\\n        :type firstList: List[List[int]]\\n        :type secondList: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** intervalIntersection(int** firstList, int firstListSize, int* firstListColSize, int** secondList, int secondListSize, int* secondListColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[][] IntervalIntersection(int[][] firstList, int[][] secondList) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} firstList\\n * @param {number[][]} secondList\\n * @return {number[][]}\\n */\\nvar intervalIntersection = function(firstList, secondList) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} first_list\\n# @param {Integer[][]} second_list\\n# @return {Integer[][]}\\ndef interval_intersection(first_list, second_list)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func intervalIntersection(_ firstList: [[Int]], _ secondList: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func intervalIntersection(firstList [][]int, secondList [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def intervalIntersection(firstList: Array[Array[Int]], secondList: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun intervalIntersection(firstList: Array<IntArray>, secondList: Array<IntArray>): Array<IntArray> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn interval_intersection(first_list: Vec<Vec<i32>>, second_list: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $firstList\\n     * @param Integer[][] $secondList\\n     * @return Integer[][]\\n     */\\n    function intervalIntersection($firstList, $secondList) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function intervalIntersection(firstList: number[][], secondList: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (interval-intersection firstList secondList)\\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec interval_intersection(FirstList :: [[integer()]], SecondList :: [[integer()]]) -> [[integer()]].\\ninterval_intersection(FirstList, SecondList) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec interval_intersection(first_list :: [[integer]], second_list :: [[integer]]) :: [[integer]]\\n  def interval_intersection(first_list, second_list) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[0,2],[5,10],[13,23],[24,25]]\n[[1,5],[8,12],[15,24],[25,26]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"intervalIntersection\",\n  \"params\": [\n    {\n      \"name\": \"firstList\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"secondList\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[][]\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given two lists of closed intervals, <code>firstList</code> and <code>secondList</code>, where <code>firstList[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> and <code>secondList[j] = [start<sub>j</sub>, end<sub>j</sub>]</code>. Each list of intervals is pairwise <strong>disjoint</strong> and in <strong>sorted order</strong>.</p>\n\n<p>Return <em>the intersection of these two interval lists</em>.</p>\n\n<p>A <strong>closed interval</strong> <code>[a, b]</code> (with <code>a &lt; b</code>) denotes the set of real numbers <code>x</code> with <code>a &lt;= x &lt;= b</code>.</p>\n\n<p>The <strong>intersection</strong> of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of <code>[1, 3]</code> and <code>[2, 4]</code> is <code>[2, 3]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/30/interval1.png\" style=\"width: 700px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\n<strong>Output:</strong> [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> firstList = [[1,3],[5,9]], secondList = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> firstList = [], secondList = [[4,8],[10,12]]\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> firstList = [[1,7]], secondList = [[3,10]]\n<strong>Output:</strong> [[3,7]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= firstList.length, secondList.length &lt;= 1000</code></li>\n\t<li><code>firstList.length + secondList.length &gt;= 1</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>end<sub>i</sub> &lt; start<sub>i+1</sub></code></li>\n\t<li><code>0 &lt;= start<sub>j</sub> &lt; end<sub>j</sub> &lt;= 10<sup>9</sup> </code></li>\n\t<li><code>end<sub>j</sub> &lt; start<sub>j+1</sub></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Interval List Intersections",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Merge Intervals\n\n**Intuition**\n\nIn an interval `[a, b]`, call `b` the \"endpoint\".\n\nAmong the given intervals, consider the interval `A[0]` with the smallest endpoint.  (Without loss of generality, this interval occurs in array `A`.)\n\nThen, among the intervals in array `B`, `A[0]` can only intersect one such interval in array `B`.  (If two intervals in `B` intersect `A[0]`, then they both share the endpoint of `A[0]` -- but intervals in `B` are disjoint, which is a contradiction.)\n\n**Algorithm**\n\nIf `A[0]` has the smallest endpoint, it can only intersect `B[0]`.  After, we can discard `A[0]` since it cannot intersect anything else.\n\nSimilarly, if `B[0]` has the smallest endpoint, it can only intersect `A[0]`, and we can discard `B[0]` after since it cannot intersect anything else.\n\nWe use two pointers, `i` and `j`, to virtually manage \"discarding\" `A[0]` or `B[0]` repeatedly.\n\n<iframe src=\"https://leetcode.com/playground/fJa25QAM/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"fJa25QAM\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(M + N)$$, where $$M, N$$ are the lengths of `A` and `B` respectively.\n\n* Space Complexity:  $$O(M + N)$$, the maximum size of the answer.\n<br />\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "interval-list-intersections",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.664,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some other Facebook interview questions for you to practice. Integer to English Words is quite frequently asked according to our user survey.\n\nFind the Celebrity is a cute problem but requires some out of box thinking and Facebook seems to like this problem, too."
    },
    {
        "id": "58",
        "title": "SQL",
        "slug": "sql",
        "items": [
            {
                "id": "314",
                "title": "Second Highest Salary",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "176",
                    "questionFrontendId": "176",
                    "sessionId": "968792",
                    "questionTitle": "Second Highest Salary",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/second-highest-salary/submit/",
                    "interpretUrl": "/problems/second-highest-salary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}]",
                    "sampleTestCase": "{\"headers\": {\"Employee\": [\"Id\", \"Salary\"]}, \"rows\": {\"Employee\": [[1, 100], [2, 200], [3, 300]]}}",
                    "enableTestMode": false,
                    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Employee (Id int, Salary int)\"\n  ],\n  \"mssql\": [\n    \"create table Employee ( Id int, Salary int )\"\n  ],\n  \"oraclesql\": [\n    \"create table Employee ( Id int, Salary int )\"\n  ],\n  \"database\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>Write a SQL query to get the second highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the query should return <code>200</code> as the second highest salary. If there is no second highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+---------------------+\r\n| SecondHighestSalary |\r\n+---------------------+\r\n| 200                 |\r\n+---------------------+\r\n</pre>\r\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Second Highest Salary",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using sub-query and `LIMIT` clause [Accepted]\n\n**Algorithm**\n\nSort the distinct salary in descend order and then utilize the [`LIMIT`](https://dev.mysql.com/doc/refman/5.7/en/select.html) clause to get the second highest salary.\n\n```sql\nSELECT DISTINCT\n    Salary AS SecondHighestSalary\nFROM\n    Employee\nORDER BY Salary DESC\nLIMIT 1 OFFSET 1\n```\n\nHowever, this solution will be judged as 'Wrong Answer' if there is no such second highest salary since there might be only one record in this table. To overcome this issue, we can take this as a temp table.\n\n**MySQL**\n\n```sql\nSELECT\n    (SELECT DISTINCT\n            Salary\n        FROM\n            Employee\n        ORDER BY Salary DESC\n        LIMIT 1 OFFSET 1) AS SecondHighestSalary\n;\n```\n\n#### Approach: Using `IFNULL` and `LIMIT` clause [Accepted]\n\nAnother way to solve the 'NULL' problem is to use `IFNULL` funtion as below.\n\n**MySQL**\n```sql\nSELECT\n    IFNULL(\n      (SELECT DISTINCT Salary\n       FROM Employee\n       ORDER BY Salary DESC\n        LIMIT 1 OFFSET 1),\n    NULL) AS SecondHighestSalary\n```",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "second-highest-salary",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.883,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "315",
                "title": "Nth Highest Salary",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "177",
                    "questionFrontendId": "177",
                    "sessionId": "968792",
                    "questionTitle": "Nth Highest Salary",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/nth-highest-salary/submit/",
                    "interpretUrl": "/problems/nth-highest-salary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT\\nBEGIN\\n  RETURN (\\n      # Write your MySQL query statement below.\\n      \\n  );\\nEND\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        \\n    );\\nEND\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS\\nresult NUMBER;\\nBEGIN\\n    /* Write your PL/SQL query statement below */\\n    \\n    RETURN result;\\nEND;\"}]",
                    "sampleTestCase": "{\"headers\": {\"Employee\": [\"Id\", \"Salary\"]}, \"argument\": 2, \"rows\": {\"Employee\": [[1, 100], [2, 200], [3, 300]]}}",
                    "enableTestMode": false,
                    "metaData": "{\n  \"database\": true,\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>Write a SQL query to get the <em>n</em><sup>th</sup> highest salary from the <code>Employee</code> table.</p>\r\n\r\n<pre>\r\n+----+--------+\r\n| Id | Salary |\r\n+----+--------+\r\n| 1  | 100    |\r\n| 2  | 200    |\r\n| 3  | 300    |\r\n+----+--------+\r\n</pre>\r\n\r\n<p>For example, given the above Employee table, the <em>n</em><sup>th</sup> highest salary where <em>n</em> = 2 is <code>200</code>. If there is no <em>n</em><sup>th</sup> highest salary, then the query should return <code>null</code>.</p>\r\n\r\n<pre>\r\n+------------------------+\r\n| getNthHighestSalary(2) |\r\n+------------------------+\r\n| 200                    |\r\n+------------------------+\r\n</pre>\r\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "316",
                "title": "Customers Who Never Order",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "183",
                    "questionFrontendId": "183",
                    "sessionId": "968792",
                    "questionTitle": "Customers Who Never Order",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/customers-who-never-order/submit/",
                    "interpretUrl": "/problems/customers-who-never-order/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}]",
                    "sampleTestCase": "{\"headers\": {\"Customers\": [\"Id\", \"Name\"], \"Orders\": [\"Id\", \"CustomerId\"]}, \"rows\": {\"Customers\": [[1, \"Joe\"], [2, \"Henry\"], [3, \"Sam\"], [4, \"Max\"]], \"Orders\": [[1, 3], [2, 1]]}}",
                    "enableTestMode": false,
                    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists Customers (Id int, Name varchar(255))\",\n    \"Create table If Not Exists Orders (Id int, CustomerId int)\"\n  ],\n  \"mssql\": [\n    \"create table Customers ( Id int,  Name varchar(255) )\",\n    \"Create table Orders (Id int, CustomerId int)\"\n  ],\n  \"oraclesql\": [\n    \"create table Customers ( Id int,  Name varchar(255) )\",\n    \"Create table Orders (Id int, CustomerId int)\"\n  ],\n  \"database\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>Suppose that a website contains two tables, the <code>Customers</code> table and the <code>Orders</code> table. Write a SQL query to find all customers who never order anything.</p>\r\n\r\n<p>Table: <code>Customers</code>.</p>\r\n\r\n<pre>\r\n+----+-------+\r\n| Id | Name  |\r\n+----+-------+\r\n| 1  | Joe   |\r\n| 2  | Henry |\r\n| 3  | Sam   |\r\n| 4  | Max   |\r\n+----+-------+\r\n</pre>\r\n\r\n<p>Table: <code>Orders</code>.</p>\r\n\r\n<pre>\r\n+----+------------+\r\n| Id | CustomerId |\r\n+----+------------+\r\n| 1  | 3          |\r\n| 2  | 1          |\r\n+----+------------+\r\n</pre>\r\n\r\n<p>Using the above tables as example, return the following:</p>\r\n\r\n<pre>\r\n+-----------+\r\n| Customers |\r\n+-----------+\r\n| Henry     |\r\n| Max       |\r\n+-----------+\r\n</pre>\r\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Customers Who Never Order",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using sub-query and `NOT IN` clause [Accepted]\n\n**Algorithm**\n\nIf we have a list of customers who have ever ordered, it will be easy to know who never ordered.\n\nWe can use the following code to get such list.\n\n```sql\nselect customerid from orders;\n```\n\nThen, we can use `NOT IN` to query the customers who are not in this list.\n\n**MySQL**\n\n```sql\nselect customers.name as 'Customers'\nfrom customers\nwhere customers.id not in\n(\n    select customerid from orders\n);\n```",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "customers-who-never-order",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.548,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "326",
                "title": "Friend Requests I: Overall Acceptance Rate",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "597",
                    "questionFrontendId": "597",
                    "sessionId": "968792",
                    "questionTitle": "Friend Requests I: Overall Acceptance Rate",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/friend-requests-i-overall-acceptance-rate/submit/",
                    "interpretUrl": "/problems/friend-requests-i-overall-acceptance-rate/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}]",
                    "sampleTestCase": "{\"headers\":{\"FriendRequest\":[\"sender_id\",\"send_to_id\",\"request_date\"],\"RequestAccepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"FriendRequest\":[[1,2,\"2016/06/01\"],[1,3,\"2016/06/01\"],[1,4,\"2016/06/01\"],[2,3,\"2016/06/02\"],[3,4,\"2016/06/09\"]],\"RequestAccepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"],[3,4,\"2016/06/10\"]]}}",
                    "enableTestMode": false,
                    "metaData": "{\n  \"mysql\": [\n    \"Create table If Not Exists FriendRequest (sender_id int, send_to_id int, request_date date)\",\n    \"Create table If Not Exists RequestAccepted (requester_id int, accepter_id int, accept_date date)\"\n  ],\n  \"mssql\": [\n    \"Create table FriendRequest (sender_id int, send_to_id int, request_date date)\",\n    \"Create table RequestAccepted (requester_id int, accepter_id int, accept_date date)\"\n  ],\n  \"oraclesql\": [\n    \"Create table FriendRequest (sender_id int, send_to_id int, request_date date)\",\n    \"Create table RequestAccepted (requester_id int, accepter_id int, accept_date date)\",\n    \"alter SESSION set NLS_DATE_FORMAT = 'YYYY/MM/DD'\"\n  ],\n  \"database\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>Table: <code>FriendRequest</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| sender_id      | int     |\n| send_to_id     | int     |\n| request_date   | date    |\n+----------------+---------+\nThere is no primary key for this table, it may contain duplicates.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date of the request.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>RequestAccepted</code></p>\n\n<pre>\n+----------------+---------+\n| Column Name    | Type    |\n+----------------+---------+\n| requester_id   | int     |\n| accepter_id    | int     |\n| accept_date    | date    |\n+----------------+---------+\nThere is no primary key for this table, it may contain duplicates.\nThis table contains the ID of the user who sent the request, the ID of the user who received the request, and the date when the request was accepted.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query to find the overall acceptance rate of requests, which is the number of acceptance divided by the number of requests. Return the answer rounded to 2 decimals places.</p>\n\n<p><strong>Note that:</strong></p>\n\n<ul>\n\t<li>The accepted requests are not necessarily from the table <code>friend_request</code>. In this case, you just need to simply count the total accepted requests (no matter whether they are in the original requests), and divide it by the number of requests to get the acceptance rate.</li>\n\t<li>It is possible that a sender sends multiple requests to the same receiver, and a request could be accepted more than once. In this case, the &lsquo;duplicated&rsquo; requests or acceptances are only counted once.</li>\n\t<li>If there are no requests at all, you should return 0.00 as the <code>accept_rate</code>.</li>\n</ul>\n\n<p>The query result format is in the following example:</p>\n\n<p>&nbsp;</p>\n\n<pre>\nFriendRequest table:\n+-----------+------------+--------------+\n| sender_id | send_to_id | request_date |\n+-----------+------------+--------------+\n| 1         | 2          | 2016/06/01   |\n| 1         | 3          | 2016/06/01   |\n| 1         | 4          | 2016/06/01   |\n| 2         | 3          | 2016/06/02   |\n| 3         | 4          | 2016/06/09   |\n+-----------+------------+--------------+\n\nRequestAccepted table:\n+--------------+-------------+-------------+\n| requester_id | accepter_id | accept_date |\n+--------------+-------------+-------------+\n| 1            | 2           | 2016/06/03  |\n| 1            | 3           | 2016/06/08  |\n| 2            | 3           | 2016/06/08  |\n| 3            | 4           | 2016/06/09  |\n| 3            | 4           | 2016/06/10  |\n+--------------+-------------+-------------+\n\nResult table:\n+-------------+\n| accept_rate |\n+-------------+\n| 0.8         |\n+-------------+\nThere are 4 unique accepted requests, and there are 5 requests in total. So the rate is 0.80.\n</pre>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong>\n<ul>\n\t<li>Could you write a query to return the acceptance rate for every month?</li>\n\t<li>Could you write a query to return the cumulative acceptance rate for every day?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Still remember how to count the number of rows in a table?",
                        "What is the keyword to filter the duplicated records in a table?"
                    ],
                    "solution": {
                        "title": "Friend Requests I: Overall Acceptance Rate",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `ROUND` and `IFNULL` [Accepted]\n\n**Intuition**\n\nCount the accepted requests and then divides it by the number of all requests.\n\n**Algorithm**\n\nTo get the distinct number of accepted requests, we can query from the **RequestAccepted** table.\n```sql\nSELECT COUNT(*) FROM (SELECT DISTINCT requester_id, accepter_id FROM RequestAccepted) AS A;\n```\n\nWith the same technique, we can have the total number of requests from the **FriendRequest** table:\n```sql\nSELECT COUNT(*) FROM (SELECT DISTINCT sender_id, send_to_id FROM FriendRequest) AS B;\n```\n\nAt last, divide these two numbers and [`ROUND`](https://dev.mysql.com/doc/refman/5.7/en/mathematical-functions.html#function_round) it to a scale of 2 decimal places to get the required acceptance rate.\n\nWait! The divisor (total number of requests) could be '0' if the table **friend_request** is empty. So, we have to utilize  [`IFNULL`](https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html#function_ifnull) to deal with this special case.\n\n**MySQL**\n\n```sql\nSELECT\nROUND(\n    IFNULL(\n    (SELECT COUNT(*) FROM (SELECT DISTINCT requester_id, accepter_id FROM RequestAccepted) AS A)\n    /\n    (SELECT COUNT(*) FROM (SELECT DISTINCT sender_id, send_to_id FROM FriendRequest) AS B),\n    0)\n, 2) AS accept_rate;\n```",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "friend-requests-i-overall-acceptance-rate",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.231,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "327",
                "title": "Friend Requests II: Who Has the Most Friends",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "602",
                    "questionFrontendId": "602",
                    "sessionId": "968792",
                    "questionTitle": "Friend Requests II: Who Has the Most Friends",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/friend-requests-ii-who-has-the-most-friends/submit/",
                    "interpretUrl": "/problems/friend-requests-ii-who-has-the-most-friends/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}]",
                    "sampleTestCase": "{\"headers\":{\"request_accepted\":[\"requester_id\",\"accepter_id\",\"accept_date\"]},\"rows\":{\"request_accepted\":[[1,2,\"2016/06/03\"],[1,3,\"2016/06/08\"],[2,3,\"2016/06/08\"],[3,4,\"2016/06/09\"]]}}",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\"\r\n  ],\r\n  \"mssql\": [\r\n    \"Create table request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"Create table request_accepted (        requester_id INT NOT NULL,        accepter_id INT NULL,        accept_date DATE NULL)\",\r\n    \"alter SESSION set NLS_DATE_FORMAT = 'YYYY/MM/DD'\"\r\n  ],\r\n  \"database\": true\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>In social network like Facebook or Twitter, people send friend requests and accept others&#39; requests as well.</p>\n\n<p>&nbsp;</p>\n\n<p>Table <code>request_accepted</code></p>\n\n<pre>\n+--------------+-------------+------------+\n| requester_id | accepter_id | accept_date|\n|--------------|-------------|------------|\n| 1            | 2           | 2016_06-03 |\n| 1            | 3           | 2016-06-08 |\n| 2            | 3           | 2016-06-08 |\n| 3            | 4           | 2016-06-09 |\n+--------------+-------------+------------+\nThis table holds the data of friend acceptance, while <b>requester_id</b> and <b>accepter_id</b> both are the id of a person.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a query to find the the people who has most friends and the most friends number under the following rules:</p>\n\n<ul>\n\t<li>It is guaranteed there is only 1 people having the most friends.</li>\n\t<li>The friend request could only been accepted once, which mean there is no multiple records with the same <b>requester_id</b> and <b>accepter_id</b> value.</li>\n</ul>\n\n<p>For the sample data above, the result is:</p>\n\n<pre>\nResult table:\n+------+------+\n| id   | num  |\n|------|------|\n| 3    | 3    |\n+------+------+\nThe person with id &#39;3&#39; is a friend of people &#39;1&#39;, &#39;2&#39; and &#39;4&#39;, so he has 3 friends in total, which is the most number than any others.\n</pre>\n\n<p><b>Follow-up:</b><br />\nIn the real world, multiple people could have the same most number of friends, can you find all these people in this case?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Being friends is bidirectional. If you accept someone's adding friend request, both you and the other person will have one more friend."
                    ],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "317",
                "title": "Department Top Three Salaries",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 58,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "185",
                    "questionFrontendId": "185",
                    "sessionId": "968792",
                    "questionTitle": "Department Top Three Salaries",
                    "categoryTitle": "Database",
                    "submitUrl": "/problems/department-top-three-salaries/submit/",
                    "interpretUrl": "/problems/department-top-three-salaries/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"mysql\", \"text\": \"MySQL\", \"defaultCode\": \"# Write your MySQL query statement below\\n\"}, {\"value\": \"mssql\", \"text\": \"MS SQL Server\", \"defaultCode\": \"/* Write your T-SQL query statement below */\\n\"}, {\"value\": \"oraclesql\", \"text\": \"Oracle\", \"defaultCode\": \"/* Write your PL/SQL query statement below */\\n\"}]",
                    "sampleTestCase": "{\"headers\": {\"Employee\": [\"Id\", \"Name\", \"Salary\", \"DepartmentId\"], \"Department\": [\"Id\", \"Name\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 85000, 1], [2, \"Henry\", 80000, 2], [3, \"Sam\", 60000, 2], [4, \"Max\", 90000, 1], [5, \"Janet\", 69000, 1], [6, \"Randy\", 85000, 1], [7, \"Will\", 70000, 1]], \"Department\": [[1, \"IT\"], [2, \"Sales\"]]}}",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"mysql\": [\r\n    \"Create table If Not Exists Employee (Id int, Name varchar(255), Salary int, DepartmentId int)\",\r\n    \"Create table If Not Exists Department (Id int, Name varchar(255))\"\r\n  ],\r\n  \"mssql\": [\r\n    \"create table Employee ( Id int, Name varchar(255), Salary int, DepartmentId int )\",\r\n    \"Create table Department (Id int, Name varchar(255))\"\r\n  ],\r\n  \"oraclesql\": [\r\n    \"create table Employee ( Id int, Name varchar(255), Salary int, DepartmentId int )\",\r\n    \"Create table Department (Id int, Name varchar(255))\"\r\n  ],\r\n  \"database\": true\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"mysql\": [\"MySQL\", \"<p><code>MySQL 8.0</code>.</p>\"], \"mssql\": [\"MS SQL Server\", \"<p><code>mssql server 2019</code>.</p>\"], \"oraclesql\": [\"Oracle\", \"<p><code>Oracle Sql 11.2</code>.</p>\"]}",
                    "content": "<p>Table: <code>Employee</code></p>\n\n<pre>\n+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| Id           | int     |\n| Name         | varchar |\n| Salary       | int     |\n| DepartmentId | int     |\n+--------------+---------+\nId is the primary key for this table.\nEach row contains the ID, name, salary, and department of one employee.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Table: <code>Department</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| Id          | int     |\n| Name        | varchar |\n+-------------+---------+\nId is the primary key for this table.\nEach row contains the ID and the name of one department.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A company&#39;s executives are interested in seeing who earns the most money in each of the company&#39;s departments. A <strong>high earner</strong> in a department is an employee who has a salary in the <strong>top three unique</strong> salaries for that department.</p>\n\n<p>Write an SQL query to find the employees who are <strong>high earners</strong> in each of the departments.</p>\n\n<p>Return the result table <strong>in any order</strong>.</p>\n\n<p>The query result format is in the following example:</p>\n\n<p>&nbsp;</p>\n\n<pre>\nEmployee table:\n+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n+----+-------+--------+--------------+\n\nDepartment table:\n+----+-------+\n| Id | Name  |\n+----+-------+\n| 1  | IT    |\n| 2  | Sales |\n+----+-------+\n\nResult table:\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+\n\nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees</pre>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Department Top Three Salaries",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach: Using `JOIN` and sub-query [Accepted]\n\n**Algorithm**\n\nA top 3 salary in this company means there is no more than 3 salary bigger than itself in the company.\n\n```sql\nselect e1.Name as 'Employee', e1.Salary\nfrom Employee e1\nwhere 3 >\n(\n    select count(distinct e2.Salary)\n    from Employee e2\n    where e2.Salary > e1.Salary\n)\n;\n```\n\nIn this code, we count the salary number of which is bigger than e1.Salary. So the output is as below for the sample data.\n```\n| Employee | Salary |\n|----------|--------|\n| Henry    | 80000  |\n| Max      | 90000  |\n| Randy    | 85000  |\n```\n\nThen, we need to join the **Employee** table with **Department** in order to retrieve the department information.\n\n**MySQL**\n\n```sql\nSELECT\n    d.Name AS 'Department', e1.Name AS 'Employee', e1.Salary\nFROM\n    Employee e1\n        JOIN\n    Department d ON e1.DepartmentId = d.Id\nWHERE\n    3 > (SELECT\n            COUNT(DISTINCT e2.Salary)\n        FROM\n            Employee e2\n        WHERE\n            e2.Salary > e1.Salary\n                AND e1.DepartmentId = e2.DepartmentId\n        )\n;\n```\n\n```\n| Department | Employee | Salary |\n|------------|----------|--------|\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n```",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "department-top-three-salaries",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.014,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Are you applying for a Data Scientist position? You may be asked some basic SQL questions.\n\nHere are some SQL questions which has been asked by Facebook available for you to practice."
    }
]