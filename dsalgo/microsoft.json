[
    {
        "id": "30",
        "title": "Arrays and Strings",
        "slug": "array-and-strings",
        "items": [
            {
                "id": "173",
                "title": "Two Sum",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "1",
                    "questionFrontendId": "1",
                    "sessionId": "968792",
                    "questionTitle": "Two Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/two-sum/submit/",
                    "interpretUrl": "/problems/two-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> twoSum(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] twoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def twoSum(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] TwoSum(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar twoSum = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer[]}\\ndef two_sum(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func twoSum(nums []int, target int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun twoSum(nums: IntArray, target: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer[]\\n     */\\n    function twoSum($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function twoSum(nums: number[], target: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (two-sum nums target)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\\ntwo_sum(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\\n  def two_sum(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,7,11,15]\n9",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"twoSum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\",\n    \"size\": 2\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Output:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
                        "So, if we fix one of the numbers, say <pre>x</pre>, we have to scan the entire array to find the next number <pre>y</pre> which is <pre>value - x</pre> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
                        "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
                    ],
                    "solution": {
                        "title": "Two Sum",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/567281997\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n\r\n---\r\n\r\n#### Approach 1: Brute Force\r\n\r\n**Algorithm**\r\n\r\nThe brute force approach is simple. Loop through each element $$x$$ and find if there is another value that equals to $$target - x$$.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/cvvgJGBX/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"cvvgJGBX\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n^2)$$.\r\nFor each element, we try to find its complement by looping through the rest of the array which takes $$O(n)$$ time. Therefore, the time complexity is $$O(n^2)$$.\r\n\r\n* Space complexity: $$O(1)$$.\r\nThe space required does not depend on the size of the input array, so only constant space is used.\r\n\r\n---\r\n#### Approach 2: Two-pass Hash Table\r\n\r\n**Intuition**\r\n\r\nTo improve our runtime complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to get its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.\r\n\r\nWe can reduce the lookup time from $$O(n)$$ to $$O(1)$$ by trading space for speed. A hash table is well suited for this purpose because it supports fast lookup in *near* constant time. I say \"near\" because if a collision occurred, a lookup could degenerate to $$O(n)$$ time. However, lookup in a hash table should be amortized $$O(1)$$ time as long as the hash function was chosen carefully.\r\n\r\n**Algorithm**\r\n\r\nA simple implementation uses two iterations. In the first iteration, we add each element's value as a key and its index as a value to the hash table. Then, in the second iteration, we check if each element's complement ($$target - nums[i]$$) exists in the hash table. If it does exist, we return current element's index and its complement's index. Beware that the complement must not be $$nums[i]$$ itself!\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/BcoEkYCL/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"BcoEkYCL\"></iframe>  \r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements exactly twice. Since the hash table reduces the lookup time to $$O(1)$$, the overall time complexity is $$O(n)$$.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores exactly $$n$$ elements.\r\n\r\n---\r\n#### Approach 3: One-pass Hash Table\r\n\r\n**Algorithm**\r\n    \r\nIt turns out we can do it in one-pass. While we are iterating and inserting elements into the hash table, we also look back to check if current element's complement already exists in the hash table. If it exists, we have found a solution and return the indices immediately.\r\n\r\n**Implementation**    \r\n    \r\n<iframe src=\"https://leetcode.com/playground/XjHaJQau/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"XjHaJQau\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements only once. Each lookup in the table costs only $$O(1)$$ time.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores at most $$n$$ elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "two-sum",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.737,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "162",
                "title": "Valid Palindrome",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "125",
                    "questionFrontendId": "125",
                    "sessionId": "968792",
                    "questionTitle": "Valid Palindrome",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-palindrome/submit/",
                    "interpretUrl": "/problems/valid-palindrome/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isPalindrome(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isPalindrome(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isPalindrome(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isPalindrome(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isPalindrome(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsPalindrome(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isPalindrome = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef is_palindrome(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isPalindrome(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isPalindrome(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isPalindrome(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isPalindrome(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_palindrome(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function isPalindrome($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isPalindrome(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-palindrome s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_palindrome(S :: unicode:unicode_binary()) -> boolean().\\nis_palindrome(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_palindrome(s :: String.t) :: boolean\\n  def is_palindrome(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"A man, a plan, a canal: Panama\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isPalindrome\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A man, a plan, a canal: Panama&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> &quot;amanaplanacanalpanama&quot; is a palindrome.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;race a car&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;raceacar&quot; is not a palindrome.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists only of printable ASCII characters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Valid Palindrome",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Compare with Reverse\n\n**Intuition**\n\nA palindrome is a word, phrase, or sequence that reads the same backwards as forwards. e.g. `madam`\n\nA palindrome, and its reverse, are identical to each other.\n\n**Algorithm**\n\nWe'll reverse the given string and compare it with the original. If those are equivalent, it's a palindrome.\n\nSince only alphanumeric characters are considered, we'll filter out all other types of characters before we apply our algorithm.\n\nAdditionally, because we're treating letters as case-insensitive, we'll convert the remaining letters to lower case. The digits will be left the same.\n\n<iframe src=\"https://leetcode.com/playground/JNcSr4tR/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JNcSr4tR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$, in length $$n$$ of the string.\n\n  We need to iterate thrice through the string:\n    1. When we filter out non-alphanumeric characters, and convert the remaining characters to lower-case.\n    2. When we reverse the string.\n    3. When we compare the original and the reversed strings.\n\n  Each iteration runs linear in time (since each character operation completes in constant time). Thus, the effective run-time complexity is linear.\n\n* Space complexity : $$O(n)$$, in length $$n$$ of the string. We need $$O(n)$$ additional space to stored the filtered string and the reversed string.\n\n<br />\n\n---\n\n#### Approach 2: Two Pointers\n\n**Intuition**\n\nIf you take any ordinary string, and concatenate its reverse to it, you'll get a palindrome. This leads to an interesting insight about the converse: every palindrome half is reverse of the other half.\n\nSimply speaking, if one were to start in the middle of a palindrome, and traverse outwards, they'd encounter the same characters, in the exact same order, in both halves!\n\n!?!../Documents/125_valid_palindrome.json:800,600!?!\n\n**Algorithm**\n\nSince the input string contains characters that we need to ignore in our palindromic check, it becomes tedious to figure out the real middle point of our palindromic input.\n\n> Instead of going outwards from the middle, we could just go inwards towards the middle!\n\nSo, if we start traversing inwards, from both ends of the input string, we can expect to _see_ the same characters, in the same order.\n\nThe resulting algorithm is simple:\n+ Set two pointers, one at each end of the input string\n+ If the input is palindromic, both the pointers should point to equivalent characters, _at all times_. [^note-1]\n  + If this condition is not met at any point of time, we break and return early.  [^note-2]\n+ We can simply ignore non-alphanumeric characters by continuing to traverse further.\n+ Continue traversing inwards until the pointers meet in the middle.\n\n<iframe src=\"https://leetcode.com/playground/ZZg94fK4/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"ZZg94fK4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$, in length $$n$$ of the string. We traverse over each character at-most once, until the two pointers meet in the middle, or when we break and return early.\n\n* Space complexity : $$O(1)$$. No extra space required, at all.\n\n\n\n[^note-1]: Such a property is formally known as a [loop invariant](https://en.wikipedia.org/wiki/Loop_invariant).\n\n[^note-2]: Such a property is often called a _loop termination condition_. It is one of several used in this solution. Can you identify the others?",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "valid-palindrome",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.956,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "171",
                "title": "String to Integer (atoi)",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "8",
                    "questionFrontendId": "8",
                    "sessionId": "968792",
                    "questionTitle": "String to Integer (atoi)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/string-to-integer-atoi/submit/",
                    "interpretUrl": "/problems/string-to-integer-atoi/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int myAtoi(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int myAtoi(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def myAtoi(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def myAtoi(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint myAtoi(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MyAtoi(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar myAtoi = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef my_atoi(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func myAtoi(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func myAtoi(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def myAtoi(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun myAtoi(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn my_atoi(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function myAtoi($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function myAtoi(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (my-atoi s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec my_atoi(S :: unicode:unicode_binary()) -> integer().\\nmy_atoi(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec my_atoi(s :: String.t) :: integer\\n  def my_atoi(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"42\"",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"myAtoi\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C/C++&#39;s <code>atoi</code> function).</p>\n\n<p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p>\n\n<ol>\n\t<li>Read in and ignore any leading whitespace.</li>\n\t<li>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li>\n\t<li>Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.</li>\n\t<li>Convert these digits into an integer (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li>\n\t<li>If the integer is out of the 32-bit signed integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2<sup>31</sup></code> should be clamped to <code>-2<sup>31</sup></code>, and integers greater than <code>2<sup>31</sup> - 1</code> should be clamped to <code>2<sup>31</sup> - 1</code>.</li>\n\t<li>Return the integer as the final result.</li>\n</ol>\n\n<p><strong>Note:</strong></p>\n\n<ul>\n\t<li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li>\n\t<li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;42&quot;\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The underlined characters are what is read in, the caret is the current reader position.\nStep 1: &quot;42&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;42&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>42</u>&quot; (&quot;42&quot; is read in)\n           ^\nThe parsed integer is 42.\nSince 42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 42.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;   -42&quot;\n<strong>Output:</strong> -42\n<strong>Explanation:</strong>\nStep 1: &quot;<u>   </u>-42&quot; (leading whitespace is read and ignored)\n            ^\nStep 2: &quot;   <u>-</u>42&quot; (&#39;-&#39; is read, so the result should be negative)\n             ^\nStep 3: &quot;   -<u>42</u>&quot; (&quot;42&quot; is read in)\n               ^\nThe parsed integer is -42.\nSince -42 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is -42.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;4193 with words&quot;\n<strong>Output:</strong> 4193\n<strong>Explanation:</strong>\nStep 1: &quot;4193 with words&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;4193 with words&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;<u>4193</u> with words&quot; (&quot;4193&quot; is read in; reading stops because the next character is a non-digit)\n             ^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 4193.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;words and 987&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:\n</strong>Step 1: &quot;words and 987&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;words and 987&quot; (no characters read because there is neither a &#39;-&#39; nor &#39;+&#39;)\n         ^\nStep 3: &quot;words and 987&quot; (reading stops immediately because there is a non-digit &#39;w&#39;)\n         ^\nThe parsed integer is 0 because no digits were read.\nSince 0 is in the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is 0.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;-91283472332&quot;\n<strong>Output:</strong> -2147483648\n<strong>Explanation:\n</strong>Step 1: &quot;-91283472332&quot; (no characters read because there is no leading whitespace)\n         ^\nStep 2: &quot;<u>-</u>91283472332&quot; (&#39;-&#39; is read, so the result should be negative)\n          ^\nStep 3: &quot;-<u>91283472332</u>&quot; (&quot;91283472332&quot; is read in)\n                     ^\nThe parsed integer is -91283472332.\nSince -91283472332 is less than the lower bound of the range [-2<sup>31</sup>, 2<sup>31</sup> - 1], the final result is clamped to -2<sup>31</sup> = -2147483648.<strong><span style=\"display: none;\"> </span></strong>\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "187",
                "title": "Reverse String",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "344",
                    "questionFrontendId": "344",
                    "sessionId": "968792",
                    "questionTitle": "Reverse String",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/reverse-string/submit/",
                    "interpretUrl": "/problems/reverse-string/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void reverseString(vector<char>& s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void reverseString(char[] s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def reverseString(self, s):\\n        \\\"\\\"\\\"\\n        :type s: List[str]\\n        :rtype: None Do not return anything, modify s in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def reverseString(self, s: List[str]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify s in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid reverseString(char* s, int sSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void ReverseString(char[] s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[]} s\\n * @return {void} Do not return anything, modify s in-place instead.\\n */\\nvar reverseString = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[]} s\\n# @return {Void} Do not return anything, modify s in-place instead.\\ndef reverse_string(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func reverseString(_ s: inout [Character]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseString(s []byte)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def reverseString(s: Array[Char]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun reverseString(s: CharArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn reverse_string(s: &mut Vec<char>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $s\\n     * @return NULL\\n     */\\n    function reverseString(&$s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify s in-place instead.\\n */\\nfunction reverseString(s: string[]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (reverse-string s)\\n  (-> (listof char?) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[\"h\",\"e\",\"l\",\"l\",\"o\"]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"reverseString\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"character[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"output\": {\n    \"paramindex\": 0\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Write a function that reverses a string. The input string is given as an array of characters <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n<strong>Output:</strong> [\"o\",\"l\",\"l\",\"e\",\"h\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n<strong>Output:</strong> [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is a <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">printable ascii character</a>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Do not allocate extra space for another array. You must do this by modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a> with <code>O(1)</code> extra memory.</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "The entire logic for reversing a string is based on using the opposite directional two-pointer approach!"
                    ],
                    "solution": {
                        "title": "Reverse String",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\n_Life is short, use Python._ (c) \r\n\r\n<iframe src=\"https://leetcode.com/playground/AzW3B9hy/shared\" frameBorder=\"0\" width=\"100%\" height=\"106\" name=\"AzW3B9hy\"></iframe>\r\n\r\nSpeaking seriously, let's use this problem to discuss two things:\r\n\r\n- Does _in-place_ mean constant space complexity?\r\n\r\n- Two pointers approach. \r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 1: Recursion, In-Place, $$\\mathcal{O}(N)$$ Space\r\n\r\n**Does _in-place_ mean constant space complexity?**\r\n\r\nNo. [By definition](https://en.wikipedia.org/wiki/In-place_algorithm), \r\nan in-place algorithm is an algorithm \r\nwhich transforms input using no auxiliary data structure. \r\n\r\nThe tricky part is that space is used by many actors, not only by \r\ndata structures. The classical example is to use recursive function without\r\nany auxiliary data structures. \r\n\r\nIs it in-place? Yes. \r\n\r\nIs it constant space? No, because of recursion stack.\r\n\r\n![fig](../Figures/344/stack2.png) \r\n\r\n**Algorithm**\r\n\r\nHere is an example. Let's implement recursive function `helper` which \r\nreceives two pointers, left and right, as arguments. \r\n\r\n- Base case: if `left >= right`, do nothing.\r\n\r\n- Otherwise, swap `s[left]` and `s[right]` and call `helper(left + 1, right - 1)`.\r\n\r\nTo solve the problem, call helper function passing the head and tail indexes as \r\narguments: `return helper(0, len(s) - 1)`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/cLDBmvWy/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"cLDBmvWy\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ time to perform $$N/2$$ swaps. \r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to keep the recursion stack.\r\n<br /> \r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Two Pointers, Iteration, $$\\mathcal{O}(1)$$ Space\r\n\r\n**Two Pointers Approach**\r\n\r\nIn this approach, two pointers are used to process two array elements\r\nat the same time. Usual implementation is to set one pointer in the \r\nbeginning and one at the end and then to move them until they both meet.  \r\n\r\nSometimes one needs to generalize this approach in order to use three pointers, \r\nlike for classical [Sort Colors problem](https://leetcode.com/articles/sort-colors/).\r\n\r\n**Algorithm**\r\n\r\n- Set pointer left at index 0, and pointer right at index `n - 1`,\r\nwhere n is a number of elements in the array.\r\n\r\n- While left < right:\r\n\r\n    - Swap `s[left]` and `s[right]`.\r\n    \r\n    - Move left pointer one step right, and right pointer one step left.\r\n    \r\n![fig](../Figures/344/two.png)    \r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/mryJCRru/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"mryJCRru\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N)$$ to swap $$N/2$$ element. \r\n\r\n* Space complexity : $$\\mathcal{O}(1)$$, it's a constant space solution.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "reverse-string",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.669,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "166",
                "title": "Reverse Words in a String",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "151",
                    "questionFrontendId": "151",
                    "sessionId": "968792",
                    "questionTitle": "Reverse Words in a String",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/reverse-words-in-a-string/submit/",
                    "interpretUrl": "/problems/reverse-words-in-a-string/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string reverseWords(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String reverseWords(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def reverseWords(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def reverseWords(self, s: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * reverseWords(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string ReverseWords(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar reverseWords = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String}\\ndef reverse_words(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func reverseWords(_ s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseWords(s string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def reverseWords(s: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun reverseWords(s: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn reverse_words(s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String\\n     */\\n    function reverseWords($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function reverseWords(s: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (reverse-words s)\\n  (-> string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec reverse_words(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nreverse_words(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec reverse_words(s :: String.t) :: String.t\\n  def reverse_words(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"the sky is blue\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"reverseWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by at least one space.</p>\n\n<p>Return <em>a string of the words in reverse order concatenated by a single space.</em></p>\n\n<p><b>Note</b> that <code>s</code> may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;the sky is blue&quot;\n<strong>Output:</strong> &quot;blue is sky the&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;  hello world  &quot;\n<strong>Output:</strong> &quot;world hello&quot;\n<strong>Explanation:</strong> Your reversed string should not contain leading or trailing spaces.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a good   example&quot;\n<strong>Output:</strong> &quot;example good a&quot;\n<strong>Explanation:</strong> You need to reduce multiple spaces between two words to a single space in the reversed string.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;  Bob    Loves  Alice   &quot;\n<strong>Output:</strong> &quot;Alice Loves Bob&quot;\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Alice does not even like bob&quot;\n<strong>Output:</strong> &quot;bob like even not does Alice&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> contains English letters (upper-case and lower-case), digits, and spaces <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b data-stringify-type=\"bold\">Follow-up:&nbsp;</b>If the string data type is mutable in your language, can&nbsp;you solve it&nbsp;<b data-stringify-type=\"bold\">in-place</b>&nbsp;with&nbsp;<code data-stringify-type=\"code\">O(1)</code>&nbsp;extra space?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Reverse Words in a String",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\nDifferent interviewers would probably expect different approaches for \nthis problem. The holy war question is to use or not use built-in methods.\nAs you may notice, most of design problems on Leetcode are voted down \nbecause of two main reasons:\n\n1. There was no approach with built-in methods / data structures in the article.\n\n2. One of the approaches in the article did contain built-in methods / data structures.\n\nSeems like the community has no common opinion yet, and \nin practice that means an unpredictable interview experience for some\nsort of problems. \n \nHere we consider three different solutions \nof linear time and space complexity:\n\n1. Use built-in split and reverse.\nBenefits: in-place in Python (in-place, but linear space complexity!) \nand the simplest one to write.  \n\n2. The most straightforward one. Trim the whitespaces, reverse the\nwhole string and then reverse each word.  \nBenefits: could be done in-place for the languages with mutable strings.\n\n3. Two passes approach with a deque. \nMove along the string, word by word, and \npush each new word in front of the deque. \nConvert the deque back into string.\nBenefits: two passes.\n\n#### Approach 1: Built-in Split + Reverse\n\n![fig](../Figures/151/fun2.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/f4BKPtsx/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"f4BKPtsx\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$, where N is a number of characters\nin the input string.\n\n* Space complexity: $$\\mathcal{O}(N)$$, to store the result of split\nby spaces.\n\n<br /> \n<br />\n\n\n---\n#### Approach 2: Reverse the Whole String and Then Reverse Each Word\n\nThe implementation of this approach will be different for \nJava/Python (= immutable strings) and C++ (= mutable strings). \n\nIn the case of immutable strings one has first to convert string into\nmutable data structure, and hence it makes sense to trim all spaces during\nthat conversion. \n\n![fig](../Figures/151/reverse_whole2.png)\n\nIn the case of _mutable_ strings, there is no need to allocate \nan additional data structure, one could make all job done in-place.\nIn such a case it makes sense to reverse words and trim spaces at the \nsame time.\n\n![fig](../Figures/151/mutable2.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/628bbiFc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"628bbiFc\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$.\n\n* Space complexity: $$\\mathcal{O}(N)$$.\n<br /> \n<br />\n\n\n---\n#### Approach 3: Deque of Words\n\n![fig](../Figures/151/deque2.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/fnSejDt6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fnSejDt6\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$.\n\n* Space complexity: $$\\mathcal{O}(N)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "reverse-words-in-a-string",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.862,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "213",
                "title": "Reverse Words in a String II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": true,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "186",
                    "questionFrontendId": "186",
                    "sessionId": "968792",
                    "questionTitle": "Reverse Words in a String II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/reverse-words-in-a-string-ii/submit/",
                    "interpretUrl": "/problems/reverse-words-in-a-string-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void reverseWords(vector<char>& s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void reverseWords(char[] s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def reverseWords(self, s):\\n        \\\"\\\"\\\"\\n        :type s: List[str]\\n        :rtype: None Do not return anything, modify s in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def reverseWords(self, s: List[str]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify s in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid reverseWords(char* s, int sSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void ReverseWords(char[] s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[]} s\\n * @return {void} Do not return anything, modify s in-place instead.\\n */\\nvar reverseWords = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[]} s\\n# @return {Void} Do not return anything, modify s in-place instead.\\ndef reverse_words(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func reverseWords(_ s: inout [Character]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reverseWords(s []byte)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def reverseWords(s: Array[Char]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun reverseWords(s: CharArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn reverse_words(s: &mut Vec<char>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $s\\n     * @return NULL\\n     */\\n    function reverseWords(&$s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify s in-place instead.\\n */\\nfunction reverseWords(s: string[]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (reverse-words s)\\n  (-> (listof char?) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"reverseWords\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"character[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"output\": {\n    \"paramindex\": 0\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given a character array <code>s</code>, reverse the order of the <strong>words</strong>.</p>\n\n<p>A <strong>word</strong> is defined as a sequence of non-space characters. The <strong>words</strong> in <code>s</code> will be separated by a single space.</p>\n\n<p>Your code must solve the problem&nbsp;<strong>in-place,</strong> i.e. without allocating extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = [\"t\",\"h\",\"e\",\" \",\"s\",\"k\",\"y\",\" \",\"i\",\"s\",\" \",\"b\",\"l\",\"u\",\"e\"]\n<strong>Output:</strong> [\"b\",\"l\",\"u\",\"e\",\" \",\"i\",\"s\",\" \",\"s\",\"k\",\"y\",\" \",\"t\",\"h\",\"e\"]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = [\"a\"]\n<strong>Output:</strong> [\"a\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> is an English letter (uppercase or lowercase), digit, or space <code>&#39; &#39;</code>.</li>\n\t<li>There is <strong>at least one</strong> word in <code>s</code>.</li>\n\t<li><code>s</code> does not contain leading or trailing spaces.</li>\n\t<li>All the words in <code>s</code> are guaranteed to be separated by a single space.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Reverse Words in a String II",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Approach 1: Reverse the Whole String and Then Reverse Each Word\n\nTo have this problem in Amazon interview is a good situation, since input \nis a mutable structure and hence one could\naim $$\\mathcal{O}(1)$$ space solution without any technical difficulties.\n\n> The idea is simple: reverse the whole string and then reverse each word. \n\n![fig](../Figures/186/reverse.png)\n\n**Algorithm**\n\nLet's first implement two functions:\n\n- `reverse(l: list, left: int, right: int)`, which reverses array characters \nbetween left and right pointers. C++ users could directly use built-in `std::reverse`. \n\n- `reverse_each_word(l: list)`, which uses two pointers to mark the boundaries of\neach word and previous function to reverse it. \n\nNow `reverseWords(s: List[str])` implementation is straightforward:\n\n- Reverse the whole string: `reverse(s, 0, len(s) - 1)`.\n\n- Reverse each word: `reverse_each_word(s)`.\n\n**Implementation**\n\n!?!../Documents/186_LIS.json:1000,507!?!\n\n<iframe src=\"https://leetcode.com/playground/HFdrFcaZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"HFdrFcaZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$, it's two passes along the string.\n\n* Space complexity: $$\\mathcal{O}(1)$$, it's a constant space solution.\n<br /> \n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "reverse-words-in-a-string-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.556,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "179",
                "title": "Valid Parentheses",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "20",
                    "questionFrontendId": "20",
                    "sessionId": "968792",
                    "questionTitle": "Valid Parentheses",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/valid-parentheses/submit/",
                    "interpretUrl": "/problems/valid-parentheses/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isValid(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isValid(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isValid(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isValid(self, s: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isValid(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsValid(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {boolean}\\n */\\nvar isValid = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Boolean}\\ndef is_valid(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isValid(_ s: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isValid(s string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isValid(s: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isValid(s: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_valid(s: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Boolean\\n     */\\n    function isValid($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isValid(s: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-valid s)\\n  (-> string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\\nis_valid(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_valid(s :: String.t) :: boolean\\n  def is_valid(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"()\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isValid\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()[]{}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;([)]&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;{[]}&quot;\n<strong>Output:</strong> true\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n<pre>\r\n{ { } [ ] [ [ [ ] ] ] } is VALID expression\r\n          [ [ [ ] ] ]    is VALID sub-expression\r\n  { } [ ]                is VALID sub-expression\r\n</pre>\r\n\r\nCan we exploit this recursive structure somehow?",
                        "What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.\r\n\r\n<pre>\r\n{ { ( { } ) } }\r\n      |_|\r\n\r\n{ { (      ) } }\r\n    |______|\r\n\r\n{ {          } }\r\n  |__________|\r\n\r\n{                }\r\n|________________|\r\n\r\nVALID EXPRESSION!\r\n</pre>",
                        "The <b>stack</b> data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards."
                    ],
                    "solution": {
                        "title": "Valid Parentheses",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/557813247\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n---\r\n<br />\r\n\r\n**Intuition**\r\n\r\nImagine you are writing a small compiler for your college project and one of the tasks (or say sub-tasks) for the compiler would be to detect if the parenthesis are in place or not.\r\n\r\nThe algorithm we will look at in this article can be then used to process all the parenthesis in the program your compiler is compiling and checking if all the parenthesis are in place. This makes checking if a given string of parenthesis is valid or not, an important programming problem.\r\n\r\nThe expressions that we will deal with in this problem can consist of three different type of parenthesis:\r\n\r\n* `()`,\r\n* `{}` and\r\n* `[]`\r\n\r\nBefore looking at how we can check if a given expression consisting of these parenthesis is valid or not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So, the expressions we can encounter in this simplified version of the problem are e.g.\r\n\r\n<pre>\r\n(((((()))))) -- VALID\r\n\r\n()()()()     -- VALID\r\n\r\n(((((((()    -- INVALID\r\n\r\n((()(())))   -- VALID\r\n</pre>\r\n\r\nLet's look at a simple algorithm to deal with this problem.\r\n\r\n1. We process the expression one bracket at a time starting from the left.\r\n2. Suppose we encounter an opening bracket i.e. `(`, it may or may not be an invalid expression because there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we simply increment the counter keeping track of left parenthesis till now. `left += 1`\r\n3. If we encounter a closing bracket, this has two meanings:\r\n    1. One, there was no matching opening bracket for this closing bracket and in that case we have an invalid expression. This is the case when `left == 0` i.e. when there are no unmatched left brackets available.\r\n    2. We had `some unmatched` opening bracket available to match this closing bracket. This is the case when `left > 0` i.e. we have unmatched left brackets available.\r\n\r\n4. If we encounter a closing bracket i.e. `)` when `left == 0`, then we have an invalid expression on our hands. Else, we decrement `left` thus reducing the number of unmatched left parenthesis available.\r\n5. Continue processing the string until all parenthesis have been processed.\r\n6. If in the end we still have unmatched left parenthesis available, this implies an invalid expression.\r\n\r\nThe reason we discussed this particular algorithm here is because the approach for the original problem derives its inspiration from this very solution. Have a look at the following dry run of the algorithm we discussed to have a better understanding.\r\n\r\n!?!../Documents/20_Simple.json:1000,400!?!\r\n\r\nIf we try and follow the same approach for our original problem, then it simply won't work. The reason a simple counter based approach works above is because all the parenthesis are of the same type. So when we encounter a closing bracket, we simply assume a corresponding opening matching bracket to be available i.e. if `left > 0`.\r\n\r\nBut, in our problem, if we encounter say `]`, we don't really know if there is a corresponding opening `[` available or not. You could say:\r\n\r\n> Why not maintain a separate counter for the different types of parenthesis?\r\n\r\nThis doesn't work because the relative placement of the parenthesis also matters here. e.g.:\r\n\r\n<pre>\r\n[{]\r\n</pre>\r\n\r\nIf we simply keep counters here, then as soon as we encounter the closing square bracket, we would know there is an unmatched opening square bracket available as well. But, the **closest unmatched opening bracket available is a curly bracket and not a square bracket** and hence the counting approach breaks here.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 1: Stacks\r\n\r\nAn interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n<center>\r\n<img src=\"../Figures/20/20-Valid-Parentheses-Recursive-Property.png\" width=\"700\"></center>\r\n\r\nAlso, if you look at the above structure carefully, the color coded cells mark the opening and closing pairs of parenthesis. The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort of a recursive structure to the problem. For e.g. Consider the expression enclosed within the two green parenthesis in the diagram above. The opening bracket at index `1` and the corresponding closing bracket at index `6`.\r\n\r\n> What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression?\r\n\r\nLet's have a look at this idea below where remove the smaller expressions one at a time from the overall expression and since this is a valid expression, we would be left with an empty string in the end.\r\n\r\n!?!../Documents/20_Recursive.json:1000,400!?!\r\n\r\n> The stack data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards.\r\n\r\nLet us have a look at the algorithm for this problem using stacks as the intermediate data structure.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize a stack S.\r\n2. Process each bracket of the expression one at a time.\r\n3. If we encounter an opening bracket, we simply push it onto the stack. This means we will process it later, let us simply move onto the **sub-expression** ahead.\r\n4. If we encounter a closing bracket, then we check the element on top of the stack. If the element at the top of the stack is an opening bracket `of the same type`, then we pop it off the stack and continue processing. Else, this implies an invalid expression.\r\n5. In the end, if we are left with a stack still having elements, then this implies an invalid expression.\r\n\r\nWe'll have a look a dry run for the algorithm and then move onto the implementation.\r\n\r\n!?!../Documents/20_Stack.json:1000,560!?!\r\n\r\nLet us now have a look at the implementation for this algorithm.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ML6oK7bJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ML6oK7bJ\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$ because we simply traverse the given string one character at a time and push and pop operations on a stack take $$O(1)$$ time.\r\n* Space complexity : $$O(n)$$ as we push all opening brackets onto the stack and in the worst case, we will end up pushing all the brackets onto the stack. e.g. `((((((((((`.\r\n\r\n\r\n<br />\r\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "valid-parentheses",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.761,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "180",
                "title": "Longest Palindromic Substring",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "5",
                    "questionFrontendId": "5",
                    "sessionId": "968792",
                    "questionTitle": "Longest Palindromic Substring",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-palindromic-substring/submit/",
                    "interpretUrl": "/problems/longest-palindromic-substring/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string longestPalindrome(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String longestPalindrome(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def longestPalindrome(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def longestPalindrome(self, s: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * longestPalindrome(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string LongestPalindrome(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string}\\n */\\nvar longestPalindrome = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String}\\ndef longest_palindrome(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func longestPalindrome(_ s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestPalindrome(s string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def longestPalindrome(s: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun longestPalindrome(s: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn longest_palindrome(s: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String\\n     */\\n    function longestPalindrome($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function longestPalindrome(s: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (longest-palindrome s)\\n  (-> string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec longest_palindrome(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nlongest_palindrome(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec longest_palindrome(s :: String.t) :: String.t\\n  def longest_palindrome(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"babad\"",
                    "enableTestMode": false,
                    "metaData": "{ \n  \"name\": \"longestPalindrome\",\n  \"params\": [\n    { \n      \"name\": \"s\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, return&nbsp;<em>the longest palindromic substring</em> in <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;babad&quot;\n<strong>Output:</strong> &quot;bab&quot;\n<strong>Note:</strong> &quot;aba&quot; is also a valid answer.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbbd&quot;\n<strong>Output:</strong> &quot;bb&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ac&quot;\n<strong>Output:</strong> &quot;a&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consist of only digits and English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "How can we reuse a previously computed palindrome to compute a larger palindrome?",
                        "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
                        "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
                    ],
                    "solution": {
                        "title": "Longest Palindromic Substring",
                        "content": "[TOC]\n\n## Summary\nThis article is for intermediate readers. It introduces the following ideas:\nPalindrome, Dynamic Programming and String Manipulation. Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. For example, $$S$$ = \"aba\" is a palindrome, $$S$$ = \"abc\" is not.\n\n## Solution\n---\n#### Approach 1: Longest Common Substring\n\n**Common mistake**\n\nSome people will be tempted to come up with a quick solution, which is unfortunately flawed (however can be corrected easily):\n\n> Reverse $$S$$ and become $$S'$$. Find the longest common substring between $$S$$ and $$S'$$, which must also be the longest palindromic substring.\n\nThis seemed to work, let\u2019s see some examples below.\n\nFor example, $$S$$ = \"caba\", $$S'$$ = \"abac\".\n\nThe longest common substring between $$S$$ and $$S'$$ is \"aba\", which is the answer.\n\nLet\u2019s try another example: $$S$$ = \"abacdfgdcaba\", $$S'$$ = \"abacdgfdcaba\".\n\nThe longest common substring between $$S$$ and $$S'$$ is \"abacd\". Clearly, this is not a valid palindrome.\n\n**Algorithm**\n\nWe could see that the longest common substring method fails when there exists a reversed copy of a non-palindromic substring in some other part of $$S$$. To rectify this, each time we find a longest common substring candidate, we check if the substring\u2019s indices are the same as the reversed substring\u2019s original indices. If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.\n\nThis gives us an $$O(n^2)$$ Dynamic Programming solution which uses $$O(n^2)$$ space (could be improved to use $$O(n)$$ space). Please read more about Longest Common Substring [here](http://en.wikipedia.org/wiki/Longest_common_substring).\n<br />\n<br />\n\n---\n#### Approach 2: Brute Force\n\nThe obvious brute force solution is to pick all possible starting and ending positions for a substring, and verify if it is a palindrome.\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$.\nAssume that $$n$$ is the length of the input string, there are a total of $$\\binom{n}{2} = \\frac{n(n-1)}{2}$$ such substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes $$O(n)$$ time, the run time complexity is $$O(n^3)$$.\n\n* Space complexity : $$O(1)$$.\n<br />\n<br />\n\n---\n#### Approach 3: Dynamic Programming\n\nTo improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. Consider the case \"ababa\". If we already knew that \"bab\" is a palindrome, it is obvious that \"ababa\" must be a palindrome since the two left and right end letters are the same.\n\nWe define $$P(i,j)$$ as following:\n\n$$\nP(i,j) =\n     \\begin{cases}\n       \\text{true,} &\\quad\\text{if the substring } S_i \\dots S_j \\text{ is a palindrome}\\\\\n       \\text{false,} &\\quad\\text{otherwise.} \\\n     \\end{cases}\n$$\n\nTherefore,\n\n$$\nP(i, j) = ( P(i+1, j-1) \\text{ and } S_i == S_j )\n$$\n\nThe base cases are:\n\n$$\nP(i, i) = true\n$$\n\n$$\nP(i, i+1) = ( S_i == S_{i+1} )\n$$\n\nThis yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$.\nThis gives us a runtime complexity of $$O(n^2)$$.\n\n* Space complexity : $$O(n^2)$$.\nIt uses $$O(n^2)$$ space to store the table.\n\n**Additional Exercise**\n\nCould you improve the above space complexity further and how?\n<br />\n<br />\n\n---\n#### Approach 4: Expand Around Center\n\nIn fact, we could solve it in $$O(n^2)$$ time using only constant space.\n\nWe observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only $$2n - 1$$ such centers.\n\nYou might be asking why there are $$2n - 1$$ but not $$n$$ centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as \"abba\") and its center are between the two 'b's.\n\n<iframe src=\"https://leetcode.com/playground/D5gn4CJn/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"D5gn4CJn\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$.\nSince expanding a palindrome around its center could take $$O(n)$$ time, the overall complexity is $$O(n^2)$$.\n\n* Space complexity : $$O(1)$$.\n<br />\n<br />\n---\n\n#### Approach 5: Manacher's Algorithm\n\nThere is even an $$O(n)$$ algorithm called Manacher's algorithm, explained [here in detail](https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm).\nHowever, it is a non-trivial algorithm, and no one expects you to come up with this algorithm in a 45 minutes coding session. But, please go ahead and understand it, I promise it will be a lot of fun.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "longest-palindromic-substring",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.394,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "200",
                "title": "Group Anagrams",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "49",
                    "questionFrontendId": "49",
                    "sessionId": "968792",
                    "questionTitle": "Group Anagrams",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/group-anagrams/submit/",
                    "interpretUrl": "/problems/group-anagrams/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def groupAnagrams(self, strs):\\n        \\\"\\\"\\\"\\n        :type strs: List[str]\\n        :rtype: List[List[str]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nchar *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} strs\\n * @return {string[][]}\\n */\\nvar groupAnagrams = function(strs) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} strs\\n# @return {String[][]}\\ndef group_anagrams(strs)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func groupAnagrams(strs []string) [][]string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $strs\\n     * @return String[][]\\n     */\\n    function groupAnagrams($strs) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function groupAnagrams(strs: string[]): string[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (group-anagrams strs)\\n  (-> (listof string?) (listof (listof string?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\\ngroup_anagrams(Strs) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\\n  def group_anagrams(strs) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"groupAnagrams\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"strs\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Group Anagrams",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n     <div class=\"video-container\">\n         <iframe src=\"https://player.vimeo.com/video/548141577?texttrack=en\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n     </div>\n </div>\n\n <div>&nbsp;\n </div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Categorize by Sorted String\n\n**Intuition**\n\nTwo strings are anagrams if and only if their sorted strings are equal.\n\n**Algorithm**\n\nMaintain a map `ans : {String -> List}` where each key $$\\text{K}$$ is a sorted string, and each value is the list of strings from the initial input that when sorted, are equal to $$\\text{K}$$.\n\nIn Java, we will store the key as a string, eg. `code`.  In Python, we will store the key as a hashable tuple, eg. `('c', 'o', 'd', 'e')`.\n\n![Anagrams](../Figures/49_groupanagrams1.png)\n\n<iframe src=\"https://leetcode.com/playground/NGc8spVj/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"NGc8spVj\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK \\log K)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  The outer loop has complexity $$O(N)$$ as we iterate through each string.  Then, we sort each string in $$O(K \\log K)$$ time.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.\n<br />\n<br />\n---\n#### Approach 2: Categorize by Count\n\n**Intuition**\n\nTwo strings are anagrams if and only if their character counts (respective number of occurrences of each character) are the same.\n\n**Algorithm**\n\nWe can transform each string $$\\text{s}$$ into a character count, $$\\text{count}$$, consisting of 26 non-negative integers representing the number of $$\\text{a}$$'s, $$\\text{b}$$'s, $$\\text{c}$$'s, etc.  We use these counts as the basis for our hash map.\n\nIn Java, the hashable representation of our count will be a string delimited with '**#**' characters.  For example, `abbccc` will be `#1#2#3#0#0#0...#0` where there are 26 entries total.  In python, the representation will be a tuple of the counts.  For example, `abbccc` will be `(1, 2, 3, 0, 0, ..., 0)`, where again there are 26 entries total.\n\n![Anagrams](../Figures/49_groupanagrams2.png)\n\n<iframe src=\"https://leetcode.com/playground/o64x8Vq4/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"o64x8Vq4\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  Counting each string is linear in the size of the string, and we count every string.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "group-anagrams",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.893,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "211",
                "title": "Trapping Rain Water",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "42",
                    "questionFrontendId": "42",
                    "sessionId": "968792",
                    "questionTitle": "Trapping Rain Water",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/trapping-rain-water/submit/",
                    "interpretUrl": "/problems/trapping-rain-water/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int trap(vector<int>& height) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int trap(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def trap(self, height):\\n        \\\"\\\"\\\"\\n        :type height: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def trap(self, height: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint trap(int* height, int heightSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Trap(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} height\\n * @return {number}\\n */\\nvar trap = function(height) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} height\\n# @return {Integer}\\ndef trap(height)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func trap(_ height: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func trap(height []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def trap(height: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun trap(height: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn trap(height: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $height\\n     * @return Integer\\n     */\\n    function trap($height) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function trap(height: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (trap height)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec trap(Height :: [integer()]) -> integer().\\ntrap(Height) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec trap(height :: [integer]) :: integer\\n  def trap(height) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[0,1,0,2,1,0,1,3,2,1,2,1]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"trap\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"height\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Trapping Rain Water",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute force\n\n**Intuition**\n\nDo as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.\n\n**Algorithm**\n\n* Initialize $$ans=0$$\n* Iterate the array from left to right:\n  + Initialize $$\\text{left\\_max}=0$$ and $$\\text{right\\_max}=0$$\n  + Iterate from the current element to the beginning of array updating:\n    * $$\\text{left\\_max}=\\max(\\text{left\\_max},\\text{height}[j])$$\n  + Iterate from the current element to the end of array updating:\n    * $$\\text{right\\_max}=\\max(\\text{right\\_max},\\text{height}[j])$$\n  + Add $$\\min(\\text{left\\_max},\\text{right\\_max}) - \\text{height}[i]$$ to $$\\text{ans}$$\n\n<iframe src=\"https://leetcode.com/playground/LnVLgsz6/shared\" frameBorder=\"0\" width=\"100%\" height=\"0\" name=\"LnVLgsz6\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n^2)$$. For each element of array, we iterate the left and right parts.\n\n* Space complexity: $$O(1)$$ extra space.\n<br />\n<br />\n---\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nIn brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.\n\nThe concept is illustrated as shown:\n\n![Dynamic programming](../Figures/42/trapping_rain_water.png){:width=\"500px\"}\n{:align=\"center\"}\n\n**Algorithm**\n\n* Find maximum height of bar from the left end upto an index i in the array $$\\text{left\\_max}$$.\n* Find maximum height of bar from the right end upto an index i in the array $$\\text{right\\_max}$$.\n* Iterate over the $$\\text{height}$$ array and update ans:\n    + Add $$\\min(\\text{left\\_max}[i],\\text{right\\_max}[i]) - \\text{height}[i]$$ to $$\\text{ans}$$\n\n<iframe src=\"https://leetcode.com/playground/kyjATewE/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"kyjATewE\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$.\n    + We store the maximum heights upto a point using 2 iterations of $$O(n)$$ each.\n    + We finally update $$\\text{ans}$$ using the stored values in $$O(n)$$.\n\n* Space complexity: $$O(n)$$ extra space.\n    + Additional $$O(n)$$ space for $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$ arrays than in [Approach 1](#approach-1-brute-force).\n<br />\n<br />\n---\n#### Approach 3: Using stacks\n\n**Intuition**\n\nInstead of storing the largest bar upto an index as in [Approach 2](#approach-2-dynamic-programming), we can use stack to keep track of the bars that are bounded by longer bars and hence, may store water. Using the stack, we can do the calculations in only one iteration.\n\nWe keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting trapped water to $$\\text{ans}$$.\n\n**Algorithm**\n\n* Use stack to store the indices of the bars.\n* Iterate the array:\n    + While stack is not empty and $$\\text{height[current]}>\\text{height[st.top()]}$$\n        * It means that the stack element can be popped. Pop the top element as $$\\text{top}$$.\n        * Find the distance between the current element and the element at top of stack, which is to be filled.\n        $$\\text{distance} = \\text{current} - \\text{st.top}() - 1$$\n        * Find the bounded height\n        $$\\text{bounded\\_height} = \\min(\\text{height[current]}, \\text{height[st.top()]}) - \\text{height[top]}$$\n        * Add resulting trapped water to answer $$\\text{ans} \\mathrel{+}= \\text{distance} \\times \\text{bounded\\_height}$$\n    + Push current index to top of the stack\n    + Move $$\\text{current}$$ to the next position\n\n\n<iframe src=\"https://leetcode.com/playground/HcnNncFu/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"HcnNncFu\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$.\n    + Single iteration of $$O(n)$$ in which each bar can be touched at most twice(due to  insertion and deletion from stack) and insertion and deletion from stack takes $$O(1)$$ time.\n* Space complexity: $$O(n)$$. Stack can take upto $$O(n)$$ space in case of stairs-like or flat structure.\n<br />\n<br />\n\n---\n#### Approach 4: Using 2 pointers\n\n**Intuition**\n\nAs in [Approach 2](#approach-2-dynamic-programming), instead of computing the left and right parts seperately, we may think of some way to do it in one iteration.\nFrom the figure in dynamic programming approach, notice that as long as $$\\text{right\\_max}[i]>\\text{left\\_max}[i]$$ (from element 0 to 6), the water trapped depends upon the left_max, and similar is the case when $$\\text{left\\_max}[i]>\\text{right\\_max}[i]$$ (from element 8 to 11).\nSo, we can say that if there is a larger bar at one end (say right), we are assured that the water trapped would be dependant on height of bar in current direction (from left to right). As soon as we find the bar at other end (right) is smaller, we start iterating in opposite direction (from right to left).\nWe must maintain $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$ during the iteration, but now we can do it in one iteration using 2 pointers, switching between the two.\n\n**Algorithm**\n\n* Initialize $$\\text{left}$$ pointer to 0 and $$\\text{right}$$ pointer to size-1\n* While $$\\text{left}< \\text{right}$$, do:\n    + If $$\\text{height[left]}$$ is smaller than $$\\text{height[right]}$$\n        * If $$\\text{height[left]} \\geq \\text{left\\_max}$$, update $$\\text{left\\_max}$$\n        * Else add $$\\text{left\\_max}-\\text{height[left]}$$ to $$\\text{ans}$$\n        * Add 1 to $$\\text{left}$$.\n    + Else\n        * If $$\\text{height[right]} \\geq \\text{right\\_max}$$, update $$\\text{right\\_max}$$\n        * Else add $$\\text{right\\_max}-\\text{height[right]}$$ to $$\\text{ans}$$\n        * Subtract 1 from $$\\text{right}$$.\n\nRefer the example for better understanding:\n!?!../Documents/42/42_trapping_rain_water.json:1000,662!?!\n\n<iframe src=\"https://leetcode.com/playground/ak9pRdLp/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"ak9pRdLp\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$. Single iteration of $$O(n)$$.\n* Space complexity: $$O(1)$$ extra space. Only constant space required for $$\\text{left}$$, $$\\text{right}$$, $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "trapping-rain-water",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.671,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "203",
                "title": "Set Matrix Zeroes",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "73",
                    "questionFrontendId": "73",
                    "sessionId": "968792",
                    "questionTitle": "Set Matrix Zeroes",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/set-matrix-zeroes/submit/",
                    "interpretUrl": "/problems/set-matrix-zeroes/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void setZeroes(vector<vector<int>>& matrix) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void setZeroes(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def setZeroes(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :rtype: None Do not return anything, modify matrix in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def setZeroes(self, matrix: List[List[int]]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid setZeroes(int** matrix, int matrixSize, int* matrixColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void SetZeroes(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @return {void} Do not return anything, modify matrix in-place instead.\\n */\\nvar setZeroes = function(matrix) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @return {Void} Do not return anything, modify matrix in-place instead.\\ndef set_zeroes(matrix)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func setZeroes(_ matrix: inout [[Int]]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func setZeroes(matrix [][]int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def setZeroes(matrix: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun setZeroes(matrix: Array<IntArray>): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn set_zeroes(matrix: &mut Vec<Vec<i32>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @return NULL\\n     */\\n    function setZeroes(&$matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify matrix in-place instead.\\n */\\nfunction setZeroes(matrix: number[][]): void {\\n\\n};\"}]",
                    "sampleTestCase": "[[1,1,1],[1,0,1],[1,1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"setZeroes\",\n  \"params\": [\n    {\n      \"name\": \"matrix\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"output\": {\n    \"paramindex\": 0\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given an <code>m x n</code> integer matrix <code>matrix</code>, if an element is <code>0</code>, set its entire row and column to <code>0</code>&#39;s, and return <em>the matrix</em>.</p>\n\n<p>You must do it <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in place</a>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg\" style=\"width: 450px; height: 169px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,1,1],[1,0,1],[1,1,1]]\n<strong>Output:</strong> [[1,0,1],[0,0,0],[1,0,1]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg\" style=\"width: 450px; height: 137px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n<strong>Output:</strong> [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[0].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>A straightforward solution using <code>O(mn)</code> space is probably a bad idea.</li>\n\t<li>A simple improvement uses <code>O(m + n)</code> space, but still not the best solution.</li>\n\t<li>Could you devise a constant space solution?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
                        "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space.",
                        "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
                        "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
                    ],
                    "solution": {
                        "title": "Set Matrix Zeroes",
                        "content": "[TOC]\n\n## Solution\n---\n\nThe question seems to be pretty simple but the trick here is that we need to modify the given matrix in place i.e. our space complexity needs to $$O(1)$$.\n\nWe will go through two different approaches to the question. The first approach makes use of additional memory while the other does not.\n<br/>\n<br/>\n\n---\n\n#### Approach 1: Additional Memory Approach\n\n**Intuition**\n\nIf any cell of the matrix has a zero we can record its row and column number. All the cells of this recorded row and column can be marked zero in the next iteration.\n\n**Algorithm**\n\n1. We make a pass over our original array and look for zero entries.\n2. If we find that an entry at `[i, j]` is 0, then we need to record somewhere the row `i` and column `j`.\n3. So, we use two `sets`, one for the rows and one for the columns.\n    <pre>\n    if cell[i][j] == 0 {\n        row_set.add(i)\n        column_set.add(j)\n    }</pre>\n\n4. Finally, we iterate over the original matrix. For every cell we check if the row `r` or column `c` had been marked earlier. If any of them was marked, we set the value in the cell to 0.\n    <pre>\n    if r in row_set or c in column_set {\n        cell[r][c] = 0\n    }</pre>\n\n<iframe src=\"https://leetcode.com/playground/ahbkEVZb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ahbkEVZb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(M \\times N)$$ where M and N are the number of rows and columns respectively.\n\n* Space Complexity: $$O(M + N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: O(1) Space, Efficient Solution\n\n**Intuition**\n\nRather than using additional variables to keep track of rows and columns to be reset, we use the matrix itself as the *indicators*.\n\n> The idea is that we can use the **first cell** of every row and column as a **flag**. This flag would determine whether a row or column has been set to zero. This means for every cell instead of going to $$M+N$$ cells and setting it to zero we just set the flag in two cells.\n\n<pre>\nif cell[i][j] == 0 {\n    cell[i][0] = 0\n    cell[0][j] = 0\n}\n</pre>\n\n These flags are used later to update the matrix. If the first cell of a row is set to zero this means the row should be marked zero. If the first cell of a column is set to zero this means the column should be marked zero.\n\n**Algorithm**\n\n1. We iterate over the matrix and we mark the first cell of a row `i` and first cell of a column `j`, if the condition in the pseudo code above is satisfied. i.e. if `cell[i][j] == 0`.\n\n2. The first cell of row and column for the first row and first column is the same i.e. `cell[0][0]`. Hence, we use an additional variable to tell us if the first column had been marked or not and the `cell[0][0]` would be used to tell the same for the first row.\n\n3. Now, we iterate over the original matrix starting from second row and second column i.e. `matrix[1][1]` onwards. For every cell we check if the row `r` or column `c` had been marked earlier by checking the respective first row cell or first column cell. If any of them was marked, we set the value in the cell to 0. Note the first row and first column serve as the `row_set` and `column_set` that we used in the first approach.\n\n5. We then check if `cell[0][0] == 0`, if this is the case, we mark the first row as zero.\n\n6. And finally, we check if the first column was marked, we make all entries in it as zeros.\n\n!?!../Documents/73_Matrix_Zeroes.json:1000,400!?!\n\nIn the above animation we iterate all the cells and mark the corresponding first row/column cell incase of a cell with zero value.\n\n<center>\n<img src=\"../Figures/73/MatrixZeros_18_1.png\" width=\"400\"/>\n</center>\n\nWe iterate the matrix we got from the above steps and mark respective cells zeroes.\n\n<center>\n<img src=\"../Figures/73/MatrixZeros_18_2.png\" width=\"400\"/>\n</center>\n\n<br>\n\n<iframe src=\"https://leetcode.com/playground/WnHaFEGY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"WnHaFEGY\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(M \\times N)$$\n* Space Complexity : $$O(1)$$",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "set-matrix-zeroes",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.378,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "202",
                "title": "Rotate Image",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "48",
                    "questionFrontendId": "48",
                    "sessionId": "968792",
                    "questionTitle": "Rotate Image",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/rotate-image/submit/",
                    "interpretUrl": "/problems/rotate-image/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void rotate(vector<vector<int>>& matrix) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void rotate(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def rotate(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :rtype: None Do not return anything, modify matrix in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def rotate(self, matrix: List[List[int]]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify matrix in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid rotate(int** matrix, int matrixSize, int* matrixColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void Rotate(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @return {void} Do not return anything, modify matrix in-place instead.\\n */\\nvar rotate = function(matrix) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @return {Void} Do not return anything, modify matrix in-place instead.\\ndef rotate(matrix)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func rotate(_ matrix: inout [[Int]]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func rotate(matrix [][]int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def rotate(matrix: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun rotate(matrix: Array<IntArray>): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn rotate(matrix: &mut Vec<Vec<i32>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @return NULL\\n     */\\n    function rotate(&$matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify matrix in-place instead.\\n */\\nfunction rotate(matrix: number[][]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (rotate matrix)\\n  (-> (listof (listof exact-integer?)) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"rotate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>You are given an <code>n x n</code> 2D <code>matrix</code> representing an image, rotate the image by <strong>90</strong> degrees (clockwise).</p>\n\n<p>You have to rotate the image <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg\" style=\"width: 642px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [[7,4,1],[8,5,2],[9,6,3]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg\" style=\"width: 800px; height: 321px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n<strong>Output:</strong> [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,2],[3,4]]\n<strong>Output:</strong> [[3,1],[4,2]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>matrix.length == n</code></li>\n\t<li><code>matrix[i].length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 20</code></li>\n\t<li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Rotate Image",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Rotate Groups of Four Cells\n\n**Intuition**\n\nObserve how the cells move in groups when we rotate the image.\n\n![The corners all move](../Figures/48/48_angles.png)\n\nWe can iterate over each group of four cells and rotate them.\n\n**Implementation**\n\nHere is a visualization of the algorithm in action.\n\n<div class=\"video-container\">\n    <iframe src=\"https://player.vimeo.com/video/484247719\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n</div>\n\n<iframe src=\"https://leetcode.com/playground/3LPx7G7X/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"3LPx7G7X\"></iframe>\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of cells in the matrix.\n\n* Time complexity : $$\\mathcal{O}(M)$$, as each cell is getting read once and written once.\n\n* Space complexity : $$\\mathcal{O}(1)$$ because we do not use any other additional data structures.\n\n<br/>\n\n---\n\n\n#### Approach 2: Reverse on Diagonal and then Reverse Left to Right\n\n**Intuition**\n\nThe most elegant solution for rotating the matrix is to firstly reverse the matrix around the main diagonal, and then reverse it from left to right. These operations are called **transpose** and **reflect** in linear algebra.\n\nHere is a visualization to help you see why this works.\n\n<div class=\"video-container\">\n    <iframe src=\"https://player.vimeo.com/video/484247738\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n</div>\n\n\n> **Bonus Question:** What would happen if you reflect and *then* transpose? Would you still get the correct answer?\n\nEven though this approach does twice as many reads and writes as approach 1, most people would consider it a better approach because the code is simpler, and it is built with standard matrix operations that can be found in any matrix library.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/6umixAPn/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6umixAPn\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of cells in the grid.\n\n* Time complexity : $$\\mathcal{O}(M)$$. We perform two steps; transposing the matrix, and then reversing each row. Transposing the matrix has a cost of $$\\mathcal{O}(M)$$ because we're moving the value of each cell once. Reversing each row also has a cost of $$\\mathcal{O}(M)$$, because again we're moving the value of each cell once.\n\n* Space complexity : $$\\mathcal{O}(1)$$ because we do not use any other additional data structures.\n\n<br/>\n\n> **Bonus Question:** If you're not too confident with matrices and linear algebra, get some more practice by also coding a method that transposes the matrix on the *other* diagonal, and another that reflects from top to bottom. You can test your functions by printing out the matrix before and after each operation. Finally, use your functions to find *three more solutions to this problem*. Each solution uses two matrix operations.\n\n<br/>\n\n> **Interview Tip**: Terrified of being asked this question in an interview? Many people are: it can be intimidating due to the fiddly logic. Unfortunately, if you do a lot of interviewing, the probability of seeing it at least once is high, and some people have claimed to have seen it multiple times! This is one of the few questions where I recommend practicing until you can confidently code it and explain it without thinking too much.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "rotate-image",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.767,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "178",
                "title": "Spiral Matrix",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 30,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "54",
                    "questionFrontendId": "54",
                    "sessionId": "968792",
                    "questionTitle": "Spiral Matrix",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/spiral-matrix/submit/",
                    "interpretUrl": "/problems/spiral-matrix/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<Integer> spiralOrder(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def spiralOrder(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<int> SpiralOrder(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @return {number[]}\\n */\\nvar spiralOrder = function(matrix) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @return {Integer[]}\\ndef spiral_order(matrix)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func spiralOrder(matrix [][]int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @return Integer[]\\n     */\\n    function spiralOrder($matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function spiralOrder(matrix: number[][]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (spiral-order matrix)\\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\\nspiral_order(Matrix) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\\n  def spiral_order(matrix) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"spiralOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"size\": \"size_1 * col_size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
                        "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column and then we move inwards by 1 and then repeat. That's all, that is all the simulation that we need.",
                        "Think about when you want to switch the progress on one of the indexes. If you progress on <pre>i</pre> out of <pre>[i, j]</pre>, you'd be shifting in the same column. Similarly, by changing values for <pre>j</pre>, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to run the simulation on edge cases like a single column or a single row to see if anything breaks or not."
                    ],
                    "solution": {
                        "title": "Spiral Matrix",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nThe problem statement asks us to _return all elements of the `matrix` in spiral order_, which means we will start from the top left corner and move towards right, then down, then left, and then up. Let's break this into further details:\n1. We can achieve moving in different directions by modifying row and column indices. Specifically, we have:\n\n```plain\nGiven that we are at (row, col), where row is the row index, and col is the column index.\n\nmove right: (row, col + 1)\nmove downwards: (row + 1, col)\nmove left: (row, col - 1)\nmove upwards: (row - 1, col)\n```\n2. When shall we change our direction? We need to turn when we either _reach the matrix boundaries_, or we _reach the cells in the array that we have visited before_. Matrix boundaries are fixed and provided already, but how could we know if we have visited a particular cell or not?\nIn fact, we have two different strategies and they will be introduced in the following approaches. Generally speaking, they are as follows:\n   - Approach 1. We can move the boundaries towards the center of the matrix after we have traversed a row or a column. Then when we meet a boundary, we know it's time to change the direction and update the boundary.\n   - Approach 2. While traversing the matrix, we can record each location that we have visited. Then when we meet a matrix boundary or a previously visited cell, we know it's time to change the direction.\n\n> This is a good time to stop and see if you can come up with the implementations yourselves!\n\n</br>\n\n---\n\n#### Approach 1: Set Up Boundaries\n\n**Intuition**\n\nOur goal is to update boundaries as follows: when we finish traversing a row or column, we want to set up a boundary on it so that next time we get there, we know we need to change the direction. Here is a demo for the first round of updating the top, right, bottom, and left boundaries.\n\n!?!../Documents/54_spiral_matrix.json:1920,1080!?!\n\n\n</br>\n\n\n**Algorithm**\n\n1. Initialize the top, right, bottom, and left boundaries as `up`, `right`, `down`, and `left`.\n2. Initialize the output array `result`.\n3. Traverse the elements in spiral order and add each element to `result`:\n    - Traverse from `left` boundary to `right` boundary.\n    - Traverse from `up` boundary to `down` boundary.\n    - Before we traverse from right to left, we need to make sure that we are not on a row that has already been traversed. If we are not, then we can traverse from `right` to `left`.\n    - Similarly, before we traverse from top to bottom, we need to make sure that we are not on a column that has already been traversed. Then we can traverse from `down` to `up`.\n    - Remember to move the boundaries by updating `left`, `right`, `up`, and `down` accordingly.\n4. Return `result`.\n\n<iframe src=\"https://leetcode.com/playground/Zi2NiW6U/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Zi2NiW6U\"></iframe>\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of rows and $$N$$ be the number of columns.\n\n* Time complexity: $$O(M \\cdot N)$$. This is because we visit each element once.\n\n* Space complexity: $$O(1)$$. This is because we don't use other data structures. Remember that we don't include the output array in the space complexity.\n\n\n<br/>\n\n---\n\n#### Approach 2: Mark Visited Elements\n\n**Intuition**\n\nIf we mark the cells that we have visited, then when we run into a visited cell, we know we need to turn.\n\n> How do we know which direction we need to turn to? Well, we are always following this loop: right, down, left, up, right again, and so on. Therefore, when we run into a cell that we have visited, we can simply turn to the next direction in the aforementioned loop.\n\nNote that elements in the matrix are constrained to `-100 <= matrix[row][col] <= 100`, therefore we can select a number that is out of this range to mark it. In this article, `101` is selected for marking purposes.\n\n> Modifying the original data may not be a good choice sometimes. Therefore, we can also prepare another boolean matrix to store the cells we visited. However, the implementation of this approach is quite similar. You are welcome to explore this implementation as an exercise.\n\nThe last puzzle piece is when shall we stop. An interesting observation is that if we reach the visited cell, we need to turn.  However, when we meet another visited cell immediately after changing the direction, it means we reached the last element in the matrix. You'll see that an integer `changeDirection` is used to track the number of times we changed the direction consecutively.\n\n**Algorithm**\n\n- Initializations:\n    - Initialize a 2D array `directions ` to represent the four directions that we will move.\n    - Initialize `currentDirection` to 0 to signify that we are moving right at the beginning.\n    - Initialize `VISITED` to 101 to mark visited cells.\n    - Initialize `changeDirection` to 0.\n    - Initialize `row` and `col` to 0 since our initial position is `(0, 0)`.\n- We follow the current direction until we reach the matrix boundaries or a visited cell.\n    - While traversing in the current direction, remember to reset `changeDirection` to 0 at every step.\n    - Move to the next cell by updating the row and column indices.\n    - Append the element to the result and mark the location as visited.\n- Update the direction and `changeDirection`. If `changeDirection` is larger than 1, it means we are continuously changing our directions, and therefore we've visited all of the elements.\n\n<iframe src=\"https://leetcode.com/playground/VyCCgRAL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"VyCCgRAL\"></iframe>\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of rows and $$N$$ be the number of columns.\n\n* Time complexity: $$O(M \\cdot N)$$. This is because we visit each element once.\n\n* Space complexity: $$O(1)$$. This is because we don't use other data structures. Remember that we don't consider the output array or the input matrix when calculating the space complexity. However, if we were prohibited from mutating the input matrix, then this would be an $$O(M \\cdot N)$$ space solution.  This is because we would need to use a boolean matrix to track all of the previously seen cells.\n\n\n<br/>\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "spiral-matrix",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.2,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Microsoft likes to ask simple array questions. Reverse Words in a String is one the popular questions. Get warmed up by practicing Reverse String first."
    },
    {
        "id": "32",
        "title": "Linked Lists",
        "slug": "linked-list",
        "items": [
            {
                "id": "169",
                "title": "Reverse Linked List",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "206",
                    "questionFrontendId": "206",
                    "sessionId": "968792",
                    "questionTitle": "Reverse Linked List",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/reverse-linked-list/submit/",
                    "interpretUrl": "/problems/reverse-linked-list/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* reverseList(ListNode* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode reverseList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def reverseList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* reverseList(struct ListNode* head){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode ReverseList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar reverseList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} head\\n# @return {ListNode}\\ndef reverse_list(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func reverseList(_ head: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc reverseList(head *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def reverseList(head: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun reverseList(head: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn reverse_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $head\\n     * @return ListNode\\n     */\\n    function reverseList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction reverseList(head: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (reverse-list head)\\n  (-> (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec reverse_list(Head :: #list_node{} | null) -> #list_node{} | null.\\nreverse_list(Head) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec reverse_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def reverse_list(head) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"reverseList\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" style=\"width: 542px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [5,4,3,2,1]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" style=\"width: 182px; height: 222px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is the range <code>[0, 5000]</code>.</li>\n\t<li><code>-5000 &lt;= Node.val &lt;= 5000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Reverse Linked List",
                        "content": "[TOC]\r\n\r\n## Solution\r\n---\r\n#### Approach #1 (Iterative) [Accepted]\r\n\r\nAssume that we have linked list `1 \u2192 2 \u2192 3 \u2192 \u00d8`, we would like to change it to `\u00d8 \u2190 1 \u2190 2 \u2190 3`.\r\n\r\nWhile you are traversing the list, change the current node's next pointer to point to its previous element. Since a node does not have reference to its previous node, you must store its previous element beforehand. You also need another pointer to store the next node before changing the reference. Do not forget to return the new head reference at the end!\r\n\r\n```java\r\npublic ListNode reverseList(ListNode head) {\r\n    ListNode prev = null;\r\n    ListNode curr = head;\r\n    while (curr != null) {\r\n        ListNode nextTemp = curr.next;\r\n        curr.next = prev;\r\n        prev = curr;\r\n        curr = nextTemp;\r\n    }\r\n    return prev;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$.\r\nAssume that $$n$$ is the list's length, the time complexity is $$O(n)$$.\r\n\r\n* Space complexity : $$O(1)$$.\r\n\r\n---\r\n#### Approach #2 (Recursive) [Accepted]\r\n\r\nThe recursive version is slightly trickier and the key is to work backwards. Assume that the rest of the list had already been reversed, now how do I reverse the front part? Let's assume the list is: n<sub>1</sub> \u2192 \u2026 \u2192 n<sub>k-1</sub> \u2192 n<sub>k</sub> \u2192 n<sub>k+1</sub> \u2192 \u2026 \u2192 n<sub>m</sub> \u2192 \u00d8\r\n\r\nAssume from node n<sub>k+1</sub> to n<sub>m</sub> had been reversed and you are at node n<sub>k</sub>.\r\n\r\nn<sub>1</sub> \u2192 \u2026 \u2192 n<sub>k-1</sub> \u2192 <b>n<sub>k</sub></b> \u2192 n<sub>k+1</sub> \u2190 \u2026 \u2190 n<sub>m</sub>\r\n\r\nWe want n<sub>k+1</sub>\u2019s next node to point to n<sub>k</sub>.\r\n\r\nSo,\r\n\r\nn<sub>k</sub>.next.next = n<sub>k</sub>;\r\n\r\nBe very careful that n<sub>1</sub>'s next must point to \u00d8. If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.\r\n\r\n\r\n```java\r\npublic ListNode reverseList(ListNode head) {\r\n    if (head == null || head.next == null) return head;\r\n    ListNode p = reverseList(head.next);\r\n    head.next.next = head;\r\n    head.next = null;\r\n    return p;\r\n}\r\n```\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(n)$$.\r\nAssume that $$n$$ is the list's length, the time complexity is $$O(n)$$.\r\n\r\n* Space complexity : $$O(n)$$.\r\nThe extra space comes from implicit stack space due to recursion. The recursion could go up to $$n$$ levels deep.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "reverse-linked-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.639,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "184",
                "title": "Linked List Cycle",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "141",
                    "questionFrontendId": "141",
                    "sessionId": "968792",
                    "questionTitle": "Linked List Cycle",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/linked-list-cycle/submit/",
                    "interpretUrl": "/problems/linked-list-cycle/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool hasCycle(ListNode *head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) {\\n *         val = x;\\n *         next = null;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public boolean hasCycle(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def hasCycle(self, head):\\n        \\\"\\\"\\\"\\n        :type head: ListNode\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def hasCycle(self, head: ListNode) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nbool hasCycle(struct ListNode *head) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int x) {\\n *         val = x;\\n *         next = null;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public bool HasCycle(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n\\n/**\\n * @param {ListNode} head\\n * @return {boolean}\\n */\\nvar hasCycle = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @next = nil\\n#     end\\n# end\\n\\n# @param {ListNode} head\\n# @return {Boolean}\\ndef hasCycle(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.next = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func hasCycle(_ head: ListNode?) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc hasCycle(head *ListNode) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def hasCycle(head: ListNode): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun hasCycle(head: ListNode?): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val) { $this->val = $val; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param ListNode $head\\n     * @return Boolean\\n     */\\n    function hasCycle($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction hasCycle(head: ListNode | null): boolean {\\n    \\n};\"}]",
                    "sampleTestCase": "[3,2,0,-4]\n1",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"hasCycle\",\n  \"params\": [\n    {\n      \"name\": \"head\",\n      \"type\": \"ListNode\"\n    },\n    {\n      \"name\": \"pos\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"manual\": true,\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"c\",\n    \"csharp\",\n    \"javascript\",\n    \"ruby\",\n    \"swift\",\n    \"golang\",\n    \"python3\",\n    \"scala\",\n    \"kotlin\",\n    \"php\",\n    \"typescript\"\n  ]\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given <code>head</code>, the head of a linked list, determine if the linked list has a cycle in it.</p>\n\n<p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the&nbsp;<code>next</code>&nbsp;pointer. Internally, <code>pos</code>&nbsp;is used to denote the index of the node that&nbsp;tail&#39;s&nbsp;<code>next</code>&nbsp;pointer is connected to.&nbsp;<strong>Note that&nbsp;<code>pos</code>&nbsp;is not passed as a parameter</strong>.</p>\n\n<p>Return&nbsp;<code>true</code><em> if there is a cycle in the linked list</em>. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" />\n<pre>\n<strong>Input:</strong> head = [3,2,0,-4], pos = 1\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" />\n<pre>\n<strong>Input:</strong> head = [1,2], pos = 0\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There is a cycle in the linked list, where the tail connects to the 0th node.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" />\n<pre>\n<strong>Input:</strong> head = [1], pos = -1\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There is no cycle in the linked list.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of the nodes in the list is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pos</code> is <code>-1</code> or a <strong>valid index</strong> in the linked-list.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Can you solve it using <code>O(1)</code> (i.e. constant) memory?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Linked List Cycle",
                        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/507323181\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n</br>\n\n---\n\n## Solution Article\n\nThis article is for beginners. It introduces the following ideas: Linked List, Hash Table and Two Pointers.\n\n</br>\n\n---\n\n#### Approach 1: Hash Table\n\n**Intuition**\n\nTo detect if a list is cyclic, we can check whether a node had been visited before. A natural way is to use a hash table.\n\n**Algorithm**\n\nWe go through each node one by one and record each node's reference (or memory address) in a hash table. If the current node is `null`, we have reached the end of the list and it must not be cyclic. If current node\u2019s reference is in the hash table, then return true.\n\n<iframe src=\"https://leetcode.com/playground/nucJiWbf/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"nucJiWbf\"></iframe>\n\n**Complexity analysis**\n\nLet $$n$$ be the total number of nodes in the linked list. \n\n* Time complexity : $$O(n)$$.\nWe visit each of the $$n$$ elements in the list at most once. Adding a node to the hash table costs only $$O(1)$$ time.\n\n* Space complexity: $$O(n)$$.\nThe space depends on the number of elements added to the hash table, which contains at most $$n$$ elements.\n<br />\n<br />\n---\n\n#### Approach 2: Floyd's Cycle Finding Algorithm\n\n**Intuition**\n\nImagine two runners running on a track at different speed. What happens when the track is actually a circle?\n\n**Algorithm**\n\nThe space complexity can be reduced to $$O(1)$$ by considering two pointers at **different speed** - a slow pointer and a fast pointer. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.\n\nIf there is no cycle in the list, the fast pointer will eventually reach the end and we can return false in this case.\n\nNow consider a cyclic list and imagine the slow and fast pointers are two runners racing around a circle track. The fast runner will eventually meet the slow runner. Why? Consider this case (we name it case A) - The fast runner is just one step behind the slow runner. In the next iteration, they both increment one and two steps respectively and meet each other.\n\nHow about other cases? For example, we have not considered cases where the fast runner is two or three steps behind the slow runner yet. This is simple, because in the next or next's next iteration, this case will be reduced to case A mentioned above.\n\n<iframe src=\"https://leetcode.com/playground/eo2ZtWLe/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"eo2ZtWLe\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity : $$O(n)$$.\nLet us denote $$n$$ as the total number of nodes in the linked list. To analyze its time complexity, we consider the following two cases separately.\n\n    - ***List has no cycle:***  \n    The fast pointer reaches the end first and the run time depends on the list's length, which is $$O(n)$$.\n\n    - ***List has a cycle:***  \n    We break down the movement of the slow pointer into two steps, the non-cyclic part and the cyclic part:\n\n        1. The slow pointer takes \"non-cyclic length\" steps to enter the cycle. At this point, the fast pointer has already reached the cycle. $$\\text{Number of iterations} = \\text{non-cyclic length} = N$$\n\n        2. Both pointers are now in the cycle. Consider two runners running in a cycle - the fast runner moves 2 steps while the slow runner moves 1 steps at a time. Since the speed difference is 1, it takes $$\\dfrac{\\text{distance between the 2 runners}}{\\text{difference of speed}}$$ loops for the fast runner to catch up with the slow runner. As the distance is at most \"$$\\text{cyclic length K}$$\" and the speed difference is 1, we conclude that      \n        $$\\text{Number of iterations} = \\text{almost}$$ \"$$\\text{cyclic length K}$$\".\n\n    Therefore, the worst case time complexity is $$O(N+K)$$, which is $$O(n)$$.\n\n* Space complexity : $$O(1)$$.\nWe only use two nodes (slow and fast) so the space complexity is $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "linked-list-cycle",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.793,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "170",
                "title": "Add Two Numbers",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "2",
                    "questionFrontendId": "2",
                    "sessionId": "968792",
                    "questionTitle": "Add Two Numbers",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/add-two-numbers/submit/",
                    "interpretUrl": "/problems/add-two-numbers/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \\\"\\\"\\\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef add_two_numbers(l1, l2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function addTwoNumbers($l1, $l2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (add-two-numbers l1 l2)\\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nadd_two_numbers(L1, L2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def add_two_numbers(l1, l2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,4,3]\n[5,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"addTwoNumbers\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"l1\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"l2\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum&nbsp;as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\" style=\"width: 483px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,0,8]\n<strong>Explanation:</strong> 342 + 465 = 807.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n<strong>Output:</strong> [8,9,9,9,0,0,0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Add Two Numbers",
                        "content": "## Solution\n---\n#### Approach 1: Elementary Math\n\n**Intuition**\n\nKeep track of the carry using a variable and simulate digits-by-digits sum starting from the head of list, which contains the least-significant digit.\n\n![Illustration of Adding two numbers](../Figures/2_add_two_numbers.svg){:width=\"539px\"}\n{:align=\"center\"}\n\n*Figure 1. Visualization of the addition of two numbers: $$342 + 465 = 807$$.  \nEach node contains a single digit and the digits are stored in reverse order.*\n{:align=\"center\"}\n\n**Algorithm**\n\nJust like how you would sum two numbers on a piece of paper, we begin by summing the least-significant digits, which is the head of $$l1$$ and $$l2$$. Since each digit is in the range of $$0 \\ldots 9$$, summing two digits may \"overflow\". For example $$5 + 7 = 12$$. In this case, we set the current digit to $$2$$ and bring over the $$carry = 1$$ to the next iteration. $$carry$$ must be either $$0$$ or $$1$$ because the largest possible sum of two digits (including the carry) is $$9 + 9 + 1 = 19$$.\n\nThe pseudocode is as following:\n\n* Initialize current node to dummy head of the returning list.\n* Initialize carry to $$0$$.\n* Initialize $$p$$ and $$q$$ to head of $$l1$$ and $$l2$$ respectively.\n* Loop through lists $$l1$$ and $$l2$$ until you reach both ends.\n    * Set $$x$$ to node $$p$$'s value. If $$p$$ has reached the end of $$l1$$, set to $$0$$.\n    * Set $$y$$ to node $$q$$'s value. If $$q$$ has reached the end of $$l2$$, set to $$0$$.\n    * Set $$sum = x + y + carry$$.\n    * Update $$carry = sum / 10$$.\n    * Create a new node with the digit value of $$(sum \\bmod 10)$$ and set it to current node's next, then advance current node to next.\n    * Advance both $$p$$ and $$q$$.\n* Check if $$carry = 1$$, if so append a new node with digit $$1$$ to the returning list.\n* Return dummy head's next node.\n\nNote that we use a dummy head to simplify the code. Without a dummy head, you would have to write extra conditional statements to initialize the head's value.\n\nTake extra caution of the following cases:\n\n| Test case | Explanation |\n| ------------- | ---------------- |\n| $$l1=[0,1]$$<br>$$l2=[0,1,2]$$ | When one list is longer than the other. |\n| $$l1=[]$$<br>$$l2=[0,1]$$ | When one list is null, which means an empty list. |\n| $$l1=[9,9]$$<br>$$l2=[1]$$ | The sum could have an extra carry of one at the end, which is easy to forget. |\n\n<iframe src=\"https://leetcode.com/playground/5onAHA8v/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"5onAHA8v\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(\\max(m, n))$$. Assume that $$m$$ and $$n$$ represents the length of $$l1$$ and $$l2$$ respectively, the algorithm above iterates at most $$\\max(m, n)$$ times.\n\n* Space complexity : $$O(\\max(m, n))$$. The length of the new list is at most $$\\max(m,n) + 1$$.\n\n**Follow up**\n\nWhat if the the digits in the linked list are stored in non-reversed order? For example:\n\n$$\n(3 \\to 4 \\to 2) + (4 \\to 6 \\to 5) = 8 \\to 0 \\to 7\n$$",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "add-two-numbers",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.633,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "205",
                "title": "Add Two Numbers II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft online assessment and onsite interview.",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "445",
                    "questionFrontendId": "445",
                    "sessionId": "968792",
                    "questionTitle": "Add Two Numbers II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/add-two-numbers-ii/submit/",
                    "interpretUrl": "/problems/add-two-numbers-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def addTwoNumbers(self, l1, l2):\\n        \\\"\\\"\\\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar addTwoNumbers = function(l1, l2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef add_two_numbers(l1, l2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func addTwoNumbers(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def addTwoNumbers(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun addTwoNumbers(l1: ListNode?, l2: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function addTwoNumbers($l1, $l2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction addTwoNumbers(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (add-two-numbers l1 l2)\\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec add_two_numbers(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nadd_two_numbers(L1, L2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec add_two_numbers(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def add_two_numbers(l1, l2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[7,2,4,3]\n[5,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"addTwoNumbers\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"l1\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"l2\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg\" style=\"width: 523px; height: 342px;\" />\n<pre>\n<strong>Input:</strong> l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [7,8,0,7]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [2,4,3], l2 = [5,6,4]\n<strong>Output:</strong> [8,0,7]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [0], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in each linked list is in the range <code>[1, 100]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n\t<li>It is guaranteed that the list represents a number that does not have leading zeros.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you solve it without reversing the input lists?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Add Two Numbers II",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Overview\n\n**Prerequisites**\n\nThe problem is a combination of three basic problems:\n\n- [Reverse Linked List](https://leetcode.com/problems/reverse-linked-list/solution/).\n\n- [Add Strings](https://leetcode.com/problems/add-strings/solution/) - the good problem\nto refresh textbook digit-by-digit addition algorithm.\n\n- [Add Two Numbers](https://leetcode.com/problems/add-two-numbers/) - the same \nproblem as the current one, but the digits are stored in _reverse order_.\n\n**Time and Space Complexity To Target**\n\nEach list should be parsed at least once, hence the best time complexity \nwe could have is $$\\mathcal{O}(N_1 + N_2)$$, where $$N_1$$ and $$N_2$$ are the numbers \nof elements in the lists.\n\nSpace complexity is more interesting. It's relatively standard for\nlinked list problems not to allocate any data structure \nbut the output list. \nThis way, one could target $$\\mathcal{O}(1)$$ space complexity\nwithout taking the output list into account.   \n\n**How to Solve: Reverse Input vs. Reverse Output**\n\nThe standard textbook addition algorithm begins by summing the least-significant digits. Each digit is in the range from 0 to 9, \nand the \"overflows\" are managed by moving the carry into the next range.\n\n![img](../Figures/445/textbook.png)\n*Figure 1. Textbook Addition.*\n{:align=\"center\"}\n\nThat is quite convenient for the problem \n[Add Two Numbers](https://leetcode.com/problems/add-two-numbers/), \nwhere the digits are stored in _reverse order_.\nIn this problem, the digits are stored in _direct order_. \nThere are two ways to proceed:\n\n- Approach 1. The idea is to adapt input by reversing the input lists.\nThis way, one could parse reverse lists starting from the head and\nuse the textbook addition algorithm.\n\n![img](../Figures/445/reverse.png)\n*Figure 2. Approach 1: Reverse Input + Construct Output by Adding to Front.*\n{:align=\"center\"}\n\n- Approach 2. The idea is to adapt the addition algorithm. \n\n![img](../Figures/445/adaptation2.png)\n*Figure 3. Approach 2: Adapt Addition Algorithm + Reverse Output.*\n{:align=\"center\"}\n\n<br /> \n<br />\n\n\n--- \n#### Approach 1: Reverse Input + Construct Output by Adding to Front\n\n![img](../Figures/445/reverse.png)\n*Figure 4. Reverse Input + Construct Output by Adding to Front.*\n{:align=\"center\"}\n\n**Algorithm**\n\n- [Implement reverseList function](https://leetcode.com/problems/reverse-linked-list/solution/). \n\n- Reverse both input lists: `l1 = reverseList(l1)`, `l2 = reverseList(l2)`.\n\n- Initialize the result list: `head = None`.\n\n- Initialize the carry: `carry = 0`.\n\n- Loop through lists `l1` and `l2` until you reach both ends.\n\n    - Set `x1 = l1.val` if `l1` is not finished yet, and `x1 = 0` otherwise.\n    \n    - Set `x2 = l2.val` if `l2` is not finished yet, and `x2 = 0` otherwise.\n    \n    - Compute the current value: `val = (carry + x1 + x2) % 10`, and the \n    current carry: `carry = (carry + x1 + x2) / 10`.\n    \n    - Update the result by adding the current value to front.\n    \n    - Move to the next elements in the lists.\n\n- If the carry is not equal to zero, append it to frond of the result list.\n\n- Return the result list: `return head`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/gmmPtqAi/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gmmPtqAi\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N_1 + N_2)$$, where $$N_1 + N_2$$ is a number \nof elements in both lists.   \n\n* Space complexity: $$\\mathcal{O}(1)$$ space complexity\nwithout taking the output list into account, and $$\\mathcal{O}(\\max(N_1, N_2))$$\nto store the output list. \n<br /> \n<br />\n\n\n---\n#### Approach 2: Follow Up: Do not Reverse Input. \n\n![img](../Figures/445/adaptation2.png)\n*Figure 5. Adapt Addition Algorithm + Reverse Output.*\n{:align=\"center\"}\n\n**Algorithm**\n\n- Find the length of both lists: `n1` and `n2`.\n\n- Parse both lists and sum the corresponding positions without taking carry into account,\ni.e. convert `3->3->3` + `7->7` into `3->10->10` and then into `10->10->3`.\n\n    - To sum the corresponding positions, do the following:\n    \n        - If `n1 >= n2`, add to the current value the value of the node from the first list,\n        and decrease the number of elements to parse: `n1 -= 1`.\n        \n        - If `n1 < n2`, add to the current value the value of the node from the \n        second list and decrease the number of elements to parse: `n2 -= 1`.\n        \n    - Update the result by adding the current value to the front.\n    \n- Now it's time to take care about the carry, to limit each node value by 9,\ni.e. to convert `10->10->3` into `0->1->4` and then into `4->1->0`:\n\n    - Initialize the carry `carry = 0`.\n\n    - Re-initialize the current list: `curr1 = head` \n    and the output list: `head = None`.\n    \n    - Parse the current list `curr1`:\n    \n        - Normalize the current value to be less than 10:\n        `val = (curr1.val + carry) % 10`, and keep the carry:\n        `carry = (curr1.val + carry) // 10`.\n\n        - Update the result by adding the current value to front.\n    \n        - Move to the next element in the list: `curr1 = curr1.next`.\n\n- If the carry is not equal to zero, append it to frond of the result list.\n\n- Return the result list: `return head`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/gQsouJoH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gQsouJoH\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N_1 + N_2)$$, where $$N_1 + N_2$$ is a number \nof elements in both lists.   \n\n* Space complexity: $$\\mathcal{O}(1)$$ space complexity\nwithout taking the output list into account, and $$\\mathcal{O}(\\max(N_1, N_2))$$\nto store the output list. \n<br /> \n<br />\n\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "add-two-numbers-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.721,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "175",
                "title": "Merge Two Sorted Lists",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "21",
                    "questionFrontendId": "21",
                    "sessionId": "968792",
                    "questionTitle": "Merge Two Sorted Lists",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-two-sorted-lists/submit/",
                    "interpretUrl": "/problems/merge-two-sorted-lists/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeTwoLists(self, l1, l2):\\n        \\\"\\\"\\\"\\n        :type l1: ListNode\\n        :type l2: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeTwoLists(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} l1\\n * @param {ListNode} l2\\n * @return {ListNode}\\n */\\nvar mergeTwoLists = function(l1, l2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} l1\\n# @param {ListNode} l2\\n# @return {ListNode}\\ndef merge_two_lists(l1, l2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_two_lists(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $l1\\n     * @param ListNode $l2\\n     * @return ListNode\\n     */\\n    function mergeTwoLists($l1, $l2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeTwoLists(l1: ListNode | null, l2: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (merge-two-lists l1 l2)\\n  (-> (or/c list-node? #f) (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_two_lists(L1 :: #list_node{} | null, L2 :: #list_node{} | null) -> #list_node{} | null.\\nmerge_two_lists(L1, L2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_two_lists(l1 :: ListNode.t | nil, l2 :: ListNode.t | nil) :: ListNode.t | nil\\n  def merge_two_lists(l1, l2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,4]\n[1,3,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"mergeTwoLists\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"l1\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    },\r\n    {\r\n      \"name\": \"l2\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Merge two sorted linked lists and return it as a <strong>sorted</strong> list. The list should be made by splicing together the nodes of the first two lists.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\" style=\"width: 662px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> l1 = [1,2,4], l2 = [1,3,4]\n<strong>Output:</strong> [1,1,2,3,4,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> l1 = [], l2 = [0]\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in both lists is in the range <code>[0, 50]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n\t<li>Both <code>l1</code> and <code>l2</code> are sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge Two Sorted Lists",
                        "content": "[TOC]\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nWe can recursively define the result of a `merge` operation on two lists as\nthe following (avoiding the corner case logic surrounding empty lists):\n\n$$\n\\left\\{\n\\begin{array}{ll}\n      list1[0] + merge(list1[1:], list2) & list1[0] < list2[0] \\\\\n      list2[0] + merge(list1, list2[1:]) & otherwise\n\\end{array}\n\\right.\n$$\n\nNamely, the smaller of the two lists' heads plus the result of a `merge` on\nthe rest of the elements.\n\n**Algorithm**\n\nWe model the above recurrence directly, first accounting for edge cases.\nSpecifically, if either of `l1` or `l2` is initially `null`, there is no\nmerge to perform, so we simply return the non-`null` list. Otherwise, we\ndetermine which of `l1` and `l2` has a smaller head, and recursively set the\n`next` value for that head to the next merge result. Given that both lists\nare `null`-terminated, the recursion will eventually terminate.\n\n<iframe src=\"https://leetcode.com/playground/h6UFeZRd/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"h6UFeZRd\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n + m)$$\n\n    Because each recursive call increments the pointer to `l1` or `l2` by one (approaching the dangling `null` at the end of each list), there will be exactly one call to `mergeTwoLists` per element in each list. Therefore, the time complexity is linear in the combined size of the lists.\n\n* Space complexity : $$O(n + m)$$\n\n    The first call to `mergeTwoLists` does not return until the ends of both `l1` and `l2` have been reached, so $$n + m$$ stack frames consume $$O(n + m)$$ space.\n\n<br />\n\n---\n\n#### Approach 2: Iteration\n\n**Intuition**\n\nWe can achieve the same idea via iteration by assuming that `l1` is entirely\nless than `l2` and processing the elements one-by-one, inserting elements of\n`l2` in the necessary places in `l1`.\n\n**Algorithm**\n\nFirst, we set up a false \"`prehead`\" node that allows us to easily return the\nhead of the merged list later. We also maintain a `prev` pointer, which\npoints to the current node for which we are considering adjusting its `next`\npointer. Then, we do the following until at least one of `l1` and `l2` points\nto `null`: if the value at `l1` is less than or equal to the value at `l2`,\nthen we connect `l1` to the previous node and increment `l1`. Otherwise, we\ndo the same, but for `l2`. Then, regardless of which list we connected, we\nincrement `prev` to keep it one step behind one of our list heads.\n\nAfter the loop terminates, at most one of `l1` and `l2` is non-`null`.\nTherefore (because the input lists were in sorted order), if either list is\nnon-`null`, it contains only elements greater than all of the\npreviously-merged elements. This means that we can simply connect the\nnon-`null` list to the merged list and return it.\n\nTo see this in action on an example, check out the animation below:\n\n!?!../Documents/21_Merge_Two_Sorted_Lists.json:1280,720!?!\n\n<iframe src=\"https://leetcode.com/playground/PFrh6DKt/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"PFrh6DKt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n + m)$$\n\n    Because exactly one of `l1` and `l2` is incremented on each loop\n    iteration, the `while` loop runs for a number of iterations equal to the\n    sum of the lengths of the two lists. All other work is constant, so the\n    overall complexity is linear.\n\n* Space complexity : $$O(1)$$\n\n    The iterative approach only allocates a few pointers, so it has a\n    constant overall memory footprint.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "merge-two-sorted-lists",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.305,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "209",
                "title": "Merge k Sorted Lists",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft phone interview.",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "23",
                    "questionFrontendId": "23",
                    "sessionId": "968792",
                    "questionTitle": "Merge k Sorted Lists",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-k-sorted-lists/submit/",
                    "interpretUrl": "/problems/merge-k-sorted-lists/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeKLists(ListNode[] lists) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeKLists(self, lists):\\n        \\\"\\\"\\\"\\n        :type lists: List[ListNode]\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeKLists(ListNode[] lists) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode[]} lists\\n * @return {ListNode}\\n */\\nvar mergeKLists = function(lists) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode[]} lists\\n# @return {ListNode}\\ndef merge_k_lists(lists)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeKLists(lists []*ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode[] $lists\\n     * @return ListNode\\n     */\\n    function mergeKLists($lists) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (merge-k-lists lists)\\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\\nmerge_k_lists(Lists) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\\n  def merge_k_lists(lists) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,4,5],[1,3,4],[2,6]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"mergeKLists\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"lists\",\r\n      \"type\": \"ListNode[]\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> won&#39;t exceed <code>10^4</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge k Sorted List",
                        "content": "[TOC]\n## Solution\n\n---\n#### Approach 1: Brute Force\n\n**Intuition & Algorithm**\n\n- Traverse all the linked lists and collect the values of the nodes into an array.\n- Sort and iterate over this array to get the proper value of nodes.\n- Create a new sorted linked list and extend it with the new nodes.\n\nAs for sorting, you can refer [here](https://www.cs.cmu.edu/~adamchik/15-121/lectures/Sorting%20Algorithms/sorting.html) for more about sorting algorithms.\n\n<iframe src=\"https://leetcode.com/playground/SxUGUJZR/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"SxUGUJZR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log N)$$ where $$N$$ is the total number of nodes.\n    - Collecting all the values costs $$O(N)$$ time.\n    - A stable sorting algorithm costs $$O(N\\log N)$$ time.\n    - Iterating for creating the linked list costs $$O(N)$$ time.\n\n\n* Space complexity : $$O(N)$$.\n    - Sorting cost $$O(N)$$ space (depends on the algorithm you choose).\n    - Creating a new linked list costs $$O(N)$$ space.\n<br />\n<br />\n---\n\n#### Approach 2: Compare one by one\n\n**Algorithm**\n\n- Compare every $$\\text{k}$$ nodes (head of every linked list) and get the node with the smallest value.\n- Extend the final sorted linked list with the selected nodes.\n\n!?!../Documents/23_Merge_lists.json:1000,563!?!\n\n**Complexity Analysis**\n\n* Time complexity : $$O(kN)$$ where $$\\text{k}$$ is the number of linked lists.\n    - Almost every selection of node in final linked costs $$O(k)$$ ($$\\text{k-1}$$ times comparison).\n    - There are $$N$$ nodes in the final linked list.\n\n\n* Space complexity :\n    - $$O(n)$$ Creating a new linked list costs $$O(n)$$ space.\n    - $$O(1)$$ It's not hard to apply in-place method - connect selected nodes instead of creating new nodes to fill the new linked list.\n<br />\n<br />\n---\n#### Approach 3: Optimize Approach 2 by Priority Queue\n\n**Algorithm**\n\nAlmost the same as the one above but optimize the **comparison process** by **priority queue**. You can refer [here](https://en.wikipedia.org/wiki/Priority_queue) for more information about it.\n\n<iframe src=\"https://leetcode.com/playground/h2rJbTJz/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"h2rJbTJz\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log k)$$ where $$\\text{k}$$ is the number of linked lists.\n    - The comparison cost will be reduced to $$O(\\log k)$$ for every pop and insertion to priority queue. But finding the node with the smallest value just costs $$O(1)$$ time.\n    - There are $$N$$ nodes in the final linked list.\n\n\n* Space complexity :\n    - $$O(n)$$ Creating a new linked list costs $$O(n)$$ space.\n    - $$O(k)$$ The code above present applies in-place method which cost $$O(1)$$ space. And the priority queue (often implemented with heaps) costs $$O(k)$$ space (it's far less than $$N$$ in most situations).\n<br />\n<br />\n---\n\n#### Approach 4: Merge lists one by one\n\n**Algorithm**\n\nConvert merge $$\\text{k}$$ lists problem to merge 2 lists ($$\\text{k-1}$$) times. Here is the [merge 2 lists](https://leetcode.com/problems/merge-two-sorted-lists/description/) problem page.\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(kN)$$ where $$\\text{k}$$ is the number of linked lists.\n    - We can merge two sorted linked list in $$O(n)$$ time where $$n$$ is the total number of nodes in two lists.\n    - Sum up the merge process and we can get:  $$O(\\sum_{i=1}^{k-1} (i*(\\frac{N}{k}) + \\frac{N}{k})) = O(kN)$$.\n\n\n* Space complexity : $$O(1)$$\n    - We can merge two sorted linked list in $$O(1)$$ space.\n<br />\n<br />\n---\n\n#### Approach 5: Merge with Divide And Conquer\n\n**Intuition & Algorithm**\n\nThis approach walks alongside the one above but is improved a lot. We don't need to traverse most nodes many times repeatedly\n\n  - Pair up $$\\text{k}$$ lists and merge each pair.\n\n  - After the first pairing, $$\\text{k}$$ lists are merged into $$k/2$$ lists with average $$2N/k$$ length, then $$k/4$$, $$k/8$$ and so on.\n\n  -  Repeat this procedure until we get the final sorted linked list.\n\nThus, we'll traverse almost $$N$$ nodes per pairing and merging, and repeat this procedure about $$\\log_{2}{k}$$  times.\n\n![Divide_and_Conquer](../Figures/23/23_divide_and_conquer_new.png)\n\n\n<iframe src=\"https://leetcode.com/playground/BsrhGdCo/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"BsrhGdCo\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log k)$$ where $$\\text{k}$$ is the number of linked lists.\n    - We can merge two sorted linked list in $$O(n)$$ time where $$n$$ is the total number of nodes in two lists.\n    - Sum up the merge process and we can get: $$O\\big(\\sum_{i=1}^{log_{2}{k}}N \\big)= O(N\\log k)$$\n\n\n* Space complexity : $$O(1)$$\n    - We can merge two sorted linked lists in $$O(1)$$ space.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "merge-k-sorted-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.608,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "212",
                "title": "Intersection of Two Linked Lists",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "160",
                    "questionFrontendId": "160",
                    "sessionId": "968792",
                    "questionTitle": "Intersection of Two Linked Lists",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/intersection-of-two-linked-lists/submit/",
                    "interpretUrl": "/problems/intersection-of-two-linked-lists/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) {\\n *         val = x;\\n *         next = null;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def getIntersectionNode(self, headA, headB):\\n        \\\"\\\"\\\"\\n        :type head1, head1: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n\\n/**\\n * @param {ListNode} headA\\n * @param {ListNode} headB\\n * @return {ListNode}\\n */\\nvar getIntersectionNode = function(headA, headB) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @next = nil\\n#     end\\n# end\\n\\n# @param {ListNode} headA\\n# @param {ListNode} headB\\n# @return {ListNode}\\ndef getIntersectionNode(headA, headB)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.next = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func getIntersectionNode(_ headA: ListNode?, _ headB: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc getIntersectionNode(headA, headB *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(var _x: Int = 0) {\\n *   var next: ListNode = null\\n *   var x: Int = _x\\n * }\\n */\\n\\nobject Solution {\\n    def getIntersectionNode(headA: ListNode, headB: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun getIntersectionNode(headA:ListNode?, headB:ListNode?):ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val) { $this->val = $val; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param ListNode $headA\\n     * @param ListNode $headB\\n     * @return ListNode\\n     */\\n    function getIntersectionNode($headA, $headB) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction getIntersectionNode(headA: ListNode | null, headB: ListNode | null): ListNode | null {\\n\\n};\"}]",
                    "sampleTestCase": "8\n[4,1,8,4,5]\n[5,6,1,8,4,5]\n2\n3",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"getIntersectionNode\",\n  \"params\": [\n    {\n      \"name\": \"intersectVal\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"listA\",\n      \"type\": \"ListNode\"\n    },\n    {\n      \"name\": \"listB\",\n      \"type\": \"ListNode\"\n    },\n    {\n      \"name\": \"skipA\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"skipB\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"ListNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"c\",\n    \"csharp\",\n    \"javascript\",\n    \"golang\",\n    \"python3\",\n    \"swift\",\n    \"ruby\",\n    \"kotlin\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given the heads of two singly linked-lists <code>headA</code> and <code>headB</code>, return <em>the node at which the two lists intersect</em>. If the two linked lists have no intersection at all, return <code>null</code>.</p>\n\n<p>For example, the following two linked lists begin to intersect at node <code>c1</code>:</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_statement.png\" style=\"width: 500px; height: 162px;\" />\n<p>The test cases are generated such that there are no cycles anywhere in the entire linked structure.</p>\n\n<p><strong>Note</strong> that the linked lists must <strong>retain their original structure</strong> after the function returns.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The inputs to the <strong>judge</strong> are given as follows (your program is <strong>not</strong> given these inputs):</p>\n\n<ul>\n\t<li><code>intersectVal</code> - The value of the node where the intersection occurs. This is <code>0</code> if there is no intersected node.</li>\n\t<li><code>listA</code> - The first linked list.</li>\n\t<li><code>listB</code> - The second linked list.</li>\n\t<li><code>skipA</code> - The number of nodes to skip ahead in <code>listA</code> (starting from the head) to get to the intersected node.</li>\n\t<li><code>skipB</code> - The number of nodes to skip ahead in <code>listB</code> (starting from the head) to get to the intersected node.</li>\n</ul>\n\n<p>The judge will then create the linked structure based on these inputs and pass the two heads, <code>headA</code> and <code>headB</code>&nbsp;to your program. If you correctly return the intersected node, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png\" style=\"width: 500px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n<strong>Output:</strong> Intersected at &#39;8&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png\" style=\"width: 500px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n<strong>Output:</strong> Intersected at &#39;2&#39;\n<strong>Explanation:</strong> The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png\" style=\"width: 300px; height: 189px;\" />\n<pre>\n<strong>Input:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n<strong>Output:</strong> No intersection\n<strong>Explanation:</strong> From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes of <code>listA</code> is in the <code>m</code>.</li>\n\t<li>The number of nodes of <code>listB</code> is in the <code>n</code>.</li>\n\t<li><code>0 &lt;= m, n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= skipA &lt;= m</code></li>\n\t<li><code>0 &lt;= skipB &lt;= n</code></li>\n\t<li><code>intersectVal</code> is <code>0</code> if <code>listA</code> and <code>listB</code> do not intersect.</li>\n\t<li><code>intersectVal == listA[skipA] == listB[skipB]</code> if <code>listA</code> and <code>listB</code> intersect.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you write a solution that runs in <code>O(n)</code> time and use only <code>O(1)</code> memory?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Intersection of Two Linked Lists",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/516909920\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Overview\n\nFor this article, we're assuming that you know what a **linked list** is, and can solve *very* basic linked list problems such as determining the length of a given linked list. If you're not yet at that level, we recommend checking out our [Explore Card on linked lists](https://leetcode.com/explore/learn/card/linked-list/).\n\nWe'll be referring to the linked list starting at `headA` as \"list A\" and the linked list starting at `headB` as \"list B\". \n\n</br>\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition and Algorithm**\n\nThe brute force solution is often a good starting point in an interview. While you shouldn't actually code up this approach (it's not a good use of time to do so), you should briefly explain it to your interviewer. Once you've done that, you'll then be analyzing inefficiencies and coming up with ways to optimize it. \n\nThe brute force solution here is nothing too special: For each node in list A, traverse over list B and check whether or not the node is present in list B.\n\nThe one thing we need to be careful of is that we're comparing objects of type `Node`. We don't want to compare the values within the nodes; doing this would cause our code to break when two different nodes have the same value.\n\n**Implementation**\n\nNote that we're only showing this code for your reference. This is *not a good approach for an interview*, and the only reason we discussed it at all as we will be optimizing it in Approach 2. For this reason, we aren't guaranteeing that the code will pass our judge in every language.\n\n<iframe src=\"https://leetcode.com/playground/GNFmkrFR/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"GNFmkrFR\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of list A and $$M$$ be the length of list B. \n\n* Time complexity : $$O(N \\times M)$$. \n    \n    For *each* of the $$N$$ nodes in list A, we are traversing over *each* of the nodes in list B. In the worst case, we won't find a match, and so will need to do this until reaching the end of list B, giving a worst-case time complexity of $$O(N \\times M)$$.\n\n* Space complexity : $$O(1)$$. \n    \n    We aren't allocating any additional data structures, so the amount of extra space used does not grow with the size of the input.\n\n<br />\n\n---\n\n#### Approach 2: Hash Table\n\n**Intuition**\n\nIf you are unfamiliar with hash tables, check out our [Explore Card](https://leetcode.com/explore/learn/card/hash-table/182/practical-applications/1109/).\n\nApproach 1 is inefficient because we repeatedly traverse over list B to check whether or not any of the nodes in list B were equal to the current one we were looking at in list A. Instead of repeatedly traversing through list B though, we could simply traverse it once and store each node in a hash table. We could then traverse through list A once, each time checking whether the current node exists in the hash table.\n\n**Algorithm**\n\nTraverse list B and store the address/reference of each node in a hash table. Then for each node in list A, check whether or not that node exists in the hash table. If it does, return it as it must be the intersection node. If we get to the end of list A without finding an intersection node, return null.\n\nThe one thing we need to be careful of is that we're comparing objects of type `Node`. We don't want to compare the values within the nodes; doing this would cause our code to break when two different nodes have the same value.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/aKDPg3vp/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"aKDPg3vp\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N + M)$$. \n\n    Firstly, we need to build up the hash table. It costs $$O(1)$$ to insert an item into a hash table, and we need to do this for each of the $$M$$ nodes in list B. This gives a cost of $$O(M)$$ for building the hash table.\n\n    Secondly, we need to traverse list A, and for each node, we need to check whether or not it is in the hash table. In the worst case, there will not be a match, requiring us to check all $$N$$ nodes in list A. As it is also $$O(1)$$ to check whether or not an item is in a hash table, this checking has a total cost of $$O(N)$$.\n\n    Finally, combining the two parts, we get $$O(M) + O(N) = O(M + N)$$. \n\n* Space complexity : $$O(M)$$. \n\n    As we are storing each of the nodes from list B into a hash table, the hash table will require $$O(M)$$ space. Note that we could have instead stored the nodes of list A into the hash table, this would have been a space complexity of $$O(N)$$. Unless we know *which list is longer* though, it doesn't make any real difference.\n\n<br />\n\n---\n\n#### Approach 3: Two Pointers\n\n**Intuition**\n\n> **Interview Tip**: Approach 3 is essentially a \"medium\" solution to an \"easy\" problem. Note that approach 2 is *probably* sufficient for an interview if you are fairly new to programming (for example, you're applying for an internship during your early years of college). If you're more experienced, it might also be sufficient, but your safest bet would be to also know Approach 3, and to be able to apply the intuition behind it to similar problems. While it might initially look scary, you'll be fine with it once you have a think about it and try and draw a few examples.\n\nWe know that we've now fully optimized the time complexity: it's impossible to do better than $$O(N + M)$$ as, in the worst case, we'll need to look at every node at least once. But, is there a way we can get the space complexity down to $$O(1)$$ while maintaining that awesome $$O(N + M)$$ time complexity that we just achieved? It turns out that there is!\n\nObserve that while list A and list B could be different lengths, that the shared \"tail\" following the intersection has to be the *same* length.\n\nImagine that we have two linked lists, A and B, and we know that their lengths are $$N$$ and $$M$$ respectively (these can be calculated with $$O(1)$$ space and in time proportional to the length of the list). We'll imagine that $$N = 5$$ and $$M = 8$$. \n\n![Two linked lists with question marks on their nodes. The first is 5 nodes long, and the second is 8 nodes long.](../Figures/160/image1.png)\n\nBecause the \"tails\" must be the same length, we can conclude that *if* there is an intersection, then the intersection node will be one of these 5 possibilities.\n\n![The two linked lists from above with arrows showing how the last 5 nodes of each list could be a match.](../Figures/160/image2.png)\n\nSo, to check for each of these pairs, we would start by setting a pointer at the start of the shorter list, and a pointer at the first possible matching node of the longer list. The position of this node is simply the difference between the two lengths, that is, $$|M - N|$$.\n\n![The two linked lists from above with a p1 pointer at the head of the first, and a p2 pointer at the 4th node of the second.](../Figures/160/image3.png)\n\nThen, we just need to step the two pointers through the list, each time checking whether or not the nodes are the same.\n\nIn code, we could write this algorithm with 4 loops, one after the other, each doing the following:\n\n1. Calculate $$N$$; the length of list A.\n2. Calculate $$M$$; the length of list B.\n3. Set the start pointer for the *longer* list.\n4. Step the pointers through the list together.\n\nWhile this would have a time complexity of $$O(N + M)$$ and a space complexity of $$O(1)$$ and would be fine for an interview, we can still simplify the code a bit! As some quick reassurance, most people will struggle to come up with this next part by themselves. It takes practice and seeing lots of linked list and other math problems.\n\nIf we say that $$c$$ is the *shared* part, $$a$$ is *exclusive part of list A* and $$b$$ is *exclusive part of list B*, then we can have one pointer that goes over `a + c + b` and the other that goes over `b + c + a`. Have a look at the diagram below, and this should be fairly intuitive.\n\n![Diagram showing that one pointer could go over a + c + b while the other goes over b + c + a, and then both will end up on the intersection node.](../Figures/160/image4.png)\n\nThis is the above algorithm in disguise - one pointer is essentially measuring the length of the longer list, and the other is measuring the length of the shorter list, and then placing the start pointer for the longer list. Then both are stepping through the list together. By seeing the solution in this way though, we can now implement it as a single loop.\n\n**Algorithm**\n\n- Set pointer `pA` to point at `headA`.\n- Set pointer `pB` to point at `headB`.\n- While `pA` and `pB` are not pointing at the same node:\n  - If `pA` is pointing to a null, set `pA` to point to `headB`.\n  - Else, set `pA` to point at `pA.next`.\n  - If `pB` is pointing to a null, set `pB` to point to `headA`.\n  - Else, set `pB` to point at `pB.next`.\n- return the value pointed to by `pA` (or by `pB`; they're the same now).\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/63zaeorG/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"63zaeorG\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of list A and $$M$$ be the length of list B.\n\n* Time complexity : $$O(N + M)$$.\n    \n    In the worst case, each list is traversed **twice** giving $$2 \\cdot M + 2 \\cdot N$$, which is equivalent to $$O(N + M)$$. This is because the pointers firstly go down each list so that they can be \"lined up\" and then in the second iteration, the intersection node is searched for.\n\n    An interesting observation you might have made is that when the lists are of the same length, this algorithm only traverses each list **once**. This is because the pointers are already \"lined up\" from the start, so the additional pass is unnecessary.\n\n\n* Space complexity : $$O(1)$$.\n\n    We aren't allocating any additional data structures, so the amount of extra space used does not grow with the size of the input. For this reason, Approach 3 is better than Approach 2.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "intersection-of-two-linked-lists",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.663,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "168",
                "title": "Copy List with Random Pointer",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 32,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "138",
                    "questionFrontendId": "138",
                    "sessionId": "968792",
                    "questionTitle": "Copy List with Random Pointer",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/copy-list-with-random-pointer/submit/",
                    "interpretUrl": "/problems/copy-list-with-random-pointer/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* next;\\n    Node* random;\\n    \\n    Node(int _val) {\\n        val = _val;\\n        next = NULL;\\n        random = NULL;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* copyRandomList(Node* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    int val;\\n    Node next;\\n    Node random;\\n\\n    public Node(int val) {\\n        this.val = val;\\n        this.next = null;\\n        this.random = null;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public Node copyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x, next=None, random=None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def copyRandomList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def copyRandomList(self, head: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     struct Node *next;\\n *     struct Node *random;\\n * };\\n */\\n\\nstruct Node* copyRandomList(struct Node* head) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node next;\\n    public Node random;\\n    \\n    public Node(int _val) {\\n        val = _val;\\n        next = null;\\n        random = null;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node CopyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, next, random) {\\n *    this.val = val;\\n *    this.next = next;\\n *    this.random = random;\\n * };\\n */\\n\\n/**\\n * @param {Node} head\\n * @return {Node}\\n */\\nvar copyRandomList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for Node.\\n# class Node\\n#     attr_accessor :val, :next, :random\\n#     def initialize(val = 0)\\n#         @val = val\\n#\\t\\t  @next = nil\\n#\\t\\t  @random = nil\\n#     end\\n# end\\n\\n# @param {Node} node\\n# @return {Node}\\ndef copyRandomList(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var next: Node?\\n *     public var random: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.next = nil\\n *    \\t   self.random = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func copyRandomList(_ head: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Next *Node\\n *     Random *Node\\n * }\\n */\\n\\nfunc copyRandomList(head *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var next: Node = null\\n *   var random: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def copyRandomList(head: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = Node(5)\\n * var v = ti.`val`\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var next: Node? = null\\n *     var random: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun copyRandomList(node: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $next = null;\\n *     public $random = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->next = null;\\n *         $this->random = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $head\\n     * @return Node\\n     */\\n    function copyRandomList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     next: Node | null\\n *     random: Node | null\\n *     constructor(val?: number, next?: Node, random?: Node) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *         this.random = (random===undefined ? null : random)\\n *     }\\n * }\\n */\\n\\nfunction copyRandomList(head: Node | null): Node | null {\\n    \\n};\"}]",
                    "sampleTestCase": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"copyRandomList\",\n  \"params\": [\n    {\n      \"name\": \"head\",\n      \"type\": \"ListNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"ListNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The given linked list is empty (null pointer), so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node.",
                        "You may want to use extra space to keep <b>old node ---> new node</b> mapping to prevent creating multiples copies of same node.",
                        "We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n<pre>\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'\r\n</pre>",
                        "The interweaving is done using <b>next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for <b>random</b> pointers."
                    ],
                    "solution": {
                        "title": "Copy List with Random Pointer",
                        "content": "[TOC]\n\n## Solution\n---\n\nLets first look at how the linked list looks like\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_1.png\" width=\"500\"/>\n</center>\n\nIn the above diagram, for a given node the `next` pointer points to the next node in the linked list. The `next` pointer is something standard for a linked list and this is what ***links*** the nodes together. What is interesting about the diagram and this problem is the `random` pointer which, as the name suggests can point to any node in the linked list or can be a null.\n\n#### Approach 1: Recursive\n\n**Intuition**\n\nThe basic idea behind the recursive solution is to consider the linked list like a graph. Every node of the Linked List has 2 pointers (edges in a graph). Since, random pointers add the randomness to the structure we might visit the same node again leading to cycles.\n\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_2.png\" width=\"500\"/>\n</center>\n\nIn the diagram above we can see the random pointer points back to the previously seen node hence leading to a cycle. We need to take care of these cycles in the implementation.\n\nAll we do in this approach is to just traverse the graph and clone it. Cloning essentially means creating a new node for every unseen node you encounter. The traversal part will happen recursively in a depth first manner. Note that we have to keep track of nodes already processed because, as pointed out earlier, we can have cycles because of the random pointers.\n\n**Algorithm**\n\n1. Start traversing the graph from `head` node.\n\n    Lets see the linked structure as a graph. Below is the graph representation of the above linked list example.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_7.png\" width=\"500\"/>\n    </center>\n\n    In the above example `head` is where we begin our graph traversal.\n\n2. If we already have a cloned copy of the current node in the visited dictionary, we use the cloned node reference.  \n3. If we don't have a cloned copy in the visited dictionary, we create a new node and add it to the visited dictionary.\n`visited_dictionary[current_node] = cloned_node_for_current_node.`\n4. We then make two recursive calls, one using the `random` pointer and the other using `next` pointer. The diagram from step 1, shows `random` and `next` pointers in red and blue color respectively. Essentially we are making recursive calls for the children of the current node. In this implementation, the children are the nodes pointed by the `random` and the `next` pointers.\n<pre>\ncloned_node_for_current_node.next = copyRandomList(current_node.next);\ncloned_node_for_current_node.random = copyRandomList(current_node.random);\n</pre>\n\n<br>\n\n<iframe src=\"https://leetcode.com/playground/gTqcFzpK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gTqcFzpK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ where N is the number of nodes in the linked list.\n* Space Complexity: $$O(N)$$. If we look closely, we have the recursion stack and we also have the space complexity to keep track of nodes already cloned i.e. using the visited dictionary. But asymptotically, the complexity is $$O(N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative with $$O(N)$$ Space\n\n**Intuition**\n\nThe iterative solution to this problem does not model it as a graph, instead simply treats it as a LinkedList.\nWhen we are iterating over the list, we can create new nodes via the random pointer or the next pointer whichever points to a node that doesn't exist in our old --> new dictionary.\n\n**Algorithm**\n\n1. Traverse the linked list starting at `head` of the linked list.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_3.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram we create a new cloned `head` node. The cloned node is shown using dashed lines. In the implementation we would even store the reference of this newly created node in a visited dictionary.\n\n2. Random Pointer\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_4.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `random` pointer of node $$A$$ points to a node $$C$$. Node $$C$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$C'$$ node corresponding to node $$C$$ and add it to visited dictionary.\n\n3. Next Pointer\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_5.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `next` pointer of node $$A$$ points to a node $$B$$. Node $$B$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$B'$$ node corresponding to node $$B$$ and add it to visited dictionary.\n\n4. We repeat steps 2 and 3 until we reach the end of the linked list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_6.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram, the `random` pointer of node $$B$$ points to an already visited node $$A$$. Hence in step 2, we don't create a new copy for the clone. Instead we point `random` pointer of cloned node $$B'$$ to already existing cloned node $$A'$$.\n\n    Also, the `next` pointer of node $$B$$ points to an already visited node $$C$$. Hence in step 3, we don't create a new copy for the clone. Instead we point `next` pointer of cloned node $$B'$$ to already existing cloned node $$C'$$.\n\n<iframe src=\"https://leetcode.com/playground/KBujstvq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KBujstvq\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$ because we make one pass over the original linked list.\n* Space Complexity : $$O(N)$$ as we have a dictionary containing mapping from old list nodes to new list nodes. Since there are $$N$$ nodes, we have $$O(N)$$ space complexity.\n<br/>\n<br/>\n\n---\n\n#### Approach 3: Iterative with $$O(1)$$ Space\n\n**Intuition**\n\nInstead of a separate dictionary to keep the old node --> new node mapping, we can tweak the original linked list and keep every cloned node next to its original node. This interleaving of old and new nodes allows us to solve this problem without any extra space. Lets look at how the algorithm works.\n\n**Algorithm**\n\n1. Traverse the original list and clone the nodes as you go and place the cloned copy next to its original node. This new linked list is essentially a interweaving of original and cloned nodes.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_1.png\" width=\"800\"/>\n    </center>\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_2.png\" width=\"800\"/>\n    </center>\n\n    As you can see we just use the value of original node to create the cloned copy. The `next` pointer is used to create the weaving. Note that this operation ends up modifying the original linked list.\n    <pre>\n    cloned_node.next = original_node.next\n    original_node.next = cloned_node\n    </pre>\n\n2. Iterate the list having both the new and old nodes intertwined with each other and use the original nodes' random pointers to assign references to random pointers for cloned nodes. For eg. If `B` has a random pointer to `A`, this means `B'` has a random pointer to `A'`.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_9_1.png\" width=\"800\"/>\n    </center>\n\n3. Now that the `random` pointers are assigned to the correct node, the `next` pointers need to be correctly assigned to unweave the current linked list and get back the original list and the cloned list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_10.png\" width=\"800\"/>\n    </center>\n\n\n<iframe src=\"https://leetcode.com/playground/ZbWnzEMt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZbWnzEMt\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$\n* Space Complexity : $$O(1)$$\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "copy-list-with-random-pointer",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.733,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These are some popular Linked List questions being asked by Microsoft. We recommend Reverse Linked List, Linked List Cycle, Merge k Sorted Lists, Intersection of Two Linked Lists and Copy List with Random Pointers."
    },
    {
        "id": "31",
        "title": "Trees and Graphs",
        "slug": "trees-and-graphs",
        "items": [
            {
                "id": "152",
                "title": "Validate Binary Search Tree",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "98",
                    "questionFrontendId": "98",
                    "sessionId": "968792",
                    "questionTitle": "Validate Binary Search Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/validate-binary-search-tree/submit/",
                    "interpretUrl": "/problems/validate-binary-search-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    bool isValidBST(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public boolean isValidBST(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def isValidBST(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def isValidBST(self, root: Optional[TreeNode]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nbool isValidBST(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public bool IsValidBST(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {boolean}\\n */\\nvar isValidBST = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Boolean}\\ndef is_valid_bst(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func isValidBST(_ root: TreeNode?) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc isValidBST(root *TreeNode) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def isValidBST(root: TreeNode): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun isValidBST(root: TreeNode?): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Boolean\\n     */\\n    function isValidBST($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction isValidBST(root: TreeNode | null): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (is-valid-bst root)\\n  (-> (or/c tree-node? #f) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec is_valid_bst(Root :: #tree_node{} | null) -> boolean().\\nis_valid_bst(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec is_valid_bst(root :: TreeNode.t | nil) :: boolean\\n  def is_valid_bst(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,1,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"isValidBST\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, <em>determine if it is a valid binary search tree (BST)</em>.</p>\n\n<p>A <strong>valid BST</strong> is defined as follows:</p>\n\n<ul>\n\t<li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node&#39;s key.</li>\n\t<li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node&#39;s key.</li>\n\t<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg\" style=\"width: 302px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg\" style=\"width: 422px; height: 292px;\" />\n<pre>\n<strong>Input:</strong> root = [5,1,4,null,null,3,6]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The root node&#39;s value is 5 but its right child&#39;s value is 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-2<sup>31</sup> &lt;= Node.val &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Validate Binary Search Tree",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/490012303\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Tree definition\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use.\n\n<iframe src=\"https://leetcode.com/playground/jjcxt5FB/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"jjcxt5FB\"></iframe>\n<br />\n<br />\n\n\n---\n#### Intuition\n\nOn the first sight, the problem is trivial. Let's traverse the tree\nand check at each step if `node.right.val > node.val` and\n`node.left.val < node.val`. This approach would even work for some\ntrees\n![compute](../Figures/98/98_not_bst.png)\n\nThe problem is this approach will not work for all cases.\nNot only the right child should be larger than the node\nbut all the\nelements in the right subtree. Here is an example :\n\n![compute](../Figures/98/98_not_bst_3.png)\n\nThat means one should keep both upper\nand lower limits for each node while traversing the tree,\nand compare the node value not\nwith children values but with these limits.\n<br />\n<br />\n\n\n---\n#### Approach 1: Recursive Traversal with Valid Range\n\nThe idea above could be implemented as a recursion.\nOne compares the node value with its upper and lower limits\nif they are available. Then one repeats the same\nstep recursively for left and right subtrees.\n\n!?!../Documents/98_LIS.json:1000,462!?!\n\n<iframe src=\"https://leetcode.com/playground/WEXm78JJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"WEXm78JJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once.\n* Space complexity : $$\\mathcal{O}(N)$$ since we keep up to the entire tree.\n\n<br />\n<br />\n\n\n---\n#### Approach 2: Iterative Traversal with Valid Range\n\nThe above recursion could be converted into iteration,\nwith the help of an explicit stack. DFS would be better than BFS since\nit works faster here.\n\n<iframe src=\"https://leetcode.com/playground/Qdw3q7Na/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Qdw3q7Na\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since we visit each node exactly once.\n* Space complexity : $$\\mathcal{O}(N)$$ since we keep up to the entire tree.\n\n<br />\n<br />\n\n---\n\n#### Approach 3: Recursive Inorder Traversal\n\n**Algorithm**\n\nLet's use the order of nodes in the\n[inorder traversal](https://leetcode.com/articles/binary-tree-inorder-traversal/)\n`Left -> Node -> Right`.\n\n![postorder](../Figures/145_transverse.png)\n\nHere the nodes are enumerated in the order you visit them,\nand you could follow `1-2-3-4-5` to compare different strategies.\n\n`Left -> Node -> Right` order of inorder traversal\nmeans for BST that each element should be smaller\nthan the next one.\n\nHence the algorithm with $$\\mathcal{O}(N)$$ time complexity\nand $$\\mathcal{O}(N)$$ space complexity could be simple:\n\n- Compute inorder traversal list `inorder`.\n\n- Check if each element in `inorder` is smaller than the next one.\n\n![postorder](../Figures/98/98_bst_inorder.png)\n\n> Do we need to keep the whole `inorder` traversal list?\n\nActually, no. The last added inorder element is enough\nto ensure at each step that the tree is BST (or not).\nHence one could merge both steps into one and\nreduce the used space.\n\n**Code**\n\nWe can implement the algorithm recursively.\n\n<iframe src=\"https://leetcode.com/playground/ag2ZyfBs/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"ag2ZyfBs\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the worst case\nwhen the tree is a BST or the \"bad\" element is a rightmost leaf.\n\n* Space complexity : $$\\mathcal{O}(N)$$ for the space on the run-time stack.\n\n<br />\n<br />\n\n---\n\n#### Approach 4: Iterative Inorder Traversal\n\nAlternatively, we could implement the above algorithm iteratively.\n\n<iframe src=\"https://leetcode.com/playground/ed3EicVG/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"ed3EicVG\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the worst case\nwhen the tree is BST or the \"bad\" element is a rightmost leaf.\n\n* Space complexity : $$\\mathcal{O}(N)$$ to keep `stack`.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "validate-binary-search-tree",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.336,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "153",
                "title": "Binary Tree Inorder Traversal",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "94",
                    "questionFrontendId": "94",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Inorder Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-inorder-traversal/submit/",
                    "interpretUrl": "/problems/binary-tree-inorder-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<int> inorderTraversal(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<Integer> inorderTraversal(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def inorderTraversal(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* inorderTraversal(struct TreeNode* root, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<int> InorderTraversal(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[]}\\n */\\nvar inorderTraversal = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[]}\\ndef inorder_traversal(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func inorderTraversal(_ root: TreeNode?) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc inorderTraversal(root *TreeNode) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def inorderTraversal(root: TreeNode): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun inorderTraversal(root: TreeNode?): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn inorder_traversal(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[]\\n     */\\n    function inorderTraversal($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction inorderTraversal(root: TreeNode | null): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (inorder-traversal root)\\n  (-> (or/c tree-node? #f) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec inorder_traversal(Root :: #tree_node{} | null) -> [integer()].\\ninorder_traversal(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec inorder_traversal(root :: TreeNode.t | nil) :: [integer]\\n  def inorder_traversal(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,null,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"inorderTraversal\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the inorder traversal of its nodes&#39; values</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg\" style=\"width: 202px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2,3]\n<strong>Output:</strong> [1,3,2]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [2,1]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg\" style=\"width: 202px; height: 202px;\" />\n<pre>\n<strong>Input:</strong> root = [1,null,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Inorder Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Recursive Approach\n\nThe first method to solve this problem is using recursion.\nThis is the classical method and is straightforward. We can define a helper function to implement recursion.\n\n<iframe src=\"https://leetcode.com/playground/stzQZusR/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"stzQZusR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. The time complexity is $$O(n)$$ because the recursive function is $$T(n) = 2 \\cdot T(n/2)+1$$.\n\n* Space complexity : The worst case space required is $$O(n)$$, and in the average case it's $$O(\\log n)$$ where $$ n$$ is number of nodes.\n<br />\n<br />\n---\n#### Approach 2: Iterating method using Stack\n\nThe strategy is very similiar to the first method, the different is using stack.\n\nHere is an illustration:\n\n!?!../Documents/94_Binary.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/C9344qJ6/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"C9344qJ6\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$.\n\n* Space complexity : $$O(n)$$.\n<br />\n<br />\n---\n#### Approach 3: Morris Traversal\n\n\nIn this method, we have to use a new data structure-Threaded Binary Tree, and the strategy is as follows:\n\n\n>Step 1: Initialize current as root\n>\n>Step 2: While current is not NULL,\n>\n>     If current does not have left child\n>\n>         a. Add current\u2019s value\n>\n>         b. Go to the right, i.e., current = current.right\n>\n>     Else\n>\n>         a. In current's left subtree, make current the right child of the rightmost node\n>\n>         b. Go to this left child, i.e., current = current.left\n\n\nFor example:\n```\n\n          1\n        /   \\\n       2     3\n      / \\   /\n     4   5 6\n\n```\nFirst, 1 is the root, so initialize 1 as current, 1 has left child which is 2, the current's left subtree is\n\n```\n         2\n        / \\\n       4   5\n```\n So in this subtree, the rightmost node is 5, then make the current(1) as the right child of 5. Set current = cuurent.left (current = 2).\nThe tree now looks like:\n```\n         2\n        / \\\n       4   5\n            \\\n             1\n              \\\n               3\n              /\n             6\n```\nFor current 2, which has left child 4, we can continue with thesame process as we did above\n```\n        4\n         \\\n          2\n           \\\n            5\n             \\\n              1\n               \\\n                3\n               /\n              6\n```\n then add 4 because it has no left child, then add 2, 5, 1, 3 one by one, for node 3 which has left child 6, do the same as above.\nFinally, the inorder taversal is [4,2,5,1,6,3].\n\nFor more details, please check\n[Threaded binary tree](https://en.wikipedia.org/wiki/Threaded_binary_tree) and\n[Explaination of Morris Method](https://stackoverflow.com/questions/5502916/explain-morris-inorder-tree-traversal-without-using-stacks-or-recursion)\n\n\n<iframe src=\"https://leetcode.com/playground/osLqwuNN/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"osLqwuNN\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. To prove that the time complexity is $$O(n)$$,\nthe biggest problem lies in finding the time complexity of finding the predecessor nodes of all the nodes in the binary tree.\nIntuitively, the complexity is $$O(n\\log n)$$, because to find the predecessor node for a single node related to the height of the tree.\nBut in fact, finding the predecessor nodes for all nodes only needs $$O(n)$$ time. Because a binary Tree with $$n$$ nodes has $$n-1$$ edges, the whole processing for each edges up to 2 times, one is to locate a node, and the other is to find the predecessor node.\nSo the complexity is $$O(n)$$.\n\n* Space complexity : $$O(n)$$. Arraylist of size $$n$$ is used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "binary-tree-inorder-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.415,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "164",
                "title": "Binary Tree Level Order Traversal",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "102",
                    "questionFrontendId": "102",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Level Order Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-level-order-traversal/submit/",
                    "interpretUrl": "/problems/binary-tree-level-order-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> levelOrder(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> levelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def levelOrder(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<IList<int>> LevelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar levelOrder = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[][]}\\ndef level_order(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func levelOrder(_ root: TreeNode?) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc levelOrder(root *TreeNode) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def levelOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun levelOrder(root: TreeNode?): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[][]\\n     */\\n    function levelOrder($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction levelOrder(root: TreeNode | null): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (level-order root)\\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec level_order(Root :: #tree_node{} | null) -> [[integer()]].\\nlevel_order(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec level_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def level_order(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,null,null,15,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"levelOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the level order traversal of its nodes&#39; values</em>. (i.e., from left to right, level by level).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[9,20],[15,7]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Level Order Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### How to traverse the tree\n\nThere are two general strategies to traverse a tree:\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n    \nOn the following figure the nodes are numerated in the order you visit them,\nplease follow ```1-2-3-4-5``` to compare different strategies.\n\n![postorder](../Figures/145_transverse.png)\n\nHere the problem is to implement split-level BFS traversal : `[[1], [2, 3], [4, 5]]`.\n<br /> \n<br />\n\n\n---\n#### Approach 1: Recursion\n\n**Algorithm**\n\nThe simplest way to solve the problem is to use a recursion. Let's \nfirst ensure that the tree is not empty, and then call recursively the function \n`helper(node, level)`, which takes the current node and its level as the arguments.\n\nThis function does the following :\n\n- The output list here is called `levels`, and hence the current level is\njust a length of this list `len(levels)`.\nCompare the number of a current level `len(levels)` with a node level `level`.\nIf you're still on the previous level - add the new one by adding a \nnew list into `levels`.\n\n- Append the node value to the last list in `levels`.\n\n- Process recursively child nodes if they are not `None` : \n`helper(node.left / node.right, level + 1)`.\n\n**Implementation**\n\n!?!../Documents/102_LIS.json:1000,509!?!\n\n<iframe src=\"https://leetcode.com/playground/pRYovDJ4/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"pRYovDJ4\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is processed\nexactly once.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output structure which\ncontains `N` node values.\n<br />\n<br />\n\n\n---\n#### Approach 2: Iteration\n\n**Algorithm**\n\nThe recursion above could be rewritten in the iteration form.\n\nLet's keep nodes of each tree level in the _queue_ structure,\nwhich typically orders elements in a FIFO (first-in-first-out) manner.\nIn Java one could use [`LinkedList` implementation of the `Queue` interface](https://docs.oracle.com/javase/7/docs/api/java/util/Queue.html).\nIn Python using [`Queue` structure](https://docs.python.org/3/library/queue.html)\nwould be an overkill since it's designed for a safe exchange between multiple threads\nand hence requires locking which leads to a performance loose. \nIn Python the queue implementation with a fast atomic `append()`\nand `popleft()` is [`deque`](https://docs.python.org/3/library/collections.html#collections.deque).\n\nThe zero level contains only one node `root`. The algorithm is simple :\n\n- Initiate queue with a `root` and start from the level number `0` :\n`level = 0`.\n\n- While queue is not empty :\n\n    * Start the current level by adding an empty list into output structure `levels`.\n    \n    * Compute how many elements should be on the current level : it's a \n    queue length.\n    \n    * Pop out all these elements from the queue and add them into the current\n    level.\n    \n    * Push their child nodes into the queue for the next level.\n    \n    * Go to the next level `level++`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/YjxL23CU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"YjxL23CU\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since each node is processed\nexactly once.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output structure which\ncontains `N` node values.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-level-order-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.791,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "197",
                "title": "Binary Tree Zigzag Level Order Traversal",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "103",
                    "questionFrontendId": "103",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Zigzag Level Order Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-zigzag-level-order-traversal/submit/",
                    "interpretUrl": "/problems/binary-tree-zigzag-level-order-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def zigzagLevelOrder(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def zigzagLevelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** zigzagLevelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number[][]}\\n */\\nvar zigzagLevelOrder = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer[][]}\\ndef zigzag_level_order(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func zigzagLevelOrder(_ root: TreeNode?) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def zigzagLevelOrder(root: TreeNode): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun zigzagLevelOrder(root: TreeNode?): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn zigzag_level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer[][]\\n     */\\n    function zigzagLevelOrder($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction zigzagLevelOrder(root: TreeNode | null): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (zigzag-level-order root)\\n  (-> (or/c tree-node? #f) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec zigzag_level_order(Root :: #tree_node{} | null) -> [[integer()]].\\nzigzag_level_order(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec zigzag_level_order(root :: TreeNode.t | nil) :: [[integer]]\\n  def zigzag_level_order(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,null,null,15,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"zigzagLevelOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>root</code> of a binary tree, return <em>the zigzag level order traversal of its nodes&#39; values</em>. (i.e., from left to right, then right to left for the next level and alternate between).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[3],[20,9],[15,7]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [[1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Zigzag Level Order Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: BFS (Breadth-First Search)\n\n**Intuition**\n\nFollowing the description of the problem, the most intuitive solution would be the *BFS* (Breadth-First Search) approach through which we traverse the tree level-by-level.\n\nThe default ordering of BFS within a single level is from left to right. As a result, we should adjust the BFS algorithm a bit to generate the desired zigzag ordering.\n\n>One of the keys here is to store the values that are of the same level with the `deque` (double-ended queue) data structure, where we could add new values on either end of a queue.\n\nSo if we want to have the ordering of **FIFO** (first-in-first-out), we simply append the new elements to the *tail* of the queue, _i.e._ the late comers stand last in the queue. While if we want to have the ordering of **FILO** (first-in-last-out), we insert the new elements to the *head* of the queue, _i.e._ the late comers jump the queue.\n\n![pic](../Figures/103/103_BFS.png)\n\n\n**Algorithm**\n\nThere are several ways to implement the BFS algorithm.\n\n- One way would be that we run a two-level nested loop, with the *outer loop* iterating each level on the tree, and with the *inner loop* iterating each node within a single level.\n<br/>\n- We could also implement BFS with a single loop though. The trick is that we append the nodes to be visited into a queue and we separate nodes of different levels with a sort of **delimiter** (_e.g._ an empty node). The delimiter marks the end of a level, as well as the beginning of a new level.\n\nHere we adopt the *second* approach above. One can start with the normal BFS algorithm, upon which we add a touch of *zigzag* order with the help of `deque`. For each level, we start from an empty deque container to hold all the values of the same level. Depending on the ordering of each level, _i.e._ either from-left-to-right or from-right-to-left, we decide at which end of the deque to add the new element:\n\n![pic](../Figures/103/103_deque.png)\n\n- For the ordering of from-left-to-right (FIFO), we _append_ the new element to the **_tail_** of the queue, so that the element that comes late would get out late as well. As we can see from the above graph, given an input sequence of `[1, 2, 3, 4, 5]`, with FIFO ordering, we would have an output sequence of `[1, 2, 3, 4, 5]`.\n\n- For the ordering of from-right-to-left (FILO), we _insert_ the new element to the **_head_** of the queue, so that the element that comes late would get out first. With the same input sequence of `[1, 2, 3, 4, 5]`, with FILO ordering, we would obtain an output sequence of `[5, 4, 3, 2, 1]`.\n\n<iframe src=\"https://leetcode.com/playground/CuzksuMQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"CuzksuMQ\"></iframe>\n\nNote: as an alternative approach, one can also implement the normal BFS algorithm first, which would generate the ordering of from-left-to-right for each of the levels. Then, at the end of the algorithm, we can simply **_reverse_** the ordering of certain levels, following the zigzag steps.\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the number of nodes in the tree.\n\n    - We visit each node once and only once.\n\n    - In addition, the insertion operation on either end of the deque takes a constant time, rather than using the array/list data structure where the inserting at the head could take the $$\\mathcal{O}(K)$$ time where $$K$$ is the length of the list.\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of nodes in the tree.\n\n    - The main memory consumption of the algorithm is the `node_queue` that we use for the loop, apart from the array that we use to keep the final output.\n\n    - As one can see, at any given moment, the `node_queue` would hold the nodes that are _at most_ across two levels. Therefore, at most, the size of the queue would be no more than $$2 \\cdot L$$, assuming $$L$$ is the maximum number of nodes that might reside on the same level. Since we have a binary tree, the level that contains the most nodes could occur to consist all the leave nodes in a full binary tree, which is roughly $$L = \\frac{N}{2}$$. As a result, we have the space complexity of $$2 \\cdot \\frac{N}{2} = N$$ in the worst case.   \n<br/>\n<br/>\n\n---\n#### Approach 2: DFS (Depth-First Search)\n\n**Intuition**\n\nThough not intuitive, we could also obtain the _BFS_ traversal ordering via the _DFS_ (Depth-First Search) traversal in the tree.\n\n>The trick is that during the DFS traversal, we maintain the results in a _global_ array that is indexed by the level, _i.e._ the element `array[level]` would contain all the nodes that are at the same level. The global array would then be referred and updated at each step of DFS.\n\n![pic](../Figures/103/103_DFS.png)\n\nSimilar with the above modified BFS algorithm, we employ the `deque` data structure to hold the nodes that are of the same level, and we alternate the insertion direction (_i.e._ either to the head or to the tail) to generate the desired output ordering.\n\n**Algorithm**\n\nHere we implement the DFS algorithm via _recursion_. We define a recursive function called `DFS(node, level)` which only takes care of the current `node` which is located at the specified `level`. Within the function, here are three steps that we would perform:\n\n- If this is the first time that we visit any node at the `level`, _i.e._ the deque for the level does not exist, then we simply create the deque with the current node value as the initial element.\n\n- If the deque for this level exists, then depending on the ordering, we insert the current node value either to the head or to the tail of the queue.\n\n- At the end, we _recursively_ call the function for each of its child nodes.\n\n\n<iframe src=\"https://leetcode.com/playground/5kZDYMsP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5kZDYMsP\"></iframe>\n\nIt might go without saying that, one can also implement the DFS traversal via **_iteration_** rather than recursion, which could be one of the followup questions by an interviewer.\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the number of nodes in the tree.\n\n    - Same as the previous BFS approach, we visit each node once and only once.\n\n- Space Complexity: $$\\mathcal{O}(H)$$, where $$H$$ is the height of the tree, _i.e._ the number of levels in the tree, which would be roughly $$\\log_2{N}$$.\n\n    - Unlike the BFS approach, in the DFS approach, we do not need to maintain the `node_queue` data structure for the traversal.\n\n    - However, the function recursion would incur additional memory consumption on the _function call stack_. As we can see, the size of the call stack for any invocation of `DFS(node, level)` would be exactly the number of `level` that the current node resides on. Therefore, the space complexity of our DFS algorithm is $$\\mathcal{O}(\\log_2{N})$$ which is much better than the BFS approach.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-zigzag-level-order-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.312,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "192",
                "title": "Populating Next Right Pointers in Each Node",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "116",
                    "questionFrontendId": "116",
                    "sessionId": "968792",
                    "questionTitle": "Populating Next Right Pointers in Each Node",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/populating-next-right-pointers-in-each-node/submit/",
                    "interpretUrl": "/problems/populating-next-right-pointers-in-each-node/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* left;\\n    Node* right;\\n    Node* next;\\n\\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\\n\\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\\n\\n    Node(int _val, Node* _left, Node* _right, Node* _next)\\n        : val(_val), left(_left), right(_right), next(_next) {}\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* connect(Node* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n    public Node next;\\n\\n    public Node() {}\\n    \\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, Node _left, Node _right, Node _next) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n        next = _next;\\n    }\\n};\\n*/\\n\\nclass Solution {\\n    public Node connect(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val=0, left=None, right=None, next=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n        self.next = next\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def connect(self, root):\\n        \\\"\\\"\\\"\\n        :type root: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n        self.next = next\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def connect(self, root: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     struct Node *left;\\n *     struct Node *right;\\n *     struct Node *next;\\n * };\\n */\\n\\nstruct Node* connect(struct Node* root) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n    public Node next;\\n\\n    public Node() {}\\n\\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, Node _left, Node _right, Node _next) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n        next = _next;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node Connect(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, left, right, next) {\\n *    this.val = val === undefined ? null : val;\\n *    this.left = left === undefined ? null : left;\\n *    this.right = right === undefined ? null : right;\\n *    this.next = next === undefined ? null : next;\\n * };\\n */\\n\\n/**\\n * @param {Node} root\\n * @return {Node}\\n */\\nvar connect = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for Node.\\n# class Node\\n#     attr_accessor :val, :left, :right, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right, @next = nil, nil, nil\\n#     end\\n# end\\n\\n# @param {Node} root\\n# @return {Node}\\ndef connect(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var left: Node?\\n *     public var right: Node?\\n *\\t   public var next: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *         self.next = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func connect(_ root: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Left *Node\\n *     Right *Node\\n *     Next *Node\\n * }\\n */\\n\\nfunc connect(root *Node) *Node {\\n\\t\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: Node = null\\n *   var right: Node = null\\n *   var next: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def connect(root: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var left: Node? = null\\n *     var right: Node? = null\\n *     var next: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun connect(root: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->left = null;\\n *         $this->right = null;\\n *         $this->next = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $root\\n     * @return Node\\n     */\\n    public function connect($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     left: Node | null\\n *     right: Node | null\\n *     next: Node | null\\n *     constructor(val?: number, left?: Node, right?: Node, next?: Node) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction connect(root: Node | null): Node | null {\\n    \\n};\"}]",
                    "sampleTestCase": "[1,2,3,4,5,6,7]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"connect\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"structures\": [\n    {\n      \"name\": \"TreeNode\",\n      \"comment\": \"Definition for a Node.\",\n      \"members\": [\n        {\n          \"name\": \"val\",\n          \"type\": \"integer\"\n        },\n        {\n          \"name\": \"left\",\n          \"type\": \"TreeNode\"\n        },\n        {\n          \"name\": \"right\",\n          \"type\": \"TreeNode\"\n        },\n        {\n          \"name\": \"next\",\n          \"type\": \"TreeNode\"\n        }\n      ]\n    }\n  ],\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"swift\",\n    \"golang\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n\n<pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" style=\"width: 500px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,6,7]\n<strong>Output:</strong> [1,#,2,3,#,4,5,6,7,#]\n<strong>Explanation: </strong>Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 2<sup>12</sup> - 1]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong></p>\n\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Populating Next Right Pointers in Each Node",
                        "content": "[TOC]\n\n## Solution\n\n#### Approach 1: Level Order Traversal\n\n**Intuition**\n\nThere are two basic kinds of traversals on a tree or a graph. One is where we explore the tree in a depth first manner i.e. one branch at a time. The other one is where we traverse the tree breadth-wise i.e. we explore one level of the tree before moving on to the next one. For trees, we have further classifications of the depth first traversal approach called `preorder`, `inorder`, and the `postorder` traversals. Breadth first approach to exploring a tree is based on the concept of the `level` of a node. The `level` of a node is its depth or distance from the root node. We process all the nodes on one level before moving on to the next one. \n\n<center>\n<img src=\"../Figures/116/img1.png\" width=\"600\"/>\n</center>\n\nNow that we have the basics out of the way, it's pretty evident that the problem statement strongly hints at a breadth first kind of a solution. We need to link all the nodes together which lie on the `same level` and the level order or the breadth first traversal gives us access to all such nodes.\n\n**Algorithm**\n\n1. Initialize a queue, `Q` which we will be making use of during our traversal. There are multiple ways to implement the level order traversal especially when it comes to identifying the level of a particular node. \n    1. We can add a pair of $$(node, level)$$ to the queue and whenever we add the children of a node, we add $$\\text (node.left, \\;\\; parent\\_level + 1)$$ and $$(node.right,\\;\\; parent\\_level + 1)$$. This approach wouldn't be very efficient for our algorithm since we need *all* the nodes on the same level and we would need another data structure just for that.\n    \n        <center>\n        <img src=\"../Figures/116/img2.png\" width=\"600\"/>\n        </center>\n    \n    2. A more memory efficient way of segregating the same level nodes is to use some demarcation between the levels. Usually, we insert a `NULL` entry in the queue which marks the end of the previous level and the start of the next level. This is a great approach but again, it would still consume some memory proportional to the number of levels in the tree. \n\n        <center>\n        <img src=\"../Figures/116/img3.png\" width=\"600\"/>\n        </center>\n\n    3. The approach we will be using here would have a nested loop structure to get around the requirement of a `NULL` pointer. Essentially, at each step, we record the size of the queue and that always corresponds to ***all*** the nodes on a particular level. Once we have this size, we only process these many elements and no more. By the time we are done processing `size` number of elements, the queue would contain ***all*** the nodes on the next level. Here's a pseudocode for the same:\n        <pre>\n        while (!Q.empty())\n        {\n            size = Q.size()\n            for i in range 0..size\n            {\n                node = Q.pop()\n                Q.push(node.left)\n                Q.push(node.right)\n            }\n        }\n        </pre>\n        \n2. We start off by adding the root of the tree in the queue. Since there is just one node on the level 0, we don't need to establish any connections and can move onto the `while` loop.\n\n    <center>\n    <img src=\"../Figures/116/img4.png\" width=\"600\"/>\n    </center>\n\n3. The first `while` loop from the pseudocode above essentially iterates over each level one by one and the inner for loop iterates over all the nodes on the particular level. Since we have access to all the nodes on the same level, we can establish the next pointers easily. \n4. When we `pop` a node inside the `for` loop from the pseudocode above, we add its children at the back of the queue. Also, the element at the head of the queue is the `next` element in order, on the current level. So, we can easily establish the new pointers.\n\n    <center>\n    <img src=\"../Figures/116/img5.png\" width=\"600\"/>\n    </center>\n\n<iframe src=\"https://leetcode.com/playground/7vEbbNNP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"7vEbbNNP\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node exactly once. Note that processing a node in this context means popping the node from the queue and then establishing the next pointers. \n* Space Complexity: $$O(N)$$. This is a perfect binary tree which means the last level contains $$N/2$$ nodes. The space complexity for breadth first traversal is the space occupied by the queue which is dependent upon the maximum number of nodes in particular level. So, in this case, the space complexity would be $$O(N)$$.\n<br>\n<br>\n\n---\n#### Approach 2: Using previously established next pointers\n\n**Intuition**\n\nLet's look at the two types of `next` pointer connections we need to establish for a given tree.\n\n1. This first case is the one where we establish the next pointers between the two children of a given node. This is the easier of the two cases since both the children are accessible via the same node. We can simply do the following to establish this connection.\n    <pre>\n    node.left.next = node.right</pre>\n    \n    <center>\n    <img src=\"../Figures/116/img6.png\" width=\"600\"/>\n    </center>\n    \n2.  This next case is not too straightforward to handle. In addition to establishing the next pointers between the nodes having a common parent, we also need to set-up the correct pointers between nodes which have a different parent. \n\n    <center>\n    <img src=\"../Figures/116/img7.png\" width=\"600\"/>\n    </center>\n   \nIf we simply had the parent pointers available with each node, this problem would have been trivial to solve. However, we don't have any such pointers available. The basic idea for this approach is based on the fact that:\n\n> We only move on to the level N+1 when we are done establishing the next pointers for the level N. Since we have access to all the nodes on a particular level via the next pointers, we can use these next pointers to establish the connections for the next level or the level containing their children.\n\n**Algorithm**\n\n1. We start at the root node. Since there are no more nodes to process on the first level or level `0`, we can establish the next pointers on the next level i.e. level 1. An important thing to remember in this algorithm is that we establish the next pointers for a level $$N$$ while we are still on level $$N-1$$ and once we are done establishing these new connections, we move on to $$N$$ and do the same thing for $$N+1$$.\n2. As we just said, when we go over the nodes of a particular level, their next pointers are already established. This is what helps get rid of the queue data structure from the previous approach and helps save space. To start on a particular level, we just need the `leftmost` node. From there on out, its just a linked list traversal.   \n3. Based on these ideas, our algorithm will have the following pseudocode:\n\n    <pre>\n    leftmost = root\n    while (leftmost.left != null)\n    {\n        head = leftmost\n        while (head.next != null)\n        {\n            1) Establish Connection 1\n            2) Establish Connection 2 using next pointers\n            head = head.next\n        }\n        leftmost = leftmost.left\n    }</pre>\n    \n    <center>\n    <img src=\"../Figures/116/img8.png\" width=\"600\"/>\n    </center>\n\n4. The `Connection 1` and `Connection 2` mentioned above correspond to the two kinds of connections we looked at earlier on in the intuition section of this approach. \n    1. The first one is fairly simple to establish given that it's between the two nodes having a common parent. So, we could simply do something like this to link the two children:\n    \n        <pre>\n        node.left.next = node.right\n        </pre>\n        \n        <center>\n        <img src=\"../Figures/116/img9.png\" width=\"600\"/>\n        </center>\n        \n    2.  For the second type of connection, we have to make use of the next pointers on the current level. Remember that this second type of connection is between nodes that have different parents. More specifically, it's the link between the right child of a node and the left child of the `next` node. Since we already have the next pointers set up on the current level, we use this to set up the correct pointers on the next level.\n    \n        <pre>\n        node.right.next = node.next.left\n        </pre>   \n        \n        <center>\n        <img src=\"../Figures/116/img10.png\" width=\"600\"/>\n        </center>\n        \n5. Once we are done with the current level, we move on to the next one. One last thing that's left here is to update the `leftmost` node. We need that node to start traversal on a particular level. Think of it as the head of the linked list. Since this is a `perfect binary tree`, the leftmost node will always be the left child of the current leftmost node. The only nodes which don't have any children are the ones on the final level and these would be the leaves of the tree. \n\n    <center>\n    <img src=\"../Figures/116/img11.png\" width=\"600\"/>\n    </center>\n\n<iframe src=\"https://leetcode.com/playground/jiMfKo4a/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jiMfKo4a\"></iframe>   \n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node exactly once.\n* Space Complexity: $$O(1)$$ since we don't make use of any additional data structure for traversing nodes on a particular level like the previous approach does. \n<br>\n<br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "populating-next-right-pointers-in-each-node",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.921,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "163",
                "title": "Populating Next Right Pointers in Each Node II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Microsoft phone and onsite interviews.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "117",
                    "questionFrontendId": "117",
                    "sessionId": "968792",
                    "questionTitle": "Populating Next Right Pointers in Each Node II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/populating-next-right-pointers-in-each-node-ii/submit/",
                    "interpretUrl": "/problems/populating-next-right-pointers-in-each-node-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* left;\\n    Node* right;\\n    Node* next;\\n\\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\\n\\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\\n\\n    Node(int _val, Node* _left, Node* _right, Node* _next)\\n        : val(_val), left(_left), right(_right), next(_next) {}\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* connect(Node* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n    public Node next;\\n\\n    public Node() {}\\n    \\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, Node _left, Node _right, Node _next) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n        next = _next;\\n    }\\n};\\n*/\\n\\nclass Solution {\\n    public Node connect(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val=0, left=None, right=None, next=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n        self.next = next\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def connect(self, root):\\n        \\\"\\\"\\\"\\n        :type root: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n        self.next = next\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def connect(self, root: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     struct Node *left;\\n *     struct Node *right;\\n *     struct Node *next;\\n * };\\n */\\n\\nstruct Node* connect(struct Node* root) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node left;\\n    public Node right;\\n    public Node next;\\n\\n    public Node() {}\\n\\n    public Node(int _val) {\\n        val = _val;\\n    }\\n\\n    public Node(int _val, Node _left, Node _right, Node _next) {\\n        val = _val;\\n        left = _left;\\n        right = _right;\\n        next = _next;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node Connect(Node root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, left, right, next) {\\n *    this.val = val === undefined ? null : val;\\n *    this.left = left === undefined ? null : left;\\n *    this.right = right === undefined ? null : right;\\n *    this.next = next === undefined ? null : next;\\n * };\\n */\\n\\n/**\\n * @param {Node} root\\n * @return {Node}\\n */\\nvar connect = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a Node.\\n# class Node\\n#     attr_accessor :val, :left, :right, :next\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right, @next = nil, nil, nil\\n#     end\\n# end\\n\\n# @param {Node} root\\n# @return {Node}\\ndef connect(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var left: Node?\\n *     public var right: Node?\\n *\\t   public var next: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *         self.next = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func connect(_ root: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Left *Node\\n *     Right *Node\\n *     Next *Node\\n * }\\n */\\n\\nfunc connect(root *Node) *Node {\\n\\t\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: Node = null\\n *   var right: Node = null\\n *   var next: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def connect(root: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var left: Node? = null\\n *     var right: Node? = null\\n *     var next: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun connect(root: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->left = null;\\n *         $this->right = null;\\n *         $this->next = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $root\\n     * @return Node\\n     */\\n    public function connect($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     left: Node | null\\n *     right: Node | null\\n *     next: Node | null\\n *     constructor(val?: number, left?: Node, right?: Node, next?: Node) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction connect(root: Node | null): Node | null {\\n    \\n};\"}]",
                    "sampleTestCase": "[1,2,3,4,5,null,7]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"connect\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary tree</p>\n\n<pre>\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</pre>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/15/117_sample.png\" style=\"width: 500px; height: 171px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,4,5,null,7]\n<strong>Output:</strong> [1,#,2,3,#,4,5,7,#]\n<strong>Explanation: </strong>Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li>\n\t<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow-up:</strong></p>\n\n<ul>\n\t<li>You may only use constant extra space.</li>\n\t<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Populating Next Right Pointers in Each Node II",
                        "content": "[TOC]\n\n## Solution\n\n#### Approach 1: Level Order Traversal\n\n**Intuition**\n\nThere are two basic kinds of traversals on a tree or a graph. One is where we explore the tree in a depth first manner i.e. one branch at a time. The other one is where we traverse the tree breadth-wise i.e. we explore one level of the tree before moving on to the next one. For trees, we have further classifications of the depth first traversal approach called `preorder`, `inorder`, and the `postorder` traversals. Breadth first approach to exploring a tree is based on the concept of the `level` of a node. The `level` of a node is its depth or distance from the root node. We process all the nodes on one level before moving on to the next one. \n\n<center>\n<img src=\"../Figures/117/img1.png\" width=\"600\"/>\n</center>\n\nNow that we have the basics out of the way, it's pretty evident that the problem statement strongly hints at a breadth first kind of a solution. We need to link all the nodes together which lie on the `same level` and the level order or the breadth first traversal gives us access to all such nodes which lie on the same level. \n\n**Algorithm**\n\n1. Initialize a queue, `Q` which we will be making use of during our traversal. There are multiple ways to implement the level order traversal especially when it comes to identifying the level of a particular node. \n    1. We can add a pair of $$(node, level)$$ to the queue and whenever we add the children of a node, we add $$\\text (node.left, \\;\\; parent\\_level + 1)$$ and $$(node.right,\\;\\; parent\\_level + 1)$$. This approach wouldn't be very efficient for our algorithm since we need *all* the nodes on the same level and we would need another data structure just for that.\n    \n        <center>\n        <img src=\"../Figures/117/img2.png\" width=\"600\"/>\n        </center>\n    \n    2. A more memory efficient way of segregating the same level nodes is to use some demarcation between the levels. Usually, we insert a `NULL` entry in the queue which marks the end of the previous level and the start of the next level. This is a great approach but again, it would still consume some memory proportional to the number of levels in the tree. \n\n        <center>\n        <img src=\"../Figures/117/img3.png\" width=\"600\"/>\n        </center>\n\n    3. The approach we will be using here would have a nested loop structure to get around the requirement of a `NULL` pointer. Essentially, at each step, we record the size of the queue and that always corresponds to ***all*** the nodes on a particular level. Once we have this size, we only process these many elements and no more. By the time we are done processing `size` number of elements, the queue would contain ***all*** the nodes on the next level. Here's a pseudocode for the same:\n        <pre>\n        while (!Q.empty())\n        {\n            size = Q.size()\n            for i in range 0..size\n            {\n                node = Q.pop()\n                Q.push(node.left)\n                Q.push(node.right)\n            }\n        }\n        </pre>\n\n2. We start off by adding the root of the tree in the queue. Since there is just one node on the level 0, we don't need to establish any connections and can move onto the `while` loop.\n\n    <center>\n    <img src=\"../Figures/117/img4.png\" width=\"600\"/>\n    </center>\n\n3. The first `while` loop from the pseudocode above essentially iterates over each level one by one and the inner for loop iterates over all the nodes on the particular level. Since we have access to all the nodes on the same level, we can establish the next pointers easily. \n4. When we `pop` a node inside the `for` loop from the pseudocode above, we add its children at the back of the queue. Also, the element at the head of the queue is the `next` element in order, on the current level. So, we can easily establish the new pointers.\n\n    <center>\n    <img src=\"../Figures/117/img5.png\" width=\"600\"/>\n    </center>\n\n<iframe src=\"https://leetcode.com/playground/MSNnpFeK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"MSNnpFeK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node exactly once. Note that processing a node in this context means popping the node from the queue and then establishing the next pointers. \n* Space Complexity: $$O(N)$$. This is a perfect binary tree which means the last level contains $$N/2$$ nodes. The space complexity for breadth first traversal is the maximum space occupied and the space occupied by the queue is dependent upon the maximum number of nodes in particular level. So, in this case, the space complexity would be $$O(N)$$.\n<br>\n<br>\n\n---\n#### Approach 2: Using previously established next pointers\n\n**Intuition**\n\nWe have to process all the nodes of the tree. So we can't reduce the time complexity any further. However, we can try and reduce the space complexity. The reason we need a queue here is because we don't have any idea about the structure of the tree and the kind of branches it has and we need to access all the nodes on a common level, together, and establish connections between them. \n\nOnce we are done establishing the `next` pointers between the nodes, don't they kind of represent a linked list? After the `next` connections are established, all the nodes on a particular level actually form a linked list via these `next` pointers. Based on this idea, we have the following intuition for our space efficient algorithm:\n\n> We only move on to the level N+1 when we are done establishing the next pointers for the level N. So, since we have access to all the nodes on a particular level via the next pointers, we can use these next pointers to establish the connections for the next level or the level containing their children.\n\n**Algorithm**\n\n1. We start at the root node. Since there are no more nodes to process on the first level or level `0`, we can establish the next pointers on the next level i.e. level 1. An important thing to remember in this algorithm is that we establish the next pointers for a level $$N$$ while we are still on level $$N-1$$ and once we are done establishing these new connections, we move on to $$N$$ and do the same thing for $$N+1$$.\n2. As we just said, when we go over the nodes of a particular level, their next pointers are already established. This is what helps get rid of the queue data structure from the previous approach and helps save space. To start on a particular level, we just need the `leftmost` node. From there on its just a linked list traversal.   \n3. Based on these ideas, our algorithm will have the following pseudocode:\n\n    <pre>\n    leftmost = root\n    while (leftmost != null)\n    {\n        curr = leftmost\n        prev = NULL\n        while (curr != null)\n        {\n            \u2192 process left child\n            \u2192 process right child\n            \u2192 set leftmost for the next level\n            curr = curr.next\n        }\n    }\n    </pre>\n\n4. Before we proceed with the steps in our algorithm, we need to understand some of the variables we have used above in the pseudocode since they will be important in understanding the implementation. \n    1. **leftmost:** represents the corresponding variable on each level. This node is important to discover on each level since this would act as our head of the linked list and we will start our traversal of all the nodes on a level from this node onwards. Since the structure of the tree can be anything, we don't really know what the leftmost node on a level would be. Let's look at a few tree structures and the corresponding leftmost nodes on each level. \n    \n        <center>\n        <img src=\"../Figures/117/img6.png\" width=\"600\"/>\n        </center>\n        \n        Oh, in case you are interested in a fun problem that find out all such nodes (rightmost instead of leftmost), check out [this problem](https://leetcode.com/problems/binary-tree-right-side-view/description/).    \n    \n    2. **curr:** As we can see in the pseudocode, this is just the variable we use to traverse all the nodes on the `current` level. It starts off with `leftmost` and then follows the `next` pointers all the way to the very end. \n    3. **prev:** This is the pointer to the `leading` node on the `next` level. We need this pointer because whenever we update the node `curr`, we assign `prev.next` to the left child of `curr` if one exists, otherwise the right child. When we do so, we also update the `prev` pointer. Let's consider an example that highlights how the `prev` pointer is updated. Namely, the following example will highlight the 4 possible scenarios for pointer updates:\n\n          - The first case is when the `prev` pointer is assigned a non-null value for the very first time i.e. when it is initialized. We start with a `null` value and when we find the first node on the *next* level i.e whenever we find the very first node on the current level that has at least one child, we assign the leftmost child to `prev`.\n          \n          <center>\n          <img src=\"../Figures/117/img7.png\" width=\"500\"/>\n          </center>\n        \n          - Next is when the node on the current level doesn't have a left child. We then point `prev` to the right child of the current node. An important thing to remember in this illustration is that the level `2, 3, 5, 9` already has their `next` pointers properly established. \n          \n          <center>\n          <img src=\"../Figures/117/img8.png\" width=\"500\"/>\n          </center>\n        \n          - Moving on, we have a node with no children. Here, we don't update the `prev` pointer. \n          \n          <center>\n          <img src=\"../Figures/117/img9.png\" width=\"500\"/>\n          </center>\n          \n          - And finally, we come across a node with 2 children. We first update `prev` to the left child and once the necessary processing is done, we update it to the right child. \n          \n          <center>\n          <img src=\"../Figures/117/img10.png\" width=\"500\"/>\n          </center>\n \n5. Once we are done with the current level, we move on to the next one. One last thing that's left here to update the `leftmost` node. We need that node to start traversal on a particular level. Think of it as the head of the linked list. This is easy to do by using the `prev` pointer. Whenever we set the value for `prev` pointer for the first time corresponding to a level i.e. whenever we set it to it's first node, we also set the head or the `leftmost` to that node. So, in the following image, `leftmost` originally was `2` and now it would change to `4`.\n\n    <center>\n    <img src=\"../Figures/117/img7.png\" width=\"500\"/>\n    </center>\n\n<iframe src=\"https://leetcode.com/playground/aEtvkSCK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"aEtvkSCK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ since we process each node exactly once.\n* Space Complexity: $$O(1)$$ since we don't make use of any additional data structure for traversing nodes on a particular level like the previous approach does. \n<br>\n<br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "populating-next-right-pointers-in-each-node-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.857,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "182",
                "title": "Lowest Common Ancestor of a Binary Search Tree",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft phone interview.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "235",
                    "questionFrontendId": "235",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Search Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-search-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-search-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\n\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\n\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val   int\\n *     Left  *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\nfunc lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n\\t\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[6,2,8,0,4,7,9,null,null,3,5]\n2\n8",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The LCA of nodes 2 and 8 is 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [2,1], p = 2, q = 1\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the BST.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Search Tree",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\nWe can solve this using the approaches to find [LCA in a binary tree](https://leetcode.com/articles/lowest-common-ancestor-of-a-binary-tree/).\r\n\r\nBut, binary search tree's property could be utilized, to come up with a better algorithm.\r\n\r\nLets review properties of a BST:\r\n>1. Left subtree of a node N contains nodes whose values are lesser than or equal to node N's value.\r\n>2. Right subtree of a node N contains nodes whose values are greater than node N's value.\r\n>3. Both left and right subtrees are also BSTs.\r\n\r\n#### Approach 1: Recursive Approach\r\n\r\n**Intuition**\r\n\r\nLowest common ancestor for two nodes `p` and `q` would be the last ancestor node common to both of them. Here `last` is defined in terms of the depth of the node. The below diagram would help in understanding what `lowest` means.\r\n\r\n<center>\r\n<img src=\"../Figures/235/235_LCA_Binary_1.png\" width=\"600\"/>\r\n</center>\r\n\r\nNote: One of `p` or `q` would be in the left subtree and the other in the right subtree of the LCA node.\r\n\r\nFollowing cases are possible:\r\n<center>\r\n<img src=\"../Figures/235/235_LCA_Binary_2.png\" width=\"600\"/>\r\n</center>\r\n\r\n**Algorithm**\r\n\r\n1. Start traversing the tree from the root node.\r\n2. If both the nodes `p` and `q` are in the right subtree, then continue the search with right subtree starting step 1.\r\n3. If both the nodes `p` and `q` are in the left subtree, then continue the search with left subtree starting step 1.\r\n4. If both step 2 and step 3 are not true, this means we have found the node which is common to node `p`'s and `q`'s subtrees.\r\nand hence we return this common node as the LCA.\r\n\r\n<iframe src=\"https://leetcode.com/playground/ub9aBGUZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"ub9aBGUZ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.\r\n\r\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed BST could be $$N$$.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: Iterative Approach\r\n\r\n**Algorithm**\r\n\r\nThe steps taken are also similar to approach 1. The only difference is instead of recursively calling the function, we traverse down the tree iteratively. This is possible without using a stack or recursion since we don't need to backtrace to find the LCA node. In essence of it the problem is iterative, it just wants us to find the split point. The point from where `p` and `q` won't be part of the same subtree or when one is the parent of the other.\r\n\r\n<iframe src=\"https://leetcode.com/playground/UtgsdU9t/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"UtgsdU9t\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the BST. In the worst case we might be visiting all the nodes of the BST.\r\n\r\n* Space Complexity : $$O(1)$$.\r\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.698,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "181",
                "title": "Lowest Common Ancestor of a Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "236",
                    "questionFrontendId": "236",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n  \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\nFirst the given nodes `p` and `q` are to be searched in a binary tree and then their lowest common ancestor is to be found. We can resort to a normal tree traversal to search for the two nodes. Once we reach the desired nodes `p` and `q`, we can backtrack and find the lowest common ancestor.\n\n<center>\n<img src=\"../Figures/236/236_LCA_Binary_1.png\" width=\"600\"/>\n</center>\n\n#### Approach 1: Recursive Approach\n\n**Intuition**\n\nThe approach is pretty intuitive. Traverse the tree in a depth first manner. The moment you encounter either of the nodes `p` or `q`, return some boolean flag. The flag helps to determine if we found the required nodes in any of the paths. The least common ancestor would then be the node for which both the subtree recursions return a `True` flag. It can also be the node which itself is one of `p` or `q` and for which one of the subtree recursions returns a `True` flag.\n\nLet us look at the formal algorithm based on this idea.\n\n**Algorithm**\n\n1. Start traversing the tree from the root node.\n2. If the current node itself is one of `p` or `q`, we would mark a variable `mid` as `True` and continue the search for the other node in the left and right branches.\n3. If either of the left or the right branch returns `True`, this means one of the two nodes was found below.\n4. If at any point in the traversal, any two of the three flags `left`, `right` or `mid` become `True`, this means we have found the lowest common ancestor for the nodes `p` and `q`.\n\nLet us look at a sample tree and we search for the lowest common ancestor of two nodes `9` and `11` in the tree.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_1.json:770,460!?!\n\n</center>\n\nFollowing is the sequence of nodes that are followed in the recursion:\n\n<pre>\n1 --> 2 --> 4 --> 8\nBACKTRACK 8 --> 4\n4 --> 9 (ONE NODE FOUND, return True)\nBACKTRACK 9 --> 4 --> 2\n2 --> 5 --> 10\nBACKTRACK 10 --> 5\n5 --> 11 (ANOTHER NODE FOUND, return True)\nBACKTRACK 11 --> 5 --> 2\n\n2 is the node where we have left = True and right = True and hence it is the lowest common ancestor.\n</pre>\n\n\n<iframe src=\"https://leetcode.com/playground/SaUmkb92/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SaUmkb92\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative using parent pointers\n\n**Intuition**\n\nIf we have parent pointers for each node we can traverse back from `p` and `q` to get their ancestors. The first common node we get during this traversal would be the LCA node. We can save the parent pointers in a dictionary as we traverse the tree.\n\n**Algorithm**\n\n1. Start from the root node and traverse the tree.\n2. Until we find `p` and `q` both, keep storing the parent pointers in a dictionary.\n3. Once we have found both `p` and `q`, we get all the ancestors for `p` using the parent dictionary and add to a set called `ancestors`.\n4. Similarly, we traverse through ancestors for node `q`. If the ancestor is present in the ancestors set for `p`, this means this is the first ancestor common between `p` and `q` (while traversing upwards) and hence this is the LCA node.\n\n<iframe src=\"https://leetcode.com/playground/uh78aTxV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uh78aTxV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity : $$O(N)$$. In the worst case space utilized by the stack, the parent pointer dictionary and the ancestor set, would be $$N$$ each, since the height of a skewed binary tree could be $$N$$.\n<br>\n<br>\n\n---\n\n#### Approach 3: Iterative without parent pointers\n\n**Intuition**\n\nIn the previous approach, we come across the LCA during the backtracking process. We can get rid of the backtracking process itself. In this approach we always have a pointer to the probable LCA and the moment we find both the nodes we return the pointer as the answer.\n\n**Algorithm**\n\n1. Start with root node.\n2. Put the `(root, root_state)` on to the stack. `root_state` defines whether one of the children or both children of `root` are left for traversal.\n3. While the stack is not empty, peek into the top element of the stack represented as `(parent_node, parent_state)`.\n4. Before traversing any of the child nodes of `parent_node` we check if the `parent_node` itself is one of `p` or `q`.\n5. First time we find either of `p` or `q`, set a boolean flag called `one_node_found` to `True`. Also start keeping track of the lowest common ancestors by keeping a note of the top index of the stack in the variable `LCA_index`. Since all the current elements of the stack are ancestors of the node we just found.\n6. The second time `parent_node == p or parent_node == q` it means we have found both the nodes and we can return the `LCA node`.\n7. Whenever we visit a child of a `parent_node` we push the `(parent_node, updated_parent_state)` onto the stack. We update the state of the parent since a child/branch has been visited/processed and accordingly the state changes.\n8. A node finally gets popped off from the stack when the state becomes `BOTH_DONE` implying both left and right subtrees have been pushed onto the stack and processed. If `one_node_found` is `True` then we need to check if the top node being popped could be one of the ancestors of the found node. In that case we need to reduce `LCA_index` by one. Since one of the ancestors was popped off.\n\n> Whenever both `p` and `q` are found, `LCA_index` would be pointing to an index in the stack which would contain all the common ancestors between `p` and `q`. And the `LCA_index` element has the `lowest` ancestor common between p and q.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_2.json:770,460!?!\n\n</center>\n\nThe animation above shows how a stack is used to traverse the binary tree and keep track of the common ancestors between nodes `p` and `q`.\n\n<iframe src=\"https://leetcode.com/playground/j6C3VpYf/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"j6C3VpYf\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree. The advantage of this approach is that we can prune backtracking. We simply return once both the nodes are found.\n\n* Space Complexity : $$O(N)$$. In the worst case the space utilized by stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.14,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "196",
                "title": "Construct Binary Tree from Preorder and Inorder Traversal",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "105",
                    "questionFrontendId": "105",
                    "sessionId": "968792",
                    "questionTitle": "Construct Binary Tree from Preorder and Inorder Traversal",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/construct-binary-tree-from-preorder-and-inorder-traversal/submit/",
                    "interpretUrl": "/problems/construct-binary-tree-from-preorder-and-inorder-traversal/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def buildTree(self, preorder, inorder):\\n        \\\"\\\"\\\"\\n        :type preorder: List[int]\\n        :type inorder: List[int]\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nstruct TreeNode* buildTree(int* preorder, int preorderSize, int* inorder, int inorderSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode BuildTree(int[] preorder, int[] inorder) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number[]} preorder\\n * @param {number[]} inorder\\n * @return {TreeNode}\\n */\\nvar buildTree = function(preorder, inorder) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {Integer[]} preorder\\n# @param {Integer[]} inorder\\n# @return {TreeNode}\\ndef build_tree(preorder, inorder)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func buildTree(_ preorder: [Int], _ inorder: [Int]) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def buildTree(preorder: Array[Int], inorder: Array[Int]): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun buildTree(preorder: IntArray, inorder: IntArray): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn build_tree(preorder: Vec<i32>, inorder: Vec<i32>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param Integer[] $preorder\\n     * @param Integer[] $inorder\\n     * @return TreeNode\\n     */\\n    function buildTree($preorder, $inorder) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction buildTree(preorder: number[], inorder: number[]): TreeNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (build-tree preorder inorder)\\n  (-> (listof exact-integer?) (listof exact-integer?) (or/c tree-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec build_tree(Preorder :: [integer()], Inorder :: [integer()]) -> #tree_node{} | null.\\nbuild_tree(Preorder, Inorder) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec build_tree(preorder :: [integer], inorder :: [integer]) :: TreeNode.t | nil\\n  def build_tree(preorder, inorder) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,9,20,15,7]\n[9,3,15,20,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"buildTree\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"preorder\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"inorder\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"TreeNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg\" style=\"width: 277px; height: 302px;\" />\n<pre>\n<strong>Input:</strong> preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n<strong>Output:</strong> [3,9,20,null,null,15,7]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> preorder = [-1], inorder = [-1]\n<strong>Output:</strong> [-1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n\t<li><code>inorder.length == preorder.length</code></li>\n\t<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n\t<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li>\n\t<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li>\n\t<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li>\n\t<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Construct Binary Tree From Preorder and Inorder Traversal",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\n> This problem examines your understanding of preorder and inorder binary tree traversals. If you are not familiar with them, feel free to visit our [Explore Cards](https://leetcode.com/explore/learn/card/data-structure-tree/) where you will see all the ways to traverse a binary tree including preorder, inorder, postorder, and level-order traversals :)\n\nA tree has a recursive structure because it has subtrees which are trees themselves. Let's take a look at the inorder traversal of a binary tree, and you will see the built-in recursive structure.\n\n![The recursive structure in a Tree.](../Figures/105/105-Page-1.png)\n{:align=\"center\"}\n\n*Figure 1. The recursive structure in a Tree.*\n{:align=\"center\"}\n\nHenceforth, we will leverage this property and find a way to recursively construct the tree.\n\n</br>\n\n---\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nThe two key observations are:\n1. Preorder traversal follows `Root -> Left -> Right`, therefore, given the preorder array `preorder`, we have easy access to the root which is `preorder[0]`.\n\n2. Inorder traversal follows `Left -> Root -> Right`, therefore if we know the position of `Root`, we can recursively split the entire array into two subtrees.\n\nNow the idea should be clear enough. We will design a recursion function: it will set the first element of `preorder` as the root, and then construct the entire tree. To find the left and right subtrees, it will look for the root in `inorder`, so that everything on the left should be the left subtree, and everything on the right should be the right subtree. Both subtrees can be constructed by making another recursion call.\n\nIt is worth noting that, while we recursively construct the subtrees, we should choose the next element in `preorder` to initialize as the new roots. This is because the current one has already been initialized to a parent node for the subtrees.\n\n![Always use the next element in `preorder` to initialize a root.](../Figures/105/105-Page-2.png)\n{:align=\"center\"}\n\n*Figure 2. Always use the next element in `preorder` to initialize a root.*\n{:align=\"center\"}\n\n\n!?!../Documents/105_LIS.json:1008,542!?!\n\n**Algorithm**\n\n- Build a hashmap to record the relation of `value -> index` for `inorder`, so that we can find the position of root in constant time.\n- Initialize an integer variable `preorderIndex` to keep track of the element that will be used to construct the root.\n- Implement the recursion function `arrayToTree` which takes a range of `inorder` and returns the constructed binary tree:\n  - if the range is empty, return `null`;\n  - initialize the root with `preorder[preorderIndex]` and then increment `preorderIndex`;\n  - recursively use the left and right portions of `inorder` to construct the left and right subtrees.\n- Simply call the recursion function with the entire range of `inorder`.\n\n\n\n<iframe src=\"https://leetcode.com/playground/GfkzzY75/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GfkzzY75\"></iframe>\n\n**Complexity analysis**\n\nLet $$N$$ be the length of the input arrays.\n\n* Time complexity : $$O(N)$$.\n\n  Building the hashmap takes $$O(N)$$ time, as there are $$N$$ nodes to add, and adding items to a hashmap has a cost of $$O(1)$$, so we get $$N \\cdot O(1) = O(N)$$.\n\n  Building the tree also takes $$O(N)$$ time. The recursive helper method has a cost of $$O(1)$$ for each call (it has no loops), and it is called _once_ for each of the $$N$$ nodes, giving a total of $$O(N)$$.\n\n  Taking both into consideration, the time complexity is $$O(N)$$.\n\n* Space complexity : $$O(N)$$.\n\n  Building the hashmap and storing the entire tree each requires $$O(N)$$ memory. The size of the implicit system stack used by recursion calls depends on the height of the tree, which is $$O(N)$$ in the worst case and $$O(\\log N)$$ on average. Taking both into consideration, the space complexity is $$O(N)$$.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.373,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "185",
                "title": "Number of Islands",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "200",
                    "questionFrontendId": "200",
                    "sessionId": "968792",
                    "questionTitle": "Number of Islands",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/number-of-islands/submit/",
                    "interpretUrl": "/problems/number-of-islands/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numIslands(vector<vector<char>>& grid) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numIslands(self, grid):\\n        \\\"\\\"\\\"\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numIslands(char** grid, int gridSize, int* gridColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumIslands(char[][] grid) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} grid\\n * @return {number}\\n */\\nvar numIslands = function(grid) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} grid\\n# @return {Integer}\\ndef num_islands(grid)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numIslands(_ grid: [[Character]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numIslands(grid [][]byte) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numIslands(grid: Array[Array[Char]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numIslands(grid: Array<CharArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_islands(grid: Vec<Vec<char>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $grid\\n     * @return Integer\\n     */\\n    function numIslands($grid) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numIslands(grid: string[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-islands grid)\\n  (-> (listof (listof char?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_islands(Grid :: [[char()]]) -> integer().\\nnum_islands(Grid) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_islands(grid :: [[char]]) :: integer\\n  def num_islands(grid) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numIslands\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"grid\",\r\n      \"type\": \"character[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> 2D binary grid <code>grid</code> which represents a map of <code>&#39;1&#39;</code>s (land) and <code>&#39;0&#39;</code>s (water), return <em>the number of islands</em>.</p>\n\n<p>An <strong>island</strong> is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]\n]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],\n  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]\n]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>grid[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Number of Islands",
                        "content": "[TOC]\n\n#### Approach #1 DFS [Accepted]\n\n**Intuition**\n\nTreat the 2d grid map as an undirected graph and there is an edge\nbetween two horizontally or vertically adjacent nodes of value '1'.\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Depth First Search. During DFS, every visited node should be\nset as '0' to mark as visited node. Count the number of root nodes that trigger\nDFS, this number would be the number of islands since each DFS starting at some\nroot identifies an island.\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_dfs.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/eVGw9zoX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eVGw9zoX\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : worst case $$O(M \\times N)$$ in case that the grid map\n  is filled with lands where DFS goes by $$M \\times N$$ deep.\n\n---\n\n\n#### Approach #2: BFS [Accepted]\n\n**Algorithm**\n\nLinear scan the 2d grid map, if a node contains a '1', then it is a root node\nthat triggers a Breadth First Search. Put it into a queue and set its value\nas '0' to mark as visited node. Iteratively search the neighbors of enqueued\nnodes until the queue becomes empty.\n\n<iframe src=\"https://leetcode.com/playground/jXzqritJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"jXzqritJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns.\n\n* Space complexity : $$O(min(M, N))$$ because in worst case where the\n  grid is filled with lands, the size of queue can grow up to min($$M,N$$).\n\n---\n\n\n#### Approach #3: Union Find (aka Disjoint Set) [Accepted]\n\n**Algorithm**\n\nTraverse the 2d grid map and union adjacent lands horizontally or vertically,\nat the end, return the number of connected components maintained in the UnionFind\ndata structure.\n\nFor details regarding to Union Find, you can refer to this [article](https://leetcode.com/articles/redundant-connection/).\n\nThe algorithm can be better illustrated by the animation below:\n!?!../Documents/200_number_of_islands_unionfind.json:1024,768!?!\n\n<iframe src=\"https://leetcode.com/playground/k6Xzhgt6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"k6Xzhgt6\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(M \\times N)$$ where $$M$$ is the number of rows and\n  $$N$$ is the number of columns. Note that Union operation takes essentially constant\n  time[^1] when UnionFind is implemented with both path compression and union by rank.\n\n* Space complexity : $$O(M \\times N)$$ as required by UnionFind data structure.\n\n\n---\n\n**Footnotes**\n\n[^1]: [https://en.wikipedia.org/wiki/Disjoint-set_data_structure](https://en.wikipedia.org/wiki/Disjoint-set_data_structure)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "number-of-islands",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.326,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "210",
                "title": "Clone Graph",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft phone interview.",
                "paidOnly": false,
                "chapterId": 31,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "133",
                    "questionFrontendId": "133",
                    "sessionId": "968792",
                    "questionTitle": "Clone Graph",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/clone-graph/submit/",
                    "interpretUrl": "/problems/clone-graph/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    vector<Node*> neighbors;\\n    Node() {\\n        val = 0;\\n        neighbors = vector<Node*>();\\n    }\\n    Node(int _val) {\\n        val = _val;\\n        neighbors = vector<Node*>();\\n    }\\n    Node(int _val, vector<Node*> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* cloneGraph(Node* node) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n    public Node() {\\n        val = 0;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new ArrayList<Node>();\\n    }\\n    public Node(int _val, ArrayList<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public Node cloneGraph(Node node) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node(object):\\n    def __init__(self, val = 0, neighbors = None):\\n        self.val = val\\n        self.neighbors = neighbors if neighbors is not None else []\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def cloneGraph(self, node):\\n        \\\"\\\"\\\"\\n        :type node: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, val = 0, neighbors = None):\\n        self.val = val\\n        self.neighbors = neighbors if neighbors is not None else []\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def cloneGraph(self, node: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     int numNeighbors;\\n *     struct Node** neighbors;\\n * };\\n */\\n\\nstruct Node *cloneGraph(struct Node *s) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public IList<Node> neighbors;\\n\\n    public Node() {\\n        val = 0;\\n        neighbors = new List<Node>();\\n    }\\n\\n    public Node(int _val) {\\n        val = _val;\\n        neighbors = new List<Node>();\\n    }\\n\\n    public Node(int _val, List<Node> _neighbors) {\\n        val = _val;\\n        neighbors = _neighbors;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node CloneGraph(Node node) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, neighbors) {\\n *    this.val = val === undefined ? 0 : val;\\n *    this.neighbors = neighbors === undefined ? [] : neighbors;\\n * };\\n */\\n\\n/**\\n * @param {Node} node\\n * @return {Node}\\n */\\nvar cloneGraph = function(node) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a Node.\\n# class Node\\n#     attr_accessor :val, :neighbors\\n#     def initialize(val = 0, neighbors = nil)\\n#\\t\\t  @val = val\\n#\\t\\t  neighbors = [] if neighbors.nil?\\n#         @neighbors = neighbors\\n#     end\\n# end\\n\\n# @param {Node} node\\n# @return {Node}\\ndef cloneGraph(node)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var neighbors: [Node?]\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.neighbors = []\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func cloneGraph(_ node: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Neighbors []*Node\\n * }\\n */\\n\\nfunc cloneGraph(node *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var neighbors: List[Node] = List()\\n * }\\n */\\n\\nobject Solution {\\n    def cloneGraph(graph: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var neighbors: ArrayList<Node?> = ArrayList<Node?>()\\n * }\\n */\\n\\nclass Solution {\\n    fun cloneGraph(node: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $neighbors = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->neighbors = array();\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $node\\n     * @return Node\\n     */\\n    function cloneGraph($node) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     neighbors: Node[]\\n *     constructor(val?: number, neighbors?: Node[]) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.neighbors = (neighbors===undefined ? [] : neighbors)\\n *     }\\n * }\\n */\\n\\nfunction cloneGraph(node: Node | null): Node | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[[2,4],[1,3],[2,4],[1,3]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"cloneGraph\",\n  \"params\": [\n    {\n      \"name\": \"edges\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a reference of a node in a <strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong> undirected graph.</p>\n\n<p>Return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph.</p>\n\n<p>Each node in the graph contains a value (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\n\n<pre>\nclass Node {\n    public int val;\n    public List&lt;Node&gt; neighbors;\n}\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>Test case format:</strong></p>\n\n<p>For simplicity, each node&#39;s value is the same as the node&#39;s index (1-indexed). For example, the first node with <code>val == 1</code>, the second node with <code>val == 2</code>, and so on. The graph is represented in the test case using an adjacency list.</p>\n\n<p><b>An adjacency list</b> is a collection of unordered <b>lists</b> used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.</p>\n\n<p>The given node will always be the first node with <code>val = 1</code>. You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png\" style=\"width: 500px; height: 550px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2,4],[1,3],[2,4],[1,3]]\n<strong>Output:</strong> [[2,4],[1,3],[2,4],[1,3]]\n<strong>Explanation:</strong> There are 4 nodes in the graph.\n1st node (val = 1)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)&#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)&#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph.png\" style=\"width: 163px; height: 148px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[]]\n<strong>Output:</strong> [[]]\n<strong>Explanation:</strong> Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> adjList = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> This an empty graph, it does not have any nodes.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/01/07/graph-1.png\" style=\"width: 272px; height: 133px;\" />\n<pre>\n<strong>Input:</strong> adjList = [[2],[1]]\n<strong>Output:</strong> [[2],[1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the graph is in the range <code>[0, 100]</code>.</li>\n\t<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n\t<li><code>Node.val</code> is unique for each node.</li>\n\t<li>There are no repeated edges and no self-loops in the graph.</li>\n\t<li>The Graph is connected and all nodes can be visited starting from the given node.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Clone Graph",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Depth First Search\n\n**Intuition**\n\n> Note: As we can see this question has garnered a lot of negative reviews. It has a lot more dislikes than the likes. We have tried to improve the problem statement to make it more understandable. However, these are the kinds of situations you might get into in an interview when the problem statement might look a little absurd. What is important then is to ask the interviewer to clarify the problem. This problem statement was confusing to me as well initially and that's why I decided to write the solution hoping to clarify most of the doubts that the readers might have had.\n\nThe basic intuition for this problem is to just copy as we go. We need to understand that we are dealing with a graph and this means a node could have any number of neighbors. This is why `neighbors` is a list. What is also crucial to understand is that we don't want to get stuck in a cycle while we are traversing the graph. According to the problem statement, any given undirected edge could be represented as two directional edges. So, if there is an undirected edge between node `A` and node `B`, the graph representation for it would have a `directed` edge from `A to B` and another from `B to A`. After all, an undirected graph is a set of nodes that are connected together, where all the edges are bidirectional. How else would you say that `A` could be reached from `B` and `B` could be reached from `A`?\n\n<center>\n<img src=\"../Figures/133/133_Clone_Graph_1.png\" width=\"200\"/>\n</center>\n\nTo avoid getting stuck in a loop we would need some way to keep track of the nodes which have already been copied. By doing this we don't end up traversing them again.\n\n**Algorithm**\n\n1. Start traversing the graph from the given node.\n\n2. We would take a hash map to store the reference of the copy of all the nodes that have already been visited and cloned. The `key` for the hash map would be the node of the original graph and corresponding `value` would be the corresponding cloned node of the cloned graph. If the node already exists in the `visited` we return corresponding stored reference of the cloned node.\n\n    For a given edge `A - B`, since `A` is connected to `B` and `B` is also connected to `A` if we don't use `visited` we will get stuck in a cycle.\n\n    <center>\n    <img src=\"../Figures/133/133_Clone_Graph_2.png\" width=\"600\"/>\n    </center>\n\n3. If we don't find the node in the `visited` hash map, we create a copy of it and put it in the hash map. Note, how it's important to create a copy of the node and add to the hash map before entering recursion.\n\n    <pre>\n      clone_node = Node(node.val, [])\n      visited[node] = clone_node\n    </pre>\n\n    In the absence of such an ordering, we would be caught in the recursion because on encountering the node again in somewhere down the recursion again, we will be traversing it again thus getting into cycles.\n\n    <center>\n    <img src=\"../Figures/133/133_Clone_Graph_3.png\" width=\"600\"/>\n    </center>\n\n4. Now make the recursive call for the neighbors of the `node`. Pay attention to how many recursion calls we will be making for any given `node`. For a given `node` the number of recursive calls would be equal to the number of its neighbors. Each recursive call made would return the clone of a neighbor. We will prepare the list of these clones returned and put into neighbors of clone `node` which we had created earlier. This way we will have cloned the given `node` and it's `neighbors`.\n\n> Tip: Recursion could get a bit cumbersome to grasp, if you try to get into every call yourself and try to see what's happening. And why look at every call when every call does the same thing with different inputs. So, you just worry about ONE such call and let the recursion do the rest. And of course always handle the base case or the termination condition of the recursion. Otherwise how would it end?\n<br>\n\n<iframe src=\"https://leetcode.com/playground/2LxbYFhX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"2LxbYFhX\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N + M)$$, where $$N$$ is a number of nodes (vertices) and $$M$$ is a number of edges.  \n* Space Complexity: $$O(N)$$. This space is occupied by the `visited` hash map and in addition to that, space would also be occupied by the recursion stack since we are adopting a recursive approach here. The space occupied by the recursion stack would be equal to $$O(H)$$ where $$H$$ is the height of the graph. Overall, the space complexity would be $$O(N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Breadth First Search\n\n**Intuition**\n\nWe could agree DFS is a good enough solution for this problem. However, if the recursion stack is what we are worried about then DFS is not our best bet. Sure, we can write an iterative version of depth first search by using our own stack. However, we also have the BFS way of doing iterative traversal of the graph and we'll be exploring that solution as well.\n\n<center>\n<img src=\"../Figures/133/133_Clone_Graph_4.png\" width=\"600\"/>\n</center>\n\nThe difference is only in the traversal of DFS and BFS. As the name says it all, DFS explores the depths of the graph first and BFS explores the breadth. Based on the kind of graph we are expecting we can chose one over the other. We would need the `visited` hash map in both the approaches to avoid cycles.\n\n**Algorithm**\n\n1. We will use a hash map to store the reference of the copy of all the nodes that have already been visited and copied. The `key` for the hash map would be the node of the original graph and corresponding `value` would be the corresponding cloned node of the cloned graph. The `visited` is used to prevent cycles and get the cloned copy of a node.\n\n2. Add the first node to the queue. Clone the first node and add it to `visited` hash map.\n\n3. Do the BFS traversal.\n    - Pop a node from the front of the queue.\n    - Visit all the neighbors of this node.\n    - If any of the neighbors was already visited then it must be present in the `visited` dictionary. Get the clone of this neighbor from `visited` in that case.\n    - Otherwise, create a clone and store in the `visited`.\n    - Add the clones of the neighbors to the corresponding list of the clone node.\n\n<iframe src=\"https://leetcode.com/playground/TUhTdi7G/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TUhTdi7G\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N + M)$$, where $$N$$ is a number of nodes (vertices) and $$M$$ is a number of edges.\n\n* Space Complexity : $$O(N)$$. This space is occupied by the `visited` dictionary and in addition to that, space would also be occupied by the queue since we are adopting the BFS approach here. The space occupied by the queue would be equal to $$O(W)$$ where $$W$$ is the width of the graph. Overall, the space complexity would be $$O(N)$$.\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "clone-graph",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.503,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Validate Binary Tree, Binary Tree Level Order Traversal and Binary Tree Inorder Traversal are frequently asked by Microsoft. Microsoft does not ask a lot of graph type questions but you should still know the basics of graphs."
    },
    {
        "id": "46",
        "title": "Backtracking",
        "slug": "backtracking",
        "items": [
            {
                "id": "165",
                "title": "Letter Combinations of a Phone Number",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 46,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "17",
                    "questionFrontendId": "17",
                    "sessionId": "968792",
                    "questionTitle": "Letter Combinations of a Phone Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/letter-combinations-of-a-phone-number/submit/",
                    "interpretUrl": "/problems/letter-combinations-of-a-phone-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> letterCombinations(string digits) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> letterCombinations(String digits) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def letterCombinations(self, digits):\\n        \\\"\\\"\\\"\\n        :type digits: str\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def letterCombinations(self, digits: str) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** letterCombinations(char * digits, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> LetterCombinations(string digits) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} digits\\n * @return {string[]}\\n */\\nvar letterCombinations = function(digits) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} digits\\n# @return {String[]}\\ndef letter_combinations(digits)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func letterCombinations(_ digits: String) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func letterCombinations(digits string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def letterCombinations(digits: String): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun letterCombinations(digits: String): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn letter_combinations(digits: String) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $digits\\n     * @return String[]\\n     */\\n    function letterCombinations($digits) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function letterCombinations(digits: string): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (letter-combinations digits)\\n  (-> string? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nletter_combinations(Digits) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec letter_combinations(digits :: String.t) :: [String.t]\\n  def letter_combinations(digits) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"23\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"letterCombinations\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"digits\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\" style=\"width: 200px; height: 162px;\" /></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Letter Combinations of a Phone Number",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n--- \r\n\r\n#### Overview\r\n\r\nOne of the first things you should always do is look at the constraints. Quite often, you can figure out what sort of approach needs to be taken simply from looking at the input size. In an interview, asking your interviewer about the constraints will also show your attention to detail - on top of giving you information.\r\n\r\nIn this particular problem, the length of the input is **extremely** small, `0 <= digits.length <= 4`. With such small input sizes, we can safely assume that a brute force solution in which we generate all combinations of letters will be accepted.\r\n\r\nWhenever you have a problem where you need to generate all combinations/permutations of some group of letters/numbers, the first thought you should have is backtracking. If you're new to backtracking, check out our [backtracking explore card](https://leetcode.com/explore/featured/card/recursion-ii/472/backtracking/). Backtracking algorithms can often keep the _space complexity_ linear with the input size. \r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Backtracking\r\n\r\n**Intuition**\r\n\r\nThere aren't any smart tricks needed for this problem - the hard part is just figuring out how to correctly generate all possible combinations, and to do this using a standard backtracking algorithm template. Let's break down the problem, by starting with an input that is only 1-digit long, for example `digits = \"2\"`. This example is trivial - just generate all letters that correspond with `digit = \"2\"`, which would be `[\"a\", \"b\", \"c\"]`.\r\n\r\nWhat if instead we had a 2-digit long input, `digits = \"23\"`? Imagine taking each letter of `digit = \"2\"` as a *starting point*. That is, **lock the first letter in**, and solve all the possible combinations that **start with that letter**. If our first letter will always be `\"a\"`, then the problem is trivial again - it's the 1-digit case, and all we have to do is generate all the letters corresponding with `digit = \"3\"`, and add that to `\"a\"`, to get `[\"ad\", \"ae\",\"af\"]`. This was easy because we ignored the first letter, and said it will always be `\"a\"`. But we know how to generate all the first letters too - it's the 1-digit case which we already solved to be `[\"a\", \"b\", \"c\"]`.\r\n\r\nAs you can see, solving the 1-digit case is trivial, and solving the 2-digit case is just solving the 1-digit case twice. The same reasoning can be extended to `n` digits. For the 3-digit case, solve the 2-digit case to generate all combinations of the first 2 letters, and then solve the 1-digit case for the final digit. Now that we know how to solve the 3-digit case, to solve the 4-digit case, solve the 3-digit case for all combinations of the first 3 letters, and then solve the 1-digit case for the final digit. We could extend this to infinity, but, don't worry, for this problem we're finished after 4. \r\n\r\n!?!../Documents/17_Letter_Combinations_Phone.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\nAs mentioned previously, we need to **lock-in** letters when we generate new letters. The easiest way to save state like this is to use recursion. Our algorithm will be as follows:\r\n\r\n1. If the input is empty, return an empty array.\r\n\r\n2. Initialize a data structure (e.g. a hash map) that maps digits to their letters, for example, mapping \"6\" to \"m\", \"n\", and \"o\".\r\n\r\n3. Use a backtracking function to generate all possible combinations.\r\n    - The function should take 2 primary inputs: the current combination of letters we have, `path`, and the `index` we are currently checking.\r\n    - As a base case, if our current combination of letters is the same length as the input `digits`, that means we have a complete combination. Therefore, add it to our answer, and backtrack.\r\n    - Otherwise, get all the letters that correspond with the current digit we are looking at, `digits[index]`.\r\n    - Loop through these letters. For each letter, add the letter to our current `path`, and call `backtrack` again, but move on to the next digit by incrementing `index` by 1.\r\n    - Make sure to remove the letter from `path` once finished with it.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/a4vWh4VR/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"a4vWh4VR\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(4^N \\cdot N)$$, where $$N$$ is the length of `digits`. Note that $$4$$ in this expression is referring to the maximum *value* length in the *hash map*, and ***not*** to the length of the *input*.\r\n\r\n   The worst-case is where the input consists of only 7s and 9s. In that case, we have to explore 4 additional paths for every extra digit. Then, for each combination, it costs up to $$N$$ to build the combination. This problem can be generalized to a scenario where numbers correspond with up to $$M$$ digits, in which case the time complexity would be $$O(M^N \\cdot N)$$. For the problem constraints, we're given, $$M = 4$$, because of digits 7 and 9 having 4 letters each.\r\n\r\n* Space complexity: $$O(N)$$, where $$N$$ is the length of `digits`.\r\n\r\n    Not counting space used for the output, the extra space we use relative to input size is the space occupied by the recursion call stack. It will only go as deep as the number of digits in the input since whenever we reach that depth, we backtrack.\r\n\r\n    As the hash map does not grow as the inputs grows, it occupies $$O(1)$$ space. \r\n    \r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "letter-combinations-of-a-phone-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.486,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "256",
                "title": "Word Search II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 46,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "212",
                    "questionFrontendId": "212",
                    "sessionId": "968792",
                    "questionTitle": "Word Search II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-search-ii/submit/",
                    "interpretUrl": "/problems/word-search-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> findWords(char[][] board, String[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findWords(self, board, words):\\n        \\\"\\\"\\\"\\n        :type board: List[List[str]]\\n        :type words: List[str]\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** findWords(char** board, int boardSize, int* boardColSize, char ** words, int wordsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> FindWords(char[][] board, string[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} board\\n * @param {string[]} words\\n * @return {string[]}\\n */\\nvar findWords = function(board, words) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\\n# @param {String[]} words\\n# @return {String[]}\\ndef find_words(board, words)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findWords(board [][]byte, words []string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_words(board: Vec<Vec<char>>, words: Vec<String>) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $board\\n     * @param String[] $words\\n     * @return String[]\\n     */\\n    function findWords($board, $words) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findWords(board: string[][], words: string[]): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-words board words)\\n  (-> (listof (listof char?)) (listof string?) (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_words(Board :: [[char()]], Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_words(Board, Words) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_words(board :: [[char]], words :: [String.t]) :: [String.t]\\n  def find_words(board, words) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findWords\",\n  \"params\": [\n    {\n      \"name\": \"board\",\n      \"type\": \"character[][]\"\n    },\n    {\n      \"name\": \"words\",\n      \"type\": \"string[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]\n<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
                        "If the current candidate does not exist in all words&#39; prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
                    ],
                    "solution": {
                        "title": "Word Search II",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Backtracking with Trie\n\n**Intuition**\n\nThe problem is actually a simplified crossword puzzle game, where the word solutions have been given on the board embedded with some noise letters. All we need to to do is to *cross* them out.\n\n>Intuitively, in order to cross out all potential words, the overall strategy would be to iterate the cell one by one, and from each cell we walk along its neighbors in four potential directions to find matched words.\nWhile wandering around the board, we would stop the exploration when we know it would not lead to the discovery of new words.\n\nOne might have guessed the paradigm that we would use for this problem. Yes, it is **backtracking**, which would be the backbone of the solution. It is fairly simply to construct a solution of backtracking. One could even follow a template given in our [Explore card of Recursion II](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/2793/).\n\nThe key of the solution lies on _how we find the matches of word from the dictionary_. Intuitively, one might resort to the hashset data structure (_e.g._ `set()` in Python). This could work.\n\nHowever, during the backtracking process, one would encounter more often the need to tell if there exists any word that contains certain prefix, rather than if a string exists as a word in the dictionary. Because if we know that there does not exist any match of word in the dictionary for a given prefix, then we would not need to further explore certain direction. And this, would greatly reduce the exploration space, therefore improve the performance of the backtracking algorithm.\n\nThe capability of finding matching prefix is where the data structure called [Trie](https://leetcode.com/explore/learn/card/trie/) would shine, comparing the hashset data structure. Not only can Trie tell the membership of a word, but also it can instantly find the words that share a given prefix. As it turns out, the choice of data structure (`Trie` _VS._ `hashset`), which could end with a solution that ranks either the top $$5\\%$$ or the bottom $$5\\%$$.\n\nHere we show an example of Trie that is built from a list of words. As one can see from the following graph, at the node denoted `d`, we would know there are at least two words with the prefix `d` from the dictionary.\n\n![pic](../Figures/212/212_trie_example.png)\n\nWe have a problem about [implementing a Trie data structure](https://leetcode.com/problems/implement-trie-prefix-tree/). One can start with the Trie problem as warm up, and come back this problem later.\n\n\n**Algorithm**\n\nThe overall workflow of the algorithm is intuitive, which consists of a loop over each cell in the board and a recursive function call starting from the cell. Here is the skeleton of the algorithm.\n\n- We build a Trie out of the words in the dictionary, which would be used for the matching process later.\n\n- Starting from each cell, we start the backtracking exploration (_i.e._ `backtracking(cell)`), if there exists any word in the dictionary that starts with the letter in the cell.\n\n- During the recursive function call `backtracking(cell)`, we explore the neighbor cells (_i.e._ `neighborCell`) around the current cell for the next recursive call `backtracking(neighborCell)`. At each call, we check if the sequence of letters that we traverse so far matches any word in the dictionary, with the help of the Trie data structure that we built at the beginning.\n\nHere is an overall impression how the algorithm works. We give some sample implementation based on the rough idea above. And later, we detail some optimization that one could further apply to the algorithm. \n\n![pic](../Figures/212/212_trie_algo.png)\n\n<iframe src=\"https://leetcode.com/playground/5ayu6UzY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5ayu6UzY\"></iframe>\n\nTo better understand the backtracking process, we demonstrate how we find the match of `dog` along the Trie in the following animation.\n\n!?!../Documents/212_LIS.json:1000,474!?!\n\n#### Optimizations\n\nIn the above implementation, we applied a few tricks to further speed up the running time, in addition to the application of the Trie data structure. In particular, the Python implementation could run faster than `98%` of the submissions. We detail the tricks as follows, ordered by their significance.\n\n>_Backtrack along the nodes in Trie._\n\n- One could use Trie simply as a dictionary to quickly find the match of words and prefixes, _i.e._ at _each step_ of backtracking, we start all over from the root of the Trie. This could work.\n- However, a more efficient way would be to traverse the Trie together with the progress of backtracking, _i.e._ at each step of `backtracking(TrieNode)`, the depth of the `TrieNode` corresponds to the length of the prefix that we've matched so far. This measure could lift your solution out of the bottom $$5\\%$$ of submissions.\n\n>_Gradually **prune** the nodes in Trie during the backtracking._\n\n- The idea is motivated by the fact that the time complexity of the overall algorithm sort of depends on the size of the Trie. For a leaf node in Trie, once we traverse it (_i.e._ find a matched word), we would no longer need to traverse it again. As a result, we could prune it out from the Trie.\n\n- Gradually, those non-leaf nodes could become leaf nodes later, since we trim their children leaf nodes. In the extreme case, the Trie would become empty, once we find a match for all the words in the dictionary. This pruning measure could reduce up to $$50\\%$$ of the running time for the test cases of the online judge.\n\n![pic](../Figures/212/212_trie_prune.png)\n\n> _Keep words in the Trie_.\n\n- One might use a flag in the Trie node to indicate if the path to the current code match any word in the dictionary. It is not necessary to keep the words in the Trie.\n- However, doing so could improve the performance of the algorithm a bit. One benefit is that one would not need to pass the prefix as the parameter in the `backtracking()` call. And this could speed up a bit the recursive call. Similarly, one does not need to reconstruct the matched word from the prefix, if we keep the words in Trie.\n\n>_Remove the matched words from the Trie._\n\n- In the problem, we are asked to return all the matched words, rather than the number of potential matches. Therefore, once we reach certain Trie node that contains a match of word, we could simply remove the match from the Trie.\n- As a _side_ benefit, we do not need to check if there is any duplicate in the result set. As a result, we could simply use a list instead of set to keep the results, which could speed up the solution a bit.\n<br/>\n\n\n**Complexity**\n\n- Time complexity: $$\\mathcal{O}(M(4\\cdot3^{L-1}))$$, where $$M$$ is the number of cells in the board and $$L$$ is the maximum length of words.\n  \n    - It is tricky is calculate the exact number of steps that a backtracking algorithm would perform. We provide a upper bound of steps for the worst scenario for this problem. The algorithm loops over all the cells in the board, therefore we have $$M$$ as a factor in the complexity formula. It then boils down to the _maximum_ number of steps we would need for each starting cell (_i.e._$$4\\cdot3^{L-1}$$).\n  \n    - Assume the maximum length of word is $$L$$, starting from a cell, initially we would have at most 4 directions to explore. Assume each direction is valid (_i.e._ worst case), during the following exploration, we have at most 3 neighbor cells (excluding the cell where we come from) to explore. As a result, we would traverse at most $$4\\cdot3^{L-1}$$ cells during the backtracking exploration.\n\n    - One might wonder what the worst case scenario looks like. Well, here is an example. Imagine, each of the cells in the board contains the letter `a`, and the word dictionary contains a single word `['aaaa']`. Voila. This is one of the worst scenarios that the algorithm would encounter.\n![pic](../Figures/212/212_complexity_example.png)\n  \n    - Note that, the above time complexity is estimated under the assumption that the Trie data structure would not change once built. If we apply the optimization trick to gradually remove the nodes in Trie, we could greatly improve the time complexity, since the cost of backtracking would reduced to zero once we match all the words in the dictionary, _i.e._ the Trie becomes empty.\n\n<br/>\n\n- Space Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the total number of letters in the dictionary.\n\n    - The main space consumed by the algorithm is the Trie data structure we build. In the worst case where there is no overlapping of prefixes among the words, the Trie would have as many nodes as the letters of all words. And optionally, one might keep a copy of words in the Trie as well. As a result, we might need $$2N$$ space for the Trie.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "word-search-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.879,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "155",
                "title": "Wildcard Matching",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 46,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "44",
                    "questionFrontendId": "44",
                    "sessionId": "968792",
                    "questionTitle": "Wildcard Matching",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/wildcard-matching/submit/",
                    "interpretUrl": "/problems/wildcard-matching/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isMatch(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isMatch(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isMatch(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isMatch(char * s, char * p){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsMatch(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {boolean}\\n */\\nvar isMatch = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Boolean}\\ndef is_match(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isMatch(_ s: String, _ p: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isMatch(s: String, p: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_match(s: String, p: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Boolean\\n     */\\n    function isMatch($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isMatch(s: string, p: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-match s p)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aa\"\n\"a\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isMatch\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"p\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adceb&quot;, p = &quot;*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acdcb&quot;, p = &quot;a*c?b&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Wildcard Matching",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Approach 1: Recursion with Memoization\n\n**Intuition**\n\nThe first idea here is a recursion. It is a relatively straightforward\napproach but quite time consuming because of huge recursion depth for long input strings.\n\n- If the strings are equal (`p == s`), then return `True`.\n\n- If the pattern matches any string (`p == '*'`), then return `True`.\n\n- If `p` is empty, or `s` is empty, return `False`.\n\n- If the current characters match (`p[0] == s[0]` or `p[0] == '?'`), \nthen compare the next ones and return `isMatch(s[1:], p[1:])`.\n\n- If the current pattern character is a star (`p[0] == '*'`), then\nthere are two possible situations:\n\n    - The star matches no characters, and hence the answer is\n    `isMatch(s, p[1:])`.\n    \n    - The star matches one or more characters, and so the answer is\n    `isMatch(s[1:], p)`.\n    \n- If `p[0] != s[0]`, return `False`.\n\n![pic](../Figures/44/stupid.png)\n\nThe problem of this algorithm is that it doesn't pass \nall test cases because of time limit issue, \nand hence has to be optimised.\nHere is what could be done:\n\n1. _Memoization_. That is a standard way to optimise the recursion. \nLet's have a memoization hashmap using pair `(s, p)` as a key and\nmatch/doesn't match as a boolean value. \nOne could keep all already checked pairs `(s, p)` in this hashmap, so that\nif there are any duplicate checks, the answer is right here, \nand there is no need to proceed to the computations again.\n\n2. _Clean up of the input data_. Whether the patterns with multiple stars \nin a row `a****bc**cc` are valid wildcards or not, they could be \nsimplified without any data loss to `a*bc*cc`. Such a cleanup helps to decrease\nthe recursion depth. \n\n**Algorithm**\n\nHere is the algorithm.\n\n- Clean up the input by replacing more than one star in a row by a single star: \n`p = remove_duplicate_stars(p)`.\n\n- Initiate the memoization hashmap `dp`.\n\n- Return the helper function with a cleaned input: `helper(s, p)`.\n\n- `helper(s, p)`:\n\n    - If `(s, p)` is already known and stored in `dp`, return the value.\n\n    - If the strings are equal (`p == s`), or the pattern matches any string (`p == '*'`),\n    add `dp[(s, p)] = True`.\n    \n    - Else if `p` is empty, or `s` is empty, add `dp[(s, p)] = False`.\n    \n    - Else if the current characters match (`p[0] == s[0]` or `p[0] == '?'`), \n    then compare the next ones and add `dp[(s, p)] = helper(s[1:], p[1:])`.\n    \n    - Else if the current pattern character is a star (`p[0] == '*'`), then\n    there are two possible situations: the star matches no characters,\n    and the star matches one or more characters: \n    `dp[(s, p)] = helper(s, p[1:]) or helper(s[1:], p)`.\n        \n    - Else `p[0] != s[0]`, then add `dp[(s, p)] = False`.\n    \n    - Now when the value is computed, return it: `dp[(s, p)]`.\n\n**Implementation**   \n\n<iframe src=\"https://leetcode.com/playground/YN36qKvr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"YN36qKvr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(S \\cdot P \\cdot (S + P))$$\n\t\n    * Removing duplicate stars requires us to traverse the string `p` once, this requires $$O(P)$$ time. \n\t\n    *  Regarding the helper function, every non-memoized recursive call we will: \n        1. Check if `helper(s, p)` has already been calculated.  This takes $$O(S + P)$$ time to create a hash of the tuple `(s, p)` the first time and $$O(1)$$ time to check if the result has already been cached.\n\n        2. Go through our if statements.  If `(s, p)` is one of the base cases, this will take $$O(min(S, P))$$ time for the string equality check or just $$O(1)$$ time for other checks, otherwise, it will take $$O(S + P)$$ time to create a substring `s[1:]` and a substring `p[1:]`.  Here, let's assume the worst-case scenario where most of the non-memoized recursive calls require $$O(S + P)$$ time.  \n\n        3. Then we will cache our result, which takes $$O(1)$$ time since the hash for tuple `(s, p)` was already created when we checked if the result for `(s, p)` is already cached.\n\t      \n        So in total, we spend $$O(2 \\cdot (S + P)) = O(S + P)$$ time on every non-memoized call ($$S + P$$ for creating a hash and $$S + P$$ for creating substrings).  We can only have as many non-memoized calls as there are combinations of `s` and `p`. Therefore, in the worst case, we can have $$S \\cdot P$$ non-memoized calls. This gives us a total time spent on non-memoized calls of $$O(S \\cdot P \\cdot (S + P))$$.\n\t      \n    * As for the memoized calls, for each non-memoized call, we can make at most 2 additional calls to `helper`.  This means that there will be at most $$S \\cdot P$$ memoized calls.  Each memoized call takes $$O(S + P)$$ time to create the hash for `(s, p)` and $$O(1)$$ time to get the cached result.  So the total time spent on memoized calls is $$O(S \\cdot P \\cdot (S + P))$$ which is a loose upper bound. \n\n    * Adding all 3 time complexities together we get: $$O(P + 2 \\cdot S \\cdot P \\cdot (S + P)) = O(S \\cdot P \\cdot (S + P))$$.\n\t\n        > Note: This approach can be optimized by using two pointers to track the current position on `s` and `p` instead of passing substrings of `s` and `p` as arguments.  To improve readability, this was not implemented here, however, doing so will reduce the time complexity to $$O(S \\cdot P)$$ since hashing two integers takes $$O(1)$$ time and each recursive call to `helper` would no longer require creating new substrings which takes linear time.  Thus the total time complexity is $$O(1)$$ per call for a maximum of $$S \\cdot P$$ non-memoized calls and $$S \\cdot P$$ memoized calls.\n\n* Space complexity: $$O(S \\cdot P)$$. Creating a new string `p` requires $$O(P)$$ space. The recursion call stack may exceed `max(S, P)` in cases such as `(s, p)` = `(aaab, *a*b)`, however, it is bounded by $$O(S + P)$$.  Lastly, the hashmap requires $$O(S \\cdot P)$$ space to memoize the result of each call to `helper`.\n<br />\n<br />\n\n\n---\n#### Approach 2: Dynamic Programming \n\n**Intuition**\n\nRecursion approach above shows how painful the large recursion depth could be,\nso let's try something more iterative. \n\nMemoization from the first approach gives an idea to try a dynamic programming.\nThe problem is very similar with [Edit Distance problem](https://leetcode.com/problems/edit-distance/solution/),\nso let's use exactly the same approach here.\n\nThe idea would be to reduce the problem to simple ones. \nFor example, there is a string `adcebdk` and pattern `*a*b?k`,\nand we want to compute if there is a match for them: `D = True/False`. \nOne could notice that it seems to be more simple for short strings and patterns \nand so it would be logical to relate a match `D[p_len][s_len]` with the lengths `p_len` \nand `s_len` of input pattern and string correspondingly.\n\nLet's go further and introduce a match `D[p_idx][s_idx]` \nwhich is a match between the first `p_idx` characters of the pattern \nand the first `s_idx` characters of the string.\n\n![pic](../Figures/44/dp_match2_fixed.png)\n\nIt turns out that one could compute `D[p_idx][s_idx]`, knowing \na match without the last characters `D[p_idx - 1][s_idx - 1]`.\n\nIf the last characters are the same or pattern character is '?', then \n\n> $$D[p_{idx}][s_{idx}] = D[p_{idx} - 1][s_{idx} - 1] \\qquad (1)$$\n\n![pic](../Figures/44/word_match3.png)\n\nIf the pattern character is '*' and there was a match on the previous step\n`D[p_idx - 1][s_idx - 1] = True`, then \n\n- The star at the end of pattern still results in a match. \n\n- The star could match as many characters as you wish.\n\n> $$D[p_{idx} - 1][i] = \\textrm{True}, i \\ge s_{idx} - 1 \\qquad(2)$$\n\n\nSo each step of the computation would be done based on the previous ones,\nas follows: \n\n![pic](../Figures/44/if_match.png)\n\n![pic](../Figures/44/dpstar.png)\n\n**Algorithm**\n\n- Start from the table `D` filled with `False` everywhere but `D[0][0] = True`.\n\n- Apply rules (1) and (2) in a loop and return `D[p_len][s_len]` as an answer.\n\n![pic](../Figures/44/fixed.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/KwWWkXwr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KwWWkXwr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(S \\cdot P)$$ where $$S$$ and $$P$$ are lengths of \nthe input string and the pattern respectively. \n* Space complexity: $$O(S \\cdot P)$$ to store the matrix.\n<br />\n<br />\n\n\n---\n#### Approach 3: Backtracking\n\n**Intuition**\n\nComplexity $$O(S \\cdot P)$$ is much better than $$O(S \\cdot P \\cdot (S + P))$$,\nbut still could be improved. There is no need to compute the entire matrix,\ni.e., to check all the possibilities for each star:\n\n- Star matches zero characters.\n- Star matches one character.\n- Star matches two characters. \n\n...\n\n- Star matches all remaining characters.  \n\nLet's just pick up the first opportunity \"matches zero characters\" and proceed further.\nIf this assumption would lead in \"no match\" situation, then _backtrack_: come back\nto the previous star, assume now that it matches one more character (one) and \nproceed again. Again \"no match\" situation? \n_Backtrack again_: come back to the previous star, \nand assume now that it matches one more character (two), etc. \n\n![pic](../Figures/44/backtrack.png)\n\n**Algorithm**\n\nHere is the algorithm.\n\n- Let's use two pointers here: `s_idx` to iterate over the string, and `p_idx` to \niterate over the pattern. While `s_idx < s_len`:\n\n    - If there are still characters in the pattern (`p_idx < p_len`) and\n    the characters under the pointers match \n    (`p[p_idx] == s[s_idx]` or `p[p_idx] == '?'`),\n    then move forward by increasing both pointers.\n    \n    - Otherwise, if there are still characters in the pattern (`p_idx < p_len`), and\n    `p[p_idx] == '*'`, then first check \"match zero characters\" situation, i.e.,\n    increase only pattern pointer `p_idx++`.\n    Write down for a possible backtrack the star position in `star_idx` variable,\n    and the current string pointer in `s_tmp_idx` variable.\n    \n    - Else if there is \"no match\" situation: \n    the pattern is used up `p_idx < p_len`\n    or the characters under the pointers doesn't match. \n    \n        - If there was no stars in the pattern, i.e., no `star_idx`, return `False`.\n        \n        - If there was a star, then backtrack: set pattern pointer\n        just after the last star `p_idx = star_idx + 1`, and string \n        pointer `s_idx = s_tmp_idx + 1`, i.e., assume that this time the star\n        matches _one more character_. Save the current string pointer \n        for the possible backtrack `s_tmp_idx = s_idx`.\n        \n- Return `True` if all remaining characters in the pattern are stars. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/K3Pd2N7F/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"K3Pd2N7F\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(\\min(S, P))$$ for the best case and\nbetter than $$O(S \\log P)$$ for the average case, where $$S$$ and $$P$$ are lengths of \nthe input string and the pattern correspondingly. \nPlease refer to [this article](https://arxiv.org/pdf/1407.0950.pdf) for detailed proof. However, in the worst-case scenario, this algorithm requires $$O(S \\cdot P)$$ time.\n* Space complexity: $$O(1)$$ since it's a constant space solution.\n<br />\n<br />\n\n\n---\n#### Further reading\n\nThere are a lot of search-related questions around this problem \nwhich could pop up during the interview.\nTo prepare, you could read about [string searching algorithm](https://en.wikipedia.org/wiki/String-searching_algorithm)\nand [KMP algorithm](https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm).",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "wildcard-matching",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.788,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "189",
                "title": "Regular Expression Matching",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 46,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "10",
                    "questionFrontendId": "10",
                    "sessionId": "968792",
                    "questionTitle": "Regular Expression Matching",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/regular-expression-matching/submit/",
                    "interpretUrl": "/problems/regular-expression-matching/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isMatch(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isMatch(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isMatch(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isMatch(char * s, char * p){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsMatch(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {boolean}\\n */\\nvar isMatch = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Boolean}\\ndef is_match(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isMatch(_ s: String, _ p: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isMatch(s: String, p: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_match(s: String, p: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Boolean\\n     */\\n    function isMatch($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isMatch(s: string, p: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-match s p)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aa\"\n\"a\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isMatch\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"p\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, p = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;mississippi&quot;, p = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Regular Expression Matching",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Recursion\n\n**Intuition**\n\nIf there were no Kleene stars (the `*` wildcard character for regular expressions), the problem would be easier - we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.  A recursive solution is a straightforward way to represent this relationship.\n\n**Algorithm**\n\nWithout a Kleene star, our solution would look like this:\n\n\n<iframe src=\"https://leetcode.com/playground/Z2XSmAHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"123\" name=\"Z2XSmAHG\"></iframe>\n\nIf a star is present in the pattern, it will be in the second position $$\\text{pattern[1]}$$.  Then, we may ignore this part of the pattern, or delete a matching character in the text.  If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n<iframe src=\"https://leetcode.com/playground/EX8cYcs3/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"EX8cYcs3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  In the worst case, a call to `match(text[i:], pattern[2j:])` will be made $$\\binom{i+j}{i}$$ times, and strings of the order $$O(T - i)$$ and $$O(P - 2*j)$$ will be made.  Thus, the complexity has the order $$\\sum_{i = 0}^T \\sum_{j = 0}^{P/2} \\binom{i+j}{i} O(T+P-i-2j)$$.  With some effort outside the scope of this article, we can show this is bounded by $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$.\n\n* Space Complexity:  For every call to `match`, we will create those strings as described above, possibly creating duplicates.  If memory is not freed, this will also take a total of $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$ space, even though there are only order $$O(T^2 + P^2)$$ unique suffixes of $$P$$ and  $$T$$ that are actually required.\n<br />\n<br />\n---\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nAs the problem has an **optimal substructure**, it is natural to cache intermediate results.  We ask the question $$\\text{dp(i, j)}$$: does $$\\text{text[i:]}$$ and $$\\text{pattern[j:]}$$ match?  We can describe our answer in terms of answers to questions involving smaller strings.\n\n**Algorithm**\n\nWe proceed with the same recursion as in [Approach 1](#approach-1-recursion), except because calls will only ever be made to `match(text[i:], pattern[j:])`, we use $$\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results.\n\n\n*Top-Down Variation*\n<iframe src=\"https://leetcode.com/playground/Fpg6LXEX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Fpg6LXEX\"></iframe>\n\n*Bottom-Up Variation*\n\n<iframe src=\"https://leetcode.com/playground/dmAyPDG3/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"dmAyPDG3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  The work for every call to `dp(i, j)` for $$i=0, ... ,T$$; $$j=0, ... ,P$$ is done once, and it is $$O(1)$$ work.  Hence, the time complexity is $$O(TP)$$.\n\n* Space Complexity:  The only memory we use is the $$O(TP)$$ boolean entries in our cache.  Hence, the space complexity is $$O(TP)$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "regular-expression-matching",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.964,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "We recommend Letter Combinations of a Phone Number and Word Search II."
    },
    {
        "id": "47",
        "title": "Sorting and Searching",
        "slug": "sorting-and-searching",
        "items": [
            {
                "id": "257",
                "title": "Remove Duplicates from Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "26",
                    "questionFrontendId": "26",
                    "sessionId": "968792",
                    "questionTitle": "Remove Duplicates from Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/remove-duplicates-from-sorted-array/submit/",
                    "interpretUrl": "/problems/remove-duplicates-from-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int removeDuplicates(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int removeDuplicates(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def removeDuplicates(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def removeDuplicates(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint removeDuplicates(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int RemoveDuplicates(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar removeDuplicates = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef remove_duplicates(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeDuplicates(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def removeDuplicates(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun removeDuplicates(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function removeDuplicates(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function removeDuplicates(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (remove-duplicates nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,1,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"removeDuplicates\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0,\r\n    \"size\": \"ret\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>\n\n<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;<code>k</code>&nbsp;elements.</p>\n\n<p>Return <code>k</code><em> after placing the final result in the first </em><code>k</code><em> slots of </em><code>nums</code>.</p>\n\n<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>",
                        "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
                        "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."
                    ],
                    "solution": {
                        "title": "Remove Duplicates from Sorted Array",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/591217456\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution\n\n---\n#### Approach 1: Two Pointers\n\n**Algorithm**\n\nSince the array is already sorted, we can keep two pointers $$i$$ and $$j$$, where $$i$$ is the slow-runner while $$j$$ is the fast-runner. As long as $$nums[i] = nums[j]$$, we increment $$j$$ to skip the duplicate.\n\nWhen we encounter $$nums[j] \\neq nums[i]$$, the duplicate run has ended so we must copy its value to $$nums[i + 1]$$. $$i$$ is then incremented and we repeat the same process again until $$j$$ reaches the end of array.\n\n<iframe src=\"https://leetcode.com/playground/YJ5mYjoD/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"YJ5mYjoD\"></iframe>\n\n**Complexity analysis**\n\n* Time complextiy : $$O(n)$$.\nAssume that $$n$$ is the length of array. Each of $$i$$ and $$j$$ traverses at most $$n$$ steps.\n\n* Space complexity : $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "remove-duplicates-from-sorted-array",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.624,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "258",
                "title": "Merge Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "88",
                    "questionFrontendId": "88",
                    "sessionId": "968792",
                    "questionTitle": "Merge Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-sorted-array/submit/",
                    "interpretUrl": "/problems/merge-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def merge(self, nums1, m, nums2, n):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type m: int\\n        :type nums2: List[int]\\n        :type n: int\\n        :rtype: None Do not return anything, modify nums1 in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums1 in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid merge(int* nums1, int nums1Size, int m, int* nums2, int nums2Size, int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number} m\\n * @param {number[]} nums2\\n * @param {number} n\\n * @return {void} Do not return anything, modify nums1 in-place instead.\\n */\\nvar merge = function(nums1, m, nums2, n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer} m\\n# @param {Integer[]} nums2\\n# @param {Integer} n\\n# @return {Void} Do not return anything, modify nums1 in-place instead.\\ndef merge(nums1, m, nums2, n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func merge(nums1 []int, m int, nums2 []int, n int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn merge(nums1: &mut Vec<i32>, m: i32, nums2: &mut Vec<i32>, n: i32) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer $m\\n     * @param Integer[] $nums2\\n     * @param Integer $n\\n     * @return NULL\\n     */\\n    function merge(&$nums1, $m, $nums2, $n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums1 in-place instead.\\n */\\nfunction merge(nums1: number[], m: number, nums2: number[], n: number): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (merge nums1 m nums2 n)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?) exact-integer? void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[1,2,3,0,0,0]\n3\n[2,5,6]\n3",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"merge\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\",\r\n      \"implicitsizeparam\": false\r\n    },\r\n    {\r\n      \"name\": \"m\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\",\r\n      \"implicitsizeparam\": false\r\n    },\r\n    {\r\n      \"name\": \"n\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>\n\n<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>\n\n<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array </em><code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n<strong>Output:</strong> [1,2,2,3,5,6]\n<strong>Explanation:</strong> The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [<u>1</u>,<u>2</u>,2,<u>3</u>,5,6] with the underlined elements coming from nums1.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1], m = 1, nums2 = [], n = 0\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [1] and [].\nThe result of the merge is [1].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], m = 0, nums2 = [1], n = 1\n<strong>Output:</strong> [1]\n<strong>Explanation:</strong> The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m + n</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 200</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up: </strong>Can you come up with an algorithm that runs in <code>O(m + n)</code> time?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
                        "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
                    ],
                    "solution": {
                        "title": "Merge Sorted Arrays",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1 : Merge and sort\n\n**Intuition**\n\nA naive approach would be to simply write the values from `nums2` into the end of `nums1`, and then sort `nums1`. Remember that we do not need to return a value, as we should modify `nums1` in-place. While straightforward to code, this approach has a high time complexity as we're not taking advantage of the existing sorting.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/2JaaHAz4/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"2JaaHAz4\"></iframe>\n\n\n* Time complexity : $$\\mathcal{O}((n + m)\\log(n + m))$$. \n\n    The cost of sorting a list of length $$x$$ using a built-in sorting algorithm is $$\\mathcal{O}(x \\log x)$$. Because in this case we're sorting a list of length $$m + n$$, we get a total time complexity of $$\\mathcal{O}((n + m) \\log (n + m))$$.\n\n* Space complexity : $$\\mathcal{O}(n)$$, but it can vary.\n\n    Most programming languages have a built-in sorting algorithm that uses $$\\mathcal{O}(n)$$ space.\n\n<br />\n\n---\n\n#### Approach 2 : Three Pointers (Start From the Beginning)\n\n**Intuition**\n\nBecause each array is already sorted, we can achieve an $$\\mathcal{O}(n + m)$$ time complexity with the help of the _two-pointer technique_.\n\n**Algorithm**\n\nThe simplest implementation would be to make a *copy* of the values in `nums1`, called `nums1Copy`, and then use two __read__ pointers and one __write__ pointer to read values from `nums1Copy` and `nums2` and write them into `nums1`.\n\n- Initialize `nums1Copy` to be a new array containing the first `m` values of `nums1`.\n- Initialize read pointer `p1` to the beginning of `nums1Copy`.\n- Initialize read pointer `p2` to the beginning of `nums2`.\n- Initialize write pointer `p` to the beginning of `nums1`.\n- While `p` is still within `nums1`: \n  - If `nums1Copy[p1]` exists and is less than or equal to `nums2[p2]`:\n    - Write `nums1Copy[p1]` into `nums1[p]`, and increment `p1` by `1`.\n  - Else \n    - Write `nums2[p2]` into `nums1[p]`, and increment `p2` by `1`.\n  - Increment `p` by `1`.\n\n![compute](../Figures/88/88_beginning.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/SnKcpgfm/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"SnKcpgfm\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$. \n    \n    We are performing $$n + 2 \\cdot m$$ reads and $$n + 2 \\cdot m$$ writes. Because constants are ignored in Big O notation, this gives us a time complexity of $$\\mathcal{O}(n + m)$$.\n\n* Space complexity : $$\\mathcal{O}(m)$$. \n    \n    We are allocating an additional array of length $$m$$.\n\n<br />\n\n---\n\n#### Approach 3 : Three Pointers (Start From the End)\n\n**Intuition**\n\n> **Interview Tip**: This is a medium-level solution to an easy-level problem. Many of LeetCode's easy-level problems have more difficult solutions, and good candidates are expected to find them.\n\nApproach 2 already demonstrates the best possible time \ncomplexity, $$\\mathcal{O}(n + m)$$, but still uses additional space.\nThis is because the elements of array `nums1` have to be stored somwhere so that\nthey aren't overwritten.\n\nSo, what if instead we start to overwrite `nums1` from the end, where \nthere is no information yet?\n\nThe algorithm is similar to before, except this time we set `p1` to point at index `m - 1` of `nums1`,\n`p2` to point at index `n - 1` of `nums2`, and `p` to point at index `m + n - 1` of `nums1`. \nThis way, it is guaranteed that once we start overwriting the first `m` values in `nums1`, \nwe will have already written each into its new position. In this way, we can eliminate the additional space.\n\n> **Interview Tip**: Whenever you're trying to solve an array problem in-place, always consider the possibility of iterating backwards instead of forwards through the array. It can completely change the problem, and make it a lot easier. \n\n![compute](../Figures/88/88_end.png)\n\n**Implementation**\n\n!?!../Documents/88_LIS.json:1000,470!?!\n\n<iframe src=\"https://leetcode.com/playground/Pir9ofvd/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"Pir9ofvd\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n + m)$$. \n    \n    Same as Approach 2.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n    \n    Unlike Approach 2, we're not using an extra array.\n\n**Proof (optional)**\n\nYou might be a bit sceptical of this claim. Does it really work in every case? Is it safe to be making such a bold claim?\n\n> This way, it is guaranteed that once we start overwriting the first `m` values in `nums1`, \nwe will have already written each into its new position. In this way, we can eliminate the additional space.\n\nGreat question! So, why does this work? To prove it, we need to ensure that `p` never overwrites a value in `nums1` that `p1` hasn't yet read from `nums1`.\n\n> **Words of Advice**: Terrified of proofs? Many software engineers are. Good proofs are simply a series of logical assertions, each building on the next. In this way, we can go from \"obvious\" statements, all the way to the one we want to prove. I recommend reading each statement one-by-one, ensuring that you understand each before moving onto the next.\n\n1. *We know that* upon initialization, `p` is `n` steps ahead of `p1` (in other words, `p1 + n = p`).\n\n2. *We also know that* during each of the `p` iterations this algorithm performs, `p` is always decremented by `1`, and *either* `p1` *or* `p2` is decremented by `1`.\n\n3. *We can deduce that* when `p1` decremented, the gap between `p` and `p1` stays the same, so there can't be an \"overtake\" in that case.\n\n4. *We can also deduce that* when `p2` is decremented though, the gap between `p` and `p1` shrinks by `1` as `p` moves, but not `p1`.\n\n5. *And from that, we can deduce that* the maximum number of times that `p2` can be decremented is `n`. In other words, the gap between `p` and `p1` can shrink by `1`, at most `n` times.\n\n6. *In conclusion*, it's impossible for an overtake to occur, as they started `n` apart. And when `p = p1`, the gap has to have shrunk `n` times. This means that all of `nums2` have been merged in, and so there is nothing more to do.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "merge-sorted-arrays",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.483,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "193",
                "title": "Sort Colors",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft online assessment and phone interview.",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "75",
                    "questionFrontendId": "75",
                    "sessionId": "968792",
                    "questionTitle": "Sort Colors",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/sort-colors/submit/",
                    "interpretUrl": "/problems/sort-colors/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void sortColors(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void sortColors(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def sortColors(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def sortColors(self, nums: List[int]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid sortColors(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void SortColors(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar sortColors = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Void} Do not return anything, modify nums in-place instead.\\ndef sort_colors(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func sortColors(_ nums: inout [Int]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func sortColors(nums []int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def sortColors(nums: Array[Int]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun sortColors(nums: IntArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn sort_colors(nums: &mut Vec<i32>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function sortColors(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums in-place instead.\\n */\\nfunction sortColors(nums: number[]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (sort-colors nums)\\n  (-> (listof exact-integer?) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[2,0,2,1,1,0]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"sortColors\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given an array <code>nums</code> with <code>n</code> objects colored red, white, or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a> </strong>so that objects of the same color are adjacent, with the colors in the order red, white, and blue.</p>\n\n<p>We will use the integers <code>0</code>, <code>1</code>, and <code>2</code> to represent the color red, white, and blue, respectively.</p>\n\n<p>You must solve this problem without using the library&#39;s sort function.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,0,2,1,1,0]\n<strong>Output:</strong> [0,0,1,1,2,2]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,0,1]\n<strong>Output:</strong> [0,1,2]\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [0]\n<strong>Output:</strong> [0]\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>nums[i]</code> is <code>0</code>, <code>1</code>, or <code>2</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Could you come up with a one-pass algorithm using only&nbsp;constant extra space?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "A rather straight forward solution is a two-pass algorithm using counting sort.",
                        "Iterate the array counting number of 0's, 1's, and 2's.",
                        "Overwrite array with the total number of 0's, then 1's and followed by 2's."
                    ],
                    "solution": {
                        "title": "Sort Colors",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: One Pass \n\n**Intuition**\n\nThe problem is known as [Dutch National Flag Problem](https://en.wikipedia.org/wiki/Dutch_national_flag_problem)\nand first was proposed by [Edsger W. Dijkstra](https://en.wikipedia.org/wiki/Edsger_W._Dijkstra).\nThe idea is to attribute a color to each number and then to\narrange them following the order of colors on the Dutch flag.\n\n![bla](../Figures/75/first_pic2.png)\n\nLet's use here three pointers to track the \nrightmost boundary of zeros, the leftmost boundary of twos\nand the current element under the consideration.\n\n![bla](../Figures/75/idx.png) \n\nThe idea of solution is to move `curr` pointer along the\narray, if `nums[curr] = 0` - swap it with `nums[p0]`,\nif `nums[curr] = 2` - swap it with `nums[p2]`.\n\n**Algorithm**\n\n- Initialise the rightmost boundary of zeros : `p0 = 0`.\nDuring the algorithm execution `nums[idx < p0] = 0`.\n\n- Initialise the leftmost boundary of twos : `p2 = n - 1`.\nDuring the algorithm execution `nums[idx > p2] = 2`.\n\n- Initialise the index of current element to consider : `curr = 0`.\n\n- While `curr <= p2` :\n\n    - If `nums[curr] = 0` : swap `curr`th and `p0`th elements and \n    move both pointers to the right.\n    \n    - If `nums[curr] = 2` : swap `curr`th and `p2`th elements. Move\n    pointer `p2` to the left. \n    \n    - If `nums[curr] = 1` : move pointer `curr` to the right. \n\n**Implementation**\n\n!?!../Documents/75_LIS.json:1000,511!?!\n\n<iframe src=\"https://leetcode.com/playground/DKXFbfqc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"DKXFbfqc\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since it's one pass\nalong the array of length $$N$$.\n \n* Space complexity : $$\\mathcal{O}(1)$$ since it's a constant space\nsolution.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "sort-colors",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.63,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "206",
                "title": "Find Minimum in Rotated Sorted Array",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "153",
                    "questionFrontendId": "153",
                    "sessionId": "968792",
                    "questionTitle": "Find Minimum in Rotated Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-minimum-in-rotated-sorted-array/submit/",
                    "interpretUrl": "/problems/find-minimum-in-rotated-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findMin(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findMin(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findMin(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findMin(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindMin(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findMin = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef find_min(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findMin(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMin(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findMin(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findMin(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_min(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function findMin($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findMin(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-min nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_min(Nums :: [integer()]) -> integer().\\nfind_min(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_min(nums :: [integer]) :: integer\\n  def find_min(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,4,5,1,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findMin\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p>\n\n<ul>\n\t<li><code>[4,5,6,7,0,1,2]</code> if it was rotated <code>4</code> times.</li>\n\t<li><code>[0,1,2,4,5,6,7]</code> if it was rotated <code>7</code> times.</li>\n</ul>\n\n<p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>\n\n<p>Given the sorted rotated array <code>nums</code> of <strong>unique</strong> elements, return <em>the minimum element of this array</em>.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(log n) time.</code></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,4,5,1,2]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The original array was [1,2,3,4,5] rotated 3 times.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,6,7,0,1,2]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [11,13,15,17]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> The original array was [11,13,15,17] and it was rotated 4 times. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li>All the integers of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2].",
                        "You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity?",
                        "<ol>\r\n<li>All the elements to the left of inflection point > first element of the array.</li>\r\n<li>All the elements to the right of inflection point < first element of the array.</li>\r\n<ol>"
                    ],
                    "solution": {
                        "title": "Find Minimum in Rotated Sorted Array",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Binary Search\n\n**Intuition**\n\nA very brute way of solving this question is to search the entire array and find the minimum element. The time complexity for that would be $$O(N)$$ given that `N` is the size of the array.\n\nA very cool way of solving this problem is using the `Binary Search` algorithm. In binary search we find out the mid point and decide to either search on the left or right depending on some condition.\n\nSince the given array is sorted, we can make use of binary search. However, the array is rotated. So simply applying the binary search won't work here.\n\nIn this question we would essentially apply a modified version of binary search where the `condition` that decides the search direction would be different than in a standard binary search.\n\nWe want to find the smallest element in a rotated sorted array. What if the array is not rotated? How do we check that?\n\nIf the array is not rotated and the array is in ascending order, then `last element > first element`.\n\n<center>\n<img src=\"../Figures/153/153_Minimum_Rotated_Sorted_Array_1.png\" width=\"500\"/>\n</center>\n\nIn the above example `7 > 2`. This means that the array is still sorted and has no rotation.\n\n<center>\n<img src=\"../Figures/153/153_Minimum_Rotated_Sorted_Array_2.png\" width=\"500\"/>\n</center>\n\nIn the above example `3 < 4`. Hence the array is rotated. This happens because the array was initially `[2, 3 ,4 ,5 ,6 ,7]`. But after the rotation the smaller elements`[2,3]` go at the back. i.e. [4, 5, 6, 7, `2, 3]`. Because of this the first element `[4]` in the rotated array becomes greater than the last element.\n\nThis means there is a point in the array at which you would notice a change. This is the point which would help us in this question. We call this the `Inflection Point`.\n\n<center>\n<img src=\"../Figures/153/153_Minimum_Rotated_Sorted_Array_3.png\" width=\"500\"/>\n</center>\n\nIn this modified version of binary search algorithm, we are looking for this point. In the above example notice the `Inflection Point` .\n\n> All the elements to the left of inflection point > first element of the array.<br/>\nAll the elements to the right of inflection point < first element of the array.\n\n\n**Algorithm**\n\n1. Find the `mid` element of the array.\n\n2. If `mid element > first element of array` this means that we need to look for the inflection point on the right of `mid`.\n3.  If `mid element < first element of array` this that we need to look for the inflection point on the left of `mid`.\n\n<center>\n<img src=\"../Figures/153/153_Minimum_Rotated_Sorted_Array_4.png\" width=\"500\"/>\n</center>\n\nIn the above example mid element `6` is greater than first element `4`. Hence we continue our search for the inflection point to the right of mid.\n\n4 . We stop our search when we find the inflection point, when either of the two conditions is satisfied:\n\n`nums[mid] > nums[mid + 1]` Hence, **mid+1** is the smallest.\n\n`nums[mid - 1] > nums[mid]` Hence, **mid** is the smallest.\n\n<center>\n<img src=\"../Figures/153/153_Minimum_Rotated_Sorted_Array_5.png\" width=\"500\"/>\n</center>\n\nIn the above example. With the marked left and right pointers. The mid element is `2`. The element just before `2` is `7` and `7>2` i.e. `nums[mid - 1] > nums[mid]`. Thus we have found the point of inflection and `2` is the smallest element.\n\n<iframe src=\"https://leetcode.com/playground/kRh5nyRU/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kRh5nyRU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : Same as Binary Search $$O(\\log N)$$\n* Space Complexity : $$O(1)$$\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "find-minimum-in-rotated-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.278,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "207",
                "title": "Find Minimum in Rotated Sorted Array II",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "154",
                    "questionFrontendId": "154",
                    "sessionId": "968792",
                    "questionTitle": "Find Minimum in Rotated Sorted Array II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-minimum-in-rotated-sorted-array-ii/submit/",
                    "interpretUrl": "/problems/find-minimum-in-rotated-sorted-array-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findMin(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findMin(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findMin(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findMin(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findMin(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindMin(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findMin = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef find_min(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findMin(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMin(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findMin(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findMin(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_min(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function findMin($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findMin(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-min nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_min(Nums :: [integer()]) -> integer().\\nfind_min(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_min(nums :: [integer]) :: integer\\n  def find_min(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,3,5]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findMin\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Suppose an array of length <code>n</code> sorted in ascending order is <strong>rotated</strong> between <code>1</code> and <code>n</code> times. For example, the array <code>nums = [0,1,4,4,5,6,7]</code> might become:</p>\n\n<ul>\n\t<li><code>[4,5,6,7,0,1,4]</code> if it was rotated <code>4</code> times.</li>\n\t<li><code>[0,1,4,4,5,6,7]</code> if it was rotated <code>7</code> times.</li>\n</ul>\n\n<p>Notice that <strong>rotating</strong> an array <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 1 time results in the array <code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code>.</p>\n\n<p>Given the sorted rotated array <code>nums</code> that may contain <strong>duplicates</strong>, return <em>the minimum element of this array</em>.</p>\n\n<p>You must decrease the overall operation steps as much as possible.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,5]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,2,0,1]\n<strong>Output:</strong> 0\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5000</code></li>\n\t<li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li><code>nums</code> is sorted and rotated between <code>1</code> and <code>n</code> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> This problem is similar to&nbsp;<a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/\" target=\"_blank\">Find Minimum in Rotated Sorted Array</a>, but&nbsp;<code>nums</code> may contain <strong>duplicates</strong>. Would this affect the runtime complexity? How and why?</p>\n\n<p>&nbsp;</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find Minimum in Rotated Sorted Array II",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Variant of Binary Search\n\n**Intuition**\n\nGiven a sorted array in ascending order (denoted as `L[i]`), the array is then rotated over certain _unknown pivot_, (denoted as `L'[i]`). We are asked to find the _minimum value_ of this sorted and rotated array, which is to find the value of the first element in the original array, _i.e._ `L[0]`.\n\nThe problem resembles a common problem of _finding a given value from a sorted array_, to which problem one could apply the **binary search** algorithm. Intuitively, one might wonder if we could apply a variant of binary search algorithm to solve our problem here.\n\nIndeed, this is the right intuition, though the tricky part is to figure out a _**concise solution**_ that could work for all cases.\n\nTo illustrate the algorithm, we draw the array in a 2D dimension in the following graph, where the X axis indicates the index of each element in the array and the Y axis indicates the value of the element.\n\n![pic](../Figures/154/154_axis.png)\n\n_The main structure of our algorithm remains the same as the classical binary search algorithm._ As a reminder, we summarize it briefly as follows:\n\n- We keep two pointers, _i.e._ `low`, `high` which point to the lowest and highest boundary of our search scope.\n<br/>\n- We then reduce the search scope by moving either of pointers, according to various situations. Usually we shift one of pointers to the mid point between `low` and `high`, (_i.e._ `pivot = (low+high)/2`), which reduces the search scope down to half. This is also where the name of the algorithm comes from.\n<br/>\n- The reduction of the search scope would stop, either we find the desired element or the two pointers converge (_i.e._ `low == high`).\n\n\n**Algorithm**\n\nIn the classical binary search algorithm, we would compare the pivot element (_i.e._ `nums[pivot]`) with the value that we would like to locate. In our case, however, we would compare the pivot element to the element pointed by the upper bound pointer (_i.e._ `nums[high]`).\n\n>Following the structure of the binary search algorithm, the essential part remained is to design the cases on how to update the two pointers.\n\nHere we give one example on how we can break it down _**concisely**_ into three cases. Note that given the array, we consider the element pointed by the `low` index to be on the left-hand side of the array, and the element pointed by the `high` index to be on the right-hand side.  \n\n>Case 1). `nums[pivot] < nums[high]`\n\n![pic](../Figures/154/154_case_1.png)\n\n- The pivot element resides in _the same half_ as the upper bound element.\n- Therefore, the desired minimum element should reside to the **left-hand side** of pivot element. As a result, we then move the upper bound down to the pivot index, _i.e._ `high = pivot`.\n\n>Case 2). `nums[pivot] > nums[high]`\n\n![pic](../Figures/154/154_case_2.png)\n\n- The pivot element resides in _the different half_ of array as the upper bound element.\n- Therefore, the desired minium element should reside to the **right-hand side** of the pivot element. As a result, we then move the lower bound up next to the pivot index, _i.e._ `low = pivot + 1`. \n\n>Case 3). `nums[pivot] == nums[high]` \n\n![pic](../Figures/154/154_case_3_ii.png)\n\n- In this case, we are not sure which side of the pivot that the desired minimum element would reside.\n- To further reduce the search scope, a safe measure would be to reduce the upper bound by one (_i.e._ `high = high - 1`), rather than moving _aggressively_ to the pivot point.\n- The above strategy would prevent the algorithm from stagnating (_i.e._ endless loop). More importantly, it maintains the **correctness** of the procedure, _i.e._ we would not end up with skipping the desired element.\n\nTo summarize, this algorithm differs to the classical binary search algorithm in two parts:\n\n- We use the upper bound of search scope as the reference for the comparison with the pivot element, while in the classical binary search the reference would be the desired value.\n<br/>\n- When the result of comparison is equal (_i.e._ Case #3), we further move the upper bound, while in the classical binary search normally we would return the value immediately.\n\nHere are some sample implementations based on the above algorithm. _Note:_ the idea is inspired by the post from [sheehan](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/discuss/48808/My-pretty-simple-code-to-solve-it) in the discussion forum.\n\n<iframe src=\"https://leetcode.com/playground/SrgT6x5m/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"SrgT6x5m\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: on average $$\\mathcal{O}(\\log_{2}{N})$$ where $$N$$ is the length of the array, since in general it is a binary search algorithm. However, in the worst case where the array contains identical elements (_i.e._ case #3 `nums[pivot]==nums[high]`), the algorithm would deteriorate to iterating each element, as a result, the time complexity becomes $$\\mathcal{O}(N)$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$, it's a constant space solution.\n\n\n**Discussion**\n\n>The problem is a follow-up to the problem of [153. Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/). The difference is that in this problem the array can contain duplicates.\n_So the question is \"Would allow duplicates affect the run-time complexity? How and why?\"_\n\nFirst of all, the problem of [153. Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/) can be considered as a specific case of this problem, where it just happens that the array does not contain any duplicate. As a result, the very solutions of this problem would work for the problem of [#153](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/) as well. It is just that we would never come cross the case #3 (_i.e._ `nums[pivot] == nums[high]`) in the problem of [#153](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/).\n\nIt is due to the fact that there might exist some duplicates in the array, that we come up the case #3 which eventually render the time complexity of the algorithm to be linear $$\\mathcal{O}(N)$$, rather than $$\\mathcal{O}(\\log_{2}{N})$$.\n\n>One might wonder that whether it works in case #3 if we move the lower boundary (_i.e._ `low += 1`), rather than the upper boundary (_i.e._ `high -= 1`).\n\nThe short answer is that it could work for some cases, but not for all. For instance, given the input `[1, 3, 3]`, by moving the lower boundary, we would skip the correct answer.\n\n>While we do `low = pivot + 1` to reduce the search scope, then why not do `high = pivot - 1` instead of `high = pivot`?\nOr a similar question would be _\"why don't we do check of `low <= high` rather than `low < high`\"?_\n\nAs a matter of fact, the binary search algorithm has several [forms of implementation](https://en.wikipedia.org/wiki/Binary_search_algorithm), regarding how we set the boundaries and the loop conditions. One can refer to the [Explore card of Binary Search](https://leetcode.com/explore/learn/card/binary-search/) in LeetCode for more details. As simple as the idea of binary search might seem to be, it is tricky to make it work for all cases.\n\nAs one would discover from the card, the above implementation of binary search complies with the [template II](https://leetcode.com/explore/learn/card/binary-search/126/template-ii/937/) of binary search. And by replacing `high = pivot` with `high = pivot - 1`, the algorithm will not work.\n\nAs subtle as it looks like, the update of the pointers should be consistent with the conditions of the loop. As a rule of thumb, it is advised to stick with one form of binary search, and not to mix them up.\n\n> One might notice that we are calculating the pivot with the formula of `pivot = low + (high-low)/2`, rather than the more intuitive term `pivot = (high+low)/2`.\n\nActually, this is done intentionally to prevent the numeric overflow issue, since the sum of two integers could exceed the limit of the integer number. As a fun fact, the above mistake prevails in many implementations of binary search, as revealed from a post titled [_\"Nearly All Binary Searches and Mergesorts are Broken\"_](https://ai.googleblog.com/2006/06/extra-extra-read-all-about-it-nearly.html) from googleblog in 2006.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.89,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "191",
                "title": "Search in Rotated Sorted Array",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "33",
                    "questionFrontendId": "33",
                    "sessionId": "968792",
                    "questionTitle": "Search in Rotated Sorted Array",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/search-in-rotated-sorted-array/submit/",
                    "interpretUrl": "/problems/search-in-rotated-sorted-array/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def search(self, nums, target):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint search(int* nums, int numsSize, int target){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Search(int[] nums, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number}\\n */\\nvar search = function(nums, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} target\\n# @return {Integer}\\ndef search(nums, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func search(_ nums: [Int], _ target: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func search(nums []int, target int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def search(nums: Array[Int], target: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun search(nums: IntArray, target: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search(nums: Vec<i32>, target: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $target\\n     * @return Integer\\n     */\\n    function search($nums, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function search(nums: number[], target: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search nums target)\\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search(Nums :: [integer()], Target :: integer()) -> integer().\\nsearch(Nums, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search(nums :: [integer], target :: integer) :: integer\\n  def search(nums, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,5,6,7,0,1,2]\n0",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"search\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is an integer array <code>nums</code> sorted in ascending order (with <strong>distinct</strong> values).</p>\n\n<p>Prior to being passed to your function, <code>nums</code> is <strong>rotated</strong> at an unknown pivot index <code>k</code> (<code>0 &lt;= k &lt; nums.length</code>) such that the resulting array is <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code> (<strong>0-indexed</strong>). For example, <code>[0,1,2,4,5,6,7]</code> might be rotated at pivot index <code>3</code> and become <code>[4,5,6,7,0,1,2]</code>.</p>\n\n<p>Given the array <code>nums</code> <strong>after</strong> the rotation and an integer <code>target</code>, return <em>the index of </em><code>target</code><em> if it is in </em><code>nums</code><em>, or </em><code>-1</code><em> if it is not in </em><code>nums</code>.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 0\n<strong>Output:</strong> 4\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,5,6,7,0,1,2], target = 3\n<strong>Output:</strong> -1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1], target = 0\n<strong>Output:</strong> -1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5000</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>All values of <code>nums</code> are <strong>unique</strong>.</li>\n\t<li><code>nums</code> is guaranteed to be rotated at some pivot.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Search in Rotated Sorted Array",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Binary search\n\nThe problem is to implement a search in $$\\mathcal{O}(\\log{N})$$ time\nthat gives an idea to use a binary search.\n\nThe algorithm is quite straightforward :\n\n* Find a rotation index `rotation_index`,\n_i.e._ index of the smallest element in the array.\nBinary search works just perfect here.\n\n* `rotation_index` splits array in two parts.\nCompare `nums[0]` and `target`\nto identify in which part one has to look for `target`.\n\n* Perform a binary search in the chosen part of the array.\n\n!?!../Documents/33_LIS.json:1000,510!?!\n\n<iframe src=\"https://leetcode.com/playground/Q6Yorxh3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Q6Yorxh3\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log{N})$$.\n\n* Space complexity : $$\\mathcal{O}(1)$$.\n<br />\n<br />\n\n\n---\n#### Approach 2: One-pass Binary Search\n\nInstead of going through the input array in two passes, we could achieve the goal in one pass with an _revised_ binary search.\n\n>The idea is that we add some additional *condition checks* in the normal binary search in order to better _narrow down_ the scope of the search.\n\n**Algorithm**\n\nAs in the normal binary search, we keep two pointers (_i.e._ `start` and `end`) to track the search scope. At each iteration, we reduce the search scope into half, by moving either the `start` or `end` pointer to the middle (_i.e._ `mid`) of the previous search scope.\n\nHere are the detailed breakdowns of the algorithm:\n\n- Initiate the pointer `start` to `0`, and the pointer `end` to `n - 1`.\n\n- Perform standard binary search. While `start <= end`:\n\n    - Take an index in the middle `mid` as a pivot.\n\n    - If `nums[mid] == target`, the job is done, return `mid`.\n\n    - Now there could be two situations:\n\n        - Pivot element is larger than the first element in the array, _i.e._ the subarray from the first element to the pivot is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_small_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go left: `end = mid - 1`.\n\n            - Otherwise: go right: `start = mid + 1`.\n\n        - Pivot element is smaller than the first element of the array, _i.e._ the rotation index is somewhere between `0` and `mid`. It implies that the sub-array from the pivot element to the last one is non-rotated, as shown in the following graph.\n\n        ![pic](../Figures/33/33_big_mid.png)\n\n            - If the target is located in the non-rotated subarray:\n            go right: `start = mid + 1`.\n\n            - Otherwise: go left: `end = mid - 1`.\n\n- We're here because the target is not found. Return -1.\n\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/UAxfNC7U/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"UAxfNC7U\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(\\log{N})$$.\n* Space complexity: $$\\mathcal{O}(1)$$.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "search-in-rotated-sorted-array",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.743,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "154",
                "title": "Search a 2D Matrix",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "74",
                    "questionFrontendId": "74",
                    "sessionId": "968792",
                    "questionTitle": "Search a 2D Matrix",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/search-a-2d-matrix/submit/",
                    "interpretUrl": "/problems/search-a-2d-matrix/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean searchMatrix(int[][] matrix, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def searchMatrix(self, matrix, target):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool SearchMatrix(int[][] matrix, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @param {number} target\\n * @return {boolean}\\n */\\nvar searchMatrix = function(matrix, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @param {Integer} target\\n# @return {Boolean}\\ndef search_matrix(matrix, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchMatrix(matrix [][]int, target int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @param Integer $target\\n     * @return Boolean\\n     */\\n    function searchMatrix($matrix, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function searchMatrix(matrix: number[][], target: number): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (search-matrix matrix target)\\n  (-> (listof (listof exact-integer?)) exact-integer? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec search_matrix(Matrix :: [[integer()]], Target :: integer()) -> boolean().\\nsearch_matrix(Matrix, Target) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec search_matrix(matrix :: [[integer]], target :: integer) :: boolean\\n  def search_matrix(matrix, target) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"searchMatrix\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"target\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted from left to right.</li>\n\t<li>The first integer of each row is greater than the last integer of the previous row.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= matrix[i][j], target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Search in 2D Matrix",
                        "content": "[TOC]\n\n## Solution\n\n---\n   \n#### Approach 1: Binary Search\n\n**Intuition**\n\nOne could notice that the input matrix `m x n` could be considered \nas a sorted array of length `m x n`.\n\n![bla](../Figures/74/matrix2.png)\n\nSorted array is a perfect candidate for the binary search\nbecause the element index in this _virtual_ array (_for sure we're \nnot going to construct it for real_) could be easily\ntransformed into the row and column in the initial matrix\n\n> `row = idx // n` and `col = idx % n`.\n\n**Algorithm**\n\nThe algorithm is a standard binary search : \n\n* Initialise left and right indexes \n`left = 0` and `right = m x n - 1`.\n\n* While `left <= right` :\n\n    * Pick up the index in the middle of the virtual array \n    as a pivot index : `pivot_idx = (left + right) / 2`.\n    \n    * The index corresponds to `row = pivot_idx // n` and\n    `col = pivot_idx % n` in the initial matrix, and hence\n    one could get the `pivot_element`.\n    This element splits the virtual array in two parts. \n    \n    * Compare `pivot_element` and `target` \n    to identify in which part one has to look for `target`.\n        \n**Implementation**\n\n!?!../Documents/74_LIS.json:1000,436!?!\n\n<iframe src=\"https://leetcode.com/playground/VXaabxWV/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"VXaabxWV\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log(m n))$$ since it's a standard binary search.\n\n* Space complexity : $$\\mathcal{O}(1)$$. \n\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "search-in-2d-matrix",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.483,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "195",
                "title": "Search a 2D Matrix II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "240",
                    "questionFrontendId": "240",
                    "sessionId": "968792",
                    "questionTitle": "Search a 2D Matrix II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/search-a-2d-matrix-ii/submit/",
                    "interpretUrl": "/problems/search-a-2d-matrix-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean searchMatrix(int[][] matrix, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def searchMatrix(self, matrix, target):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool searchMatrix(int** matrix, int matrixSize, int* matrixColSize, int target){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool SearchMatrix(int[][] matrix, int target) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @param {number} target\\n * @return {boolean}\\n */\\nvar searchMatrix = function(matrix, target) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @param {Integer} target\\n# @return {Boolean}\\ndef search_matrix(matrix, target)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func searchMatrix(matrix [][]int, target int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn search_matrix(matrix: Vec<Vec<i32>>, target: i32) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @param Integer $target\\n     * @return Boolean\\n     */\\n    function searchMatrix($matrix, $target) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function searchMatrix(matrix: number[][], target: number): boolean {\\n\\n};\"}]",
                    "sampleTestCase": "[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n5",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"searchMatrix\",\n  \"params\": [\n    {\n      \"name\": \"matrix\",\n      \"type\": \"integer[][]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Write an efficient algorithm that searches for a <code>target</code> value in an <code>m x n</code> integer <code>matrix</code>. The <code>matrix</code> has the following properties:</p>\n\n<ul>\n\t<li>Integers in each row are sorted in ascending from left to right.</li>\n\t<li>Integers in each column are sorted in ascending from top to bottom.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n<strong>Output:</strong> true\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg\" style=\"width: 300px; height: 300px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the integers in each row are <strong>sorted</strong> in ascending order.</li>\n\t<li>All the integers in each column are <strong>sorted</strong> in ascending order.</li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Search a 2D Matrix II",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute Force\n\n**Intuition**\n\nAs a baseline, we can search the 2D array the same way we might search an\nunsorted 1D array -- by examining each element.\n\n**Algorithm**\n\nThe algorithm doesn't really do anything more clever than what is explained\nby the intuition; we loop over the array, checking each element in turn. If\nwe find it, we return `true`. Otherwise, if we reach the end of the nested\n`for` loop without returning, we return `false`. The algorithm must return\nthe correct answer in all cases because we exhaust the entire search space.\n\n<iframe src=\"https://leetcode.com/playground/WM4UCWwS/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"WM4UCWwS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(nm)$$\n\n    Becase we perform a constant time operation for each element of an\n    $$n\\times m$$ element matrix, the overall time complexity is equal to the\n    size of the matrix.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    The brute force approach does not allocate more additional space than a\n    handful of pointers, so the memory footprint is constant.\n<br />\n<br />\n\n\n---\n#### Approach 2: Binary Search\n\n**Intuition**\n\nThe fact that the matrix is sorted suggests that there must be some way to use\nbinary search to speed up our algorithm.\n\n**Algorithm**\n\nFirst, we ensure that `matrix` is not `null` and not empty. Then, if we\niterate over the matrix diagonals, we can maintain an invariant that the\nslice of the row and column beginning at the current $$(row, col)$$ pair is\nsorted. Therefore, we can always binary search these row and column slices\nfor `target`. We proceed in a logical fashion, iterating over the diagonals,\nbinary searching the rows and columns until we either run out of diagonals\n(meaning we can return `False`) or find `target` (meaning we can return\n`True`). The `binarySearch` function works just like normal binary search,\nbut is made ugly by the need to search both rows and columns of a\ntwo-dimensional array.\n\n<iframe src=\"https://leetcode.com/playground/QZxbZGqX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QZxbZGqX\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(\\log(n!))$$\n\n    It's not super obvious how $$\\mathcal{O}(\\log(n!))$$ time complexity arises\n    from this algorithm, so let's analyze it step-by-step. The\n    asymptotically-largest amount of work performed is in the main loop,\n    which runs for $$min(m, n)$$ iterations, where $$m$$ denotes the number\n    of rows and $$n$$ denotes the number of columns. On each iteration, we\n    perform two binary searches on array slices of length $$m-i$$ and\n    $$n-i$$. Therefore, each iteration of the loop runs in\n    $$\\mathcal{O}(\\log(m-i)+\\log(n-i))$$ time, where $$i$$ denotes the current\n    iteration. We can simplify this to $$\\mathcal{O}(2\\cdot \\log(n-i))=\\mathcal{O}(\\log(n-i))$$\n    by seeing that, in the worst case, $$n\\approx m$$. To see why, consider\n    what happens when $$n \\ll m$$ (without loss of generality); $$n$$ will\n    dominate $$m$$ in the asymptotic analysis. By summing the runtimes of all\n    iterations, we get the following expression:\n\n    $$\n        (1) \\quad \\mathcal{O}(\\log(n) + \\log(n-1) + \\log(n-2) + \\ldots + \\log(1))\n    $$\n\n    Then, we can leverage the log multiplication rule ($$\\log(a)+\\log(b)=\\log(ab)$$)\n    to rewrite the complexity as:\n\n    $$\n    \\begin{aligned}\n        (2) \\quad \\mathcal{O}(\\log(n) + \\log(n-1) + \\log(n-2) + \\ldots + \\log(1)) &=\n                  \\mathcal{O}(\\log(n \\cdot (n-1) \\cdot (n-2) \\cdot \\ldots \\cdot 1)) \\\\ &=\n                  \\mathcal{O}(\\log(1 \\cdot \\ldots \\cdot (n-2) \\cdot (n-1) \\cdot n)) \\\\\n                                                             &= \\mathcal{O}(\\log(n!))\n    \\end{aligned}\n    $$\n\n    Because this time complexity is fairly uncommon, it is worth thinking about\n    its relation to the usual analyses. For one, $$\\log(n!) = \\mathcal{O}(n\\log n)$$.\n    To see why, recall step 1 from the analysis above; there are $$n$$ terms, each no\n    greater than $$\\log(n)$$. Therefore, the asymptotic runtime is certainly no worse than\n    that of an $$\\mathcal{O}(n\\log n)$$ algorithm.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    Because our binary search implementation does not literally slice out\n    copies of rows and columns from `matrix`, we can avoid allocating\n    greater-than-constant memory.\n<br />\n<br />\n\n\n---\n#### Approach 3: Divide and Conquer\n\n**Intuition**\n\nWe can partition a sorted two-dimensional matrix into four sorted submatrices,\ntwo of which might contain `target` and two of which definitely do not.\n\n**Algorithm**\n\nBecause this algorithm operates recursively, its correctness can be asserted\nvia the correctness of its base and recursive cases.\n\n*Base Case*\n\nFor a sorted two-dimensional array, there are two ways to determine in\nconstant time whether an arbitrary element `target` can appear in it. First,\nif the array has zero area, it contains no elements and therefore cannot\ncontain `target`. Second, if `target` is smaller than the array's smallest\nelement (found in the top-left corner) or larger than the array's largest\nelement (found in the bottom-right corner), then it definitely is not\npresent.\n\n*Recursive Case*\n\nIf the base case conditions have not been met, then the array has positive\narea and `target` could potentially be present. Therefore, we seek along the\nmatrix's middle column for an index `row` such that\n$$ matrix[row-1][mid] < target < matrix[row][mid] $$ (obviously, if we find\n`target` during this process, we immediately return `true`). The existing\nmatrix can be partitioned into four submatrice around this index; the\ntop-left and bottom-right submatrice cannot contain `target` (via the\nargument outlined in *Base Case* section), so we can prune them from the\nsearch space. Additionally, the bottom-left and top-right submatrice are\nsorted two-dimensional matrices, so we can recursively apply this algorithm\nto them.\n\n<iframe src=\"https://leetcode.com/playground/3uFA67GF/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"3uFA67GF\"></iframe>\n\nHere is a visualization for the above code.\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/570771097\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n\\log n)$$\n\n    First, for ease of analysis, assume that $$n \\approx m$$, as in the\n    analysis of approach 2. Also, assign $$x=n^2=|matrix|$$; this will make\n    the [master method](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms))\n    easier to apply. Now, let's model the runtime of the\n    divide & conquer approach as a recurrence relation:\n\n    $$\n        T(x) = 2 \\cdot T(\\frac{x}{4}) + \\sqrt{x}\n    $$\n\n    The first term ($$2 \\cdot T(\\frac{x}{4})$$) arises from the fact that we\n    recurse on two submatrices of roughly one-quarter size, while\n    $$\\sqrt{x}$$ comes from the time spent seeking along a $$O(n)$$-length\n    column for the partition point. After binding the master method variables\n    ($$a=2;b=4;c=0.5$$) we notice that $$\\log_b{a}=c$$. Therefore, this\n    recurrence falls under case 2 of the master method, and the following\n    falls out:\n\n    $$\n    \\begin{aligned}\n        T(x) &= \\mathcal{O}(x^c \\cdot \\log x) \\\\\n             &= \\mathcal{O}(x^{0.5} \\cdot \\log x) \\\\\n             &= \\mathcal{O}((n^2)^{0.5} \\cdot \\log(n^2)) \\\\\n             &= \\mathcal{O}(n \\cdot \\log(n^2)) \\\\\n             &= \\mathcal{O}(2n \\cdot \\log n) \\\\\n             &= \\mathcal{O}(n \\cdot \\log n) \\\\\n    \\end{aligned}\n    $$\n\n    Extension: what would happen to the complexity if we binary searched for\n    the partition point, rather than used a linear scan?\n\n* Space complexity : $$\\mathcal{O}(\\log n)$$\n\n    Although this approach does not fundamentally require\n    greater-than-constant addition memory, its use of recursion means that it\n    will use memory proportional to the height of its recursion tree. Because\n    this approach discards half of `matrix` on each level of recursion (and\n    makes two recursive calls), the height of the tree is bounded by $$\\log n$$.\n<br />\n<br />\n\n\n---\n#### Approach 4: Search Space Reduction\n\n**Intuition**\n\nBecause the rows and columns of the matrix are sorted (from left-to-right and\ntop-to-bottom, respectively), we can prune $$\\mathcal{O}(m)$$ or \n$$\\mathcal{O}(n)$$ elements when looking at any particular value.\n\n**Algorithm**\n\nFirst, we initialize a $$(row, col)$$ pointer to the bottom-left of the\nmatrix.[^1] Then, until we find `target` and return `true` (or the pointer\npoints to a $$(row, col)$$ that lies outside of the dimensions of the\nmatrix), we do the following: if the currently-pointed-to value is larger\nthan `target` we can move one row \"up\". Otherwise, if the\ncurrently-pointed-to value is smaller than `target`, we can move one column\n\"right\". It is not too tricky to see why doing this will never prune the\ncorrect answer; because the rows are sorted from left-to-right, we know that\nevery value to the right of the current value is larger. Therefore, if the\ncurrent value is already larger than `target`, we know that every value to\nits right will also be too large. A very similar argument can be made for the\ncolumns, so this manner of search will always find `target` in the matrix (if\nit is present).\n\nCheck out some sample runs of the algorithm in the animation below:\n\n!?!../Documents/240_Search_a_2D_Matrix_II.json:1280,720!?!\n\n<iframe src=\"https://leetcode.com/playground/HVVemncP/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"HVVemncP\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(n+m)$$\n\n    The key to the time complexity analysis is noticing that, on every\n    iteration (during which we do not return `true`) either `row` or `col` is\n    is decremented/incremented exactly once. Because `row` can only be\n    decremented $$m$$ times and `col` can only be incremented $$n$$ times\n    before causing the `while` loop to terminate, the loop cannot run for\n    more than $$n+m$$ iterations. Because all other work is constant, the\n    overall time complexity is linear in the sum of the dimensions of the\n    matrix.\n\n* Space complexity : $$\\mathcal{O}(1)$$\n\n    Because this approach only manipulates a few pointers, its memory\n    footprint is constant.\n<br />\n\n\n#### Footnotes ####\n\n[^1]: This would work equally well with a pointer initialized to the\ntop-right. Neither of the other two corners would work, as pruning a\nrow/column might prevent us from achieving the correct answer.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "search-a-2d-matrix-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.697,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "890",
                "title": "Median of Two Sorted Arrays",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft phone interview.",
                "paidOnly": false,
                "chapterId": 47,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "4",
                    "questionFrontendId": "4",
                    "sessionId": "968792",
                    "questionTitle": "Median of Two Sorted Arrays",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/median-of-two-sorted-arrays/submit/",
                    "interpretUrl": "/problems/median-of-two-sorted-arrays/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findMedianSortedArrays(self, nums1, nums2):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\ndouble findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar findMedianSortedArrays = function(nums1, nums2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer[]} nums2\\n# @return {Float}\\ndef find_median_sorted_arrays(nums1, nums2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Float\\n     */\\n    function findMedianSortedArrays($nums1, $nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-median-sorted-arrays nums1 nums2)\\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\\nfind_median_sorted_arrays(Nums1, Nums2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\\n  def find_median_sorted_arrays(nums1, nums2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,3]\n[2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findMedianSortedArrays\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0], nums2 = [0,0]\n<strong>Output:</strong> 0.00000\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [], nums2 = [1]\n<strong>Output:</strong> 1.00000\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2], nums2 = []\n<strong>Output:</strong> 2.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "We recommend Sort Colors and Search a 2D Matrix."
    },
    {
        "id": "49",
        "title": "Dynamic Programming",
        "slug": "dynamic-programming",
        "items": [
            {
                "id": "186",
                "title": "Best Time to Buy and Sell Stock",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft phone interview.",
                "paidOnly": false,
                "chapterId": 49,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "121",
                    "questionFrontendId": "121",
                    "sessionId": "968792",
                    "questionTitle": "Best Time to Buy and Sell Stock",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/best-time-to-buy-and-sell-stock/submit/",
                    "interpretUrl": "/problems/best-time-to-buy-and-sell-stock/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxProfit(vector<int>& prices) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxProfit(self, prices):\\n        \\\"\\\"\\\"\\n        :type prices: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxProfit(int* prices, int pricesSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} prices\\n * @return {number}\\n */\\nvar maxProfit = function(prices) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\\n# @return {Integer}\\ndef max_profit(prices)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxProfit(_ prices: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxProfit(prices: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $prices\\n     * @return Integer\\n     */\\n    function maxProfit($prices) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxProfit(prices: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-profit prices)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[7,1,5,3,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxProfit\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"prices\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>\n\n<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,1,5,3,6,4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [7,6,4,3,1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> In this case, no transactions are done and the max profit = 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Best Time to Buy and Sell Stock",
                        "content": "[TOC]\n\n## Solution\n\nWe need to find out the maximum difference (which will be the maximum profit) between two numbers in the given array. Also, the second number (selling price) must be larger than the first one (buying price).\n\nIn formal terms, we need to find $$\\max(\\text{prices[j]} - \\text{prices[i]})$$, for every $$i$$ and $$j$$ such that $$j > i$$.\n\n---\n#### Approach 1: Brute Force\n\n<iframe src=\"https://leetcode.com/playground/tVDNcEFQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"tVDNcEFQ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Loop runs $$\\dfrac{n (n-1)}{2}$$ times.\n\n* Space complexity : $$O(1)$$. Only two variables - $$\\text{maxprofit}$$ and $$\\text{profit}$$ are used.\n<br />\n<br />\n---\n#### Approach 2: One Pass\n\n**Algorithm**\n\nSay the given array is:\n\n[7, 1, 5, 3, 6, 4]\n\nIf we plot the numbers of the given array on a graph, we get:\n\n![Profit Graph](https://leetcode.com/media/original_images/121_profit_graph.png)\n\nThe points of interest are the peaks and valleys in the given graph. We need to find the largest peak following the smallest valley.\nWe can maintain two variables - minprice and maxprofit corresponding to the smallest valley and maximum profit (maximum difference between selling price and minprice) obtained so far respectively.\n\n<iframe src=\"https://leetcode.com/playground/WQBerWww/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"WQBerWww\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Only a single pass is needed.\n\n* Space complexity : $$O(1)$$. Only two variables are used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "best-time-to-buy-and-sell-stock",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.502,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "174",
                "title": "Maximum Subarray",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 49,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "53",
                    "questionFrontendId": "53",
                    "sessionId": "968792",
                    "questionTitle": "Maximum Subarray",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/maximum-subarray/submit/",
                    "interpretUrl": "/problems/maximum-subarray/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxSubArray(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxSubArray(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxSubArray(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxSubArray(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxSubArray(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxSubArray(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar maxSubArray = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef max_sub_array(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxSubArray(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSubArray(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxSubArray(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxSubArray(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_sub_array(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function maxSubArray($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxSubArray(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-sub-array nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_sub_array(Nums :: [integer()]) -> integer().\\nmax_sub_array(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_sub_array(nums :: [integer]) :: integer\\n  def max_sub_array(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[-2,1,-3,4,-1,2,1,-5,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxSubArray\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return <em>its sum</em>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [4,-1,2,1] has the largest sum = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,4,-1,7,8]\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Maximum Subarray",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Optimized Brute Force\r\n\r\n**Intuition**\r\n\r\nThis algorithm doesn't reliably run under the time limit here on LeetCode. We'll still look briefly at it though, as in an interview scenario it would be a great start if you're struggling to come up with a better approach.\r\n\r\nCalculate the sum of all subarrays, and keep track of the best one. To actually generate all subarrays would take $$O(N^3)$$ time, but with a little optimization, we can achieve brute force in $$O(N^2)$$ time. The trick is to recognize that all of the subarrays starting at a particular value will share a common prefix.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize a variable `maxSubarray = -infinity` to keep track of the best subarray. We need to use negative infinity, not 0, because it is possible that there are only negative numbers in the array.\r\n\r\n2. Use a `for` loop that considers each index of the array as a starting point.\r\n\r\n3. For each starting point, create a variable `currentSubarray = 0`. Then, loop through the array from the starting index, adding each element to `currentSubarray`. Every time we add an element it represents a possible subarray - so continuously update `maxSubarray` to contain the maximum out of the `currentSubarray` and itself.\r\n\r\n4. Return `maxSubarray`. \r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/YZ2Sq9un/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"YZ2Sq9un\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N^2)$$, where $$N$$ is the length of `nums`.\r\n\r\n    We use 2 nested `for` loops, with each loop iterating through `nums`.\r\n\r\n* Space complexity: $$O(1)$$\r\n\r\n    No matter how big the input is, we are only ever using 2 variables: `ans` and `currentSubarray`. \r\n    \r\n<br/>\r\n\r\n#### Approach 2: Dynamic Programming, Kadane's Algorithm\r\n\r\n**Intuition**\r\n\r\nWhenever you see a question that asks for the maximum or minimum of something, consider Dynamic Programming as a possibility. The difficult part of this problem is figuring out when a negative number is \"worth\" keeping in a subarray. This question in particular is a popular problem that can be solved using an algorithm called [Kadane's Algorithm](https://en.wikipedia.org/wiki/Maximum_subarray_problem#Kadane's_algorithm). If you're good at problem solving though, it's quite likely you'll be able to come up with the algorithm on your own. This algorithm also has a very greedy-like intuition behind it.\r\n\r\nLet's focus on one important part: where the optimal subarray **begins**. We'll use the following example.\r\n\r\n`nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`\r\n\r\nWe can see that the optimal subarray couldn't possibly involve the first 3 values - the overall sum of those numbers would always *subtract* from the total. Therefore, the subarray either starts at the first `4`, or somewhere further to the right.\r\n\r\nWhat if we had this example though?\r\n\r\n`nums = [-2,1000000000,-3,4,-1,2,1,-5,4]`\r\n \r\nWe need a general way to figure out when a part of the array is **worth** keeping.\r\n\r\nAs expected, any subarray whose sum is *positive* is worth keeping. Let's start with an empty array, and iterate through the input, adding numbers to our array as we go along. Whenever the sum of the array is negative, we know the entire array is not worth keeping, so we'll reset it back to an empty array.\r\n\r\nHowever, we don't actually need to build the subarray, we can just keep an integer variable `current_subarray` and add the values of each element there. When it becomes negative, we reset it to 0 (an empty array).\r\n\r\n!?!../Documents/53_Maximum_Subarray.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\n1. Initialize 2 integer variables. Set both of them equal to the first value in the array.\r\n    - `currentSubarray` will keep the running count of the current subarray we are focusing on.\r\n    - `maxSubarray` will be our final return value. Continuously update it whenever we find a bigger subarray.\r\n\r\n2. Iterate through the array, starting with the 2nd element (as we used the first element to initialize our variables). For each number, add it to the `currentSubarray` we are building. If `currentSubarray` becomes negative, we know it isn't worth keeping, so throw it away. Remember to update `maxSubarray` every time we find a new maximum.\r\n\r\n3. Return `maxSubarray`.\r\n\r\n**Implementation**\r\n\r\nA clever way to update `currentSubarray` is using `currentSubarray = max(num, currentSubarray + num)`. If `currentSubarray` is negative, then `num > currentSubarray + num`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/DTqpuZzF/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"DTqpuZzF\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N)$$, where $$N$$ is the length of `nums`.\r\n\r\n    We iterate through every element of `nums` exactly once.\r\n\r\n* Space complexity: $$O(1)$$\r\n\r\n    No matter how long the input is, we are only ever using 2 variables: `currentSubarray` and `maxSubarray`. \r\n    \r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 3: Divide and Conquer (Advanced)\r\n\r\n**Intuition**\r\n\r\nThis approach is slower than the second approach and uses more space, but it's still a nice and different way to approach the problem. In an interview, sometimes you may be asked for alternative ways to solve a problem - and divide and conquer is an extremely common type of algorithm. This solution will make use of recursion - if you aren't familiar with recursion, check out the [recursion explore card](https://leetcode.com/explore/featured/card/recursion-i/).\r\n\r\nDivide and conquer algorithms involve splitting up the input into smaller chunks until they're small enough to be easily solved, and then combining the solutions to get the final overall solution. If you're unfamiliar with them, check out [this explore card](https://leetcode.com/explore/learn/card/recursion-ii/470/divide-and-conquer/2897/). \r\n\r\nIf we were to split our input in half, then logically the optimal subarray either:\r\n\r\n- Uses elements only from the left side\r\n- Uses elements only from the right side\r\n- Uses a combination of elements from both the left and right side\r\n\r\nThus, the answer is simply the largest of:\r\n\r\n- The maximum subarray contained only in the left side\r\n- The maximum subarray contained only in the right side\r\n- The maximum subarray that can use elements from both sides\r\n\r\nFinding the maximum subarray from the left and right half is straightforward - just recurse using the respective half of the array. So, the hard part is figuring out how to find the best subarray that uses elements from both sides. Lets use a smaller example, `nums = [5, -2, 1, -3, 4, -2, 1]`. Since we want to use elements from both sides, we also must use the middle element, `-3`. Now, we can also take from the left and the right, but every element must be connected to the middle (since we're still forming a subarray). \r\n\r\nThe fact that every element must be connected to the middle actually makes our lives a lot easier - every subarray we consider **must** contain the element immediately beside the center, which means there are only as many subarrays as there are elements. In our example, the right side is `[4, -2, 1]`. There are only 3 subarrays to consider - `[4]`, `[4, -2]`, and `[4, -2, 1]`. To find the best chain of elements we can take from a half, iterate from the middle to the end (start of the array for the left half) and continuously update some counter `curr`.\r\n\r\n!?!../Documents/53_Maximum_Subarray_2.json:960,540!?!\r\n\r\n**Algorithm**\r\n\r\nNow that we know how to find the best subarray containing elements from both sides of any given array, the algorithm is as follows:\r\n\r\n1. Define a helper function that we will use for recursion.\r\n    - This function will take an input `left` and `right`, which defines the bounds of the array. The return value of this function will be the best possible subarray for the array that fits between `left` and `right`.\r\n    - If `left > right`, we have an empty array. Return negative infinity.\r\n    - Find the midpoint of our array. This is `(left + right) / 2`, rounded down. Using this midpoint, find the best possible subarray that uses elements from both sides of the array with the algorithm detailed in the animation above.\r\n    - The best subarray using elements from both sides is only 1 of 3 possibilities. We still need to find the best subarray using only the left or right halves. So, call this function again, once with the left half, and once with the right half.\r\n    - Return the largest of the 3 values - the best left half sum, the best right half sum, and the best combined sum.\r\n\r\n2. Call our helper function with the entire input array (`left = 0`, `right = length - 1`). This is our final answer, so return it.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/RoGrNEAu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RoGrNEAu\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(N \\cdot \\log N)$$, where $$N$$ is the length of `nums`.\r\n    \r\n    On our first call to `findBestSubarray`, we use for loops to visit every element of `nums`. Then, we split the array in half and call `findBestSubarray` with each half. Both those calls will then iterate through every element in that half, which combined is every element of `nums` again. Then, both those halves will be split in half, and 4 more calls to `findBestSubarray` will happen, each with a quarter of `nums`. As you can see, every time the array is split, we still need to handle every element of the original input `nums`. We have to do this $$\\log N$$ times since that's how many times an array can be split in half.\r\n\r\n* Space complexity: $$O(\\log N)$$, where $$N$$ is the length of `nums`.\r\n    \r\n    The extra space we use relative to input size is solely occupied by the recursion stack. Each time the array gets split in half, another call of `findBestSubarray` will be added to the recursion stack, until calls start to get resolved by the base case - remember, the base case happens at an empty array, which occurs after $$\\log N$$ calls.\r\n\r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "maximum-subarray",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.538,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "156",
                "title": "Longest Increasing Subsequence",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 49,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "300",
                    "questionFrontendId": "300",
                    "sessionId": "968792",
                    "questionTitle": "Longest Increasing Subsequence",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-increasing-subsequence/submit/",
                    "interpretUrl": "/problems/longest-increasing-subsequence/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int lengthOfLIS(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int lengthOfLIS(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def lengthOfLIS(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def lengthOfLIS(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint lengthOfLIS(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LengthOfLIS(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar lengthOfLIS = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef length_of_lis(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func lengthOfLIS(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLIS(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def lengthOfLIS(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun lengthOfLIS(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn length_of_lis(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function lengthOfLIS($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function lengthOfLIS(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (length-of-lis nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec length_of_lis(Nums :: [integer()]) -> integer().\\nlength_of_lis(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec length_of_lis(nums :: [integer]) :: integer\\n  def length_of_lis(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[10,9,2,5,3,7,101,18]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lengthOfLIS\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, return the length of the longest strictly increasing subsequence.</p>\n\n<p>A <strong>subsequence</strong> is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, <code>[3,6,2,7]</code> is a subsequence of the array <code>[0,3,1,6,2,2,7]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,9,2,5,3,7,101,18]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,0,3,2,3]\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,7,7,7,7,7,7]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2500</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b>&nbsp;Can you come up with an algorithm that runs in&nbsp;<code>O(n log(n))</code> time complexity?</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Increasing Subsequence",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Dynamic Programming\r\n\r\n**Realizing a Dynamic Programming Problem**\r\n\r\nThis problem has two important attributes that let us know it should be solved by dynamic programming. First, the question is asking for the maximum or minimum of something. Second, we have to make decisions that may depend on previously made decisions, which is very typical of a problem involving subsequences.\r\n\r\nAs we go through the input, each \"decision\" we must make is simple: is it worth it to consider this number? If we use a number, it may contribute towards an increasing subsequence, but it may also eliminate larger elements that came before it. For example, let's say we have `nums = [5, 6, 7, 8, 1, 2, 3]`. It isn't worth using the 1, 2, or 3, since using any of them would eliminate 5, 6, 7, and 8, which form the longest increasing subsequence. We can use dynamic programming to determine whether an element is worth using or not.\r\n\r\n**A Framework to Solve Dynamic Programming Problems**\r\n\r\nTypically, dynamic programming problems can be solved with three main components. If you're new to dynamic programming, this might be hard to understand but is extremely valuable to learn since **most dynamic programming problems can be solved this way**. \r\n\r\nFirst, we need some function or array that represents the answer to the problem from a given state. For many solutions on LeetCode, you will see this function/array named \"dp\". For this problem, let's say that we have an array `dp`. As just stated, this array needs to represent **the answer to the problem for a given state**, so let's say that `dp[i]` represents the length of the **longest increasing subsequence** that **ends with the $$i^{th}$$ element**. The \"state\" is one-dimensional since it can be represented with only one variable - the index `i`.\r\n\r\nSecond, we need a way to transition between states, such as `dp[5]` and `dp[7]`. This is called a **recurrence relation** and can sometimes be tricky to figure out. Let's say we know `dp[0]`, `dp[1]`, and `dp[2]`. How can we find `dp[3]` given this information? Well, since `dp[2]` represents the length of the longest increasing subsequence that ends with `nums[2]`, if `nums[3] > nums[2]`, then we can simply take the subsequence ending at `i = 2` and append `nums[3]` to it, increasing the length by 1. The same can be said for `nums[0]` and `nums[1]` if `nums[3]` is larger. Of course, we should try to maximize `dp[3]`, so we need to check all 3. Formally, the recurrence relation is: `dp[i] = max(dp[j] + 1) for all j where nums[j] < nums[i] and j < i`.\r\n\r\nThe third component is the simplest: we need a base case. For this problem, we can initialize every element of `dp` to `1`, since every element on its own is technically an increasing subsequence.\r\n\r\n!?!../Documents/300_LIS.json:960,540!?!\r\n\r\n\r\n**Algorithm**\r\n\r\n1. Initialize an array `dp` with length `nums.length` and all elements equal to 1. `dp[i]` represents the length of the longest increasing subsequence that ends with the element at index `i`.\r\n\r\n2. Iterate from `i = 1` to `i = nums.length - 1`. At each iteration, use a second for loop to iterate from `j = 0` to `j = i - 1` (all the elements before i). For each element before `i`, check if that element is smaller than `nums[i]`. If so, set `dp[i] = max(dp[i], dp[j] + 1)`.\r\n\r\n3. Return the max value from `dp`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/6YcyHfvN/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"6YcyHfvN\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nGiven $$N$$ as the length of `nums`,\r\n\r\n* Time complexity: $$O(N^2)$$\r\n\r\n    We use two nested for loops resulting in $$1 + 2 + 3 + 4 + ... + N = \\dfrac {N * (N + 1)}{2}$$ operations, resulting in a time complexity of $$O(N^2)$$. \r\n\r\n* Space complexity: $$O(N)$$\r\n\r\n    The only extra space we use relative to input size is the `dp` array, which is the same length as `nums`.\r\n    \r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: Intelligently Build a Subsequence\r\n\r\n**Intuition**\r\n\r\nAs stated in the previous approach, the difficult part of this problem is deciding if an element is worth using or not. Consider the example `nums = [8, 1, 6, 2, 3, 10]`. Let's try to build an increasing subsequence starting with an empty one: `sub = []`. \r\n\r\n- At the first element `8`, we might as well take it since it's better than nothing, so `sub = [8]`. \r\n\r\n- At the second element `1`, we can't increase the length of the subsequence since `8 >= 1`, so we have to choose only one element to keep. Well, this is an easy decision, let's take the `1` since there may be elements later on that are greater than `1` but less than `8`, now we have `sub = [1]`. \r\n\r\n- At the third element `6`, we can build on our subsequence since `6 > 1`, now `sub = [1, 6]`.\r\n\r\n- At the fourth element `2`, we can't build on our subsequence since `6 >= 2`, but can we improve on it for the future? Well, similar to the decision we made at the second element, if we replace the `6` with `2`, we will open the door to using elements that are greater than `2` but less than `6` in the future, so `sub = [1, 2]`.\r\n\r\n- At the fifth element `3`, we can build on our subsequence since `3 > 2`. Notice that this was only possible because of the swap we made in the previous step, so `sub = [1, 2, 3]`.\r\n\r\n- At the last element `10`, we can build on our subsequence since `10 > 3`, giving a final subsequence `sub = [1, 2, 3, 10]`. The length of `sub` is our answer.\r\n\r\nIt appears the best way to build an increasing subsequence is: for each element `num`, if `num` is greater than the largest element in our subsequence, then add it to the subsequence. Otherwise, perform a linear scan through the subsequence starting from the smallest element and replace the first element that is greater than or equal to `num` with `num`. This opens the door for elements that are greater than `num` but less than the element replaced to be included in the sequence. \r\n\r\nOne thing to add: this algorithm does not always generate a valid subsequence of the input, but the length of the subsequence will always equal the length of the longest increasing subsequence. For example, with the input `[3, 4, 5, 1]`, at the end we will have `sub = [1, 4, 5]`, which isn't a subsequence, but the length is still correct. The length remains correct because the length only changes when a new element is larger than any element in the subsequence. In that case, the element is appended to the subsequence instead of replacing an existing element.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize an array `sub` which contains the first element of `nums`.\r\n\r\n2. Iterate through the input, starting from the second element. For each element `num`:\r\n    - If `num` is greater than any element in `sub`, then add `num` to `sub`.\r\n    - Otherwise, iterate through `sub` and find the first element that is greater than or equal to `num`. Replace that element with `num`.\r\n\r\n3. Return the length of `sub`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/fxoMyQoS/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"fxoMyQoS\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nGiven $$N$$ as the length of `nums`,\r\n\r\n* Time complexity: $$O(N^2)$$\r\n\r\n    This algorithm will have a runtime of $$O(N^2)$$ only in the worst case. Consider an input where the first half is `[1, 2, 3, 4, ..., 99998, 99999]`, then the second half is `[99998, 99998, 99998, ..., 99998, 99998]`. We would need to iterate $$(N / 2)^2$$ times for the second half because there are $$N / 2$$ elements equal to `99998`, and a linear scan for each one takes $$N / 2$$ iterations. This gives a time complexity of $$O(N^2)$$.\r\n\r\n    Despite having the same time complexity as the previous approach, in the best and average cases, it is much more efficient.\r\n\r\n* Space complexity: $$O(N)$$\r\n\r\n    When the input is strictly increasing, the `sub` array will be the same size as the input.\r\n    \r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 3: Improve With Binary Search\r\n\r\n**Intuition**\r\n\r\nIn the previous approach, when we have an element `num` that is not greater than all the elements in `sub`, we perform a linear scan to find the first element in `sub` that is greater than or equal to `num`. Since `sub` is in sorted order, we can use binary search instead to greatly improve the efficiency of our algorithm.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize an array `sub` which contains the first element of `nums`.\r\n\r\n2. Iterate through the input, starting from the second element. For each element `num`:\r\n    - If `num` is greater than any element in `sub`, then add `num` to `sub`.\r\n    - Otherwise, perform a binary search in `sub` to find the smallest element that is greater than or equal to `num`. Replace that element with `num`.\r\n\r\n3. Return the length of `sub`.\r\n\r\n**Implementation**\r\n\r\nIn Python, the [bisect](https://docs.python.org/3/library/bisect.html) module provides super handy functions that does binary search for us.\r\n\r\n<iframe src=\"https://leetcode.com/playground/TbDEp8HA/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TbDEp8HA\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\nGiven $$N$$ as the length of `nums`,\r\n\r\n* Time complexity: $$O(N \\cdot \\log(N))$$\r\n\r\n    Binary search uses $$\\log(N)$$ time as opposed to the $$O(N)$$ time of a linear scan, which improves our time complexity from $$O(N^2)$$ to $$O(N \\cdot \\log(N))$$.\r\n\r\n* Space complexity: $$O(N)$$\r\n\r\n    When the input is strictly increasing, the `sub` array will be the same size as the input.\r\n    \r\n<br/>\r\n\r\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "longest-increasing-subsequence",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.842,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Microsoft does not ask a lot of Dynamic Programming type questions, but question such as Longest Increasing Subsequence has been asked in a Microsoft onsite interviews."
    },
    {
        "id": "51",
        "title": "Design",
        "slug": "design",
        "items": [
            {
                "id": "891",
                "title": "Serialize and Deserialize BST",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 51,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "449",
                    "questionFrontendId": "449",
                    "sessionId": "968792",
                    "questionTitle": "Serialize and Deserialize BST",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/serialize-and-deserialize-bst/submit/",
                    "interpretUrl": "/problems/serialize-and-deserialize-bst/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        \\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec* ser = new Codec();\\n// Codec* deser = new Codec();\\n// string tree = ser->serialize(root);\\n// TreeNode* ans = deser->deserialize(tree);\\n// return ans;\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// String tree = ser.serialize(root);\\n// TreeNode ans = deser.deserialize(tree);\\n// return ans;\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# tree = ser.serialize(root)\\n# ans = deser.deserialize(tree)\\n# return ans\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root: TreeNode) -> str:\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data: str) -> TreeNode:\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# tree = ser.serialize(root)\\n# ans = deser.deserialize(tree)\\n# return ans\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/** Encodes a tree to a single string. */\\nchar* serialize(struct TreeNode* root) {\\n    \\n}\\n\\n/** Decodes your encoded data to tree. */\\nstruct TreeNode* deserialize(char* data) {\\n    \\n}\\n\\n// Your functions will be called as such:\\n// char* data = serialize(root);\\n// deserialize(data);\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// String tree = ser.serialize(root);\\n// TreeNode ans = deser.deserialize(tree);\\n// return ans;\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    \\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    \\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# Encodes a tree to a single string.\\n#\\n# @param {TreeNode} root\\n# @return {string}\\ndef serialize(root)\\n    \\nend\\n\\n# Decodes your encoded data to tree.\\n#\\n# @param {string} data\\n# @return {TreeNode}\\ndef deserialize(data)\\n    \\nend\\n\\n\\n# Your functions will be called as such:\\n# deserialize(serialize(data))\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a tree to a single string.\\n    func serialize(_ root: TreeNode?) -> String {\\n        \\n    }\\n    \\n    // Decodes your encoded data to tree.\\n    func deserialize(_ data: String) -> TreeNode? {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * let ser = Codec()\\n * let deser = Codec()\\n * let tree: String = ser.serialize(root)\\n * let ans = deser.deserialize(tree)\\n * return ans\\n*/\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\ntype Codec struct {\\n    \\n}\\n\\nfunc Constructor() Codec {\\n    \\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    \\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    \\n}\\n\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * ser := Constructor()\\n * deser := Constructor()\\n * tree := ser.serialize(root)\\n * ans := deser.deserialize(tree)\\n * return ans\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a list of strings to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes a single string to a list of strings.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * val ser = new Codec()\\n * val deser = new Codec()\\n * val tree: String = ser.serialize(root)\\n * val ans = deser.deserialize(tree)\\n * return ans\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Codec() {\\n\\t// Encodes a URL to a shortened URL.\\n    fun serialize(root: TreeNode?): String {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    fun deserialize(data: String): TreeNode? {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * val ser = Codec()\\n * val deser = Codec()\\n * val tree: String = ser.serialize(root)\\n * val ans = deser.deserialize(tree)\\n * return ans\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nstruct Codec {\\n\\t\\n}\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Codec {\\n    fn new() -> Self {\\n        \\n    }\\n\\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\\n        \\n    }\\n\\t\\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * let obj = Codec::new();\\n * let data: String = obj.serialize(strs);\\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Codec {\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param TreeNode $root\\n     * @return String\\n     */\\n    function serialize($root) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $data\\n     * @return TreeNode\\n     */\\n    function deserialize($data) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * $ser = new Codec();\\n * $tree = $ser->serialize($param_1);\\n * $deser = new Codec();\\n * $ret = $deser->deserialize($tree);\\n * return $ret;\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\n/*\\n * Encodes a tree to a single string.\\n */\\nfunction serialize(root: TreeNode | null): string {\\n\\n};\\n\\n/*\\n * Decodes your encoded data to tree.\\n */\\nfunction deserialize(data: string): TreeNode | null {\\n\\n};\\n\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}]",
                    "sampleTestCase": "[2,1,3]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"CodecDriver\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n\n<p><b>The encoded string should be as compact as possible.</b></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Serialize and Deserialize BST",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### How to make the encoded string as compact as possible\n\nThis question is similar to the [Google interview question discussed last week](https://leetcode.com/discuss/interview-experience/297576/google-onsite-interview-sde1-new-grad-mountain-view-ca).\n\n[To serialize](https://en.wikipedia.org/wiki/Serialization) \na binary tree means to \n\n- Encode tree structure. \n\n- Encode node values. \n\n- Choose delimiters to separate the values in the encoded string.\n\n![bla](../Figures/449/tree_struct.png)\n\nHence there are three axes of optimisation here.\n<br /> \n<br />\n\n\n---\n#### Approach 1: Postorder traversal to optimise space for the tree structure.\n\n**Intuition**\n\nLet's use here the fact that BST could be constructed from\npreorder or postorder traversal only. \nPlease [check this article](https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/solution/)\nfor the detailed discussion.\nIn brief, it's a consequence of two facts:\n\n- [Binary tree could be constructed from preorder/postorder and inorder traversal](https://leetcode.com/articles/construct-binary-tree-from-postorder-and-inorder-t/).\n\n- [Inorder traversal of BST is an array sorted in the ascending order: \n`inorder = sorted(preorder)`](https://leetcode.com/articles/delete-node-in-a-bst/).\n\nThat means that BST structure is already encoded in the preorder or\npostorder traversal and hence they are both suitable for the \ncompact serialization. \n\nSerialization could be easily implemented with both strategies,\nbut for optimal deserialization better to choose the postorder traversal because member/global/static variables\nare not allowed here. \n\n![pic](../Figures/449/approach1.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/BZzcMign/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"BZzcMign\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ both for serialization\nand deserialization. Let's compute the solution with the help of \n[master theorem](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)) \n$$T(N) = aT\\left(\\frac{b}{N}\\right) + \\Theta(N^d)$$.\nThe equation represents dividing the problem \nup into $$a$$ subproblems of size $$\\frac{N}{b}$$ in $$\\Theta(N^d)$$ time. \nHere one divides the problem in two subproblemes `a = 2`, the size of each subproblem \n(to compute left and right subtree) is a half of initial problem `b = 2`, \nand all this happens in a constant time `d = 0`.\nThat means that $$\\log_b(a) > d$$ and hence we're dealing with \n[case 1](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_1_example)\nthat means $$\\mathcal{O}(N^{\\log_b(a)}) = \\mathcal{O}(N)$$ time complexity.\n\n* Space complexity : $$\\mathcal{O}(N)$$, since we store the entire tree.\nEncoded string: one needs to store\n$$(N - 1)$$ delimiters, and $$N$$ node values in the encoded string. \nTree structure is encoded in the order of values and uses no space.\n<br /> \n<br />\n\n\n---\n#### Approach 2: Convert int to 4-bytes string to optimise space for node values.\n\n**Intuition**\n\nApproach 1 works fine with the small node values but starts to\nconsume more and more space in the case of large ones. \n\nFor example, the tree `[2,null,3,null,4]` is encoded as a string\n`\"4 3 2\"` which uses `5` bytes to store the values and delimiters, `1` byte per\nvalue or delimiter. So far everything is fine. \n\nLet's consider now the tree `[12345,null,12346,null,12347]` which is\nencoded as `\"12347 12346 12345\"` and consumes `17` bytes to store \n3 integers and 2 delimiters, `15` bytes for node values only.\nAt the same time it's known that `4` bytes is enough to store an int value,\n_i.e._ `12` bytes should be enough for 3 integers. \n`15 > 12` and hence the storage of values could be optimised.\n\n> How to do it? Convert each integer into 4-bytes string.\n\n![pic2](../Figures/449/four_bytes.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/n5xXhukb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"n5xXhukb\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ both for serialization\nand deserialization. \n\n* Space complexity : $$\\mathcal{O}(N)$$, since we store the entire tree.\nEncoded string: one needs $$2(N - 1)$$ bytes for the delimiters, \nand $$4 N$$ bytes for the node values in the encoded string. \nTree structure is encoded in the order of node values and uses no space. \n<br /> \n<br />\n\n\n---\n#### Approach 3: Get rid of delimiters.\n\n**Intuition**\n\nApproach 2 works well except for delimiter usage.\n\nSince all node values are now encoded as 4-bytes strings,\none could just split the encoded string into 4-bytes chunks,\nconvert each chunk back to the integer and proceed further. \n\n![pic3](../Figures/449/no_delimiters.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/Lg9f24zm/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Lg9f24zm\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ both for serialization\nand deserialization. \n\n* Space complexity : $$\\mathcal{O}(N)$$, since we store the entire tree.\nEncoded string: no delimiters, no additional space for the tree structure,\njust $$4 N$$ bytes for the node values in the encoded string.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "serialize-and-deserialize-bst",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.613,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "201",
                "title": "Serialize and Deserialize Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 51,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "297",
                    "questionFrontendId": "297",
                    "sessionId": "968792",
                    "questionTitle": "Serialize and Deserialize Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/serialize-and-deserialize-binary-tree/submit/",
                    "interpretUrl": "/problems/serialize-and-deserialize-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Codec {\\npublic:\\n\\n    // Encodes a tree to a single string.\\n    string serialize(TreeNode* root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    TreeNode* deserialize(string data) {\\n        \\n    }\\n};\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser, deser;\\n// TreeNode* ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public String serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(String data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Codec:\\n\\n    def serialize(self, root):\\n        \\\"\\\"\\\"Encodes a tree to a single string.\\n        \\n        :type root: TreeNode\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \\n\\n    def deserialize(self, data):\\n        \\\"\\\"\\\"Decodes your encoded data to tree.\\n        \\n        :type data: str\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \\n\\n# Your Codec object will be instantiated and called as such:\\n# ser = Codec()\\n# deser = Codec()\\n# ans = deser.deserialize(ser.serialize(root))\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n/** Encodes a tree to a single string. */\\nchar* serialize(struct TreeNode* root) {\\n    \\n}\\n\\n/** Decodes your encoded data to tree. */\\nstruct TreeNode* deserialize(char* data) {\\n    \\n}\\n\\n// Your functions will be called as such:\\n// char* data = serialize(root);\\n// deserialize(data);\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Codec {\\n\\n    // Encodes a tree to a single string.\\n    public string serialize(TreeNode root) {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    public TreeNode deserialize(string data) {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// Codec ser = new Codec();\\n// Codec deser = new Codec();\\n// TreeNode ans = deser.deserialize(ser.serialize(root));\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n\\n/**\\n * Encodes a tree to a single string.\\n *\\n * @param {TreeNode} root\\n * @return {string}\\n */\\nvar serialize = function(root) {\\n    \\n};\\n\\n/**\\n * Decodes your encoded data to tree.\\n *\\n * @param {string} data\\n * @return {TreeNode}\\n */\\nvar deserialize = function(data) {\\n    \\n};\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# Encodes a tree to a single string.\\n#\\n# @param {TreeNode} root\\n# @return {string}\\ndef serialize(root)\\n    \\nend\\n\\n# Decodes your encoded data to tree.\\n#\\n# @param {string} data\\n# @return {TreeNode}\\ndef deserialize(data)\\n    \\nend\\n\\n\\n# Your functions will be called as such:\\n# deserialize(serialize(data))\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Codec {\\n    func serialize(_ root: TreeNode?) -> String {\\n        \\n    }\\n    \\n    func deserialize(_ data: String) -> TreeNode? {\\n        \\n    }\\n}\\n\\n// Your Codec object will be instantiated and called as such:\\n// var ser = Codec()\\n// var deser = Codec()\\n// deser.deserialize(ser.serialize(root))\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n\\ntype Codec struct {\\n    \\n}\\n\\nfunc Constructor() Codec {\\n    \\n}\\n\\n// Serializes a tree to a single string.\\nfunc (this *Codec) serialize(root *TreeNode) string {\\n    \\n}\\n\\n// Deserializes your encoded data to tree.\\nfunc (this *Codec) deserialize(data string) *TreeNode {    \\n    \\n}\\n\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * ser := Constructor();\\n * deser := Constructor();\\n * data := ser.serialize(root);\\n * ans := deser.deserialize(data);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nclass Codec {\\n    // Encodes a list of strings to a single string.\\n    def serialize(root: TreeNode): String = {\\n        \\n    }\\n    \\n    // Decodes a single string to a list of strings.\\n    def deserialize(data: String): TreeNode = {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = new Codec()\\n * var deser = new Codec()\\n * val s = ser.serialize(root)\\n * val ans = deser.deserialize(s)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Codec() {\\n\\t// Encodes a URL to a shortened URL.\\n    fun serialize(root: TreeNode?): String {\\n        \\n    }\\n\\n    // Decodes your encoded data to tree.\\n    fun deserialize(data: String): TreeNode? {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * var ser = Codec()\\n * var deser = Codec()\\n * var data = ser.serialize(longUrl)\\n * var ans = deser.deserialize(data)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nstruct Codec {\\n\\t\\n}\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Codec {\\n    fn new() -> Self {\\n        \\n    }\\n\\n    fn serialize(&self, root: Option<Rc<RefCell<TreeNode>>>) -> String {\\n        \\n    }\\n\\t\\n    fn deserialize(&self, data: String) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * let obj = Codec::new();\\n * let data: String = obj.serialize(strs);\\n * let ans: Option<Rc<RefCell<TreeNode>>> = obj.deserialize(data);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Codec {\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param TreeNode $root\\n     * @return String\\n     */\\n    function serialize($root) {\\n        \\n    }\\n  \\n    /**\\n     * @param String $data\\n     * @return TreeNode\\n     */\\n    function deserialize($data) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Codec object will be instantiated and called as such:\\n * $ser = Codec();\\n * $deser = Codec();\\n * $data = $ser->serialize($root);\\n * $ans = $deser->deserialize($data);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\n/*\\n * Encodes a tree to a single string.\\n */\\nfunction serialize(root: TreeNode | null): string {\\n\\n};\\n\\n/*\\n * Decodes your encoded data to tree.\\n */\\nfunction deserialize(data: string): TreeNode | null {\\n\\n};\\n\\n\\n/**\\n * Your functions will be called as such:\\n * deserialize(serialize(root));\\n */\"}]",
                    "sampleTestCase": "[1,2,3,null,null,4,5]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"Codec\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"string\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>\n\n<p><strong>Clarification:</strong> The input/output format is the same as <a href=\"/faq/#binary-tree\">how LeetCode serializes a binary tree</a>. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg\" style=\"width: 442px; height: 324px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3,null,null,4,5]\n<strong>Output:</strong> [1,2,3,null,null,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2]\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Serialize and Deserialize Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Depth First Search (DFS)\n\n\n**Intuition**\n\n<center><img src=\"../Figures/297_BST.png\" width=\"550px\" /></center>\n\nThe **serialization** of a `Binary Search Tree` is essentially to encode\nits values and more importantly its structure. \nOne can traverse the tree to accomplish the above task.\nAnd it is well know that we have two general strategies to do so:\n\n- *Breadth First Search* (`BFS`)\n\n    We scan through the tree level by level, following the order of height,\n    from top to bottom. The nodes on higher level would be visited before\n    the ones with lower levels.\n     \n- *Depth First Search* (`DFS`)\n\n    In this strategy, we adopt the `depth` as the priority, so that one\n    would start from a root and reach all the way down to certain leaf,\n    and then back to root to reach another branch.\n\n    The DFS strategy can further be distinguished as\n    `preorder`, `inorder`, and `postorder` depending on the relative order\n    among the root node, left node and right node.\n    \nIn this task, however, the `DFS` strategy is more adapted for our needs,\nsince the linkage among the adjacent nodes is naturally encoded in the order,\nwhich is rather helpful for the later task of **deserialization**. \n\nTherefore, in this solution, we demonstrate an example with the `preorder` DFS strategy.\nOne can check out more tutorial about `Binary Search Tree` on \nthe [LeetCode Explore](https://leetcode.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/).\n\n**Algorithm**\n\nFirst of all, here is the definition of the ```TreeNode``` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/gKbx4EPz/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"gKbx4EPz\"></iframe>\n\n\n\nThe preorder DFS traverse follows *recursively* the order of  \n`root -> left subtree -> right subtree`.\n\nAs an example, let's serialize the following tree.\nNote that serialization contains information about the node values\nas well as the information about the tree structure.\n\n\n<!--![LIS](../Figures/297/297_tr.gif)-->\n!?!../Documents/297_LIS.json:1000,622!?!\n\n\nWe start from the root, node `1`, the serialization string is ```1,```.\nThen we jump to its left subtree with the root node `2`, and the serialization string becomes ```1,2,```.\nNow starting from node `2`, \nwe visit its left node `3` (```1,2,3,None,None,```) \nand right node `4` (```1,2,3,None,None,4,None,None```) sequentially.\nNote that ```None,None,``` appears for each leaf to mark the absence of left and right child node, \nthis is how we save the tree structure during the serialization.\nAnd finally, we get back to the root node `1` and visit its right subtree\nwhich happens to be a leaf node `5`. Finally, the serialization string is done\nas ```1,2,3,None,None,4,None,None,5,None,None,```.\n\n\n<iframe src=\"https://leetcode.com/playground/KzKSosy9/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"KzKSosy9\"></iframe>\n\nNow let's deserialize the serialization string constructed above ```1,2,3,None,None,4,None,None,5,None,None,```.\nIt goes along the string, initiate the node value and \nthen calls itself to construct its left and right child nodes. \n\n<iframe src=\"https://leetcode.com/playground/byCTAyWj/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"byCTAyWj\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : in both serialization and deserialization functions,\n we visit each node exactly once, thus the time complexity is $$O(N)$$,\n where $$N$$ is the number of nodes, *i.e.* the size of tree. \n\n* Space complexity : in both serialization and deserialization functions,\n we keep the entire tree, either at the beginning or at the end,\n therefore, the space complexity is $$O(N)$$. \n \nThe solutions with BFS or other DFS strategies normally will have the same\ntime and space complexity.\n \n**Further Space Optimization**\n\nIn the above solution, we store the node value and \nthe references to ```None``` child nodes, \nwhich means $$N \\cdot V + 2N$$ complexity, \nwhere $$V$$ is the size of value. \nThat is called *natural serialization*, and has was implemented above.\n\nThe $$N \\cdot V$$ component here is the encoding of values, can't be optimized further,\nbut there is a way to reduce $$2N$$ part \nwhich is the encoding of the tree structure.\n\nThe number of unique binary tree structures that can be \nconstructed using `n` nodes is $$C(n)$$, where $$C(n)$$ is the `nth` Catalan\nnumber. Please refer to [this article](https://leetcode.com/articles/unique-binary-search-trees/) for more information.\n\nThere are $$C(n)$$ possible structural configurations of \na binary tree with n nodes, so the largest index value \nthat we might need to store is $$C(n) - 1$$.\nThat means storing the index value could require up to \n1 bit for $$n \\leq 2$$, or $$\\lceil log_2(C(n) - 1) \\rceil$$ bits for $$n > 2$$.\n\nIn this way one could reduce the encoding of the tree structure by $$\\log N$$.\nMore precisely, the [Catalan numbers](https://en.wikipedia.org/wiki/Catalan_number) grow as\n$$C(n) \\sim \\frac{4^n}{n^{3/2}\\sqrt{\\pi}}$$ and hence the theoretical minimum of storage\n for the tree structure that could be achieved\nis $$log(C(n)) \\sim 2n - \\frac{3}{2}\\log(n) - \\frac{1}{2}\\log(\\pi)$$",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "serialize-and-deserialize-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.781,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "892",
                "title": "Implement Trie (Prefix Tree)",
                "type": 1,
                "info": "Editor's choice: Frequently asked in Microsoft phone and onsite interviews.",
                "paidOnly": false,
                "chapterId": 51,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "208",
                    "questionFrontendId": "208",
                    "sessionId": "968792",
                    "questionTitle": "Implement Trie (Prefix Tree)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/implement-trie-prefix-tree/submit/",
                    "interpretUrl": "/problems/implement-trie-prefix-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        \\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Trie {\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Trie(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, word):\\n        \\\"\\\"\\\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def search(self, word):\\n        \\\"\\\"\\\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n    def startsWith(self, prefix):\\n        \\\"\\\"\\\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Trie:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \\\"\\\"\\\"\\n        Inserts a word into the trie.\\n        \\\"\\\"\\\"\\n        \\n\\n    def search(self, word: str) -> bool:\\n        \\\"\\\"\\\"\\n        Returns if the word is in the trie.\\n        \\\"\\\"\\\"\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \\\"\\\"\\\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} Trie;\\n\\n/** Initialize your data structure here. */\\n\\nTrie* trieCreate() {\\n    \\n}\\n\\n/** Inserts a word into the trie. */\\nvoid trieInsert(Trie* obj, char * word) {\\n  \\n}\\n\\n/** Returns if the word is in the trie. */\\nbool trieSearch(Trie* obj, char * word) {\\n  \\n}\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nbool trieStartsWith(Trie* obj, char * prefix) {\\n  \\n}\\n\\nvoid trieFree(Trie* obj) {\\n    \\n}\\n\\n/**\\n * Your Trie struct will be instantiated and called as such:\\n * Trie* obj = trieCreate();\\n * trieInsert(obj, word);\\n \\n * bool param_2 = trieSearch(obj, word);\\n \\n * bool param_3 = trieStartsWith(obj, prefix);\\n \\n * trieFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Trie {\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.Insert(word);\\n * bool param_2 = obj.Search(word);\\n * bool param_3 = obj.StartsWith(prefix);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    \\n};\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    \\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    \\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    \\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Trie\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    Inserts a word into the trie.\\n    :type word: String\\n    :rtype: Void\\n=end\\n    def insert(word)\\n        \\n    end\\n\\n\\n=begin\\n    Returns if the word is in the trie.\\n    :type word: String\\n    :rtype: Boolean\\n=end\\n    def search(word)\\n        \\n    end\\n\\n\\n=begin\\n    Returns if there is any word in the trie that starts with the given prefix.\\n    :type prefix: String\\n    :rtype: Boolean\\n=end\\n    def starts_with(prefix)\\n        \\n    end\\n\\n\\nend\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie.new()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.starts_with(prefix)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass Trie {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    func insert(_ word: String) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    func search(_ word: String) -> Bool {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    func startsWith(_ prefix: String) -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie()\\n * obj.insert(word)\\n * let ret_2: Bool = obj.search(word)\\n * let ret_3: Bool = obj.startsWith(prefix)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Trie struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() Trie {\\n    \\n}\\n\\n\\n/** Inserts a word into the trie. */\\nfunc (this *Trie) Insert(word string)  {\\n    \\n}\\n\\n\\n/** Returns if the word is in the trie. */\\nfunc (this *Trie) Search(word string) bool {\\n    \\n}\\n\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    \\n}\\n\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Insert(word);\\n * param_2 := obj.Search(word);\\n * param_3 := obj.StartsWith(prefix);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Trie() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a word into the trie. */\\n    def insert(word: String) {\\n        \\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    def search(word: String): Boolean = {\\n        \\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    def startsWith(prefix: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Trie() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a word into the trie. */\\n    fun insert(word: String) {\\n        \\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    fun search(word: String): Boolean {\\n        \\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fun startsWith(prefix: String): Boolean {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct Trie {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&self, word: String) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Trie {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * Inserts a word into the trie.\\n     * @param String $word\\n     * @return NULL\\n     */\\n    function insert($word) {\\n        \\n    }\\n  \\n    /**\\n     * Returns if the word is in the trie.\\n     * @param String $word\\n     * @return Boolean\\n     */\\n    function search($word) {\\n        \\n    }\\n  \\n    /**\\n     * Returns if there is any word in the trie that starts with the given prefix.\\n     * @param String $prefix\\n     * @return Boolean\\n     */\\n    function startsWith($prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * $obj = Trie();\\n * $obj->insert($word);\\n * $ret_2 = $obj->search($word);\\n * $ret_3 = $obj->startsWith($prefix);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class Trie {\\n    constructor() {\\n\\n    }\\n\\n    insert(word: string): void {\\n\\n    }\\n\\n    search(word: string): boolean {\\n\\n    }\\n\\n    startsWith(prefix: string): boolean {\\n\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define trie%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; insert : string? -> void?\\n    (define/public (insert word)\\n\\n      )\\n    ; search : string? -> boolean?\\n    (define/public (search word)\\n\\n      )\\n    ; starts-with : string? -> boolean?\\n    (define/public (starts-with prefix)\\n\\n      )))\\n\\n;; Your trie% object will be instantiated and called as such:\\n;; (define obj (new trie%))\\n;; (send obj insert word)\\n;; (define param_2 (send obj search word))\\n;; (define param_3 (send obj starts-with prefix))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec trie_init_() -> any().\\ntrie_init_() ->\\n  .\\n\\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\\ntrie_insert(Word) ->\\n  .\\n\\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\\ntrie_search(Word) ->\\n  .\\n\\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\\ntrie_starts_with(Prefix) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% trie_init_(),\\n%% trie_insert(Word),\\n%% Param_2 = trie_search(Word),\\n%% Param_3 = trie_starts_with(Prefix),\\n\\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Trie do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec insert(word :: String.t) :: any\\n  def insert(word) do\\n\\n  end\\n\\n  @spec search(word :: String.t) :: boolean\\n  def search(word) do\\n\\n  end\\n\\n  @spec starts_with(prefix :: String.t) :: boolean\\n  def starts_with(prefix) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Trie.init_()\\n# Trie.insert(word)\\n# param_2 = Trie.search(word)\\n# param_3 = Trie.starts_with(prefix)\\n\\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"Trie\",\r\n    \"maxbytesperline\": 210000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Inserts a word into the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"search\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if the word is in the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"startsWith\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"prefix\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if there is any word in the trie that starts with the given prefix.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as &quot;try&quot;) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]\n[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // return True\ntrie.search(&quot;app&quot;);     // return False\ntrie.startsWith(&quot;app&quot;); // return True\ntrie.insert(&quot;app&quot;);\ntrie.search(&quot;app&quot;);     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Implement Trie (Prefix Tree)",
                        "content": "[TOC]\r\n\r\n## Summary\r\nThis article is for intermediate level users. It introduces the following ideas:\r\nThe data structure Trie (Prefix tree) and most common operations with it.\r\n\r\n## Solution\r\n\r\n#### Applications\r\n\r\nTrie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.\r\nThere are various applications of this very efficient data structure such as :\r\n\r\n##### 1. [Autocomplete](https://en.wikipedia.org/wiki/Autocomplete)\r\n\r\n![Google Suggest](https://leetcode.com/media/original_images/208_GoogleSuggest.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Google Suggest in action.*\r\n{:align=\"center\"}\r\n\r\n##### 2. [Spell checker](https://en.wikipedia.org/wiki/Spell_checker)\r\n\r\n![Spell Checker](https://leetcode.com/media/original_images/208_SpellCheck.png){:width=\"400px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 2. A spell checker used in word processor.*\r\n{:align=\"center\"}\r\n\r\n##### 3. [IP routing (Longest prefix matching)](https://en.wikipedia.org/wiki/Longest_prefix_match)\r\n\r\n![IP Routing](https://leetcode.com/media/original_images/208_IPRouting.gif){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table.*\r\n{:align=\"center\"}\r\n\r\n##### 4. [T9 predictive text](https://en.wikipedia.org/wiki/T9_(predictive_text))\r\n\r\n![T9 Predictive Text](https://leetcode.com/media/original_images/208_T9.jpg)\r\n{:align=\"center\"}\r\n\r\n*Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.*\r\n{:align=\"center\"}\r\n\r\n##### 5. [Solving word games](https://en.wikipedia.org/wiki/Boggle)\r\n\r\n![Boggle](https://leetcode.com/media/original_images/208_Boggle.png){:width=\"350px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 5. Tries is used to solve Boggle efficiently by pruning the search space.*\r\n{:align=\"center\"}\r\n\r\nThere are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie?\r\nAlthough hash table has $$O(1)$$ time complexity for looking for a key, it is not efficient in the following operations :\r\n\r\n* Finding all keys with a common prefix.\r\n* Enumerating a dataset of strings in lexicographical order.\r\n\r\nAnother reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to $$O(n)$$, where $$n$$ is the number of keys inserted.\r\nTrie could use less space compared to Hash Table when storing many keys with the same prefix.\r\nIn this case using trie has only $$O(m)$$ time complexity, where $$m$$ is the key length.\r\nSearching for a key in a balanced tree costs  $$O(m \\log n)$$ time complexity.\r\n\r\n#### Trie node structure\r\n\r\nTrie is a rooted tree. Its nodes have the following fields:\r\n\r\n* Maximum of $$R$$ links to its children, where each link corresponds to one of $$R$$ character values from dataset alphabet.\r\nIn this article we assume that $$R$$ is 26, the number of lowercase latin letters.\r\n* Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.\r\n\r\n![Representation of a key in trie](https://leetcode.com/media/original_images/208_Node.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 6. Representation of a key \"leet\" in trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass TrieNode {\r\n\r\n    // R links to node children\r\n    private TrieNode[] links;\r\n\r\n    private final int R = 26;\r\n\r\n    private boolean isEnd;\r\n\r\n    public TrieNode() {\r\n        links = new TrieNode[R];\r\n    }\r\n\r\n    public boolean containsKey(char ch) {\r\n        return links[ch -'a'] != null;\r\n    }\r\n    public TrieNode get(char ch) {\r\n        return links[ch -'a'];\r\n    }\r\n    public void put(char ch, TrieNode node) {\r\n        links[ch -'a'] = node;\r\n    }\r\n    public void setEnd() {\r\n        isEnd = true;\r\n    }\r\n    public boolean isEnd() {\r\n        return isEnd;\r\n    }\r\n}\r\n```\r\n\r\nTwo of the most common operations in a trie are insertion of a key and search for a key.\r\n\r\n#### Insertion of a key to a trie\r\n\r\nWe insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :\r\n\r\n* A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.\r\n* A link does not exist. Then we create a new node and link it with the parent's link matching the current key character.\r\nWe repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.\r\n\r\n![Insertion of keys into a trie](https://leetcode.com/media/original_images/208_TrieInsert.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 7. Insertion of keys into a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n```java\r\nclass Trie {\r\n    private TrieNode root;\r\n\r\n    public Trie() {\r\n        root = new TrieNode();\r\n    }\r\n\r\n    // Inserts a word into the trie.\r\n    public void insert(String word) {\r\n        TrieNode node = root;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            char currentChar = word.charAt(i);\r\n            if (!node.containsKey(currentChar)) {\r\n                node.put(currentChar, new TrieNode());\r\n            }\r\n            node = node.get(currentChar);\r\n        }\r\n        node.setEnd();\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$, where m is the key length.\r\n\r\nIn each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only $$m$$ operations.\r\n\r\n* Space complexity : $$O(m)$$.\r\n\r\nIn the worst case newly inserted key doesn't share a prefix with the the keys already inserted in the trie. We have to add $$m$$\r\nnew nodes, which takes us  $$O(m)$$ space.\r\n\r\n#### Search for a key in a trie\r\n\r\nEach key is represented in the trie as a path from the root to the internal node or leaf.\r\nWe start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :\r\n\r\n* A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.\r\n* A link does not exist. If there are no available key characters and current node is marked as `isEnd` we return true. Otherwise there are possible two cases in each of them we return false :\r\n\r\n    * There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.\r\n    * No key characters left, but current node is not marked as `isEnd`. Therefore the search key is only a prefix of another key in the trie.\r\n\r\n![Search of a key in a trie](https://leetcode.com/media/original_images/208_TrieSearchKey.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 8. Search for a key in a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass Trie {\r\n    ...\r\n\r\n    // search a prefix or whole key in trie and\r\n    // returns the node where search ends\r\n    private TrieNode searchPrefix(String word) {\r\n        TrieNode node = root;\r\n        for (int i = 0; i < word.length(); i++) {\r\n           char curLetter = word.charAt(i);\r\n           if (node.containsKey(curLetter)) {\r\n               node = node.get(curLetter);\r\n           } else {\r\n               return null;\r\n           }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    // Returns if the word is in the trie.\r\n    public boolean search(String word) {\r\n       TrieNode node = searchPrefix(word);\r\n       return node != null && node.isEnd();\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$\r\nIn each step of the algorithm we search for the next key character. In the worst case the algorithm performs $$m$$ operations.\r\n\r\n* Space complexity : $$O(1)$$\r\n\r\n#### Search for a key prefix in a trie\r\n\r\nThe approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above `search for a key` algorithm is that when we come to an end of the key prefix, we always return true. We don't need to consider the `isEnd` mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.\r\n\r\n![Search of a key prefix in a trie](https://leetcode.com/media/original_images/208_TrieSearchPrefix.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 9. Search for a key prefix in a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass Trie {\r\n    ...\r\n\r\n    // Returns if there is any word in the trie\r\n    // that starts with the given prefix.\r\n    public boolean startsWith(String prefix) {\r\n        TrieNode node = searchPrefix(prefix);\r\n        return node != null;\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$\r\n\r\n* Space complexity : $$O(1)$$\r\n\r\n## Practice Problems\r\n\r\nHere are some wonderful problems for you to practice which uses the Trie data structure.\r\n\r\n1. [Add and Search Word - Data structure design](https://leetcode.com/problems/add-and-search-word-data-structure-design/) - Pretty much a direct application of Trie.\r\n2. [Word Search II](https://leetcode.com/problems/word-search-ii/) - Similar to Boggle.\r\n\r\nAnalysis written by: @elmirap.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "implement-trie-prefix-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.924,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "161",
                "title": "LRU Cache",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 51,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "146",
                    "questionFrontendId": "146",
                    "sessionId": "968792",
                    "questionTitle": "LRU Cache",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lru-cache/submit/",
                    "interpretUrl": "/problems/lru-cache/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LRUCache {\\npublic:\\n    LRUCache(int capacity) {\\n        \\n    }\\n    \\n    int get(int key) {\\n        \\n    }\\n    \\n    void put(int key, int value) {\\n        \\n    }\\n};\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache* obj = new LRUCache(capacity);\\n * int param_1 = obj->get(key);\\n * obj->put(key,value);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int get(int key) {\\n        \\n    }\\n    \\n    public void put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.get(key);\\n * obj.put(key,value);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LRUCache(object):\\n\\n    def __init__(self, capacity):\\n        \\\"\\\"\\\"\\n        :type capacity: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def put(self, key, value):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :type value: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class LRUCache:\\n\\n    def __init__(self, capacity: int):\\n        \\n\\n    def get(self, key: int) -> int:\\n        \\n\\n    def put(self, key: int, value: int) -> None:\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} LRUCache;\\n\\n\\nLRUCache* lRUCacheCreate(int capacity) {\\n    \\n}\\n\\nint lRUCacheGet(LRUCache* obj, int key) {\\n  \\n}\\n\\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\\n  \\n}\\n\\nvoid lRUCacheFree(LRUCache* obj) {\\n    \\n}\\n\\n/**\\n * Your LRUCache struct will be instantiated and called as such:\\n * LRUCache* obj = lRUCacheCreate(capacity);\\n * int param_1 = lRUCacheGet(obj, key);\\n \\n * lRUCachePut(obj, key, value);\\n \\n * lRUCacheFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int Get(int key) {\\n        \\n    }\\n    \\n    public void Put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} capacity\\n */\\nvar LRUCache = function(capacity) {\\n    \\n};\\n\\n/** \\n * @param {number} key\\n * @return {number}\\n */\\nLRUCache.prototype.get = function(key) {\\n    \\n};\\n\\n/** \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */\\nLRUCache.prototype.put = function(key, value) {\\n    \\n};\\n\\n/** \\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LRUCache\\n\\n=begin\\n    :type capacity: Integer\\n=end\\n    def initialize(capacity)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :rtype: Integer\\n=end\\n    def get(key)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :type value: Integer\\n    :rtype: Void\\n=end\\n    def put(key, value)\\n        \\n    end\\n\\n\\nend\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache.new(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key, value)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass LRUCache {\\n\\n    init(_ capacity: Int) {\\n        \\n    }\\n    \\n    func get(_ key: Int) -> Int {\\n        \\n    }\\n    \\n    func put(_ key: Int, _ value: Int) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache(capacity)\\n * let ret_1: Int = obj.get(key)\\n * obj.put(key, value)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LRUCache struct {\\n    \\n}\\n\\n\\nfunc Constructor(capacity int) LRUCache {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Get(key int) int {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Put(key int, value int)  {\\n    \\n}\\n\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * obj := Constructor(capacity);\\n * param_1 := obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LRUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class LRUCache(capacity: Int) {\\n\\n    fun get(key: Int): Int {\\n        \\n    }\\n\\n    fun put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct LRUCache {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl LRUCache {\\n\\n    fn new(capacity: i32) -> Self {\\n        \\n    }\\n    \\n    fn get(&self, key: i32) -> i32 {\\n        \\n    }\\n    \\n    fn put(&self, key: i32, value: i32) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache::new(capacity);\\n * let ret_1: i32 = obj.get(key);\\n * obj.put(key, value);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class LRUCache {\\n    /**\\n     * @param Integer $capacity\\n     */\\n    function __construct($capacity) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @return Integer\\n     */\\n    function get($key) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @param Integer $value\\n     * @return NULL\\n     */\\n    function put($key, $value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * $obj = LRUCache($capacity);\\n * $ret_1 = $obj->get($key);\\n * $obj->put($key, $value);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class LRUCache {\\n    constructor(capacity: number) {\\n\\n    }\\n\\n    get(key: number): number {\\n\\n    }\\n\\n    put(key: number, value: number): void {\\n\\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define lru-cache%\\n  (class object%\\n    (super-new)\\n\\n    ; capacity : exact-integer?\\n    (init-field\\n      capacity)\\n    \\n    ; get : exact-integer? -> exact-integer?\\n    (define/public (get key)\\n\\n      )\\n    ; put : exact-integer? exact-integer? -> void?\\n    (define/public (put key value)\\n\\n      )))\\n\\n;; Your lru-cache% object will be instantiated and called as such:\\n;; (define obj (new lru-cache% [capacity capacity]))\\n;; (define param_1 (send obj get key))\\n;; (send obj put key value)\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec lru_cache_init_(Capacity :: integer()) -> any().\\nlru_cache_init_(Capacity) ->\\n  .\\n\\n-spec lru_cache_get(Key :: integer()) -> integer().\\nlru_cache_get(Key) ->\\n  .\\n\\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\\nlru_cache_put(Key, Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% lru_cache_init_(Capacity),\\n%% Param_1 = lru_cache_get(Key),\\n%% lru_cache_put(Key, Value),\\n\\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule LRUCache do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n\\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n\\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# LRUCache.init_(capacity)\\n# param_1 = LRUCache.get(key)\\n# LRUCache.put(key, value)\\n\\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"LRUCache\",\n    \"maxbytesperline\": 200000,\n    \"constructor\": {\n        \"params\": [\n            {\n                \"type\": \"integer\",\n                \"name\": \"capacity\"\n            }\n        ]\n    },\n    \"methods\": [\n        {\n            \"name\" : \"get\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            }\n        },\n        {\n            \"name\" : \"put\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"value\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\"\n            }\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code>&nbsp;Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions&nbsp;<code data-stringify-type=\"code\">get</code>&nbsp;and&nbsp;<code data-stringify-type=\"code\">put</code>&nbsp;must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most 2<code>&nbsp;* 10<sup>5</sup></code>&nbsp;calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "LRU Cache",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Ordered dictionary\n\n**Intuition**\n\nWe're asked to implement [the structure](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) \nwhich provides the following operations in $$\\mathcal{O}(1)$$ time :\n\n- Get the key / Check if the key exists \n\n- Put the key\n\n- Delete the first added key\n\nThe first two operations in $$\\mathcal{O}(1)$$ time are provided \nby the standard hashmap, and the last one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines \nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nLet's use this structure here.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/hfQBGVXK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hfQBGVXK\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get` since all operations with\nordered dictionary : `get/in/set/move_to_end/popitem` \n(`get/containsKey/put/remove`) are done in a constant time.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for an ordered dictionary with at most `capacity + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Hashmap + DoubleLinkedList\n\n**Intuition**\n\nThis Java solution is an extended version of the \n[the article published on the Discuss forum](https://leetcode.com/problems/lru-cache/discuss/45911/Java-Hashtable-%2B-Double-linked-list-(with-a-touch-of-pseudo-nodes)).\n\nThe problem can be solved with a hashmap\nthat keeps track of the keys and its values in the double linked list. \nThat results in $$\\mathcal{O}(1)$$ time for `put` and `get` operations and\nallows to remove the first added node in $$\\mathcal{O}(1)$$ time as well.\n\n![compute](../Figures/146/structure.png)\n\nOne advantage of _double_ linked list is that the node can remove itself without other reference. \nIn addition, it takes constant time to add and remove nodes from the head or tail.\n\nOne particularity about the double linked list implemented here\nis that there are _pseudo head_ and _pseudo tail_ to mark the boundary, \nso that we don't need to check the `null` node during the update. \n\n![compute](../Figures/146/new_node.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/dcSrw233/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dcSrw233\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get`.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for a hashmap and double linked list \nwith at most `capacity + 1` elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "lru-cache",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.763,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These are some design questions for you to practice for your Microsoft interview. You should practice both Serialize and Deserialize Binary Tree/BST. Make sure for the BST variant that you use the special properties of BST for the serialization and deserialization.\n\nAlso make sure you know how to implement a prefix tree (Trie), which is frequently asked by Microsoft."
    },
    {
        "id": "48",
        "title": "Others",
        "slug": "others",
        "items": [
            {
                "id": "208",
                "title": "Single Number",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "136",
                    "questionFrontendId": "136",
                    "sessionId": "968792",
                    "questionTitle": "Single Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/single-number/submit/",
                    "interpretUrl": "/problems/single-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int singleNumber(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int singleNumber(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def singleNumber(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def singleNumber(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint singleNumber(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int SingleNumber(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar singleNumber = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef single_number(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func singleNumber(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func singleNumber(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def singleNumber(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun singleNumber(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn single_number(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function singleNumber($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function singleNumber(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (single-number nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec single_number(Nums :: [integer()]) -> integer().\\nsingle_number(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec single_number(nums :: [integer]) :: integer\\n  def single_number(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,2,1]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"singleNumber\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a <strong>non-empty</strong>&nbsp;array of integers <code>nums</code>, every element appears <em>twice</em> except for one. Find that single one.</p>\n\n<p>You must&nbsp;implement a solution with a linear runtime complexity and use&nbsp;only constant&nbsp;extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [2,2,1]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [4,1,2,1,2]\n<strong>Output:</strong> 4\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-3 * 10<sup>4</sup> &lt;= nums[i] &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li>Each element in the array appears twice except for one element which appears only once.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Single Number",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: List operation\r\n\r\n**Algorithm**\r\n\r\n1. Iterate over all the elements in $$\\text{nums}$$\r\n2. If some number in $$\\text{nums}$$ is new to array, append it\r\n3. If some number is already in the array, remove it\r\n\r\n<iframe src=\"https://leetcode.com/playground/7avfRKL7/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"7avfRKL7\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n^2)$$. We iterate through $$\\text{nums}$$, taking $$O(n)$$ time. We search the whole list to find whether there is duplicate number, taking $$O(n)$$ time. Because search is in the `for` loop, so we have to multiply both time complexities which is $$O(n^2)$$.\r\n\r\n* Space complexity : $$O(n)$$.  We need a list of size $$n$$ to contain elements in $$\\text{nums}$$.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 2: Hash Table\r\n\r\n**Algorithm**\r\n\r\nWe use hash table to avoid the $$O(n)$$ time required for searching the elements.\r\n\r\n1. Iterate through all elements in `nums` and set up key/value pair.\r\n2. Return the element which appeared only once.\r\n\r\n<iframe src=\"https://leetcode.com/playground/kFCNodJN/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"kFCNodJN\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n \\cdot 1) = O(n)$$.  Time complexity of `for` loop is $$O(n)$$. Time complexity of hash table(dictionary in python) operation `pop` is $$O(1)$$.\r\n\r\n* Space complexity : $$O(n)$$. The space required by $$hash\\_table$$ is equal to the number of elements in $$\\text{nums}$$.\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 3: Math\r\n\r\n**Concept**\r\n\r\n$$2 * (a + b + c) - (a + a + b + b + c) = c$$\r\n\r\n<iframe src=\"https://leetcode.com/playground/4UnTgakr/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"4UnTgakr\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n + n) = O(n)$$. `sum` will call `next` to iterate through $$\\text{nums}$$.\r\nWe can see it as `sum(list(i, for i in nums))` which means the time complexity is $$O(n)$$ because of the number of elements($$n$$) in $$\\text{nums}$$.\r\n\r\n* Space complexity : $$O(n + n) = O(n)$$. `set` needs space for the elements in `nums`\r\n<br />\r\n<br />\r\n\r\n\r\n---\r\n#### Approach 4: Bit Manipulation\r\n\r\n**Concept**\r\n\r\n- If we take XOR of zero and some bit, it will return that bit\r\n    - $$a \\oplus 0 = a$$\r\n- If we take XOR of two same bits, it will return 0\r\n    - $$a \\oplus a = 0$$\r\n- $$a \\oplus b \\oplus a = (a \\oplus a) \\oplus b = 0 \\oplus b = b$$\r\n\r\nSo we can XOR all bits together to find the unique number.\r\n\r\n<iframe src=\"https://leetcode.com/playground/3d3aMiFy/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"3d3aMiFy\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(n)$$.  We only iterate through $$\\text{nums}$$, so the time complexity is the number of elements in $$\\text{nums}$$.\r\n\r\n* Space complexity : $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "single-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.79,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "198",
                "title": "Roman to Integer",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "13",
                    "questionFrontendId": "13",
                    "sessionId": "968792",
                    "questionTitle": "Roman to Integer",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/roman-to-integer/submit/",
                    "interpretUrl": "/problems/roman-to-integer/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int romanToInt(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int romanToInt(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def romanToInt(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def romanToInt(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint romanToInt(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int RomanToInt(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar romanToInt = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef roman_to_int(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func romanToInt(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func romanToInt(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def romanToInt(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun romanToInt(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn roman_to_int(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function romanToInt($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function romanToInt(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (roman-to-int s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec roman_to_int(S :: unicode:unicode_binary()) -> integer().\\nroman_to_int(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec roman_to_int(s :: String.t) :: integer\\n  def roman_to_int(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"III\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"romanToInt\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given a roman numeral, convert it to an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;III&quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IV&quot;\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;IX&quot;\n<strong>Output:</strong> 9\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;LVIII&quot;\n<strong>Output:</strong> 58\n<strong>Explanation:</strong> L = 50, V= 5, III = 3.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;MCMXCIV&quot;\n<strong>Output:</strong> 1994\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 15</code></li>\n\t<li><code>s</code> contains only&nbsp;the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li>\n\t<li>It is <strong>guaranteed</strong>&nbsp;that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Problem is simpler to solve by working the string from back to front and using a map."
                    ],
                    "solution": {
                        "title": "Roman To Integer",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nIn a lot of countries, Roman Numerals are taught in elementary school-level math. This has made them a somewhat popular \"easy\" interview question. Unfortunately though, this ignores the fact that *not everybody learned them in school*, and therefore a big advantage has been given to those who did. I suspect it's also difficult for a lot of us who *have* learned them previously to fully appreciate how much easier prior experience makes this question. While this is very unfair, and possibly very frustrating, keep in mind that the best thing you can do is work through this question and the related question [Integer to Roman](https://leetcode.com/problems/integer-to-roman/) so that you don't get caught out by it in a real interview.\n\n**Can we assume the input is valid?**\n\nYes. Here on Leetcode, you can make that assumption because you *haven't* been told what to do if it *isn't*.\n\nIn a real interview, this is a question you should ask the interviewer. Don't ever assume without asking in a real interview that the input has to be valid.\n\n**Is there only one valid representation for each number?**\n\nThis is more relevant to the other question, [Integer to Roman](https://leetcode.com/problems/integer-to-roman/), however we'll still briefly look at it now.\n\nGiven that the representation for `3` is `III`, it could seem natural that the representation for `15` is `VVV`, because that would be `5 + 5 + 5`. However, it's actually `XV`, which is `10 + 5`. How are you even supposed to know which is correct?\n\nThe trick is to use the \"biggest\" symbols you can. Because `X` is bigger than `V`, we should use an `X` first and then make up the remainder with a single `V`, giving `XV`.\n\nWe'll talk more about this in the [Integer to Roman](https://leetcode.com/problems/integer-to-roman/) article. This question is a lot simpler because there's only one logical way of converting from a *Roman Numeral to an Integer*. This is also why this question is labelled as \"easy\", whereas the other is labelled as \"medium\".\n\n**A few more examples**\n\nIf you're not very familiar with Roman Numerals, work through these examples and then have another go at writing your own algorithm before reading the rest of this solution article.\n\n*What is `CXVII` as an integer?*\n\nRecall that `C = 100`, `X = 10`, `V = 5`, and `I = 1`. Because the symbols are ordered from most significant to least, we can simply add the symbols, i.e. `C + X + V + I + I = 100 + 10 + 5 + 1 + 1 = 117`.\n\n*What is `DXCI` as an integer?*\n\nRecall that `D = 500`. \n\nNow, notice that this time the symbols are *not* ordered from most significant to least\u2014the `X` and `C` are out of numeric order. Because of this, we subtract the value of `X` (`10`) from the value of `C` (`100`) to get `90`.\n\nSo, going from left to right, we have `D + (C - X) + I = 500 + 90 + 1 = 591`. \n\n*What is `CMXCIV` as an integer?*\n\nRecall that `M = 1000`.\n\nThe symbols barely look sorted at all here\u2014from left-to-right we have `100, 1000, 10, 100, 1, 5`. Do not panic though, we just need to look for each occurrence of a smaller symbols *preceding* a bigger symbol. The first, third, and fifth symbols are all smaller than their next symbol. Therefore they are all going to be subtracted from their next.\n\n- The first two symbols are `CM`. This is `M - C = 1000 - 100 = 900`\n- The second two symbols are `XC`. This is `C - X = 100 - 10 = 90`.\n- The final two symbols are `IV`. This is `V - I = 5 - 1 = 4`.\n\nLike we did above, we add these together. `(M - C) + (C - X) + (V - I) = 900 + 90 + 4 = 994`.\n\n---\n\n#### Approach 1: Left-to-Right Pass\n\n**Intuition**\n\nLet's hard-code a mapping with the value of each symbol so that we can easily look them up.\n\n![Symbol mapping](../Figures/13/hardcoding_1.png)\n\nNow, recall that each symbol adds its own value, *except for* when a *smaller valued symbol* is *before* a *larger valued symbol*. In those cases, instead of adding both symbols to the total, we need to *subtract the large from the small*, adding that instead.\n\nTherefore, the simplest algorithm is to use a pointer to scan through the string, at each step deciding whether to add the current symbol and go forward 1 place, or add the difference of the next 2 symbols and go forward 2 places. Here is this algorithm in pseudocode.\n\n```text \ntotal = 0\ni = 0\nwhile i < s.length:\n    if at least 2 symbols remaining AND value of s[i] < value of s[i + 1]:\n        total = total + (value of s[i + 1]) - (value of s[i])  \n        i = i + 2\n    else:\n        total = total + (value of s[i])\n        i = i + 1\nreturn total\n```\n\nHere is an animation of the above algorithm.\n\n!?!../Documents/13_animation_1.json:816,307!?!\n\nRecall that the *input is always valid*. This means that we don't need to worry about being given inputs such as `ICD`.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/kcAKumjx/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kcAKumjx\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of the input string (the total number of symbols in it).\n\n- Time complexity : $$O(1)$$.\n\n    As there is a finite set of roman numerals, the maximum number possible number can be `3999`, which in roman numerals is  `MMMCMXCIX`. As such the time complexity is $$O(1)$$.\n\n    If roman numerals had an arbitrary number of symbols, then the time complexity would be proportional to the length of the input, i.e. $$O(n)$$. This is assuming that looking up the value of each symbol is $$O(1)$$.\n\n- Space complexity : $$O(1)$$.\n\n    Because only a constant number of single-value variables are used, the space complexity is $$O(1)$$.\n\n</br>\n\n---\n\n#### Approach 2: Left-to-Right Pass Improved\n\n**Intuition**\n\nInstead of viewing a Roman Numeral as having `7` unique symbols, we could instead view it as having `13` unique symbols\u2014some of length-1 and some of length-2.\n\n![Symbol mapping](../Figures/13/hardcoding_2_fixed.png)\n\nFor example, here is the Roman Numeral `MMCMLXXXIX` broken into its symbols using this definition:\n\n![Splitting the numeral into parts](../Figures/13/length_2_symbols_example.png)\n\nWe can then look up the value of each symbol and add them together.\n\n![Adding up the sum of the numeral](../Figures/13/length_2_symbols_calculation.png)\n\nAfter making a `Map` of `String -> Integer` with the `13` \"symbols\", we need to work our way down the string in the same way as before (we'll do left-to-right, however right-to-left will work okay too), firstly checking if we're at a length-2 symbol, and if not, then treating it as a length-1 symbol.\n\n```text \ntotal = 0\ni = 0\nwhile i < s.length:\n    if at least 2 characters remaining and s.substing(i, i + 1) is in values:\n        total = total + (value of s.substring(i, i + 1))  \n        i = i + 2\n    else:\n        total = total + (value of s[i])\n        i = i + 1\nreturn total\n```\n\nHere is an animation showing the algorithm.\n\n!?!../Documents/13_animation_2.json:816,307!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/2RKp9fC5/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"2RKp9fC5\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n- Space complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n</br>\n\n---\n\n#### Approach 3: Right-to-Left Pass\n\n**Intuition**\n\nThis approach is a more elegant variant of Approach 1. Just to be clear though, *Approach 1 and Approach 2 are probably sufficient for an interview. This approach is still well worth understanding though.*\n\nIn the \"subtraction\" cases, such as `XC`, we've been updating our running `sum` as follows:\n\n```text\nsum += value(C) - value(X)\n```\n\nHowever, notice that this is mathematically equivalent to the following:\n\n```text\nsum += value(C)\nsum -= value(X)\n```\n\nUtilizing this means that we can process *one* symbol each time we go around the main loop. We still need to determine whether or not our current symbol should be added or subtracted by looking at the neighbour though.\n\nIn Approach 1, we had to be careful when inspecting the next symbol to not go over the end of the string. This check wasn't difficult to do, but it increased the code complexity a bit, and it turns out we can avoid it with this approach!\n\nObserve the following:\n\n1. Without looking at the next symbol, we *don't* know whether or not the left-most symbol should be added or subtracted.\n2. The right-most symbol is *always* added. It is either by itself, or the additive part of a pair.\n\nSo, what we can do is initialise sum to be the value of the right-most (last) symbol. Then, we work *backwards* through the string, starting from the second-to-last-symbol. We check the symbol *after* (`i + 1`) to determine whether the current symbol should be \"added\" or \"subtracted\".\n\n```text\nlast = s.length - 1\ntotal = value(last)\n`\nfor i from last - 1 down to 0:\n    if value(s[i]) < value(s[i+1]):\n        total -= value(s[i])\n    else:\n        total += value(s[i])\nreturn sum\n```\n\nBecause we're starting at the second-to-last-index, we know that index `i + 1` always exists. We no longer need to handle its potential non-existence as a special case, and additionally we're able to (cleanly) use a `for` loop, as we're always moving along by 1 index at at time, unlike before where it could have been 1 or 2.\n\nHere is an animation of the above approach.\n\n!?!../Documents/13_animation_3.json:816,307!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/rotmeTT4/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"rotmeTT4\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(1)$$.\n\n    Same as Approach 1.\n\n- Space complexity : $$O(1)$$.\n\n    Same as Approach 1.\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "roman-to-integer",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.842,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "183",
                "title": "Excel Sheet Column Number",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "171",
                    "questionFrontendId": "171",
                    "sessionId": "968792",
                    "questionTitle": "Excel Sheet Column Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/excel-sheet-column-number/submit/",
                    "interpretUrl": "/problems/excel-sheet-column-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int titleToNumber(String columnTitle) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        \\\"\\\"\\\"\\n        :type columnTitle: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint titleToNumber(char * columnTitle){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} column_title\\n# @return {Integer}\\ndef title_to_number(column_title)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func titleToNumber(columnTitle string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def titleToNumber(columnTitle: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun titleToNumber(columnTitle: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn title_to_number(column_title: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $columnTitle\\n     * @return Integer\\n     */\\n    function titleToNumber($columnTitle) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function titleToNumber(columnTitle: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (title-to-number columnTitle)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec title_to_number(ColumnTitle :: unicode:unicode_binary()) -> integer().\\ntitle_to_number(ColumnTitle) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec title_to_number(column_title :: String.t) :: integer\\n  def title_to_number(column_title) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"A\"",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"titleToNumber\",\n  \"params\": [\n    {\n      \"name\": \"columnTitle\",\n      \"type\": \"string\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>columnTitle</code> that represents the column title as appear in an Excel sheet, return <em>its corresponding column number</em>.</p>\n\n<p>For example:</p>\n\n<pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;A&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;AB&quot;\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;ZY&quot;\n<strong>Output:</strong> 701\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;FXSHRXW&quot;\n<strong>Output:</strong> 2147483647\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= columnTitle.length &lt;= 7</code></li>\n\t<li><code>columnTitle</code> consists only of uppercase English letters.</li>\n\t<li><code>columnTitle</code> is in the range <code>[&quot;A&quot;, &quot;FXSHRXW&quot;]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Excel Sheet Column Number",
                        "content": "[TOC]\n\n## Solution\n\n*This problem can be solved as if it is a problem of converting base-26 number \nsystem to base-10 number system.*\n\n---\n\n#### Approach 1: Right to Left\n\n**Intuition**\n\nLet's tabulate the titles of an excel sheet in a table. There will be \n26 rows in each column. Each cell in the table represents an excel sheet title.\n\n![alt text](../Figures/171/171_table.png \"Table\")\n\nPay attention to the \"1 green block\", \"1 orange block\" and \"1 blue block\" in the  figure. \nThese tell how bigger blocks are composed of smaller blocks.\nFor example, blocks of 2-character titles are composed of 1-character blocks and \nblocks of 3-character titles are composed of 2-character blocks. This information \nis useful for finding a general pattern when calculating the values of titles.\n\nLet's say we want to get the value of title **AZZC**. This can be broken down as  `'A***' + 'Z**' + 'Z*' + 'C'`. Here, the `*`s represent smaller blocks. \n`*` means a block of 1-character titles. `**` means a block of 2-character titles.\nThere are 26<sup>1</sup> titles in a block of 1-character titles. There are 26<sup>2</sup> titles in a block of 2-character titles.\n\nScanning **AZZC** from right to left while accumulating results:\n\n1. First, ask the question, what the value of `'C'` is:\n    * `'C'` = 3 x 26<sup>0</sup> = 3 x 1 = 3\n    * `result` = 0 + 3 = **3**\n2. Then, ask the question, what the value of `'Z*'` is:\n    * `'Z*'` = 26 x 26<sup>1</sup> = 26 x 26 = 676\n    * `result` = **3** + 676 = **679**\n3. Then, ask the question, what the value of `'Z**'` is:\n    * `'Z**'` = 26 x 26<sup>2</sup> = 26 x 676 = 17576\n    * `result` = **679** + 17576 = **18255**\n4. Finally, ask the question, what the value of `'A***'` is:\n    * `'A***'` = 1 x 26<sup>3</sup> = 1 x 17576 = 17576\n    * `result` = **18255** + 17576 = 35831\n    \n**Algorithm**\n\n* To get indices of alphabets, create a mapping of alphabets and their corresponding values. (1-indexed)\n* Initialize an accumulator variable `result`.\n* Starting from right to left, calculate the value of the character associated \n with its position and add it to `result`. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/GcQyrLmh/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"GcQyrLmh\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N)$$ where $$N$$ is the number of characters in the \ninput string.\n\n* Space complexity : $$O(1)$$. Even though we have an alphabet to index mapping,\nit is always constant.\n\n---\n\n#### Approach 2: Left to Right\n\n**Intuition**\n\nRather than scanning from right to left as described in Approach 1, we can also \nscan the title from left to right.\n\nFor example, if we want to get the decimal value of string \"1337\", we can iteratively find the result \nby scanning the string from left to right as follows:\n\n1. '1' = **1**\n2. '13' = (**1** x 10) + 3 = **13**\n3. '133' = (**13** x 10) + 3 = **133**\n4. '1337' = (**133** x 10) + 7 = 1337\n\nInstead of base-10, we are dealing with base-26 number system. Based on the same idea,\nwe can just replace 10s with 26s and convert alphabets to numbers.\n\nFor a title \"LEET\":\n\n1. L = **12**\n2. E = (**12** x 26) + 5 = **317**\n3. E = (**317** x 26) + 5 = **8247**\n4. T = (**8247** x 26) + 20  = 214442\n\nIn Approach 1, we have built a mapping of alphabets to numbers. There is another way \nto get the number value of a character without building an alphabet mapping. You can \ndo this by converting a character to its ASCII value and subtracting ASCII value of character 'A' from that value. By doing so, you will get results from 0 (for A) to 25 (for Z). Since \nwe are indexing from 1, we can just add 1 up to the result. This eliminates a\nloop where you create an alphabet to number mapping which was done in Approach 1.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/3rd2PMRq/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"3rd2PMRq\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N)$$ where $$N$$ is the number of characters in the \ninput string.\n\n* Space complexity : $$O(1)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "excel-sheet-column-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.706,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "194",
                "title": "Find the Celebrity",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": true,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "277",
                    "questionFrontendId": "277",
                    "sessionId": "968792",
                    "questionTitle": "Find the Celebrity",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-the-celebrity/submit/",
                    "interpretUrl": "/problems/find-the-celebrity/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/* The knows API is defined for you.\\n      bool knows(int a, int b); */\\n\\nclass Solution {\\npublic:\\n    int findCelebrity(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      boolean knows(int a, int b); */\\n\\npublic class Solution extends Relation {\\n    public int findCelebrity(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# The knows API is already defined for you.\\n# @param a, person a\\n# @param b, person b\\n# @return a boolean, whether a knows b\\n# def knows(a, b):\\n\\nclass Solution(object):\\n    def findCelebrity(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# The knows API is already defined for you.\\n# return a bool, whether a knows b\\n# def knows(a: int, b: int) -> bool:\\n\\nclass Solution:\\n    def findCelebrity(self, n: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/* The knows API is defined for you.\\n      bool knows(int a, int b); */\\n\\nint findCelebrity(int n) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/* The Knows API is defined in the parent class Relation.\\n      bool Knows(int a, int b); */\\n\\npublic class Solution : Relation {\\n    public int FindCelebrity(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for knows()\\n * \\n * @param {integer} person a\\n * @param {integer} person b\\n * @return {boolean} whether a knows b\\n * knows = function(a, b) {\\n *     ...\\n * };\\n */\\n\\n/**\\n * @param {function} knows()\\n * @return {function}\\n */\\nvar solution = function(knows) {\\n    /**\\n     * @param {integer} n Total people\\n     * @return {integer} The celebrity\\n     */\\n    return function(n) {\\n        \\n    };\\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# The knows API is already defined for you.\\n# @param {Integer} person a\\n# @param {Integer} person b\\n# @return {Boolean} whether a knows b\\n# def knows(a, b)\\n\\n# @param {Integer} n\\n# @return {Integer}\\ndef find_celebrity(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class Relation.\\n *     func knows(_ a: Int, _ b: Int) -> Bool;\\n */\\n\\nclass Solution : Relation {\\n    func findCelebrity(_ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * The knows API is already defined for you.\\n *     knows := func(a int, b int) bool\\n */\\nfunc solution(knows func(a int, b int) bool) func(n int) int {\\n    return func(n int) int {\\n        \\n    }\\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      def knows(a: Int, b: Int): Boolean = {} */\\n\\nclass Solution extends Relation {\\n    def findCelebrity(n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      fun knows(a: Int, b: Int) : Boolean {} */\\n\\nclass Solution: Relation() {\\n    override fun findCelebrity(n: Int) : Int {\\n        \\n\\t}\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"/* The knows API is defined for you.\\n       knows(a: i32, b: i32)->bool;\\n    to call it use self.knows(a,b)\\n*/\\n\\nimpl Solution {\\n    pub fn find_celebrity(&self, n: i32) -> i32 {\\n \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/* The knows API is defined in the parent class Relation.\\n      public function knows($a, $b){} */\\n\\nclass Solution extends Relation {\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function findCelebrity($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * The knows API is defined in the parent class Relation.\\n * knows(a: number, b: number): boolean {\\n *     ...\\n * };\\n */\\n\\nvar solution = function(knows: any) {\\n\\n    return function(n: number): number {\\n        \\n    };\\n};\"}]",
                    "sampleTestCase": "[[1,1,0],[0,1,0],[1,1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findCelebrity\",\n  \"params\": [\n    {\n      \"name\": \"graph\",\n      \"type\": \"integer[][]\",\n      \"internal\": true\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Suppose you are at a party with <code>n</code> people (labeled from <code>0</code> to <code>n - 1</code>), and among them, there may exist one celebrity. The definition of a celebrity is that all the other <code>n - 1</code> people know him/her, but he/she does not know any of them.</p>\n\n<p>Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &quot;Hi, A. Do you know B?&quot; to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).</p>\n\n<p>You are given a helper function <code>bool knows(a, b)</code> which tells you whether A knows B. Implement a function <code>int findCelebrity(n)</code>. There will be exactly one celebrity if he/she is in the party. Return the celebrity&#39;s label if there is a celebrity in the party. If there is no celebrity, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/02/277_example_1_bold.PNG\" style=\"width: 186px; height: 181px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,1,0],[0,1,0],[1,1,1]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/02/277_example_2.PNG\" style=\"width: 193px; height: 192px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,0,1],[1,1,0],[0,1,1]]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> There is no celebrity.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == graph.length</code></li>\n\t<li><code>n == graph[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>graph[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n\t<li><code>graph[i][i] == 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If the maximum number of allowed calls to the API <code>knows</code> is <code>3 * n</code>, could you find a solution without exceeding the maximum number of calls?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "The best hint for this problem can be provided by the following figure:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_find_celebrity.png\" width=\"700\"/>",
                        "Well, if you understood the gist of the above idea, you can extend it to find a candidate that can possibly be a celebrity. Why do we say a \"candidate\"? That is for you to think. This is clearly a greedy approach to find the answer. However, there is some information that would still remain to be verified without which we can't obtain an answer with certainty. To get that stake in the ground, we would need some more calls to the knows API."
                    ],
                    "solution": {
                        "title": "Find The Celebrity",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/514427854\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nAs per the problem statement, for a given person `i`, we can check whether or not `i` is a celebrity by using the `knows(...)` API to see if everybody knows `i`, and that `i` know nobody.\n\nTherefore, the simplest way of solving this problem is to go through each of the people in turn, and check whether or not they are a celebrity.\n\n**Algorithm**\n\nIt's best to define a separate `isCelebrity(...)` function that takes the id number of a specific person and returns `true` if they are a celebrity and `false` if not. This avoids the need for complex loop-break conditions, thus keeping the code cleaner.\n\nOne edge case we need to be cautious of is not asking person `i` if they know themselves. This can be handled by a check for `i == j` at the start of the main loop of `isCelebrity(...)` and then simply `continue`-ing when it is `true`.\n\n<iframe src=\"https://leetcode.com/playground/B4PHPMAX/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"B4PHPMAX\"></iframe>\n\n**Complexity Analysis**\n\nWe don't know what time and space the `knows(...)` API uses. Because it's not our concern, we'll assume it's $$O(1)$$ for the purpose of analysing our algorithm.\n\n- Time Complexity : $$O(n^2)$$.\n    \n    For each of the $$n$$ people, we need to check whether or not they are a celebrity.\n\n    Checking whether or not somebody is a celebrity requires making $$2$$ API calls for each of the $$n - 1$$ other people, for a total of $$2 \\cdot (n - 1) = 2 \\cdot n - 2$$ calls. In big-oh notation, we drop the constants, leaving $$O(n)$$.\n\n    So each of the $$n$$ celebrity checks will cost $$O(n)$$, giving a total of $$O(n^2)$$.\n\n- Space Complexity : $$O(1)$$.\n\n    Our code only uses constant extra space. The results of the API calls are not saved.\n\n<br />\n\n---\n\n#### Approach 2: Logical Deduction\n\n**Intuition**\n\nWe can do far better than the above approach. Let's start by looking at another way of representing the problem, which is a great way for approaching it in an interview. What we actually have in this problem is a **graph**, where a *directed edge* going from person `A` to person `B` means that we have confirmed that `A knows B`. \n\nFor example, here is a possible graph. Assume that we have made all possible calls to the `knows(...)` API to find these edges. Is there a celebrity here? If so, who is it?\n\n![Introductory example 1](../Figures/277/with_celebrity.png)\n\nWhat about in this graph?\n\n![Introductory example 2](../Figures/277/without_celebrity_1.png)\n\nAnd this one?\n\n![Introductory example 3](../Figures/277/without_celebrity_2.png)\n\nOn the graph representation, a celebrity is a person who has *exactly* `n - 1` directed edges going in (everybody knows them) and `0` edges going out (they know nobody). \n\nOn the first example we looked at above, person `4` is a celebrity because they have `5` directed edges going in, which is `n - 1`. They have no directed edges going out. Note that `3` *is not a celebrity* because they have `5` *outgoing* edges, not `5` ingoing.\n\nOn the second example, there is no celebrity. Person `4` is not a celebrity, because person `2` doesn't know them. There are only `n - 2` directed edges going into `4`.\n\nOn the third example, there is also no celebrity. Person `0` is not a celebrity, because they know person `5`, as represented by the directed edge going from `0` to `5`.\n\nAt the start, we only know the *nodes* of the graph. The *edges* are all hidden. We can \"uncover\" *edges* by making calls to the `knows(...)` API. In the first approach, we uncovered *all* the edges this way. So, the question we need to ask now is... was it actually necessary to uncover *all* of them? A good way to answer this question in an interview is to work through an example on the whiteboard, where you decide which edges you want to ask for, and then draw them as you go.\n\nWhen you do your own example, you'll of course need to know what the full graph behind your example is, or at least the important aspects of it, but you also need to focus on what information you've \"uncovered\" by using the `knows(...)` API. \n\nHere is an animation of an example. To distinguish between `not (A knows B)` and we-haven't-yet-asked if `A knows B`, we use a green solid arrow to show `A knows B`, a red dotted arrow to show `not (A knows B)` and no arrow if we haven't yet asked.\n\n!?!../Documents/277_find_celebrity_experiment.json:960,350!?!\n\nDuring the example in the animation, we asked if `4` knows `6`. Why was this question not necessary to identify the celebrity?\n\n![Asking whether or not 4 knows 6.](../Figures/277/redundant_question.png)\n\nWell, because we already know that both `4` and `6` know at least one other person, this means that neither of them could be the celebrity! Therefore, we've already ruled them out, there was no need to investigate them further.\n\nSo, what can we conclude from the result of an `A knows B` check? If the result was `true`, could `A` be the celebrity? What about `B`?\n\n![A green arrow from A to B.](../Figures/277/a_knows_b.png)\n\nAnd what about if `A knows B` returned `false`? Who couldn't be a celebrity now?\n\n![A red arrow from A to B](../Figures/277/a_doesnt_know_b.png)\n\nIn the first example, we know that `A` can't be a celebrity, because `A` knows somebody, namely `B`. In the second example, we know that `B` can't be a celebrity, because `A`, doesn't know him/her.\n\n> Therefore, with each call to `knows(...)`, we can conclusively determine that exactly **1** of the people is not a celebrity!\n\nThe following algorithm can, therefore, be used to rule out `n - 1` of the people in $$O(n)$$ time. We start by guessing that `0` might be a `celebrityCandidate`, and then we check if `0 knows 1` (within the loop). If `true`, then we know `0` isn't a celebrity (they know somebody), but `1` might be. We update the `celebrityCandidate` variable to `1` to reflect this. Otherwise, we know `1` is not a celebrity (somebody doesn't know them), but we haven't ruled out `0`, yet, so keep them as the `celebrityCandidate`. Whoever we kept is then asked if they know `2`, and so forth.\n\n```python\ncelebrity_candidate = 0\nfor i in range(1, n):\n    if knows(celebrity_candidate, i):\n        celebrity_candidate = i\n```\n\nAt the end, the only person we haven't ruled out is in the `celebrityCandidate` variable.\n\nHere is an animation of the algorithm.\n\n!?!../Documents/277_find_celebrity_candidate.json:960,350!?!\n\nAt the end of the example in the animation, this is how our graph looked. The person who we haven't ruled out is `4`. \n\n![Final slide of the animation, where we identified 4 as the celebrity candidate.](../Figures/277/final_celebrity_candidate.png)\n\nBut do we actually know for *sure* that this person is a celebrity? (Remember, it's possible there's no celebrity, in which case we'd return `-1`).\n\nNope! It's still possible that `0` doesn't know `4`, or perhaps `4` knows `3`. We can't rule these possibilities out from the information we have uncovered so far.\n\nSo, what can we do? We can use our `isCelebrity(...)` function on `4` to check whether or not they are a celebrity. If they are, our function will return `4`. If not, then it should return `-1`.\n\n**Algorithm**\n\nOur algorithm firstly narrows the people down to a single `celebrityCandidate` using the algorithm just above, and then it checks whether or not that candidate is a celebrity using the `isCelebrity(...)`.\n\n<iframe src=\"https://leetcode.com/playground/mUhnT8fb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mUhnT8fb\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n    \n    Our code is split into 2 parts.\n    \n    The first part finds a celebrity candidate. This requires doing $$n - 1$$ calls to `knows(...)` API, and so is $$O(n)$$.\n\n    The second part is the same as before\u2014checking whether or not a given person is a celebrity. We determined that this is $$O(n)$$.\n\n    Therefore, we have a total time complexity of $$O(n + n) = O(n)$$.\n\n- Space Complexity : $$O(1)$$.\n\n    Same as above. We are only using constant extra space.\n\n<br />\n\n---\n\n#### Approach 3: Logical Deduction with Caching\n\n**Intuition**\n\n*You probably won't need to implement this approach in an interview, however, I wouldn't be surprised if discussing these ideas was a follow up question. For that reason, we'll take a quick look at it!*\n\nHave a look at our example from above again. These are the calls to the `knows(...)` API that were made to identify that `4` is a celebrity candidate.\n\n![Final slide of the animation, where we identified 4 as the celebrity candidate.](../Figures/277/final_celebrity_candidate.png)\n\nNow, these are the calls that our Approach 2 would have made in the second phase to check whether or not our celebrity candidate, `4`, actually is a celebrity.\n\n![The 14 calls made to confirm the candidate.](../Figures/277/celebrity_candidate_confirm.png)\n\nAs shown in the above images, we made some of the same calls twice! The lower the number of the celebrity candidate, the more of these duplicated calls there will be, because the celebrity candidate spent longer in the `celebrityCandidate` variable, and so was involved in a lot more of the initial \"questioning\". Is this actually wasteful though?\n\nWe know that the best possible time complexity we could ever achieve in the average/ worst case is $$O(n)$$. The easiest way of proving this to point out that confirming that somebody *is* a celebrity requires $$O(n)$$ checks. There's simply no way around it, if you miss just one of those checks, it could have been the one that showed they were *not*. \n\nSo, because we can never do better than $$O(n)$$ anyway, surely it really doesn't matter?\n\nYes and no! It's possible that calls to the `knows(...)` API could be *really expensive* (i.e. slow). For example, in the scenario presented in the question, you need to ask the question to people and then listen for their answer. This is time consuming! As a computer-based example, what if the `knows(...)` API was retrieving its answers from a really slow web service on the other side of the world? What if somebody was having to sit in front of their computer, waiting patiently for this algorithm to finish running? They would definitely appreciate it taking 5 seconds instead of 10 seconds, even if that difference is constant.\n\nThe cost of this, however, is space. We will now need to store the results of `n - 1` calls the the `knows(...)` API.\n\nThis is similar to how web browsers cache data. Often, the cost of retrieving a page again is considered to more expensive than the cost of caching a page.\n\n**Algorithm**\n\nFor Java and JavaScript, we'll store our cache in a `HashMap`. For Python, we'll use `lru_cache` in the `functools` library. Other than that, the code is the same as\n\n<iframe src=\"https://leetcode.com/playground/iWYC7hdp/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iWYC7hdp\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$O(n)$$.\n\n    The time complexity is still $$O(n)$$. The only difference is that sometimes we're retrieving data from a cache inside our code instead of from the API.\n\n- Space Complexity : $$O(n)$$.\n    \n    We're storing the results of the $$n - 1$$ calls to the `know(...)` API we made while finding a candidate.\n\n    We could optimize the space complexity slightly, by dumping the cached contents each time the `celebrityCandidate` variable changes, which would be $$O(1)$$ in the best case (which happens to be the worst case for reducing number of API calls) but it's still $$O(n)$$ space in the worst case and probably not worth the extra code complexity as the algorithm still ultimately requires the memory/ disk space needed for the worst case.\n\n</br>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-the-celebrity",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.87,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "188",
                "title": "Integer to English Words",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "273",
                    "questionFrontendId": "273",
                    "sessionId": "968792",
                    "questionTitle": "Integer to English Words",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/integer-to-english-words/submit/",
                    "interpretUrl": "/problems/integer-to-english-words/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string numberToWords(int num) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String numberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numberToWords(self, num):\\n        \\\"\\\"\\\"\\n        :type num: int\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numberToWords(self, num: int) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * numberToWords(int num){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string NumberToWords(int num) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} num\\n * @return {string}\\n */\\nvar numberToWords = function(num) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num\\n# @return {String}\\ndef number_to_words(num)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numberToWords(_ num: Int) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numberToWords(num int) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numberToWords(num: Int): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numberToWords(num: Int): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn number_to_words(num: i32) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $num\\n     * @return String\\n     */\\n    function numberToWords($num) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numberToWords(num: number): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (number-to-words num)\\n  (-> exact-integer? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec number_to_words(Num :: integer()) -> unicode:unicode_binary().\\nnumber_to_words(Num) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec number_to_words(num :: integer) :: String.t\\n  def number_to_words(num) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "123",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"numberToWords\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"num\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Convert a non-negative integer <code>num</code> to its English words representation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> num = 123\n<strong>Output:</strong> \"One Hundred Twenty Three\"\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> num = 12345\n<strong>Output:</strong> \"Twelve Thousand Three Hundred Forty Five\"\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> num = 1234567\n<strong>Output:</strong> \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> num = 1234567891\n<strong>Output:</strong> \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
                        "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
                        "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
                    ],
                    "solution": {
                        "title": "Integer to English Words",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Divide and conquer \n\nLet's simplify the problem by representing it as a set of simple sub-problems.\nOne could split the initial integer `1234567890` on the groups \ncontaining not more than three digits `1.234.567.890`.\nThat results in representation `1 Billion 234 Million 567 Thousand 890` and \nreduces the initial problem to how to convert 3-digit integer to English word. \nOne could split further `234` -> `2 Hundred 34` into two sub-problems :\nconvert 1-digit integer and convert 2-digit integer. The first one is trivial. \nThe second one could be reduced to the first one for all 2-digit integers \nbut the ones from `10` to `19` which should be considered separately.\n\n<!--![LIS](../Figures/273/273_tr.gif)-->\n!?!../Documents/273_LIS.json:1000,632!?!\n\n<iframe src=\"https://leetcode.com/playground/hme62cME/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hme62cME\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity :  $$\\mathcal{O}(N)$$. \nIntuitively the output is proportional\nto the number `N` of digits in the input. \n* Space complexity : $$\\mathcal{O}(1)$$ since the output is just a string.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "integer-to-english-words",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.224,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "157",
                "title": "The Skyline Problem",
                "type": 1,
                "info": "Editor's choice: Frequently asked in a Microsoft onsite interview.",
                "paidOnly": false,
                "chapterId": 48,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "218",
                    "questionFrontendId": "218",
                    "sessionId": "968792",
                    "questionTitle": "The Skyline Problem",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/the-skyline-problem/submit/",
                    "interpretUrl": "/problems/the-skyline-problem/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> getSkyline(int[][] buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def getSkyline(self, buildings):\\n        \\\"\\\"\\\"\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} buildings\\n * @return {number[][]}\\n */\\nvar getSkyline = function(buildings) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} buildings\\n# @return {Integer[][]}\\ndef get_skyline(buildings)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getSkyline(buildings [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $buildings\\n     * @return Integer[][]\\n     */\\n    function getSkyline($buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function getSkyline(buildings: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\\nget_skyline(Buildings) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\\n  def get_skyline(buildings) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"getSkyline\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"buildings\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": 2,\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Skyline Problem",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Divide and Conquer\n\n**Solution Template**\n\nThe problem is a classical example of divide and conquer\napproach, and typically implemented exactly the same way as\nmerge sort algorithm.\n\nLet's follow here a solution template for divide and conquer\nproblems :\n\n- Define the base case(s).\n\n- Split the problem into subproblems and solve them recursively.\n\n- Merge the subproblems solutions into the problem solution.\n\n**Algorithm**\n\ngetSkyline for `n` buildings :\n\n- If `n == 0` : return an empty list.\n\n- If `n == 1` : return the skyline for one building (it's straightforward).\n\n- `leftSkyline` = getSkyline for the first n/2 buildings.\n\n- `rightSkyline` = getSkyline for the last n/2 buildings.\n\n- Merge `leftSkyline` and `rightSkyline`.\n\nNow let's discuss each step in more details.\n\n**Base Cases**\n\nThe first base case is an empty `buildings` list.\nThen the skyline is an empty list, too.\n\nThe second base case is the only one building in the list, when\nthe skyline construction is quite straightforward.\n\n![bla](../Figures/218/base5.png)\n\n**How to split the problem**\n\nThe idea is the same as for merge sort : at each step\nsplit the list exactly in two parts : from `0` to `n/2` and\n from `n/2` to `n`, and then construct\nthe skylines recursively for each part.\n\n![bla](../Figures/218/split5.png)\n\n**How to merge two skylines**\n\nThe algorithm for merge function is quite straightforward\nand based on the same merge sort logic : the height of an output skyline is\nalways a maximum between the left and right skylines.\n\n![bla](../Figures/218/merge5.png)\n\nLet's use here two\npointers `pR` and `pL` to track the current element index in both\nskylines, and three integers `leftY`, `rightY`, and `currY` to track the current height\nfor the `left` skyline, `right` skyline and the merged skyline.\n\nmergeSkylines (left, right) :\n\n- currY = leftY = rightY = 0\n\n- While we're in the region where both skylines are present\n(`pR < nR` and `pL < nL`) :\n\n    - Pick up the element with the smallest `x` coordinate. If it's\n    an element from the left skyline, move `pL` and update `leftY`.\n    If it's\n    an element from the right skyline, move `pR` and update `rightY`.\n\n    - Compute the largest height at the current point :\n    `maxY = max(leftY, rightY)`.\n\n    - Update an output skyline by `(x, maxY)` point, if `maxY` is not equal to `currY`.\n\n- While there are still elements in the left skyline (`pL < nL`),\nprocess them following the same logic as above.\n\n- While there are still elements in the right skyline (`pR < nR`),\nprocess them following the same logic as above.\n\n- Return output skyline.\n\n> Here are three usecases to illustrate the merge algorithm execution\n\n![bla](../Figures/218/merge3.png)\n\n![bla](../Figures/218/merge4.png)\n\n![bla](../Figures/218/merge7.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/KJU4KcvC/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KJU4KcvC\"></iframe>\n\n* Time complexity : $$\\mathcal{O}(N \\log N)$$, where $$N$$ is number of\nbuildings. The problem is an example of\n[Master Theorem case II](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_2_example)\n : $$T(N) = 2 T(\\frac{N}{2}) + 2N$$, that results in $$\\mathcal{O}(N \\log N)$$\n time complexity.\n\n\n* Space complexity : $$\\mathcal{O}(N)$$.\n\n  - We use the `output` variable to keep track of the results.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "skyline-problem",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.495,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some other questions for you to practice which are not in the previous chapters, so you can prepare for your Microsoft interview. We recommend Find the Celebrity, Excel Sheet Column Number and The Skyline Problem."
    }
]