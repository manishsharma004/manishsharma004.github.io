[
    {
        "id": "116",
        "title": "Array and Strings",
        "slug": "array-and-strings",
        "items": [
            {
                "id": "827",
                "title": "Product of Array Except Self",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "238",
                    "questionFrontendId": "238",
                    "sessionId": "968792",
                    "questionTitle": "Product of Array Except Self",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/product-of-array-except-self/submit/",
                    "interpretUrl": "/problems/product-of-array-except-self/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> productExceptSelf(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] productExceptSelf(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def productExceptSelf(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* productExceptSelf(int* nums, int numsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] ProductExceptSelf(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar productExceptSelf = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef product_except_self(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func productExceptSelf(nums []int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun productExceptSelf(nums: IntArray): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[]\\n     */\\n    function productExceptSelf($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function productExceptSelf(nums: number[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (product-except-self nums)\\n  (-> (listof exact-integer?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec product_except_self(Nums :: [integer()]) -> [integer()].\\nproduct_except_self(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec product_except_self(nums :: [integer]) :: [integer]\\n  def product_except_self(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"productExceptSelf\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, return <em>an array</em> <code>answer</code> <em>such that</em> <code>answer[i]</code> <em>is equal to the product of all the elements of</em> <code>nums</code> <em>except</em> <code>nums[i]</code>.</p>\n\n<p>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time and without using the division operation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,3,4]\n<strong>Output:</strong> [24,12,8,6]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [-1,1,0,-3,3]\n<strong>Output:</strong> [0,0,9,0,0]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-30 &lt;= nums[i] &lt;= 30</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong>&nbsp;Can you solve the problem in <code>O(1)&nbsp;</code>extra&nbsp;space complexity? (The output array <strong>does not</strong> count as extra space for space complexity analysis.)</p>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Product of Array Except Self",
                        "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/574160642\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution\r\n\r\nFrom the looks of it, this seems like a simple enough problem to solve in linear time and space. We can simply take the product of all the elements in the given array and then, for each of the elements $$x$$ of the array, we can simply find `product of array except self` value by dividing the product by $$x$$. \r\n\r\nDoing this for each of the elements would solve the problem. However, there's a note in the problem which says that we are not allowed to use division operation. That makes solving this problem a bit harder. \r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 1: Left and Right product lists\r\n\r\nIt's much easier to build an intuition for solving this problem without division once you visualize how the different `products except self` look like for each of the elements. So, let's take a look at an example array and the different products.\r\n\r\n<center>\r\n<img src=\"../Figures/238/diag-1.png\" width=\"700\"></center>\r\n\r\nLooking at the figure about we can figure another way of computing those different product values. \r\n\r\n>Instead of dividing the product of all the numbers in the array by the number at a given index to get the corresponding product, we can make use of the product of all the numbers to the left and all the numbers to the right of the index. Multiplying these two individual products would give us the desired result as well.\r\n\r\nFor every given index, $$i$$, we will make use of the product of all the numbers to the left of it and multiply it by the product of all the numbers to the right. This will give us the product of all the numbers except the one at the given index $$i$$. Let's look at a formal algorithm describing this idea more concretely.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize two empty arrays, `L` and `R` where for a given index `i`, `L[i]` would contain the product of all the numbers to the left of `i` and `R[i]` would contain the product of all the numbers to the right of `i`. \r\n2. We would need two different loops to fill in values for the two arrays. For the array `L`, $$L[0]$$ would be `1` since there are no elements to the left of the first element. For the rest of the elements, we simply use $$L[i] = L[i - 1] * nums[i - 1]$$. Remember that `L[i]` represents product of all the elements *to the left of element at index i*.\r\n3. For the other array, we do the same thing but in reverse i.e. we start with the initial value of `1` in $$R[length - 1]$$ where $$length$$ is the number of elements in the array, and keep updating `R[i]` in reverse. Essentially, $$R[i] = R[i + 1] * nums[i + 1]$$. Remember that `R[i]` represents product of all the elements *to the right of element at index i*.\r\n4. Once we have the two arrays set up properly, we simply iterate over the input array one element at a time, and for each element at index `i`, we find the `product except self` as $$L[i] * R[i]$$. \r\n\r\nLet's go over a simple run of the algorithm that clearly depicts the construction of the two intermediate arrays and finally the answer array.\r\n\r\n!?!../Documents/238_anim1.json:770,460!?!\r\n\r\nFor the given array $$[4,5,1,8,2]$$, the `L` and `R` arrays would finally be:\r\n\r\n<center>\r\n<img src=\"../Figures/238/products.png\" width=\"700\"></center>\r\n\r\n<iframe src=\"https://leetcode.com/playground/EWkKkCGw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EWkKkCGw\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(N)$$ where $$N$$ represents the number of elements in the input array. We use one iteration to construct the array $$L$$, one to construct the array $$R$$ and one last to construct the $$answer$$ array using $$L$$ and $$R$$.\r\n* Space complexity : $$O(N)$$ used up by the two intermediate arrays that we constructed to keep track of product of elements to the left and right.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: O(1) space approach\r\n\r\nAlthough the above solution is good enough to solve the problem since we are not using division anymore, there's a follow-up component as well which asks us to solve this using constant space. Understandably so, the output array *does not* count towards the space complexity. This approach is essentially an extension of the approach above. Basically, we will be using the output array as one of `L` or `R` and we will be constructing the other one on the fly. Let's look at the algorithm based on this idea.\r\n\r\n**Algorithm**\r\n\r\n1. Initialize the empty `answer` array where for a given index `i`, `answer[i]` would contain the product of all the numbers to the left of `i`. \r\n2. We construct the `answer` array the same way we constructed the `L` array in the previous approach. These two algorithms are exactly the same except that we are trying to save up on space.\r\n3. The only change in this approach is that we don't explicitly build the `R` array from before. Instead, we simply use a variable to keep track of the running product of elements to the right and we keep updating the `answer` array by doing $$answer[i] = answer[i] * R$$. For a given index `i`, `answer[i]` contains the product of all the elements to the left and `R` would contain product of all the elements to the right. We then update `R` as $$R = R * nums[i]$$\r\n\r\n<iframe src=\"https://leetcode.com/playground/MucDzUdz/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"MucDzUdz\"></iframe>\r\n\r\n**Complexity analysis**\r\n\r\n* Time complexity : $$O(N)$$ where $$N$$ represents the number of elements in the input array. We use one iteration to construct the array $$L$$, one to update the array $$answer$$.\r\n* Space complexity : $$O(1)$$ since don't use any additional array for our computations. The problem statement mentions that using the $$answer$$ array doesn't add to the space complexity.\r\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "product-of-array-except-self",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.664,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "828",
                "title": "Spiral Matrix",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "54",
                    "questionFrontendId": "54",
                    "sessionId": "968792",
                    "questionTitle": "Spiral Matrix",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/spiral-matrix/submit/",
                    "interpretUrl": "/problems/spiral-matrix/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<Integer> spiralOrder(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def spiralOrder(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<int> SpiralOrder(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @return {number[]}\\n */\\nvar spiralOrder = function(matrix) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @return {Integer[]}\\ndef spiral_order(matrix)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func spiralOrder(_ matrix: [[Int]]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func spiralOrder(matrix [][]int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def spiralOrder(matrix: Array[Array[Int]]): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun spiralOrder(matrix: Array<IntArray>): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn spiral_order(matrix: Vec<Vec<i32>>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @return Integer[]\\n     */\\n    function spiralOrder($matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function spiralOrder(matrix: number[][]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (spiral-order matrix)\\n  (-> (listof (listof exact-integer?)) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec spiral_order(Matrix :: [[integer()]]) -> [integer()].\\nspiral_order(Matrix) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec spiral_order(matrix :: [[integer]]) :: [integer]\\n  def spiral_order(matrix) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,2,3],[4,5,6],[7,8,9]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"spiralOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<integer>\",\r\n    \"size\": \"size_1 * col_size_1\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> <code>matrix</code>, return <em>all elements of the</em> <code>matrix</code> <em>in spiral order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>Output:</strong> [1,2,3,6,9,8,7,4,5]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg\" style=\"width: 322px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n<strong>Output:</strong> [1,2,3,4,8,12,11,10,9,5,6,7]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10</code></li>\n\t<li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
                        "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column and then we move inwards by 1 and then repeat. That's all, that is all the simulation that we need.",
                        "Think about when you want to switch the progress on one of the indexes. If you progress on <pre>i</pre> out of <pre>[i, j]</pre>, you'd be shifting in the same column. Similarly, by changing values for <pre>j</pre>, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to run the simulation on edge cases like a single column or a single row to see if anything breaks or not."
                    ],
                    "solution": {
                        "title": "Spiral Matrix",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nThe problem statement asks us to _return all elements of the `matrix` in spiral order_, which means we will start from the top left corner and move towards right, then down, then left, and then up. Let's break this into further details:\n1. We can achieve moving in different directions by modifying row and column indices. Specifically, we have:\n\n```plain\nGiven that we are at (row, col), where row is the row index, and col is the column index.\n\nmove right: (row, col + 1)\nmove downwards: (row + 1, col)\nmove left: (row, col - 1)\nmove upwards: (row - 1, col)\n```\n2. When shall we change our direction? We need to turn when we either _reach the matrix boundaries_, or we _reach the cells in the array that we have visited before_. Matrix boundaries are fixed and provided already, but how could we know if we have visited a particular cell or not?\nIn fact, we have two different strategies and they will be introduced in the following approaches. Generally speaking, they are as follows:\n   - Approach 1. We can move the boundaries towards the center of the matrix after we have traversed a row or a column. Then when we meet a boundary, we know it's time to change the direction and update the boundary.\n   - Approach 2. While traversing the matrix, we can record each location that we have visited. Then when we meet a matrix boundary or a previously visited cell, we know it's time to change the direction.\n\n> This is a good time to stop and see if you can come up with the implementations yourselves!\n\n</br>\n\n---\n\n#### Approach 1: Set Up Boundaries\n\n**Intuition**\n\nOur goal is to update boundaries as follows: when we finish traversing a row or column, we want to set up a boundary on it so that next time we get there, we know we need to change the direction. Here is a demo for the first round of updating the top, right, bottom, and left boundaries.\n\n!?!../Documents/54_spiral_matrix.json:1920,1080!?!\n\n\n</br>\n\n\n**Algorithm**\n\n1. Initialize the top, right, bottom, and left boundaries as `up`, `right`, `down`, and `left`.\n2. Initialize the output array `result`.\n3. Traverse the elements in spiral order and add each element to `result`:\n    - Traverse from `left` boundary to `right` boundary.\n    - Traverse from `up` boundary to `down` boundary.\n    - Before we traverse from right to left, we need to make sure that we are not on a row that has already been traversed. If we are not, then we can traverse from `right` to `left`.\n    - Similarly, before we traverse from top to bottom, we need to make sure that we are not on a column that has already been traversed. Then we can traverse from `down` to `up`.\n    - Remember to move the boundaries by updating `left`, `right`, `up`, and `down` accordingly.\n4. Return `result`.\n\n<iframe src=\"https://leetcode.com/playground/Zi2NiW6U/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Zi2NiW6U\"></iframe>\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of rows and $$N$$ be the number of columns.\n\n* Time complexity: $$O(M \\cdot N)$$. This is because we visit each element once.\n\n* Space complexity: $$O(1)$$. This is because we don't use other data structures. Remember that we don't include the output array in the space complexity.\n\n\n<br/>\n\n---\n\n#### Approach 2: Mark Visited Elements\n\n**Intuition**\n\nIf we mark the cells that we have visited, then when we run into a visited cell, we know we need to turn.\n\n> How do we know which direction we need to turn to? Well, we are always following this loop: right, down, left, up, right again, and so on. Therefore, when we run into a cell that we have visited, we can simply turn to the next direction in the aforementioned loop.\n\nNote that elements in the matrix are constrained to `-100 <= matrix[row][col] <= 100`, therefore we can select a number that is out of this range to mark it. In this article, `101` is selected for marking purposes.\n\n> Modifying the original data may not be a good choice sometimes. Therefore, we can also prepare another boolean matrix to store the cells we visited. However, the implementation of this approach is quite similar. You are welcome to explore this implementation as an exercise.\n\nThe last puzzle piece is when shall we stop. An interesting observation is that if we reach the visited cell, we need to turn.  However, when we meet another visited cell immediately after changing the direction, it means we reached the last element in the matrix. You'll see that an integer `changeDirection` is used to track the number of times we changed the direction consecutively.\n\n**Algorithm**\n\n- Initializations:\n    - Initialize a 2D array `directions ` to represent the four directions that we will move.\n    - Initialize `currentDirection` to 0 to signify that we are moving right at the beginning.\n    - Initialize `VISITED` to 101 to mark visited cells.\n    - Initialize `changeDirection` to 0.\n    - Initialize `row` and `col` to 0 since our initial position is `(0, 0)`.\n- We follow the current direction until we reach the matrix boundaries or a visited cell.\n    - While traversing in the current direction, remember to reset `changeDirection` to 0 at every step.\n    - Move to the next cell by updating the row and column indices.\n    - Append the element to the result and mark the location as visited.\n- Update the direction and `changeDirection`. If `changeDirection` is larger than 1, it means we are continuously changing our directions, and therefore we've visited all of the elements.\n\n<iframe src=\"https://leetcode.com/playground/VyCCgRAL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"VyCCgRAL\"></iframe>\n\n**Complexity Analysis**\n\nLet $$M$$ be the number of rows and $$N$$ be the number of columns.\n\n* Time complexity: $$O(M \\cdot N)$$. This is because we visit each element once.\n\n* Space complexity: $$O(1)$$. This is because we don't use other data structures. Remember that we don't consider the output array or the input matrix when calculating the space complexity. However, if we were prohibited from mutating the input matrix, then this would be an $$O(M \\cdot N)$$ space solution.  This is because we would need to use a boolean matrix to track all of the previously seen cells.\n\n\n<br/>\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "spiral-matrix",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.2,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "829",
                "title": "4Sum II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "454",
                    "questionFrontendId": "454",
                    "sessionId": "968792",
                    "questionTitle": "4Sum II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/4sum-ii/submit/",
                    "interpretUrl": "/problems/4sum-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def fourSumCount(self, nums1, nums2, nums3, nums4):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :type nums3: List[int]\\n        :type nums4: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint fourSumCount(int* nums1, int nums1Size, int* nums2, int nums2Size, int* nums3, int nums3Size, int* nums4, int nums4Size){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @param {number[]} nums3\\n * @param {number[]} nums4\\n * @return {number}\\n */\\nvar fourSumCount = function(nums1, nums2, nums3, nums4) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer[]} nums2\\n# @param {Integer[]} nums3\\n# @param {Integer[]} nums4\\n# @return {Integer}\\ndef four_sum_count(nums1, nums2, nums3, nums4)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func fourSumCount(_ nums1: [Int], _ nums2: [Int], _ nums3: [Int], _ nums4: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def fourSumCount(nums1: Array[Int], nums2: Array[Int], nums3: Array[Int], nums4: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun fourSumCount(nums1: IntArray, nums2: IntArray, nums3: IntArray, nums4: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn four_sum_count(nums1: Vec<i32>, nums2: Vec<i32>, nums3: Vec<i32>, nums4: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @param Integer[] $nums3\\n     * @param Integer[] $nums4\\n     * @return Integer\\n     */\\n    function fourSumCount($nums1, $nums2, $nums3, $nums4) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function fourSumCount(nums1: number[], nums2: number[], nums3: number[], nums4: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (four-sum-count nums1 nums2 nums3 nums4)\\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec four_sum_count(Nums1 :: [integer()], Nums2 :: [integer()], Nums3 :: [integer()], Nums4 :: [integer()]) -> integer().\\nfour_sum_count(Nums1, Nums2, Nums3, Nums4) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec four_sum_count(nums1 :: [integer], nums2 :: [integer], nums3 :: [integer], nums4 :: [integer]) :: integer\\n  def four_sum_count(nums1, nums2, nums3, nums4) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2]\n[-2,-1]\n[-1,2]\n[0,2]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"fourSumCount\",\n  \"params\": [\n    {\n      \"name\": \"nums1\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"nums2\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"nums3\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"nums4\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p>\n\n<ul>\n\t<li><code>0 &lt;= i, j, k, l &lt; n</code></li>\n\t<li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nThe two tuples are:\n1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length</code></li>\n\t<li><code>n == nums2.length</code></li>\n\t<li><code>n == nums3.length</code></li>\n\t<li><code>n == nums4.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>-2<sup>28</sup> &lt;= nums1[i], nums2[i], nums3[i], nums4[i] &lt;= 2<sup>28</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "4Sum II",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\nThis problem is a variation of [4Sum](https://leetcode.com/articles/4sum/), and we recommend checking that problem first. The main difference is that here we pick each element from a different array, while in 4Sum all elements come from the same array. For that reason, we cannot use the [Two Pointers](https://leetcode.com/articles/4sum/#approach-1-two-pointers) approach, where elements must be in the same sorted array.\r\n\r\nOn the bright side, we do not need to worry about using the same element twice - we pick one element at a time from each array. As you will see later, this help reduce the time complexity.\r\n\r\nFinally, we do not need to return actual values and ensure they are unique; we just count each combination of four elements that sums to zero.\r\n\r\n---\r\n\r\n#### Approach 1: Hashmap\r\n\r\nA brute force solution will be to enumerate all combinations of elements using four nested loops, which results in $$\\mathcal{O}(n^4)$$ time complexity. A faster approach is to use three nested loops, and, for each sum `a + b + c`, search for a complementary value `d == -(a + b + c)` in the fourth array. We can do the search in $$\\mathcal{O}(1)$$ if we populate the fourth array into a hashmap.\r\n\r\n> Note that we need to track the frequency of each element in the fourth array. If an element is repeated multiple times, it will form multiple quadruples. Therefore, we will use hashmap values to store counts.\r\n\r\nBuilding further on this idea, we can observe that `a + b == -(c + d)`. First, we will count sums of elements `a + b` from the first two arrays using a hashmap. Then, we will enumerate elements from the third and fourth arrays, and search for a complementary sum `a + b == -(c + d)` in the hashmap.\r\n\r\n!?!../Documents/454_4Sum_II.json:1200,500!?!\r\n\r\n**Algorithm**\r\n\r\n1. For each `a` in `A`.\r\n    - For each `b` in `B`.\r\n        - If `a + b` exists in the hashmap `m`, increment the value.\r\n        - Else add a new key `a + b` with the value `1`.\r\n\r\n2. For each `c` in `C`.\r\n    - For each `d` in `D`.\r\n        - Lookup key `-(c + d)` in the hashmap `m`.\r\n        - Add its value to the count `cnt`.\r\n\r\n3. Return the count `cnt`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/9CTt2E45/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"9CTt2E45\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n- Time Complexity: $$\\mathcal{O}(n^2)$$. We have 2 nested loops to count sums, and another 2 nested loops to find complements.\r\n\r\n- Space Complexity: $$\\mathcal{O}(n^2)$$ for the hashmap. There could be up to $$\\mathcal{O}(n^2)$$ distinct `a + b` keys.\r\n\r\n---\r\n\r\n#### Approach 2: kSum II\r\n\r\nAfter you solve 4Sum II, an interviewer can follow-up with 5Sum II, 6Sum II, and so on. What they are really expecting is a generalized solution for `k` input arrays. Fortunately, the hashmap approach can be easily extended to handle more than 4 arrays.\r\n\r\nAbove, we divided 4 arrays into two equal groups, and processed each group independently. Same way, we will divide $$k$$ arrays into two groups. For the first group, we will have $$\\frac{k}{2}$$ nested loops to count sums. Another $$\\frac{k}{2}$$ nested loops will enumerate arrays in the second group and search for complements.\r\n\r\n**Algorithm**\r\n\r\nWe can implement $$\\frac{k}{2}$$ nested loops using a recursion, passing the index `i` of the current list as the parameter. The first group will be processed by `addToHash` recursive function, which accumulates `sum` and terminates when adding the final sum to a hashmap `m`.\r\n\r\nThe second function, `countComplements`, will process the other group, accumulating the `complement` value. In the end, it searches for the final `complement` value in the hashmap and adds its count to the result.\r\n\r\n<iframe src=\"https://leetcode.com/playground/nRnruTRU/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"nRnruTRU\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n- Time Complexity: $$\\mathcal{O}(n^{\\frac{k}{2}})$$, or $$\\mathcal{O}(n^2)$$ for 4Sum II. We have $$\\frac{k}{2}$$ nested loops to count sums, and another $$\\frac{k}{2}$$ nested loops to find complements.\r\n\r\n    If the number of arrays is odd, the time complexity will be $$\\mathcal{O}(n^{\\frac{k+1}{2}})$$. We will pass $$\\frac{k}{2}$$ arrays to `addToHash`, and $$\\frac{k+1}{2}$$ arrays to `kSumCount` to keep the space complexity $$\\mathcal{O}(n ^ {\\frac{k}{2}})$$.\r\n\r\n- Space Complexity: $$\\mathcal{O}(n^{\\frac{k}{2}})$$ for the hashmap. The space needed for the recursion will not exceed $$\\frac{k}{2}$$.\r\n\r\n---\r\n\r\n#### Further Thoughts\r\n\r\nFor an interview, keep in mind the generalized implementation. Even if your interviewer is OK with a simpler code, you'll get some extra points by describing how your solution can handle more than 4 arrays.\r\n\r\nIt's also important to discuss trade-offs with your interviewer. If we are tight on memory, we can move some arrays from the first group to the second. This, of course, will increase the time complexity.\r\n\r\nIn other words, the time complexity can range from $$\\mathcal{O}(n^k)$$ to $$\\mathcal{O}(n^{\\frac{k}{2}})$$, and the memory complexity ranges from $$\\mathcal{O}(1)$$ to $$\\mathcal{O}(n^{\\frac{k}{2}})$$ accordingly.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "4sum-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.885,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "830",
                "title": "Container With Most Water",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "11",
                    "questionFrontendId": "11",
                    "sessionId": "968792",
                    "questionTitle": "Container With Most Water",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/container-with-most-water/submit/",
                    "interpretUrl": "/problems/container-with-most-water/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxArea(vector<int>& height) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxArea(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxArea(self, height):\\n        \\\"\\\"\\\"\\n        :type height: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxArea(self, height: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxArea(int* height, int heightSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxArea(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} height\\n * @return {number}\\n */\\nvar maxArea = function(height) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} height\\n# @return {Integer}\\ndef max_area(height)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxArea(_ height: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxArea(height []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxArea(height: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxArea(height: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_area(height: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $height\\n     * @return Integer\\n     */\\n    function maxArea($height) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxArea(height: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-area height)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_area(Height :: [integer()]) -> integer().\\nmax_area(Height) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_area(height :: [integer]) :: integer\\n  def max_area(height) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,8,6,2,5,4,8,3,7]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"height\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given <code>n</code> non-negative integers <code>a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub></code><sub> </sub>, where each represents a point at coordinate <code>(i, a<sub>i</sub>)</code>. <code>n</code> vertical lines are drawn such that the two endpoints of the line <code>i</code> is at <code>(i, a<sub>i</sub>)</code> and <code>(i, 0)</code>. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain&nbsp;is 49.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,3,2,1,4]\n<strong>Output:</strong> 16\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,2,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "The aim is to maximize the area formed between the vertical lines. The area of any container is calculated using the shorter line as length and the distance between the lines as the width of the rectangle.\r\n\r\n<pre>\r\nArea = length of shorter vertical line * distance between lines\r\n</pre>\r\n\r\nWe can definitely get the maximum width container as the outermost lines have the maximum distance between them. However, this container <b>might not be the maximum in size</b> as one of the vertical lines of this container could be really short.\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_water_trap_1.png\" width=\"500\"/>\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_water_trap_2.png\" width=\"500\"/>",
                        "Start with the maximum width container and go to a shorter width container if there is a vertical line longer than the current containers shorter line. This way we are compromising on the width but we are looking forward to a longer length container."
                    ],
                    "solution": {
                        "title": "Container With Most Water",
                        "content": "[TOC]\n\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/513169200\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n## Overview\n\nWe have to maximize the Area that can be formed between the vertical lines using the shorter line as length and the distance between the lines as the width of the rectangle forming the area.\n\n</br>\n\n---\n\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nIn this case, we will simply consider the area for every possible pair of the lines and find out the maximum area out of those.\n\n<iframe src=\"https://leetcode.com/playground/kDz5GBVK/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"kDz5GBVK\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Calculating area for all $$\\dfrac{n(n-1)}{2}$$ height pairs.\n* Space complexity : $$O(1)$$. Constant extra space is used.\n<br />\n<br />\n---\n#### Approach 2: Two Pointer Approach\n\n**Algorithm**\n\nThe intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained.\n\nWe take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Futher, we maintain a variable $$\\text{maxarea}$$ to store the maximum area obtained till now. At every step, we find out the area formed between them, update $$\\text{maxarea}$$ and move the pointer pointing to the shorter line towards the other end by one step.\n\nThe algorithm can be better understood by looking at the example below:\n```\n1 8 6 2 5 4 8 3 7\n```\n\n<!--![Water_Continer](https://leetcode.com/media/original_images/11_Container_Water.gif)-->\n!?!../Documents/11_Container_Water.json:1000,563!?!\n\nHow this approach works?\n\nInitially we consider the area constituting the exterior most lines. Now, to maximize the area, we need to consider the area between the lines of larger lengths. If we try to move the pointer at the longer line inwards, we won't gain any increase in area, since it is limited by the shorter line. But moving the shorter line's pointer could turn out to be beneficial, as per the same argument, despite the reduction in the width. This is done since a relatively longer line obtained by moving the shorter line's pointer might overcome the reduction in area caused by the width reduction.\n\nFor further clarification click [here](https://leetcode.com/problems/container-with-most-water/discuss/6099/yet-another-way-to-see-what-happens-in-the-on-algorithm) and for the proof click [here](https://leetcode.com/problems/container-with-most-water/discuss/6089/Anyone-who-has-a-O(N)-algorithm/7268).\n\n<iframe src=\"https://leetcode.com/playground/TPj2GX23/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"TPj2GX23\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. Single pass.\n\n* Space complexity : $$O(1)$$. Constant space is used.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "container-with-most-water",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.772,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "831",
                "title": "Game of Life",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "289",
                    "questionFrontendId": "289",
                    "sessionId": "968792",
                    "questionTitle": "Game of Life",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/game-of-life/submit/",
                    "interpretUrl": "/problems/game-of-life/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void gameOfLife(vector<vector<int>>& board) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void gameOfLife(int[][] board) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def gameOfLife(self, board):\\n        \\\"\\\"\\\"\\n        :type board: List[List[int]]\\n        :rtype: None Do not return anything, modify board in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def gameOfLife(self, board: List[List[int]]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify board in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid gameOfLife(int** board, int boardSize, int* boardColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void GameOfLife(int[][] board) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} board\\n * @return {void} Do not return anything, modify board in-place instead.\\n */\\nvar gameOfLife = function(board) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} board\\n# @return {Void} Do not return anything, modify board in-place instead.\\ndef game_of_life(board)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func gameOfLife(_ board: inout [[Int]]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func gameOfLife(board [][]int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def gameOfLife(board: Array[Array[Int]]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun gameOfLife(board: Array<IntArray>): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn game_of_life(board: &mut Vec<Vec<i32>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $board\\n     * @return NULL\\n     */\\n    function gameOfLife(&$board) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify board in-place instead.\\n */\\nfunction gameOfLife(board: number[][]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (game-of-life board)\\n  (-> (listof (listof exact-integer?)) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"gameOfLife\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"board\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>According to&nbsp;<a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\">Wikipedia&#39;s article</a>: &quot;The <b>Game of Life</b>, also known simply as <b>Life</b>, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.&quot;</p>\n\n<p>The board is made up of an <code>m x n</code> grid of cells, where each cell has an initial state: <b>live</b> (represented by a <code>1</code>) or <b>dead</b> (represented by a <code>0</code>). Each cell interacts with its <a href=\"https://en.wikipedia.org/wiki/Moore_neighborhood\" target=\"_blank\">eight neighbors</a> (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>\n\n<ol>\n\t<li>Any live cell with fewer than two live neighbors dies as if caused by under-population.</li>\n\t<li>Any live cell with two or three live neighbors lives on to the next generation.</li>\n\t<li>Any live cell with more than three live neighbors dies, as if by over-population.</li>\n\t<li>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.</li>\n</ol>\n\n<p><span>The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the <code>m x n</code> grid <code>board</code>, return <em>the next state</em>.</span></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg\" style=\"width: 562px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n<strong>Output:</strong> [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg\" style=\"width: 402px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[1,1],[1,0]]\n<strong>Output:</strong> [[1,1],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 25</code></li>\n\t<li><code>board[i][j]</code> is <code>0</code> or <code>1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.</li>\n\t<li>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Game of Life",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\nBefore moving on to the actual solution, let us visually look at the rules to be applied to the cells to get a greater clarity.\r\n<center>\r\n<img src=\"../Figures/289/Game_of_life_1.png\" width=\"600\"/>\r\n</center>\r\n<center>\r\n<img src=\"../Figures/289/Game_of_life_2.png\" width=\"600\"/>\r\n</center>\r\n\r\n#### Approach 1: O(mn) Space Solution\r\n\r\n**Intuition**\r\n\r\nThe problem might look very easy at first, however, the most important catch in this problem is to realize that if you update the original array with the given rules, you won't be able to perform *simultaneous* updation as is required in the question. You might end up using the updated values for some cells to update the values of other cells. But the problem demands applying the given rules simultaneously to every cell.\r\n\r\nThus, you cannot update some cells first and then use their updated values to update other cells.\r\n\r\n<center>\r\n<img src=\"../Figures/289/Game_of_life_3.png\" width=\"600\"/>\r\n</center>\r\n\r\nIn the above diagram it's evident that an update to a cell can impact the other neighboring cells. If we use the updated value of a cell while updating its neighbors, then we are not applying rules to all cells simultaneously.\r\n\r\nHere `simultaneously` isn't about parallelism but using the original values of the neighbors instead of the updated values while applying rules to any cell. Hence the first approach could be as easy as having a copy of the board. The copy is never mutated. So, you never lose the original value for a cell.\r\n\r\nWhenever a rule is applied to any of the cells, we look at its neighbors in the unmodified copy of the board and change the original board accordingly. Here we keep the copy unmodified since the problem asks us to make the changes to the original array in-place.\r\n\r\n<center>\r\n<img src=\"../Figures/289/Game_of_life_4.png\" width=\"600\"/>\r\n</center>\r\n\r\n**Algorithm**\r\n\r\n1. Make a copy of the original board which will remain unchanged throughout the process.\r\n2. Iterate the cells of the `Board` one by one.\r\n3. While computing the results of the rules, use the copy board and apply the result in the original board.\r\n\r\n<iframe src=\"https://leetcode.com/playground/7e65VzMk/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"7e65VzMk\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(M \\times N)$$, where $$M$$ is the number of rows and $$N$$ is the number of columns of the `Board`.\r\n\r\n* Space Complexity: $$O(M \\times N)$$, where $$M$$ is the number of rows and $$N$$ is the number of columns of the `Board`. This is the space occupied by the copy board we created initially.\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Approach 2: O(1) Space Solution\r\n\r\n**Intuition**\r\n\r\nThe problem could also be solved in-place. $$O(M \\times N)$$ space complexity could be too expensive when the board is very large. We only have two states `live(1)` or `dead(0)` for a cell. We can use some dummy cell value to signify previous state of the cell along with the new changed value.\r\n\r\nFor e.g. If the value of the cell was `1` originally but it has now become `0` after applying the rule, then we can change the value to `-1`. The negative `sign` signifies the cell is now dead(0) but the `magnitude` signifies the cell was a live(1) cell originally.\r\n\r\nAlso, if the value of the cell was `0` originally but it has now become `1` after applying the rule, then we can change the value to `2`. The positive `sign` signifies the cell is now live(1) but the `magnitude` of 2 signifies the cell was a dead(0) cell originally.\r\n\r\n<center>\r\n<img src=\"../Figures/289/Game_of_life_5.png\" width=\"600\"/>\r\n</center>\r\n\r\n**Algorithm**\r\n\r\n1. Iterate the cells of the `Board` one by one.\r\n2. The rules are computed and applied on the original board. The updated values signify both previous and updated value.\r\n3. The updated rules can be seen as this:\r\n\r\n      * Rule 1: Any live cell with fewer than two live neighbors dies, as if caused by under-population. Hence, change the value of cell to `-1`. This means the cell was live before but now dead.\r\n\r\n      * Rule 2: Any live cell with two or three live neighbors lives on to the next generation. Hence, no change in the value.\r\n\r\n      * Rule 3: Any live cell with more than three live neighbors dies, as if by over-population. Hence, change the value of cell to `-1`. This means the cell was live before but now dead. Note that we don't need to differentiate between the rule 1 and 3. The start and end values are the same. Hence, we use the same dummy value.\r\n\r\n      * Rule 4: Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Hence, change the value of cell to 2. This means the cell was dead before but now live.\r\n      \r\n4. Apply the new rules to the board.\r\n5. Since the new values give an indication of the old values of the cell, we accomplish the same results as approach 1 but without saving a copy.\r\n6. To get the `Board` in terms of binary values i.e. live(1) and dead(0), we iterate the board again and change the value of a cell to a `1` if its value currently is greater than `0` and change the value to a `0` if its current value is lesser than or equal to `0`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/L2N89N6s/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"L2N89N6s\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time Complexity: $$O(M \\times N)$$, where $$M$$ is the number of rows and $$N$$ is the number of columns of the `Board`.\r\n\r\n* Space Complexity: $$O(1)$$\r\n<br/>\r\n<br/>\r\n\r\n---\r\n\r\n#### Follow up 2 : Infinite Board\r\n\r\nSo far we've only addressed one of the follow-up questions for this problem statement. We saw how to perform the simulation according to the four rules in-place i.e. without using any additional memory. The problem statement also mentions another follow-up statement which is a bit open ended. We will look at two possible solutions to address it. Essentially, the second follow-up asks us to address the scalability aspect of the problem. What would happen if the board is infinitely large? Can we still use the same solution that we saw earlier or is there something else we will have to do different? If the board becomes infinitely large, there are multiple problems our current solution would run into:\r\n\r\n1. It would be computationally impossible to iterate a matrix that large.\r\n2. It would not be possible to store that big a matrix entirely in memory. We have huge memory capacities these days i.e. of the order of hundreds of GBs. However, it still wouldn't be enough to store such a large matrix in memory.\r\n3. We would be wasting a lot of space if such a huge board only has a few live cells and the rest of them are all dead. In such a case, we have an extremely sparse matrix and it wouldn't make sense to save the board as a \"matrix\".\r\n\r\nSuch open ended problems are better suited to design discussions during programming interviews and it's a good habit to take into consideration the scalability aspect of the problem since your interviewer might be interested in talking about such problems. The discussion section already does a great job at addressing this specific portion of the problem. We will briefly go over two different solutions that have been provided in the discussion sections, as they broadly cover two main scenarios of this problem.\r\n\r\nOne aspect of the problem is addressed by a great solution provided by [Stefan Pochmann](https://leetcode.com/stefanpochmann/). So as mentioned before, it's quite possible that we have a gigantic matrix with a very few live cells. In that case it would be stupidity to save the entire board as is.\r\n\r\n>If we have an extremely sparse matrix, it would make much more sense to actually save the location of only the live cells and then apply the 4 rules accordingly using only these live cells.\r\n\r\nLet's look at the sample code provided by [Stefan](https://leetcode.com/stefanpochmann/) for handling this aspect of the problem.\r\n\r\n<iframe src=\"https://leetcode.com/playground/Y6zSgxqW/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"Y6zSgxqW\"></iframe>\r\n\r\nEssentially, we obtain only the live cells from the entire board and then apply the different rules using only the live cells and finally we update the board in-place. The only problem with this solution would be when the entire board cannot fit into memory. If that is indeed the case, then we would have to approach this problem in a different way. For that scenario, we assume that the contents of the matrix are stored in a file, one row at a time.\r\n\r\n>In order for us to update a particular cell, we only have to look at its 8 neighbors which essentially lie in the row above and below it. So, for updating the cells of a row, we just need the row above and the row below. Thus, we read one row at a time from the file and at max we will have 3 rows in memory. We will keep discarding rows that are processed and then we will keep reading new rows from the file, one at a time.\r\n\r\n[@beagle's](https://leetcode.com/beagle/) solution revolves around this idea and you can refer to the code in the [discussion section](https://leetcode.com/problems/game-of-life/discuss/73217/Infinite-board-solution/201780) for the same. It's important to note that there is no single solution for solving this problem. Everybody might have a different viewpoint for addressing the scalability aspect of the problem and these two solutions just address the most basic problems with handling matrix based problems at scale.\r\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "game-of-life",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.785,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "832",
                "title": "First Missing Positive",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "41",
                    "questionFrontendId": "41",
                    "sessionId": "968792",
                    "questionTitle": "First Missing Positive",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/first-missing-positive/submit/",
                    "interpretUrl": "/problems/first-missing-positive/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int firstMissingPositive(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int firstMissingPositive(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def firstMissingPositive(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def firstMissingPositive(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint firstMissingPositive(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FirstMissingPositive(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar firstMissingPositive = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef first_missing_positive(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func firstMissingPositive(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func firstMissingPositive(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def firstMissingPositive(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun firstMissingPositive(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn first_missing_positive(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function firstMissingPositive($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function firstMissingPositive(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (first-missing-positive nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec first_missing_positive(Nums :: [integer()]) -> integer().\\nfirst_missing_positive(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec first_missing_positive(nums :: [integer]) :: integer\\n  def first_missing_positive(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,0]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"firstMissingPositive\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an unsorted integer array <code>nums</code>, return the smallest missing positive integer.</p>\n\n<p>You must implement an algorithm that runs in <code>O(n)</code> time and uses constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,2,0]\n<strong>Output:</strong> 3\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,4,-1,1]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [7,8,9,11,12]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
                        "We don't care about duplicates or non-positive integers",
                        "Remember that O(2n) = O(n)"
                    ],
                    "solution": {
                        "title": "First Missing Positive",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Index as a hash key.\n\n**Data clean up**\n\nFirst of all let's get rid of negative numbers and zeros since there is no\nneed of them. One could get rid of all numbers larger than `n` as well,\nsince the first missing positive is for sure smaller or equal to `n + 1`.\nThe case when the first missing positive is equal to `n + 1` will be\ntreated separately.  \n\n![max_first](../Figures/41/41_max_possible_first.png)\n\nWhat does it mean - to get rid of, if one has to keep $$\\mathcal{O}(N)$$\ntime complexity and hence could not pop unwanted elements out? \nLet's just replace all these by `1`s. \n\n![max_first](../Figures/41/41_replace.png)\n\nTo ensure that the first missing positive is not `1`, one has to verify \nthe presence of `1` before proceeding to this operation.\n\n**How to solve in-place**\n\nNow there we have an array which contains only positive numbers\nin a range from `1` to `n`,\nand the problem is to find a first missing positive in \n$$\\mathcal{O}(N)$$ time and constant space. \n\nThat would be simple, if one would be allowed to \nhave a hash-map `positive number -> its presence` for the array.\n\n![max_first](../Figures/41/41_missing.png)\n\nSort of \"dirty workaround\" solution would be to allocate a string `hash_str` \nwith `n` zeros, and use it as a sort of hash map by changing \n`hash_str[i]` to `1` each time one meets number `i` in the array. \n\n![max_first](../Figures/41/41_string.png)\n\nLet's not use this solution, but just take away a pretty nice idea _to use \nindex as a hash-key_ for a positive number.\n\nThe final idea is to _use index in nums as a hash key_ and _sign of \nthe element as a hash value_ which is presence detector.\n\n> For example, negative sign of `nums[2]` element means that \nnumber `2` is present in `nums`. The positive sign of `nums[3]` element\nmeans that number `3` is not present (missing) in `nums`.\n\nTo achieve that let's walk along the array (which after clean up contains \nonly positive numbers), check each element value `elem` \nand change the sign of element `nums[elem]` to negative to mark \nthat number `elem` is present in `nums`. Be careful \nwith duplicates and ensure that the sign was changed only once.\n\n![max_first](../Figures/41/41_true_solution.png)\n\n**Algorithm**\n\nNow everything is ready to write down the algorithm.\n\n* Check if `1` is present in the array. If not, you're done and `1`\nis the answer.\n* Replace negative numbers, zeros, and numbers larger than `n` by `1`s.\n* Walk along the array. Change the sign of a-th element if you meet number `a`. \nBe careful with duplicates : do sign change only once.\nUse index `0` to save an information about presence of number `n` since \nindex `n` is not available.\n* Walk again along the array. Return the index of the first positive element.\n* If `nums[0] > 0` return `n`.\n* If on the previous step you didn't find the positive element in nums, that means\nthat the answer is `n + 1`.\n\n**Implementation**\n\n!?!../Documents/41_LIS.json:1000,589!?!\n\n<iframe src=\"https://leetcode.com/playground/EWb7uHW9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EWb7uHW9\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since all we do here is four walks \nalong the array of length `N`.\n* Space complexity : $$\\mathcal{O}(1)$$ since this is a constant space solution.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "first-missing-positive",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.655,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "833",
                "title": "Longest Consecutive Sequence",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "128",
                    "questionFrontendId": "128",
                    "sessionId": "968792",
                    "questionTitle": "Longest Consecutive Sequence",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-consecutive-sequence/submit/",
                    "interpretUrl": "/problems/longest-consecutive-sequence/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int longestConsecutive(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int longestConsecutive(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def longestConsecutive(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def longestConsecutive(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint longestConsecutive(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LongestConsecutive(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar longestConsecutive = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef longest_consecutive(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func longestConsecutive(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestConsecutive(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def longestConsecutive(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun longestConsecutive(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn longest_consecutive(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function longestConsecutive($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function longestConsecutive(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (longest-consecutive nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec longest_consecutive(Nums :: [integer()]) -> integer().\\nlongest_consecutive(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec longest_consecutive(nums :: [integer]) :: integer\\n  def longest_consecutive(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[100,4,200,1,3,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"longestConsecutive\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an unsorted array of integers <code>nums</code>, return <em>the length of the longest consecutive elements sequence.</em></p>\n\n<p>You must write an algorithm that runs in&nbsp;<code>O(n)</code>&nbsp;time.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [100,4,200,1,3,2]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest consecutive elements sequence is <code>[1, 2, 3, 4]</code>. Therefore its length is 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,3,7,2,5,8,4,6,0,1]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Consecutive Sequence",
                        "content": "[TOC]\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nBecause a sequence could start at any number in `nums`, we can exhaust the\nentire search space by building as long a sequence as possible from every\nnumber.\n\n**Algorithm**\n\nThe brute force algorithm does not do anything clever - it just considers\neach number in `nums`, attempting to count as high as possible from that\nnumber using only numbers in `nums`. After it counts too high (i.e.\n`currentNum` refers to a number that `nums` does not contain), it records the\nlength of the sequence if it is larger than the current best. The algorithm\nis necessarily optimal because it explores every possibility.\n\n<iframe src=\"https://leetcode.com/playground/puxLaX5E/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"puxLaX5E\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$.\n\n    The outer loop runs exactly $$n$$ times, and because `currentNum`\n    increments by 1 during each iteration of the `while` loop, it runs in\n    $$O(n)$$ time. Then, on each iteration of the `while` loop, an $$O(n)$$\n    lookup in the array is performed. Therefore, this brute force algorithm\n    is really three nested $$O(n)$$ loops, which compound multiplicatively to a\n    cubic runtime.\n\n* Space complexity : $$O(1)$$.\n\n    The brute force algorithm only allocates a handful of integers, so it uses constant\n    additional space.\n\n<br />\n\n---\n\n#### Approach 2: Sorting\n\n**Intuition**\n\nIf we can iterate over the numbers in ascending order, then it will be\neasy to find sequences of consecutive numbers. To do so, we can sort the\narray.\n\n**Algorithm**\n\nBefore we do anything, we check for the base case input of the empty array.\nThe longest sequence in an empty array is, of course, 0, so we can simply\nreturn that. For all other cases, we sort `nums` and consider each number\nafter the first (because we need to compare each number to its previous\nnumber). If the current number and the previous are equal, then our current\nsequence is neither extended nor broken, so we simply move on to the next\nnumber. If they are unequal, then we must check whether the current number\nextends the sequence (i.e. `nums[i] == nums[i-1] + 1`). If it does, then we\nadd to our current count and continue. Otherwise, the sequence is broken, so\nwe record our current sequence and reset it to 1 (to include the number that\nbroke the sequence). It is possible that the last element of `nums` is part\nof the longest sequence, so we return the maximum of the current sequence and\nthe longest one.\n\n![Sorting Example](../Figures/128/sorting.png)\n{:align=\"center\"}\n\nHere, an example array is sorted before the linear scan identifies all consecutive sequences.\nThe longest sequence is colored in red.\n\n<iframe src=\"https://leetcode.com/playground/M9Rxw5qk/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"M9Rxw5qk\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(nlgn)$$.\n\n    The main `for` loop does constant work $$n$$ times, so the algorithm's time\n    complexity is dominated by the invocation of `sort`, which will run in\n    $$O(nlgn)$$ time for any sensible implementation.\n\n* Space complexity : $$O(1)$$ (or $$O(n)$$).\n\n    For the implementations provided here, the space complexity is constant\n    because we sort the input array in place. If we are not allowed to modify\n    the input array, we must spend linear space to store a sorted copy.\n\n<br />\n\n---\n\n#### Approach 3: HashSet and Intelligent Sequence Building\n\n**Intuition**\n\nIt turns out that our initial brute force solution was on the right track, but missing\na few optimizations necessary to reach $$O(n)$$ time complexity.\n\n**Algorithm**\n\nThis optimized algorithm contains only two changes from the brute force\napproach: the numbers are stored in a `HashSet` (or `Set`, in Python) to\nallow $$O(1)$$ lookups, and we only attempt to build sequences from numbers\nthat are not already part of a longer sequence. This is accomplished by first\nensuring that the number that would immediately precede the current number in\na sequence is not present, as that number would necessarily be part of a\nlonger sequence.\n\n<iframe src=\"https://leetcode.com/playground/KbUGJ84k/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"KbUGJ84k\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$.\n\n    Although the time complexity appears to be quadratic due to the `while`\n    loop nested within the `for` loop, closer inspection reveals it to be\n    linear. Because the `while` loop is reached only when `currentNum` marks\n    the beginning of a sequence (i.e. `currentNum-1` is not present in\n    `nums`), the `while` loop can only run for $$n$$ iterations throughout the\n    entire runtime of the algorithm. This means that despite looking like\n    $$O(n \\cdot n)$$ complexity, the nested loops actually run in $$O(n + n) = O(n)$$\n    time. All other computations occur in constant time, so the overall\n    runtime is linear.\n\n* Space complexity : $$O(n)$$.\n\n    In order to set up $$O(1)$$ containment lookups, we allocate linear space\n    for a hash table to store the $$O(n)$$ numbers in `nums`. Other than that,\n    the space complexity is identical to that of the brute force solution.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "longest-consecutive-sequence",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.574,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "834",
                "title": "Find the Duplicate Number",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "287",
                    "questionFrontendId": "287",
                    "sessionId": "968792",
                    "questionTitle": "Find the Duplicate Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-the-duplicate-number/submit/",
                    "interpretUrl": "/problems/find-the-duplicate-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findDuplicate(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findDuplicate(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findDuplicate(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findDuplicate(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findDuplicate(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindDuplicate(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar findDuplicate = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef find_duplicate(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findDuplicate(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findDuplicate(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findDuplicate(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findDuplicate(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_duplicate(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function findDuplicate($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findDuplicate(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-duplicate nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_duplicate(Nums :: [integer()]) -> integer().\\nfind_duplicate(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_duplicate(nums :: [integer]) :: integer\\n  def find_duplicate(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,3,4,2,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findDuplicate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>nums</code> containing&nbsp;<code>n + 1</code> integers where each integer is in the range <code>[1, n]</code> inclusive.</p>\n\n<p>There is only <strong>one repeated number</strong> in <code>nums</code>, return <em>this&nbsp;repeated&nbsp;number</em>.</p>\n\n<p>You must solve the problem <strong>without</strong> modifying the array <code>nums</code>&nbsp;and uses only constant extra space.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,3,4,2,2]\n<strong>Output:</strong> 2\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [3,1,3,4,2]\n<strong>Output:</strong> 3\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1]\n<strong>Output:</strong> 1\n</pre><p><strong>Example 4:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 1\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums.length == n + 1</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li>All the integers in <code>nums</code> appear only <strong>once</strong> except for <strong>precisely one integer</strong> which appears <strong>two or more</strong> times.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><b>Follow up:</b></p>\n\n<ul>\n\t<li>How can we prove that at least one duplicate number must exist in <code>nums</code>?</li>\n\t<li>Can you solve the problem in linear runtime complexity?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find the Duplicate Number",
                        "content": "[TOC]\n\n#### Overview\n\nFinding the Duplicate Number is a classic problem, and as such there are many different ways to approach it; a total of 7 approaches are presented here. The first 4 approaches involve rearranging or modifying elements of the array, and hence do not meet the constraints specified in the problem statement. However, they are included here since they are more feasible to come up with as the first approach in an interview setting.  Since each approach is independent of the other approaches, they can be read in any order.\n\n#### Proof ####\n\nProving that at least one duplicate must exist in $$nums$$ is an application of the [pigeonhole principle](https://en.wikipedia.org/wiki/Pigeonhole_principle). Here, each number in $$nums$$ is a \"pigeon\" and each distinct number that can appear in $$nums$$ is a \"pigeonhole.\" Because there are $$n+1$$ numbers and $$n$$ distinct possible numbers, the pigeonhole principle implies that if you were to put each of the $$n + 1$$ pigeons into $$n$$ pigeonholes, at least one of the pigeonholes would have 2 or more pigeons. \n\n#### Approach 1: Sort\n\n**Note:** This approach modifies individual elements and does not use constant space, and hence does not meet the problem constraints. However, it utilizes a fundamental concept that can help solve similar problems.\n\n**Intuition**\n\nIn an unsorted array, duplicate elements may be scattered across the array. However, in a sorted array, duplicate numbers will be next to each other.\n\n**Algorithm**\n\n1) Sort the input array ($$nums$$).\n\n2) Iterate through the array, comparing the current number to the previous number (i.e. compare $$nums[i]$$ to $$nums[i - 1]$$ where $$i > 0$$).\n\n3) Return the first number that is equal to its predecessor.\n\n<iframe src=\"https://leetcode.com/playground/64RRgZHh/shared\" frameBorder=\"0\" width=\"100%\" height=\"242\" name=\"64RRgZHh\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n \\log n)$$\n\n    Sorting takes $$O(n \\log n)$$ time. This is followed by a linear scan, resulting in a total of $$O(n \\log n)$$ + $$O(n)$$ = $$O(n \\log n)$$ time.\n\n* Space Complexity: $$O(\\log n)$$ or $$O(n)$$\n\n    The space complexity of the sorting algorithm depends on the implementation of each programming language:\n    * In Java, Arrays.sort() for primitives is implemented using a variant of the Quick Sort algorithm, which has a space complexity of $$O(\\log n)$$\n    * In C++, the sort() function provided by STL uses a hybrid of Quick Sort, Heap Sort and Insertion Sort, with a worst case space complexity of $$O(\\log n)$$\n    * In Python, the sort() function is implemented using the Timsort algorithm, which has a worst-case space complexity of $$O(n)$$\n\n---\n\n#### Approach 2: Set \n\n**Note:** This approach does not use constant space, and hence does not meet the problem constraints. However, it utilizes a fundamental concept that can help solve similar problems.\n\n**Intuition**\n\nAs we traverse the array, we need a way to \"remember\" values that we've seen. If we come across a number that we've seen before, we've found the duplicate.  An efficient way to record the seen values is by adding each number to a set as we iterate over the $$nums$$ array.\n\n**Algorithm**\n\n1) In order to achieve linear time complexity, we need to be able to insert elements into a data structure and look them up in constant time. A HashSet/unordered_set is well suited for this purpose. Initialize an empty hashset, $$seen$$. \n\n2) Iterate over the array and first check if the current element exists in the hashset ($$seen$$).\n\n   * If it does exist in the hashset, that number is the duplicate and can be returned right away.\n\n3) Otherwise, insert the current element into $$seen$$, move to the next element in the array and repeat step 2.\n\n\n<iframe src=\"https://leetcode.com/playground/PteBv279/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"PteBv279\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n)$$\n\n    HashSet insertions and lookups have amortized constant time complexities. Hence, this algorithm requires linear time, since it consists of a single for loop that iterates over each element, looking up the element and inserting it into the set at most once.\n\n* Space Complexity: $$O(n)$$\n\n    We use a set that may need to store at most $$n$$ elements, leading to a linear space complexity of $$O(n)$$.\n\n---\n\n#### Approach 3: Negative Marking\n\n**Note:** This approach temporarily modifies individual elements and thus does not satisfy the problem constraints. However, this approach is intuitive and utilizes a technique that is useful to know. Furthermore, the underlying concept lends itself to solving similar problems.  As such, you can further practice this technique on other problems such as [41. First Missing Positive](https://leetcode.com/problems/first-missing-positive/).\n\n**Intuition**\n\nThere are $$n + 1$$ positive numbers in the array ($$nums$$) (all in the range $$[1, n]$$). Since the array only contains positive integers, we can track each number ($$num$$) that has been seen before by flipping the sign of the number located at index $$|num|$$, where $$||$$ denotes absolute value. \n\nFor example, if the input array is $$[1, 3, 3, 2]$$, then for $$1$$, flip the number at index $$1$$, making the array $$[1,-3,3,2]$$. Next, for $$-3$$ flip the number at index $$3$$, making the array $$[1,-3,3,-2]$$. Finally, when we reach the second $$3$$, we'll notice that $$nums[3]$$ is already negative, indicating that $$3$$ has been seen before and hence is the duplicate number.\n\n**Algorithm**\n\n1) Iterate over the array, evaluating each element (let's call the current element $$cur$$).\n\n2) Since we use negative marking, we must ensure that the current element ($$cur$$) is positive (i.e. if $$cur$$ is negative, then use its absolute value).\n\n3) Check if $$nums[cur]$$ is negative.\n\n    * If it is, then we have already performed this operation for the same number, and hence $$cur$$ is the duplicate number. Store $$cur$$ as the duplicate and exit the loop.\n\n    * Otherwise, flip the sign of $$nums[cur]$$ (i.e. make it negative). Move to the next element and repeat step 3.\n\n4) Once we've identified the duplicate, we could just return the duplicate number.  However, even though we were not able to meet the problem constraints, we can show that we are mindful of the constraints by restoring the array.  This is done by changing all negative numbers to positive.\n\n<iframe src=\"https://leetcode.com/playground/jeYsWN8x/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"jeYsWN8x\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n)$$\n\n    Each element is visited at most twice (once in the first loop to find the duplicate and once in the second loop to restore the numbers).\n\n* Space Complexity: $$O(1)$$\n\n    All manipulation is done in place, so no additional storage (barring one variable) is needed.\n\n\n---\n\n#### Approach 4.1: Array as HashMap (Recursion)\n\n**Note:** Approaches 4.1 and 4.2 modify individual elements, and hence do not meet the problem constraints. However, they utilize an insightful concept that can help with similar problems.\n\n**Intuition**\n\nUse the Array as a HashMap --  map each number to its equivalent index in the array. For instance, map (and store) the number 5 to index 5 (i.e. $$nums[5] = 5$$). Since there are $$(n + 1)$$ positions/indexes in the input array, and the numbers range from $$1$$ to $$n$$, at least one index will have more than one number (due to the pigeonhole principle).\n\nSince all numbers are in the range $$[1,n]$$, no number will be mapped to index 0. So let's start with the number at index 0 since it **must** be out of place. Say that the number at index 0 is $$first$$. Then $$first$$ needs to be stored at $$nums[first]$$. But there's some other number at $$nums[first]$$ that needs to be stored at its respective location (and so on). \n\nIf $$nums[first]$$ is the same as $$first$$, then we have found a duplicate. Otherwise, let's swap the numbers located at index $$0$$ and at index $$first$$, and repeat this process with the new number at index $$0$$.\n\nAs we repeatedly apply this mapping, the duplicate number will, on its first instance, be mapped/stored correctly at its equivalent index, and then on its second occurrence, we will attempt to store it there again. When a number already exists at its correct index, and we attempt to store another instance of the same number there again, then we know that's the duplicate.\n\n**Algorithm**\n\n1) Start with the first index (index $$0$$) of the array. Call $$store(nums, 0)$$ to store the number $$0$$ at index $$0$$.\n\n    * Note that because all input numbers are in the range $$[1, n]$$, no number will ever be mapped to index $$0$$. Hence, index $$0$$ can hold any dummy value, including $$0$$.\n\n2) $$store(nums, cur)$$ uses the current number, $$cur$$, as the target index. It first backs up the number that's stored at the equivalent position ($$nxt = nums[cur]$$), and then overwrites that index with $$cur$$.\n\n3) Now we need to deal with the number that was backed up (i.e. $$nxt$$). Recursively call $$store$$ with this number as input (i.e. $$store(nums, nxt)$$) so it too can be placed at its equivalent index. \n\n4) Repeat steps 2 and 3. At some point, $$nums[cur]$$ will already contain the number $$cur$$, in which case we have found the duplicate number.\n\nTo illustrate the algorithm, let's consider an example $$[3,3,5,4,1,3]$$:\n\n* $$store(nums, 0)$$ \n  * Here $$cur = 0$$ and $$nums[cur] = 3$$\n  * Back up the number 3 (that's at index 0)\n  * Store 0 at index 0. The array is now: $$[\\underline0,3,5,4,1,3]$$ \n  * Recursively call $$store(nums, 3)$$\n\n* $$store(nums, 3)$$ \n  * Back up the number 4 (at index 3)\n  * Store 3 at index 3. The array is now: $$[0,3,5,\\underline3,1,3]$$ \n  * Now call $$store(nums, 4)$$\n\n* $$store(nums, 4)$$ \n  * Back up the number 1 (at index 4)\n  * Store 4 at index 4. The array is now $$[0,3,5,3,\\underline4,3]$$\n  * Now call $$store(nums, 1)$$\n\n* $$store(nums, 1)$$ \n  * Back up the number 3 (at index 1)\n  * Store 1 at index 1. The array is now $$[0,\\underline1,5,3,4,3]$$\n  * Now call $$store(nums, 3)$$\n\n* $$store(nums, 3)$$ \n  * Since 3 already exists at index 3 in the array $$[0,1,5,\\underline3,4,3]$$, and we have another instance of 3 that we are trying to store there, clearly that's the duplicate number. Return 3 as the duplicate, and stop execution.\n\n<iframe src=\"https://leetcode.com/playground/hux4uHMU/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"hux4uHMU\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n)$$\n\n    The function ($$store$$) makes a single recursive call at every instance. Each index is visited at most once, resulting in $$O(n)$$ time complexity.\n\n* Space Complexity: $$O(n)$$\n\n    Since this is a recursive function with up to $$n$$ self-invocations (i.e. depth of the recursive function = $$n$$), the space complexity is $$O(n)$$ as there can be up to $$n$$ function calls in memory at some point. Note that due to the recursive nature of the solution, there is some additional overhead on each invocation (such as the function variables and a return function pointer that are stored on the system executable stack).\n\n---\n\n#### Approach 4.2: Array as HashMap (Iterative)\n\n**Intuition**\n\nThe core intuition behind this approach is similar to that of Approach 4.1. Here as well, we start with index 0.  Since all numbers are in the range $$[1, n]$$, they will be mapped to indices $$1$$ through $$n$$ inclusive, and hence no number will be mapped to index $$0$$. \n\nThe key idea is to always map **the number at index 0** to its equivalent index. While in the recursive approach, we directly jump to the next index, in this approach, we will bring the number from the next index to index $$0$$ and continue from there (effectively performing a swap).\n\n**Algorithm**\n\n1) At every iteration, compare the number at index 0 (i.e. $$nums[0]$$) to the number at index $$nums[0]$$ (i.e. $$nums[nums[0]]$$).\n\n2) Use index $$0$$ as the source of all swapping because we know the number $$0$$ is not in the array. \n\n3) Take each number at index $$0$$ (let's call it $$first$$) and swap it with the number at its equivalent index in the array (i.e. the number at $$nums[first]$$).\n\n4) Repeat step 3 until $$first$$ is the same as $$nums[first]$$ (e.g. if the duplicate number is $$3$$, then keep swapping $$nums[0]$$ and nums[nums[0]] until both $$nums[3] == 3$$ and $$nums[0] == 3$$).\n\nTo illustrate the algorithm, let's consider an example $$[3,3,5,4,1,3]$$:\n\n* $$[\\underline3,3,5,\\underline4,1,3]$$   // Compare nums[0] to nums[nums[0]] (i.e. nums[0] to nums[3]). $$3$$ != $$4$$. Swap them. Now the first $$3$$ will be swapped into its correct position, and position 0 has $$4$$.\n* $$[\\underline4,3,5,3,\\underline1,3]$$  // Compare nums[0] to nums[4]. 4 != 1. Not equal, so swap again. Now 4 is in its correct position.\n* $$[\\underline1,\\underline3,5,3,4,3]$$ // Compare nums[0] with nums[1]. Not equal, swap.\n* $$[\\underline3,1,5,\\underline3,4,3]$$ // Now nums[0] == nums[3] (both are 3). That's it! 3 is in both positions 0 and position 3, so it's the duplicate.\n\n<iframe src=\"https://leetcode.com/playground/ncLERpdz/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"ncLERpdz\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n)$$\n\n    Each number needs to be swapped at most once before it is placed in its desired position.\n\n* Space Complexity: $$O(1)$$\n\n    No additional storage is needed (barring the temporary variables used for swapping).\n\n---\n\n#### Approach 5: Binary Search\n\n\n**Intuition**\n\nConsider an array that has $$n$$ distinct numbers in the range $$[1,n]$$. For example: $$[1,2,3,4,5]$$. If we pick any one of these 5 numbers and count how many numbers are less than or equal to it, the answer will be equal to that number. So in $$[1,2,3,4,5]$$, if you pick the number $$4$$, there's exactly 4 numbers that are less than or equal to $$4$$. If you pick $$3$$, there's exactly 3 numbers that are less than or equal to $$3$$, and so on. However, when you have duplicates in the array, this count will exceed the number at some point. For example: in $$[4,3,4,5,2,4,1]$$, $$3$$ has 3 numbers less than or equal to it. However, the duplicate number will have a count of numbers less than or equal to itself, that is greater than itself (in this example, $$4$$, which is the duplicate, has 6 numbers that are less than or equal to it). Hence, the smallest number that satisfies this property is the duplicate number.\n\nConsider an example: $$[4,6,4,2,1,4,3,5]$$. This has $$n + 1$$ elements where $$n$$ = $$7$$. Take each number from $$1$$ to $$7$$ and count how many numbers are less than or equal to it. In our example, $$count(1,2,3,4,5,6,7)$$ = $$(1,2,3,6,7,8,8)$$. If we performed a linear scan, we would find that the number $$4$$ is the first number to have its counts exceed the actual number (i.e. 6 > 4) - hence $$4$$ is the duplicate. A linear scan based approach would require an overall $$O(n^2)$$ time complexity in the worst case, since we'd need to iterate over each of the $$n$$ numbers (requiring $$O(n)$$ time), and then compare it to every element to generate a count of equal or lower numbers (requiring $$O(n)$$ time as well - nested inside the other $$O(n)$$ loop). Fortunately, $$count$$ is monotonic (it's values are always in non-decreasing order), and hence it is an excellent candidate for binary search.\n\nIn the binary search approach, instead of doing a linear scan from $$1$$ to $$n$$, we can apply a binary search with a goal of finding the smallest number that satisfies the aforementioned property. We start with a search space of $$[1,n]$$ that has a midpoint $$mid$$. If $$mid$$ satisfies the property, we narrow our search space to the left half $$[1, mid - 1]$$ and continue searching, otherwise, we narrow our search space to the right half $$[mid + 1, n]$$.\n\n> To observe the monotonicity of count, consider the evaluation: \"For the given number, the count of numbers less than or equal to it, exceeds the number itself\". Going back to our example, we had derived: $$count(1,2,3,4,5,6,7)$$ = $$(1,2,3,6,7,8,8)$$. If we now take the first number and apply said evaluation, we get $$false$$ (since $$count(1) == 1$$, which is not greater than 1). Applying this evaluation to all counts, we get $$(false, false, false, true, true, true, true)$$. Observe how this remains $$false$$ in the beginning, and switches to $$true$$ for the number 4 (i.e. the duplicate), after which point it remains $$true$$ for all further numbers. Formally, the count for each number must include itself plus the count of all numbers less than itself. Since a number cannot have a negative count, each number, N, must have a count greater than or equal to the count of N-1. Since $$count(N) >= count(N-1)$$, $$count$$ must be monotonically increasing.\n\n**Algorithm**\n\n1) To recap, we need to find the smallest number such that the count of numbers less than or equal to it is greater than the number itself.\n\n2) Apply binary search and start with the entire range of numbers $$[1,n]$$. \n    * Note: Binary search will be applied to the numbers in the range [1,n] (inclusive) regardless of the contents of the array. So even if a number does not exist in the array, we will still evaluate it. For example, if the array is $$[1,2,4,2,5]$$, the algorithm will first evaluate the number 3 even though that number does not exist in the array.\n\n3) Find the mid-point ($$cur$$). \n\n4) For $$cur$$, count how many numbers in the input array are less than or equal to it.\n\n    * If that number strictly exceeds $$cur$$, then store that as the answer and continue to look for a smaller number that satisfies the condition by narrowing the window to the left $$[low, cur - 1]$$. \n    * Otherwise, narrow down the window to the right $$[cur + 1, high]$$.\n\n5) Repeat step 3 until we've exhausted the search range (i.e. until $$low$$ > $$high$$) and return the lowest value that met the aforementioned condition.\n\n<iframe src=\"https://leetcode.com/playground/AJkahdx2/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"AJkahdx2\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n \\log n)$$\n\n    The outer loop uses binary search to identify a candidate - this runs in $$O(\\log n)$$ time. For each candidate, we iterate over the entire array which takes $$O(n)$$ time, resulting in a total of $$O(n \\log n)$$ time.\n\n* Space Complexity: $$O(1)$$\n\n    No additional storage is needed (barring a few variables), resulting in a constant $$O(1)$$ space complexity.\n\n---\n\n#### Approach 6: Sum of Set Bits\n\n\n**Intuition**\n\nConsider an example $$[3,1,3,2,4]$$. This has $$n + 1$$ elements where $$n$$ = $$4$$. If we did not have the duplicate, and instead had every number from $$1$$ through $$4$$, this base array would have been $$[1,2,3,4]$$. Let's look at each of these numbers in binary and count the number of times 1 is seen at each bit position (let's call that $$base\\_count$$). Since the largest number is $$4$$ ($$100_2$$ in binary notation), we need to count this for the 3 least significant bits:\n\n* Initially, $$base\\_count$$ = $$[0,0,0]$$\n* After 1 (in binary, $$001_2$$), $$base\\_count$$ = $$[0,0,1]$$\n* After 2 (in binary, $$010_2$$), $$base\\_count$$ = $$[0,1,1]$$\n* After 3 (in binary, $$011_2$$), $$base\\_count$$ = $$[0,2,2]$$\n* After 4 (in binary, $$100_2$$), $$base\\_count$$ = $$[1,2,2]$$\n\nNow that we have the base count established, let's go through the example array $$[3,1,3,2,4]$$ and calculate the same (sum of 1's set across all bit positions) in this array. Let's call it $$nums\\_count$$:\n\n* Initially, $$nums\\_count$$ = $$[0,0,0]$$\n* After 3 (in binary, $$011_2$$), $$nums\\_count$$ = $$[0,1,1]$$\n* After 1 (in binary, $$001_2$$), $$nums\\_count$$ = $$[0,1,2]$$\n* After 3 (in binary, $$011_2$$), $$nums\\_count$$ = $$[0,2,3]$$\n* After 2 (in binary, $$010_2$$), $$nums\\_count$$ = $$[0,3,3]$$\n* After 4 (in binary, $$100_2$$), $$nums\\_count$$ = $$[1,3,3]$$\n\nComparing $$nums\\_count$$ to $$base\\_count$$, we see that the bit count difference is $$[1,3,3]$$ - $$[1,2,2]$$ = $$[0,1,1]$$. This is the equivalent of the number 3, which is the duplicate. By iterating over each bit, and comparing the base to the current, we were able to construct the duplicate number bit by bit. \n\nSo how does this work if the duplicate number appears more than twice? In that case, think of it as simply replacing the missing numbers with the duplicate number, effectively reducing the count of 1's corresponding to the missing numbers and adding 1's associated with the duplicate number - so the algorithm remains intact, since the count of 1's will be even more pronounced in favor of the duplicate number.\n\nTo illustrate this, consider the same array but with the duplicate occurring more than twice: $$[3,1,3,3,3]$$ (we've replaced both $$2$$ and $$4$$ with $$3$$). $$base\\_count$$ will remain $$[1,2,2]$$ because $$n$$ still equals $$4$$. However, $$nums\\_count$$ becomes $$[0,4,5]$$. Comparing $$nums\\_count$$ to $$base\\_count$$, we see that the bit count difference is $$[0,4,5]$$ - $$[1,2,2]$$ = $$[-1,2,3]$$. If we consider just the positive counts (seen at positions 0 and 1), this, again is the equivalent of the number $$3$$, which is the duplicate number.\n\nA good question to ask here is \"Why does only including the bits with a positive count result in the duplicate number?\" To understand this, let's take a step back and reconsider the example array $$[3,1,3,2,4]$$. However, for this example ignore the binary representation of each number. Pretend $$base\\_count$$ is an array where $$base\\_count[num]$$ contains the frequency of number $$num$$. So for the range $$[1, 4]$$, $$base\\_count$$ is $$[1, 1, 1, 1]$$ and $$nums\\_count$$ is the count of each number ($$[1, 1, 2, 1]$$). Then the difference is $$[1, 1, 2, 1] - [1, 1, 1, 1] = [0, 0, 1, 0]$$. The third index is the only index to have a positive count and thus 3 is the duplicate number.\n\nTo meet the constant space requirement, we will consider one bit at a time and count how many times that bit is set in the numbers [1, 2, ..., n], this will be ($$base\\_count$$) for the bit. Then we will count how many times the bit is set in nums, this will be ($$nums\\_count$$) for the bit. If $$nums\\_count - base\\_count > 0$$ then this bit must be set in the duplicate number.\n\n> A key observation is that if the array had $$n$$ elements instead of $$n + 1$$ (where each element is in the range $$[1,n]$$), this solution would not work. For example, if the input array was $$[1,3,3]$$, then $$base\\_count$$ = $$[2,2]$$ and $$nums\\_count$$ = $$[3,2]$$, resulting in a difference of $$[1,0]$$ and hence $$2$$ as the reconstructed number. The extra number ensures that bit counts at the right positions are always added and never taken away from the $$base\\_count$$.\n\n**Algorithm**\n\nSince this involves bit manipulation, let's do a brief recap:\n* $$(1 << m)$$ accesses the $$m^{th}$$ bit. For example, $$1 = 0001_2$$ and $$(1 << 3) = 8 = 1000_2$$ notice 1 was bit shifted to the left 3 places in the binary representation.\n* To check if the $$m^{th}$$ bit is set to $$1$$ in a number $$num$$, we can use $$if(((1 << m) & num) > 0)$$. For example, (1 << 2) & 12 = 4 & 12 = $$0100_2$$ & $$1100_2$$ = $$0100_2$$ = 4 which is nonzero, this tells us that the $$3^{rd}$$ bit from the right in the number 12 is set to 1.  Notice only bits that were set in both 4 and 12 remain after performing the bitwise AND operation.  \n\nNow for the algorithm:\n\n1) Initialize the answer ($$duplicate$$) to $$0$$\n\n2) Iterate over each bit from $$0$$ to $$bits$$ where $$bits$$ is the [bit-length](https://en.wikipedia.org/wiki/Bit-length) of $$n$$.\n\n    * For each bit, iterate over every number from $$1$$ through $$n$$ and count how many times the bit is set to $$1$$. This will be the base count ($$base\\_count$$).\n\n    * For each bit, iterate over every number in input array and count how many times the bit is set to $$1$$. This will be the current count ($$nums\\_count$$).\n\n    * If $$nums\\_count$$ > $$base\\_count$$, then set the current bit to $$1$$ in $$duplicate$$\n\n3) After checking each bit to see if it should be set in duplicate, and setting the bits with $$nums\\_count > base\\_count$$ to $$1$$, return the duplicate number.\n\n<iframe src=\"https://leetcode.com/playground/Tdc3NdkQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Tdc3NdkQ\"></iframe>\n\n**Complexity Analysis**\n\nLet $$n$$ be the length of $$nums$$ and $$m$$ be the bit-length of $$n$$.\n\n* Time Complexity: $$O(n \\log n)$$\n\n    The outer loop runs a maximum of $$m$$ times (once for each bit in $$n$$). The inner loop goes over all $$n$$ elements in $$nums$$, resulting in a total time complexity of $$O(m \\cdot n)$$.\n\t\n    It is a common misconception to treat $$m$$ as a constant because it is small and thus consider this to be a linear time complexity algorithm.  Setting the problem constraints aside, the value of $$m$$ depends on $$n$$.  More specifically, $$m$$ is the bit-length of $$n$$ which is approximately equal to $$log_2(n)$$.  Thus this algorithm has linearithmic time complexity.\n\n* Space Complexity: $$O(1)$$\n\n    No additional storage is needed (barring a few variables), resulting in a constant $$O(1)$$ space complexity.\n\n\n---\n\n#### Approach 7: Floyd's Tortoise and Hare (Cycle Detection)\n\n**Intuition**\n\nThe idea is to reduce the problem to\n[Linked List Cycle II](https://leetcode.com/problems/linked-list-cycle-ii/solution/):\n\n> Given a linked list, return the node where the cycle begins.\n\nFirst of all, where does the cycle come from?\nLet's use the function `f(x) = nums[x]` to construct the sequence:\n`x, nums[x], nums[nums[x]], nums[nums[nums[x]]], ...`.\n\nEach new element in the sequence is an element in nums at the index \nof the _previous_ element. \n\nIf one starts from `x = nums[0]`, such a sequence will produce a linked list \nwith a cycle. \n\n> The cycle appears because `nums` contains duplicates. The duplicate node \nis a cycle entrance.\n\nHere is how it works:\n\n![pic](../Figures/287/simple_cycle.png)  \n\nThe example above is simple because the loop is small. Here is a\nmore interesting example \n(special thanks to @[sushant_chaudhari](https://leetcode.com/sushant_chaudhari)) \n\n![pic](../Figures/287/complex_cycle.png)\n\nNow the problem is to find the entrance of the cycle.\n\n**Algorithm**\n\n[Floyd's algorithm](https://en.wikipedia.org/wiki/Cycle_detection#Tortoise_and_hare) \nconsists of two phases and uses two pointers, usually called `tortoise` and `hare`. \n\n**In phase 1**, `hare = nums[nums[hare]]` is twice as fast as \n`tortoise = nums[tortoise]`. Since the hare goes fast, \nit would be the first to enter the cycle and run around the cycle. \nAt some point, the tortoise enters the cycle as well, and since \nit's moving slower the hare catches up to the tortoise at some _intersection_ point.\nNow phase 1 is over, and the tortoise has lost.\n\n> Note that the intersection point is not the cycle entrance in the general case.  \n\n![pic](../Figures/287/first_intersection.png)\n\nTo compute the intersection point, let's note that the hare has \ntraversed twice as many nodes as the tortoise, \n_i.e._ $$2d(\\text{tortoise}) = d(\\text{hare})$$, implying:\n\n$$2(F + a) = F + nC + a$$, where $$n$$ is some integer. \n\n> Hence the coordinate of the intersection point is $$F + a = nC$$.\n\n**In phase 2**, we give the tortoise a second chance by slowing down the hare,\nso that it now moves at the speed of tortoise: `tortoise = nums[tortoise]`, \n`hare = nums[hare]`. The tortoise is back at the starting \nposition, and the hare starts from the intersection point. \n\n![pic](../Figures/287/phase2.png)\n\nLet's show that this time they meet at the cycle entrance after $$F$$ steps.\n\n- The tortoise started at zero, so its position after $$F$$ steps is $$F$$.\n\n- The hare started at the intersection point $$F + a = nC$$, \nso its position after F steps is \n$$nC + F$$, that is the same point as $$F$$.\n \n- So the tortoise and the (slowed down) hare will meet at the entrance of the cycle.\n\n!?!../Documents/287_LIS.json:1000,362!?!\n\n<iframe src=\"https://leetcode.com/playground/KidcckYG/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"KidcckYG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(n)$$\n\n    \n\n* Space Complexity: $$O(1)$$\n\n\nFor a detailed analysis, please refer to [Linked List Cycle II](https://leetcode.com/problems/linked-list-cycle-ii/solution/#approach-2-floyds-tortoise-and-hare-accepted).\n    \n\n---",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "find-the-duplicate-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.502,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "835",
                "title": "Longest Substring with At Most K Distinct Characters",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "340",
                    "questionFrontendId": "340",
                    "sessionId": "968792",
                    "questionTitle": "Longest Substring with At Most K Distinct Characters",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-substring-with-at-most-k-distinct-characters/submit/",
                    "interpretUrl": "/problems/longest-substring-with-at-most-k-distinct-characters/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int lengthOfLongestSubstringKDistinct(string s, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int lengthOfLongestSubstringKDistinct(String s, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def lengthOfLongestSubstringKDistinct(self, s, k):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def lengthOfLongestSubstringKDistinct(self, s: str, k: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint lengthOfLongestSubstringKDistinct(char * s, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LengthOfLongestSubstringKDistinct(string s, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar lengthOfLongestSubstringKDistinct = function(s, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {Integer} k\\n# @return {Integer}\\ndef length_of_longest_substring_k_distinct(s, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func lengthOfLongestSubstringKDistinct(_ s: String, _ k: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func lengthOfLongestSubstringKDistinct(s string, k int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def lengthOfLongestSubstringKDistinct(s: String, k: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun lengthOfLongestSubstringKDistinct(s: String, k: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn length_of_longest_substring_k_distinct(s: String, k: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function lengthOfLongestSubstringKDistinct($s, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function lengthOfLongestSubstringKDistinct(s: string, k: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (length-of-longest-substring-k-distinct s k)\\n  (-> string? exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec length_of_longest_substring_k_distinct(S :: unicode:unicode_binary(), K :: integer()) -> integer().\\nlength_of_longest_substring_k_distinct(S, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec length_of_longest_substring_k_distinct(s :: String.t, k :: integer) :: integer\\n  def length_of_longest_substring_k_distinct(s, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"eceba\"\n2",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"lengthOfLongestSubstringKDistinct\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>that contains at most</em> <code>k</code> <em><strong>distinct</strong> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;eceba&quot;, k = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The substring is &quot;ece&quot; with length 3.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, k = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The substring is &quot;aa&quot; with length 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= 50</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Substring with at Most K Distinct Characters",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/494864997\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Sliding Window + Hashmap.\n**Intuition**\n\nWe could take some inspiration from a simpler problem called\n[longest substring with at most two distinct\ncharacters](https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/).\n\nTo solve the problem in one pass\nlet's use here _sliding window_ approach with two set pointers\n`left` and `right` serving as the window boundaries.\n\nThe idea is to set both pointers in the position `0` and\nthen move `right` pointer to the right while the\nwindow contains not more than `k` distinct characters.\nIf at some point we've got `k + 1` distinct characters,\nlet's move `left` pointer to keep not more than `k + 1`\ndistinct characters in the window.\n\n![compute](../Figures/340/substring.png)\n\nBasically that's the algorithm : to move sliding window along the string,\nto keep not more than `k` distinct characters in the window, and\nto update max substring length at each step.\n\n> There is just one more question to reply -\nhow to move the left pointer\nto keep only `k` distinct characters in the string?\n\nLet's use for this purpose hashmap containing all characters\nin the sliding window as keys and their rightmost positions\nas values. At each moment, this hashmap could contain\nnot more than `k + 1` elements.\n\n![compute](../Figures/340/hash.png)\n\nFor example, using this hashmap one knows that the rightmost position\nof character `O` in `\"LOVELEE\"` window is `1` and so one has\nto move `left` pointer in the position `1 + 1 = 2` to\nexclude the character `O` from the sliding window.\n\n**Algorithm**\n\nNow one could write down the algortihm.\n\n- Return `0` if the string is empty or `k` is equal to zero.\n- Set both set pointers in the beginning\n of the string `left = 0` and `right = 0` and init max substring\n length `max_len = 1`.\n- While `right` pointer is less than `N`:\n    * Add the current character `s[right]` in the hashmap and\n    move `right` pointer to the right.\n    * If hashmap contains `k + 1` distinct characters,\n    remove the leftmost character from the hashmap\n    and move the `left` pointer so that sliding window contains\n    again `k` distinct characters only.\n    * Update `max_len`.\n\n**Implementation**\n\n!?!../Documents/340_LIS.json:1000,440!?!\n\n<iframe src=\"https://leetcode.com/playground/8Airbd8t/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"8Airbd8t\"></iframe>\n\n**Complexity Analysis**\n\n> Do we have here the best possible time complexity\n$$\\mathcal{O}(N)$$\nas it was for more simple [problem with at most two distinct\ncharacters](https://leetcode.com/articles/longest-substring-with-at-most-two-distinct-charac/)?\n\nFor the best case when input string contains not more than\n`k` distinct characters the answer is _yes_.\nIt's the only one pass along the string with\n`N` characters and the time complexity is $$\\mathcal{O}(N)$$.\n\nFor the worst case when the input string contains\n`n` distinct characters, the answer is _no_. In that case at each\nstep one uses $$\\mathcal{O}(k)$$ time to find a minimum value\nin the hashmap with `k` elements and so the overall time\ncomplexity is $$\\mathcal{O}(N k)$$.\n\n* Time complexity : $$\\mathcal{O}(N)$$ in the best case\nof `k` distinct characters in the string and\n$$\\mathcal{O}(N k)$$ in the worst case\nof `N` distinct characters in the string.\n\n* Space complexity : $$\\mathcal{O}(k)$$ since additional\nspace is used only for a hashmap with at most `k + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Sliding Window + Ordered Dictionary.\n\n**How to achieve $$\\mathcal{O}(N)$$ time complexity**\n\nApproach 1 with a standard hashmap couldn't\nensure $$\\mathcal{O}(N)$$ time complexity.\n\nTo have $$\\mathcal{O}(N)$$ algorithm performance,\none would need a structure, which\nprovides four operations in $$\\mathcal{O}(1)$$ time :\n\n- Insert the key\n\n- Get the key and check if the key exists\n\n- Delete the key\n\n- Return the first or last added key/ value\n\nThe first three operations in $$\\mathcal{O}(1)$$ time are provided\nby the standard hashmap, and the forth one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines\nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nOrdered dictionary is quite popular for interviews. for\nexample, check out the [Implementing a LRU Cache](https://leetcode.com/problems/lru-cache/)\nquestion by Google.\n\n**Algorithm**\n\nLet's use ordered dictionary instead of standard hashmap to trim the\nalgorithm from approach 1 :\n\n- Return `0` if the string is empty or `k` is equal to zero.\n- Set both pointers to the beginning\n of the string `left = 0` and `right = 0` and initialize max substring\n length `max_len = 1`.\n- While `right` pointer is less than `N`:\n    * If the current character `s[right]` is already in the ordered dictionary\n    `hashmap` -- delete it, to ensure that the first key in `hashmap` is\n    the leftmost character.\n    * Add the current character `s[right]` in the ordered dictionary and\n    move `right` pointer to the right.\n    * If ordered dictionary `hashmap` contains `k + 1` distinct characters,\n    remove the leftmost one\n    and move the `left` pointer so that sliding window contains\n    again `k` distinct characters only.\n    * Update `max_len`.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/XCPK33uS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XCPK33uS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$ since all operations with\nordered dictionary : `insert/get/delete/popitem`\n(`put/containsKey/remove`) are done in a constant time.\n\n* Space complexity : $$\\mathcal{O}(k)$$ since additional\nspace is used only for an ordered dictionary with at most `k + 1` elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "longest-substring-with-at-most-k-distinct-characters",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.882,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "836",
                "title": "Basic Calculator II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "227",
                    "questionFrontendId": "227",
                    "sessionId": "968792",
                    "questionTitle": "Basic Calculator II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/basic-calculator-ii/submit/",
                    "interpretUrl": "/problems/basic-calculator-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int calculate(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int calculate(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def calculate(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def calculate(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint calculate(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Calculate(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar calculate = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef calculate(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func calculate(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func calculate(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def calculate(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun calculate(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn calculate(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function calculate($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function calculate(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (calculate s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec calculate(S :: unicode:unicode_binary()) -> integer().\\ncalculate(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec calculate(s :: String.t) :: integer\\n  def calculate(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"3+2*2\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"calculate\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> which represents an expression, <em>evaluate this expression and return its value</em>.&nbsp;</p>\n\n<p>The integer division should truncate toward zero.</p>\n\n<p>You may assume that the given expression is always valid. All intermediate results will be in the range of <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>.</p>\n\n<p><strong>Note:</strong> You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"3+2*2\"\n<strong>Output:</strong> 7\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \" 3/2 \"\n<strong>Output:</strong> 1\n</pre><p><strong>Example 3:</strong></p>\n<pre><strong>Input:</strong> s = \" 3+5 / 2 \"\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of integers and operators <code>(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;)</code> separated by some number of spaces.</li>\n\t<li><code>s</code> represents <strong>a valid expression</strong>.</li>\n\t<li>All the integers in the expression are non-negative integers in the range <code>[0, 2<sup>31</sup> - 1]</code>.</li>\n\t<li>The answer is <strong>guaranteed</strong> to fit in a <strong>32-bit integer</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Basic Calculator II",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\nThere are multiple variations of this problem like [Basic Calculator](https://leetcode.com/problems/basic-calculator/) and [Basic Calculator III](https://leetcode.com/problems/basic-calculator-iii/). This problem is relatively simpler to solve, as we don't have to take care of the parenthesis.\n\nThe aim is to evaluate the given mathematical expression by applying the basic mathematical rules. The expressions are evaluated from left to right and the order of evaluation depends on the [Operator Precedence](https://en.wikipedia.org/wiki/Order_of_operations). Let's understand how we could implement the problem using different approaches.\n\n---\n#### Approach 1: Using Stack\n\n**Intuition**\n\nWe know that there could be 4 types of operations - addition `(+)`, subtraction `(-)`, multiplication `(*)` and division `(/)`.  Without parenthesis, we know that, multiplication  `(*)` and `(\\)` operations would always have higher precedence than addition `(+)` and subtraction `(-)` based on operator precedence rules.\n\n ![img](../Figures/227/calculator_overview.png)\n\nIf we look at the above examples, we can make the following observations -\n- If the current operation is addition `(+)` or subtraction `(-)`, then the expression is evaluated based on the precedence of the next operation.\n\nIn example 1, `4+3` is evaluated later because the next operation is multiplication `(3*5)` which has higher precedence.\nBut,  in example 2, `4+3` is evaluated first because the next operation is subtraction `(3-5)` which has equal precedence.\n\n- If the current operator is multiplication `(*)` or division `(/)`, then the expression is evaluated irrespective of the next operation. This is because in the given set of operations `(+,-,*,/)`, the  `*` and `/` operations have the highest precedence and therefore must be evaluated first.\n\nIn the above example 2 and 3, `4*3` is always evaluated first irrespective of the next operation.\n\nUsing this intuition let's look at the algorithm to implement the problem.\n\n\n**Algorithm**\n\nScan the input string `s` from left to right and evaluate the expressions based on the following rules\n\n1) If the current character is a digit `0-9` ( operand ), add it to the number `currentNumber`.\n2) Otherwise, the current character must be an operation `(+,-,*, /)`. Evaluate the expression based on the type of operation.\n- Addition `(+)` or Subtraction `(-)`: We must evaluate the expression later based on the next operation. So, we must store the `currentNumber` to be used later. Let's push the currentNumber in the Stack.\n\n>[Stack data structure](https://leetcode.com/explore/learn/card/queue-stack/230/usage-stack/) follows Last In First Out (LIFO) principle. Hence, the last pushed number in the stack would be popped out first for evaluation.  In addition, when we pop from the stack and evaluate this expression in the future, we need a way to determine if the operation was Addition `(+)` or Subtraction `(-)`. To simplify our evaluation, we can push `-currentNumber` in a stack if the current operation is subtraction (`-`) and assume that the operation for all the values in the stack is addition `(+)`. This works because `(a - currentNumber)` is equivalent to `(a + (-currentNumber))`.\n\n - Multiplication `(*)` or Division `(/)`: Pop the top values from the stack and evaluate the current expression. Push the evaluated value back to the stack.\n\nOnce the string is scanned, pop from the stack and add to the `result`.\n\n\n!?!../Documents/227_LIS.json:1414,716!?!\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/4vSbus5R/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4vSbus5R\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n)$$,  where $$n$$ is the length of the string $$s$$. We iterate over the string $$s$$ at most twice.\n\n* Space Complexity: $$\\mathcal{O}(n)$$, where $$n$$ is the length of the string $$s$$.\n\n---\n#### Approach 2: Optimised Approach without the stack\n\n**Intuition**\n\nIn the previous approach, we used a stack to track the values of the evaluated expressions. In the end, we pop all the values from the stack and add to the result. Instead of that, we could add the values to the result beforehand and keep track of the last calculated number, thus eliminating the need for the stack. Let's understand the algorithm in detail.\n\n**Algorithm**\n\nThe approach works similar to _Approach 1_ with the following differences :\n\n- Instead of using a `stack`, we use a variable `lastNumber` to track the value of the last evaluated expression.\n- If the operation is Addition `(+)` or Subtraction `(-)`, add the `lastNumber` to the result instead of pushing it to the stack. The `currentNumber` would be updated to `lastNumber` for the next iteration.\n- If the operation is Multiplication `(*)` or Division `(/)`, we must evaluate the expression `lastNumber * currentNumber` and update the `lastNumber` with the result of the expression.  This would be added to the result after the entire string is scanned.\n\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/boxCHTyb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"boxCHTyb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n)$$,  where $$n$$ is the length of the string $$s$$.\n\n* Space Complexity: $$\\mathcal{O}(1)$$, as we use constant extra space to store `lastNumber`, `result` and so on.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "basic-calculator-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.229,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "837",
                "title": "Sliding Window Maximum",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "239",
                    "questionFrontendId": "239",
                    "sessionId": "968792",
                    "questionTitle": "Sliding Window Maximum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/sliding-window-maximum/submit/",
                    "interpretUrl": "/problems/sliding-window-maximum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> maxSlidingWindow(vector<int>& nums, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] maxSlidingWindow(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxSlidingWindow(self, nums, k):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* maxSlidingWindow(int* nums, int numsSize, int k, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] MaxSlidingWindow(int[] nums, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar maxSlidingWindow = function(nums, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @param {Integer} k\\n# @return {Integer[]}\\ndef max_sliding_window(nums, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxSlidingWindow(_ nums: [Int], _ k: Int) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxSlidingWindow(nums []int, k int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxSlidingWindow(nums: Array[Int], k: Int): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxSlidingWindow(nums: IntArray, k: Int): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_sliding_window(nums: Vec<i32>, k: i32) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @param Integer $k\\n     * @return Integer[]\\n     */\\n    function maxSlidingWindow($nums, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxSlidingWindow(nums: number[], k: number): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-sliding-window nums k)\\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_sliding_window(Nums :: [integer()], K :: integer()) -> [integer()].\\nmax_sliding_window(Nums, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_sliding_window(nums :: [integer], k :: integer) :: [integer]\\n  def max_sliding_window(nums, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,3,-1,-3,5,3,6,7]\n3",
                    "enableTestMode": false,
                    "metaData": "{ \n  \"name\": \"maxSlidingWindow\",\n  \"params\": [\n    { \n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array of integers&nbsp;<code>nums</code>, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p>\n\n<p>Return <em>the max sliding window</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3\n<strong>Output:</strong> [3,3,5,5,6,7]\n<strong>Explanation:</strong> \nWindow position                Max\n---------------               -----\n[1  3  -1] -3  5  3  6  7       <strong>3</strong>\n 1 [3  -1  -3] 5  3  6  7       <strong>3</strong>\n 1  3 [-1  -3  5] 3  6  7      <strong> 5</strong>\n 1  3  -1 [-3  5  3] 6  7       <strong>5</strong>\n 1  3  -1  -3 [5  3  6] 7       <strong>6</strong>\n 1  3  -1  -3  5 [3  6  7]      <strong>7</strong>\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-1], k = 1\n<strong>Output:</strong> [1,-1]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [9,11], k = 2\n<strong>Output:</strong> [11]\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,-2], k = 2\n<strong>Output:</strong> [4]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "How about using a data structure such as deque (double-ended queue)?",
                        "The queue size need not be the same as the window\u2019s size.",
                        "Remove redundant elements and the queue should store only elements that need to be considered."
                    ],
                    "solution": {
                        "title": "Sliding Window Maximum",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Use a Hammer (Bruteforce)\n\n**Intuition**\n\nThe straightforward solution is to iterate over all sliding windows \nand find a maximum for each window. There are `N - k + 1` sliding windows \nand there are `k` elements in each window, that results in \na quite bad time complexity $$\\mathcal{O}(N k)$$.\n\nAs you can imagine, this straightforward solution would result in **TLE** (Time Limit Exceed) exception.\n\nIt is correct though, one could start with this solution during the interview and improve it later on.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/Q9GQ29Cp/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"Q9GQ29Cp\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N k)$$, \nwhere `N` is number of elements in the array.\n \n* Space complexity : $$\\mathcal{O}(N - k + 1)$$ for an output array.\n<br />\n<br />\n\n\n---\n#### Approach 2: Deque \n\n**Intuition**\n\nHow one could improve the time complexity? The first idea is to \nuse a _heap_, since in a maximum heap `heap[0]` is always the largest element.\nThough to add an element in a heap of size `k` costs \n$$\\log(k)$$, that means $$\\mathcal{O}(N \\log(k))$$ time complexity\nfor the solution.\n\n> Could we figure out $$\\mathcal{O}(N)$$ solution? \n\nLet's use a _deque_ (double-ended queue), \nthe structure which pops from / pushes to either side with the same $$\\mathcal{O}(1)$$\nperformance.\n\nIt's more handy to store in the deque indexes instead of elements since\nboth are used during an array parsing.\n\n**Algorithm**\n\nThe algorithm is quite straigthforward :\n\n- Process the first `k` elements separately to initiate the deque.\n\n- Iterate over the array. At each step :\n\n    - Clean the deque :\n\n        - Keep only the indexes of elements from \n        the current sliding window.\n    \n        - Remove indexes of all elements smaller than the current one, \n        since they will not be the maximum ones.\n        \n    - Append the current element to the deque.\n    \n    - Append `deque[0]` to the output.\n\n- Return the output array.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/MvkK82eW/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"MvkK82eW\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$, since each element is processed \nexactly twice - it's index added and then removed from the deque.\n \n* Space complexity : $$\\mathcal{O}(N)$$, since \n$$\\mathcal{O}(N - k + 1)$$ is used for an output array and\n$$\\mathcal{O}(k)$$ for a deque.\n<br />\n<br />\n\n\n---\n#### Approach 3: Dynamic programming\n\n**Intuition**\n\nHere is another $$\\mathcal{O}(N)$$ solution. The good thing about this\nsolution is that you don't need any data structures but\n`array / list`.\n\nThe idea is to split an input array into blocks of `k` elements.\nThe last block could contain less elements if `n % k != 0`.\n\n![split](../Figures/239/split.png)\n\nThe current sliding window with the first element `i` and the last element `j`\ncould be placed inside one block, or in two different blocks. \n\n![split](../Figures/239/one_two.png)\n\nThe situation `1` is simple. \nLet's use an array `left`, where `left[j]` is a maximum element\nfrom the beginning of the block to index `j`, direction `left->right`.\n\n![split](../Figures/239/inside2.png)\n\nTo work with more complex situation `2`, let's introduce array `right`,\nwhere `right[j]` is a maximum element from the end of the block to index `j`,\ndirection `right->left`. `right` is basically the same as `left`,\nbut in the other direction.\n\n![split](../Figures/239/right_left2.png)\n\nThese two arrays together give all the information about\nwindow elements in both blocks.\nLet's consider a sliding window from index `i` to index `j`. \nBy definition, element `right[i]` is a maximum element for window elements \nin the leftside block,\nand element `left[j]` is a maximum element for window elements\nin the rightside block.\nHence the maximum element in the sliding window is \n`max(right[i], left[j])`.\n\n![split](../Figures/239/solution.png)\n\n**Algorithm**\n\nThe algorithm is quite straightforward :\n\n- Iterate along the array in the direction `left->right`\nand build an array `left`.\n\n- Iterate along the array in the direction `right->left`\nand build an array `right`.\n\n- Build an output array as `max(right[i], left[i + k - 1])` for `i`\nin range `(0, n - k + 1)`.\n\n**Implementation**\n\n!?!../Documents/239_LIS.json:1000,468!?!\n\n<iframe src=\"https://leetcode.com/playground/AK3oPFy3/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"AK3oPFy3\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N)$$, \nsince all we do is `3` passes along the array of length `N`.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep `left` and `right` arrays\nof length `N`, and output array of length `N - k + 1`.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "sliding-window-maximum",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "838",
                "title": "Minimum Window Substring",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 116,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "76",
                    "questionFrontendId": "76",
                    "sessionId": "968792",
                    "questionTitle": "Minimum Window Substring",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/minimum-window-substring/submit/",
                    "interpretUrl": "/problems/minimum-window-substring/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string minWindow(string s, string t) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String minWindow(String s, String t) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def minWindow(self, s, t):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type t: str\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def minWindow(self, s: str, t: str) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * minWindow(char * s, char * t){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string MinWindow(string s, string t) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {string}\\n */\\nvar minWindow = function(s, t) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} t\\n# @return {String}\\ndef min_window(s, t)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func minWindow(_ s: String, _ t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func minWindow(s string, t string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def minWindow(s: String, t: String): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun minWindow(s: String, t: String): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn min_window(s: String, t: String) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $t\\n     * @return String\\n     */\\n    function minWindow($s, $t) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function minWindow(s: string, t: string): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (min-window s t)\\n  (-> string? string? string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec min_window(S :: unicode:unicode_binary(), T :: unicode:unicode_binary()) -> unicode:unicode_binary().\\nmin_window(S, T) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec min_window(s :: String.t, t :: String.t) :: String.t\\n  def min_window(s, t) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"ADOBECODEBANC\"\n\"ABC\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"minWindow\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"t\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two strings <code>s</code> and <code>t</code> of lengths <code>m</code> and <code>n</code> respectively, return <em>the <strong>minimum window substring</strong> of </em><code>s</code><em> such that every character in </em><code>t</code><em> (<strong>including duplicates</strong>) is included in the window. If there is no such substring</em><em>, return the empty string </em><code>&quot;&quot;</code><em>.</em></p>\n\n<p>The testcases will be generated such that the answer is <strong>unique</strong>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within the string.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;\n<strong>Output:</strong> &quot;BANC&quot;\n<strong>Explanation:</strong> The minimum window substring &quot;BANC&quot; includes &#39;A&#39;, &#39;B&#39;, and &#39;C&#39; from string t.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;a&quot;\n<strong>Output:</strong> &quot;a&quot;\n<strong>Explanation:</strong> The entire string s is the minimum window.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;, t = &quot;aa&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> Both &#39;a&#39;s from t must be included in the window.\nSince the largest window of s only has one &#39;a&#39;, return empty string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == s.length</code></li>\n\t<li><code>n == t.length</code></li>\n\t<li><code>1 &lt;= m, n&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> and <code>t</code> consist of uppercase and lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> Could you find an algorithm that runs in <code>O(m + n)</code> time?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Use two pointers to create a window of letters in <b>S</b>, which would have all the characters from <b>T</b>.",
                        "Since you have to find the minimum window in <b>S</b> which has all the characters from <b>T</b>, you need to expand and contract the window using the two pointers and keep checking the window for all the characters. This approach is also called Sliding Window Approach.\r\n\r\n<br><br>\r\n<pre>\r\nL ------------------------ R , Suppose this is the window that contains all characters of <b>T</b> \r\n                          \r\n&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp L----------------- R , this is the contracted window. We found a smaller window that still contains all the characters in <b>T</b>\r\n\r\nWhen the window is no longer valid, start expanding again using the right pointer. </pre>"
                    ],
                    "solution": {
                        "title": "Minimum Window Substring",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Approach 1: Sliding Window\n\n**Intuition**\n\nThe question asks us to return the minimum window from the string $$S$$ which has all the characters of the string $$T$$. Let us call a window `desirable` if it has all the characters from $$T$$.\n\nWe can use a simple sliding window approach to solve this problem.\n\nIn any sliding window based problem we have two pointers. One $$right$$ pointer whose job is to expand the current window and then we have the $$left$$ pointer whose job is to contract a given window. At any point in time only one of these pointers move and the other one remains fixed.\n\nThe solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired characters, we contract (if possible) and save the smallest window till now.\n\nThe answer is the smallest desirable window.\n\nFor eg. ` S = \"ABAACBAB\" T = \"ABC\"`. Then our answer window is `\"ACB\"` and shown below is one of the possible desirable windows.\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_1.png\" width=\"500\"/>\n</center>\n<br>\n\n**Algorithm**\n\n1. We start with two pointers, $$left$$ and $$right$$ initially pointing to the first element of the string $$S$$.\n\n2. We use the $$right$$ pointer to expand the window until we get a desirable window i.e. a window that contains all of the characters of $$T$$.\n\n3. Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one we keep on updating the minimum window size.\n\n4. If the window is not desirable any more, we repeat $$step \\; 2$$ onwards.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_2.png\" width=\"500\"/>\n</center>\n\nThe above steps are repeated until we have looked at all the windows. The smallest window is returned.\n\n<center>\n<img src=\"../Figures/76/76_Minimum_Window_Substring_3.png\" width=\"500\"/>\n</center>\n<br>\n\n<iframe src=\"https://leetcode.com/playground/XEVk3wZb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"XEVk3wZb\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$.\nIn the worst case we might end up visiting every element of string $$S$$ twice, once by left pointer and once by right pointer. $$|T|$$ represents the length of string $$T$$.\n\n* Space Complexity: $$O(|S| + |T|)$$. $$|S|$$ when the window size is equal to the entire string $$S$$. $$|T|$$ when $$T$$ has all unique characters.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Optimized Sliding Window\n\n**Intuition**\n\nA small improvement to the above approach can reduce the time complexity of the algorithm to $$O(2*|filtered\\_S| + |S| + |T|)$$, where $$filtered\\_S$$ is the string formed from S by removing all the elements not present in $$T$$.\n\nThis complexity reduction is evident when $$|filtered\\_S| <<< |S|$$.\n\nThis kind of scenario might happen when length of string $$T$$ is way too small than the length of string $$S$$ and string $$S$$ consists of numerous characters which are not present in $$T$$.\n\n**Algorithm**\n\nWe create a list called $$filtered\\_S$$ which has all the characters from string $$S$$ along with their indices in $$S$$, but these characters should be present in $$T$$.\n\n<pre>\n  S = \"ABCDDDDDDEEAFFBC\" T = \"ABC\"\n  filtered_S = [(0, 'A'), (1, 'B'), (2, 'C'), (11, 'A'), (14, 'B'), (15, 'C')]\n  Here (0, 'A') means in string S character A is at index 0.\n</pre>\n\n\nWe can now follow our sliding window approach on the smaller string $$filtered\\_S$$.\n\n<iframe src=\"https://leetcode.com/playground/EyRdt4FZ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EyRdt4FZ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(|S| + |T|)$$ where |S| and |T| represent the lengths of strings $$S$$ and $$T$$. The complexity is same as the previous approach. But in certain cases where $$|filtered\\_S|$$ <<< $$|S|$$, the complexity would reduce because the number of iterations would be $$2*|filtered\\_S| + |S| + |T|$$.\n* Space Complexity : $$O(|S| + |T|)$$.\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "minimum-window-substring",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.441,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Array and String type of questions were asked in interviews frequently. You will most likely encounter one during your interviews.\n\nWe recommend: Product of Array Except Self, Spiral Matrix, First Missing Positive, Longest Substring with At Most K Distinct Characters, Sliding Window Maximum and Minimum Window Substring.\n\nThe last three problems are a bit more challenging, so feel free to skip those and revisit later if you're stuck."
    },
    {
        "id": "117",
        "title": "Linked List",
        "slug": "linked-list",
        "items": [
            {
                "id": "839",
                "title": "Merge k Sorted Lists",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 117,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "23",
                    "questionFrontendId": "23",
                    "sessionId": "968792",
                    "questionTitle": "Merge k Sorted Lists",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/merge-k-sorted-lists/submit/",
                    "interpretUrl": "/problems/merge-k-sorted-lists/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode mergeKLists(ListNode[] lists) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def mergeKLists(self, lists):\\n        \\\"\\\"\\\"\\n        :type lists: List[ListNode]\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode MergeKLists(ListNode[] lists) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode[]} lists\\n * @return {ListNode}\\n */\\nvar mergeKLists = function(lists) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode[]} lists\\n# @return {ListNode}\\ndef merge_k_lists(lists)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func mergeKLists(_ lists: [ListNode?]) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc mergeKLists(lists []*ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def mergeKLists(lists: Array[ListNode]): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun mergeKLists(lists: Array<ListNode?>): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn merge_k_lists(lists: Vec<Option<Box<ListNode>>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode[] $lists\\n     * @return ListNode\\n     */\\n    function mergeKLists($lists) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction mergeKLists(lists: Array<ListNode | null>): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (merge-k-lists lists)\\n  (-> (listof (or/c list-node? #f)) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec merge_k_lists(Lists :: [#list_node{} | null]) -> #list_node{} | null.\\nmerge_k_lists(Lists) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec merge_k_lists(lists :: [ListNode.t | nil]) :: ListNode.t | nil\\n  def merge_k_lists(lists) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,4,5],[1,3,4],[2,6]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"mergeKLists\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"lists\",\r\n      \"type\": \"ListNode[]\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>\n\n<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[1,4,5],[1,3,4],[2,6]]\n<strong>Output:</strong> [1,1,2,3,4,4,5,6]\n<strong>Explanation:</strong> The linked-lists are:\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\nmerging them into one sorted list:\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = []\n<strong>Output:</strong> []\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> lists = [[]]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>k == lists.length</code></li>\n\t<li><code>0 &lt;= k &lt;= 10^4</code></li>\n\t<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n\t<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\n\t<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>\n\t<li>The sum of <code>lists[i].length</code> won&#39;t exceed <code>10^4</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Merge k Sorted List",
                        "content": "[TOC]\n## Solution\n\n---\n#### Approach 1: Brute Force\n\n**Intuition & Algorithm**\n\n- Traverse all the linked lists and collect the values of the nodes into an array.\n- Sort and iterate over this array to get the proper value of nodes.\n- Create a new sorted linked list and extend it with the new nodes.\n\nAs for sorting, you can refer [here](https://www.cs.cmu.edu/~adamchik/15-121/lectures/Sorting%20Algorithms/sorting.html) for more about sorting algorithms.\n\n<iframe src=\"https://leetcode.com/playground/SxUGUJZR/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"SxUGUJZR\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log N)$$ where $$N$$ is the total number of nodes.\n    - Collecting all the values costs $$O(N)$$ time.\n    - A stable sorting algorithm costs $$O(N\\log N)$$ time.\n    - Iterating for creating the linked list costs $$O(N)$$ time.\n\n\n* Space complexity : $$O(N)$$.\n    - Sorting cost $$O(N)$$ space (depends on the algorithm you choose).\n    - Creating a new linked list costs $$O(N)$$ space.\n<br />\n<br />\n---\n\n#### Approach 2: Compare one by one\n\n**Algorithm**\n\n- Compare every $$\\text{k}$$ nodes (head of every linked list) and get the node with the smallest value.\n- Extend the final sorted linked list with the selected nodes.\n\n!?!../Documents/23_Merge_lists.json:1000,563!?!\n\n**Complexity Analysis**\n\n* Time complexity : $$O(kN)$$ where $$\\text{k}$$ is the number of linked lists.\n    - Almost every selection of node in final linked costs $$O(k)$$ ($$\\text{k-1}$$ times comparison).\n    - There are $$N$$ nodes in the final linked list.\n\n\n* Space complexity :\n    - $$O(n)$$ Creating a new linked list costs $$O(n)$$ space.\n    - $$O(1)$$ It's not hard to apply in-place method - connect selected nodes instead of creating new nodes to fill the new linked list.\n<br />\n<br />\n---\n#### Approach 3: Optimize Approach 2 by Priority Queue\n\n**Algorithm**\n\nAlmost the same as the one above but optimize the **comparison process** by **priority queue**. You can refer [here](https://en.wikipedia.org/wiki/Priority_queue) for more information about it.\n\n<iframe src=\"https://leetcode.com/playground/h2rJbTJz/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"h2rJbTJz\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log k)$$ where $$\\text{k}$$ is the number of linked lists.\n    - The comparison cost will be reduced to $$O(\\log k)$$ for every pop and insertion to priority queue. But finding the node with the smallest value just costs $$O(1)$$ time.\n    - There are $$N$$ nodes in the final linked list.\n\n\n* Space complexity :\n    - $$O(n)$$ Creating a new linked list costs $$O(n)$$ space.\n    - $$O(k)$$ The code above present applies in-place method which cost $$O(1)$$ space. And the priority queue (often implemented with heaps) costs $$O(k)$$ space (it's far less than $$N$$ in most situations).\n<br />\n<br />\n---\n\n#### Approach 4: Merge lists one by one\n\n**Algorithm**\n\nConvert merge $$\\text{k}$$ lists problem to merge 2 lists ($$\\text{k-1}$$) times. Here is the [merge 2 lists](https://leetcode.com/problems/merge-two-sorted-lists/description/) problem page.\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(kN)$$ where $$\\text{k}$$ is the number of linked lists.\n    - We can merge two sorted linked list in $$O(n)$$ time where $$n$$ is the total number of nodes in two lists.\n    - Sum up the merge process and we can get:  $$O(\\sum_{i=1}^{k-1} (i*(\\frac{N}{k}) + \\frac{N}{k})) = O(kN)$$.\n\n\n* Space complexity : $$O(1)$$\n    - We can merge two sorted linked list in $$O(1)$$ space.\n<br />\n<br />\n---\n\n#### Approach 5: Merge with Divide And Conquer\n\n**Intuition & Algorithm**\n\nThis approach walks alongside the one above but is improved a lot. We don't need to traverse most nodes many times repeatedly\n\n  - Pair up $$\\text{k}$$ lists and merge each pair.\n\n  - After the first pairing, $$\\text{k}$$ lists are merged into $$k/2$$ lists with average $$2N/k$$ length, then $$k/4$$, $$k/8$$ and so on.\n\n  -  Repeat this procedure until we get the final sorted linked list.\n\nThus, we'll traverse almost $$N$$ nodes per pairing and merging, and repeat this procedure about $$\\log_{2}{k}$$  times.\n\n![Divide_and_Conquer](../Figures/23/23_divide_and_conquer_new.png)\n\n\n<iframe src=\"https://leetcode.com/playground/BsrhGdCo/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"BsrhGdCo\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N\\log k)$$ where $$\\text{k}$$ is the number of linked lists.\n    - We can merge two sorted linked list in $$O(n)$$ time where $$n$$ is the total number of nodes in two lists.\n    - Sum up the merge process and we can get: $$O\\big(\\sum_{i=1}^{log_{2}{k}}N \\big)= O(N\\log k)$$\n\n\n* Space complexity : $$O(1)$$\n    - We can merge two sorted linked lists in $$O(1)$$ space.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "merge-k-sorted-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.608,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "840",
                "title": "Sort List",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 117,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "148",
                    "questionFrontendId": "148",
                    "sessionId": "968792",
                    "questionTitle": "Sort List",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/sort-list/submit/",
                    "interpretUrl": "/problems/sort-list/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* sortList(ListNode* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode sortList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution(object):\\n    def sortList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: ListNode\\n        :rtype: ListNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, val=0, next=None):\\n#         self.val = val\\n#         self.next = next\\nclass Solution:\\n    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\n\\n\\nstruct ListNode* sortList(struct ListNode* head){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public int val;\\n *     public ListNode next;\\n *     public ListNode(int val=0, ListNode next=null) {\\n *         this.val = val;\\n *         this.next = next;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public ListNode SortList(ListNode head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * function ListNode(val, next) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.next = (next===undefined ? null : next)\\n * }\\n */\\n/**\\n * @param {ListNode} head\\n * @return {ListNode}\\n */\\nvar sortList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for singly-linked list.\\n# class ListNode\\n#     attr_accessor :val, :next\\n#     def initialize(val = 0, _next = nil)\\n#         @val = val\\n#         @next = _next\\n#     end\\n# end\\n# @param {ListNode} head\\n# @return {ListNode}\\ndef sort_list(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     public var val: Int\\n *     public var next: ListNode?\\n *     public init() { self.val = 0; self.next = nil; }\\n *     public init(_ val: Int) { self.val = val; self.next = nil; }\\n *     public init(_ val: Int, _ next: ListNode?) { self.val = val; self.next = next; }\\n * }\\n */\\nclass Solution {\\n    func sortList(_ head: ListNode?) -> ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc sortList(head *ListNode) *ListNode {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode(_x: Int = 0, _next: ListNode = null) {\\n *   var next: ListNode = _next\\n *   var x: Int = _x\\n * }\\n */\\nobject Solution {\\n    def sortList(head: ListNode): ListNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var li = ListNode(5)\\n * var v = li.`val`\\n * Definition for singly-linked list.\\n * class ListNode(var `val`: Int) {\\n *     var next: ListNode? = null\\n * }\\n */\\nclass Solution {\\n    fun sortList(head: ListNode?): ListNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for singly-linked list.\\n// #[derive(PartialEq, Eq, Clone, Debug)]\\n// pub struct ListNode {\\n//   pub val: i32,\\n//   pub next: Option<Box<ListNode>>\\n// }\\n// \\n// impl ListNode {\\n//   #[inline]\\n//   fn new(val: i32) -> Self {\\n//     ListNode {\\n//       next: None,\\n//       val\\n//     }\\n//   }\\n// }\\nimpl Solution {\\n    pub fn sort_list(head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a singly-linked list.\\n * class ListNode {\\n *     public $val = 0;\\n *     public $next = null;\\n *     function __construct($val = 0, $next = null) {\\n *         $this->val = $val;\\n *         $this->next = $next;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param ListNode $head\\n     * @return ListNode\\n     */\\n    function sortList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for singly-linked list.\\n * class ListNode {\\n *     val: number\\n *     next: ListNode | null\\n *     constructor(val?: number, next?: ListNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *     }\\n * }\\n */\\n\\nfunction sortList(head: ListNode | null): ListNode | null {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for singly-linked list:\\n#|\\n\\n; val : integer?\\n; next : (or/c list-node? #f)\\n(struct list-node\\n  (val next) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-list-node [val 0])\\n  (list-node val #f))\\n\\n|#\\n\\n(define/contract (sort-list head)\\n  (-> (or/c list-node? #f) (or/c list-node? #f))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for singly-linked list.\\n%%\\n%% -record(list_node, {val = 0 :: integer(),\\n%%                     next = null :: 'null' | #list_node{}}).\\n\\n-spec sort_list(Head :: #list_node{} | null) -> #list_node{} | null.\\nsort_list(Head) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for singly-linked list.\\n#\\n# defmodule ListNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           next: ListNode.t() | nil\\n#         }\\n#   defstruct val: 0, next: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec sort_list(head :: ListNode.t | nil) :: ListNode.t | nil\\n  def sort_list(head) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[4,2,1,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"sortList\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"head\",\r\n      \"type\": \"ListNode\",\r\n      \"dealloc\": false\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"ListNode\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>\n\n<p><strong>Follow up:</strong> Can you sort the linked list in <code>O(n logn)</code> time and <code>O(1)</code>&nbsp;memory (i.e. constant space)?</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg\" style=\"width: 450px; height: 194px;\" />\n<pre>\n<strong>Input:</strong> head = [4,2,1,3]\n<strong>Output:</strong> [1,2,3,4]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg\" style=\"width: 550px; height: 184px;\" />\n<pre>\n<strong>Input:</strong> head = [-1,5,3,4,0]\n<strong>Output:</strong> [-1,0,3,4,5]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the list is in the range <code>[0, 5 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup> &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Sort List",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Overview ####\n\nThe problem is to sort the linked list in $$\\mathcal{O}(n \\log n)$$ time and using only constant extra space. If we look at various sorting algorithms, [Merge Sort](https://en.wikipedia.org/wiki/Merge_sort) is one of the efficient sorting algorithms that is popularly used for sorting the linked list. The merge sort algorithm runs in $$\\mathcal{O}(n \\log n)$$ time in all the cases. Let's discuss approaches to sort linked list using merge sort.\n\n> [Quicksort](https://en.wikipedia.org/wiki/Quicksort) is also one of the efficient algorithms with the average time complexity of $$\\mathcal{O}(n \\log n)$$. But the worst-case time complexity is $$\\mathcal{O}(n ^{2})$$. Also, variations of the quick sort like randomized quicksort are not efficient for the linked list because unlike arrays, random access in the linked list is not possible in $$\\mathcal{O}(1)$$ time.\nIf we sort the linked list using quicksort, we would end up using the head as a pivot element which may not be efficient in all scenarios.\n---\n\n#### Approach 1: Top Down Merge Sort\n\n**Intuition**\n\nMerge sort is a popularly known algorithm that follows the[ Divide and Conquer Strategy](https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm). The divide and conquer strategy can be split into 2 phases:\n\n _Divide phase_: Divide the problem into subproblems.\n\n_Conquer phase_: Repeatedly solve each subproblem independently and combine the result to form the original problem.\n\nThe Top Down approach for merge sort recursively splits the original list into sublists of equal sizes, sorts each sublist independently, and eventually merge the sorted lists.  Let's look at the algorithm to implement merge sort in Top Down Fashion.\n\n**Algorithm**\n\n- Recursively split the original list into two halves. The split continues until there is only one node in the linked list (Divide phase). To split the list into two halves, we find the middle of the linked list using the Fast and Slow pointer approach as mentioned in [Find Middle Of Linked List](https://leetcode.com/problems/middle-of-the-linked-list/).\n\n- Recursively sort each sublist and combine it into a single sorted list. (Merge Phase). This is similar to the problem [Merge two sorted linked lists](https://leetcode.com/problems/merge-two-sorted-lists/)\n\n\nThe process continues until we get the original list in sorted order.\n\nFor the linked list = `[10,1,60,30,5]`, the following figure illustrates the merge sort process using a top down approach.\n\n![img](../Figures/148/topDown_merge_sort.png)\n\nIf we have sorted lists, list1 = `[1,10]` and list2 = `[5,30,60]`. The following animation illustrates the merge process of both lists into a single sorted list.\n\n!?!../Documents/148_sort_list.json:1584,570!?!\n\n<iframe src=\"https://leetcode.com/playground/SAXk3Mon/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SAXk3Mon\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n \\log n)$$, where $$n$$ is the number of nodes in linked list.\nThe algorithm can be split into 2 phases, Split and Merge.\n\nLet's assume that $$n$$ is power of $$2$$. For `n = 16`, the split and merge operation in  Top Down fashion can be visualized as follows\n\n![img](../Figures/148/top_down_time_complexity.png)\n\n**_Split_**\n\nThe recursion tree expands in form of a complete binary tree, splitting the list into two halves recursively. The number of levels in a complete binary tree is given by $$\\log_{2} n$$. For $$n=16$$, number of splits = $$\\log_{2} 16 = 4$$\n\n**_Merge_**  \n\nAt each level, we merge n nodes which takes $$\\mathcal{O}(n)$$ time.\nFor $$n = 16$$, we perform merge operation on $$16$$ nodes in each of the $$4$$ levels.\n\nSo the time complexity for split and merge operation is $$\\mathcal{O}(n \\log n)$$\n\n* Space Complexity: $$\\mathcal{O}(\\log n)$$ , where $$n$$ is the number of nodes in linked list. Since the problem is recursive, we need additional space to store the recursive call stack. The maximum depth of the recursion tree is $$\\log n$$\n\n---\n\n#### Approach 2: Bottom Up Merge Sort\n\n**Intuition**\n\nThe Top Down Approach for merge sort uses $$\\mathcal{O}(\\log n)$$ extra space due to recursive call stack. Let's understand how we can implement merge sort using constant extra space using Bottom Up Approach.\n\nThe Bottom Up approach for merge sort starts by splitting the problem into the smallest subproblem and iteratively merge the result to solve the original problem.\n- First, the list is split into sublists of size 1 and merged iteratively in sorted order. The merged list is solved similarly.\n\n- The process continues until we sort the entire list.\n\nThis approach is solved iteratively and can be implemented using constant extra space. Let's look at the algorithm to implement merge sort in Bottom Up Fashion.\n\n\n**Algorithm**\n\nAssume, $$n$$ is the number of nodes in the linked list.\n- Start with splitting the list into sublists of size $$1$$. Each adjacent pair of sublists of size $$1$$ is merged in sorted order. After the first iteration, we get the sorted lists of size $$2$$. A similar process is repeated for a sublist of size $$2$$. In this way, we iteratively split the list into sublists of size $$1,2,4,8 ..$$ and so on until we reach $$n$$.\n\n- To split the list into two sublists of given $$\\text{size}$$ beginning from $$\\text{start}$$, we use two pointers, $$\\text{mid}$$ and $$\\text{end}$$ that references to the start and end of second linked list respectively. The split process finds the middle of linked lists for the given $$\\text{size}$$.\n\n- Merge the lists in sorted order as discussed in  _Approach 1_\n\n- As we iteratively split the list and merge, we have to keep track of the previous merged list using pointer $$\\text{tail}$$ and the next sublist to be sorted using pointer $$\\text{nextSubList}$$.\n\nFor the linked list = `[10,1,30,2,5]`, the following figure illustrates the merge sort process using a Bottom Up approach.\n\n![img](../Figures/148/bottom_up_merge_sort.png)\n\n\n<iframe src=\"https://leetcode.com/playground/KyrjGgDu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KyrjGgDu\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\mathcal{O}(n \\log n)$$, where $$n$$ is the number of nodes in linked list.\n Let's analyze the time complexity of each step:\n\n1) Count Nodes - Get the count of number nodes in the linked list requires $$\\mathcal{O}(n)$$ time.\n\n2) Split and Merge - This operation is similar to _Approach 1_ and takes  $$ \\mathcal{O}(n \\log n)$$ time.\nFor `n = 16`, the split and merge operation in Bottom Up fashion can be visualized as follows\n\n![img](../Figures/148/bottom_up_time_complexity.png)\n\nThis gives us total time complexity as\n$$\\mathcal{O}(n) + \\mathcal{O}(n \\log n) = \\mathcal{O}(n \\log n)$$\n\n* Space Complexity: $$\\mathcal{O}(1)$$ We use only constant space for storing the reference pointers  $$\\text{tail}$$ , $$\\text{nextSubList}$$ etc.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "sort-list",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.516,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "841",
                "title": "Copy List with Random Pointer",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 117,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "138",
                    "questionFrontendId": "138",
                    "sessionId": "968792",
                    "questionTitle": "Copy List with Random Pointer",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/copy-list-with-random-pointer/submit/",
                    "interpretUrl": "/problems/copy-list-with-random-pointer/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\npublic:\\n    int val;\\n    Node* next;\\n    Node* random;\\n    \\n    Node(int _val) {\\n        val = _val;\\n        next = NULL;\\n        random = NULL;\\n    }\\n};\\n*/\\n\\nclass Solution {\\npublic:\\n    Node* copyRandomList(Node* head) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/*\\n// Definition for a Node.\\nclass Node {\\n    int val;\\n    Node next;\\n    Node random;\\n\\n    public Node(int val) {\\n        this.val = val;\\n        this.next = null;\\n        this.random = null;\\n    }\\n}\\n*/\\n\\nclass Solution {\\n    public Node copyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x, next=None, random=None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution(object):\\n    def copyRandomList(self, head):\\n        \\\"\\\"\\\"\\n        :type head: Node\\n        :rtype: Node\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"\\\"\\\"\\\"\\n# Definition for a Node.\\nclass Node:\\n    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\\n        self.val = int(x)\\n        self.next = next\\n        self.random = random\\n\\\"\\\"\\\"\\n\\nclass Solution:\\n    def copyRandomList(self, head: 'Node') -> 'Node':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * struct Node {\\n *     int val;\\n *     struct Node *next;\\n *     struct Node *random;\\n * };\\n */\\n\\nstruct Node* copyRandomList(struct Node* head) {\\n\\t\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/*\\n// Definition for a Node.\\npublic class Node {\\n    public int val;\\n    public Node next;\\n    public Node random;\\n    \\n    public Node(int _val) {\\n        val = _val;\\n        next = null;\\n        random = null;\\n    }\\n}\\n*/\\n\\npublic class Solution {\\n    public Node CopyRandomList(Node head) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // Definition for a Node.\\n * function Node(val, next, random) {\\n *    this.val = val;\\n *    this.next = next;\\n *    this.random = random;\\n * };\\n */\\n\\n/**\\n * @param {Node} head\\n * @return {Node}\\n */\\nvar copyRandomList = function(head) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for Node.\\n# class Node\\n#     attr_accessor :val, :next, :random\\n#     def initialize(val = 0)\\n#         @val = val\\n#\\t\\t  @next = nil\\n#\\t\\t  @random = nil\\n#     end\\n# end\\n\\n# @param {Node} node\\n# @return {Node}\\ndef copyRandomList(head)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * public class Node {\\n *     public var val: Int\\n *     public var next: Node?\\n *     public var random: Node?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.next = nil\\n *    \\t   self.random = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func copyRandomList(_ head: Node?) -> Node? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * type Node struct {\\n *     Val int\\n *     Next *Node\\n *     Random *Node\\n * }\\n */\\n\\nfunc copyRandomList(head *Node) *Node {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node(var _value: Int) {\\n *   var value: Int = _value\\n *   var next: Node = null\\n *   var random: Node = null\\n * }\\n */\\n\\nobject Solution {\\n    def copyRandomList(head: Node): Node = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = Node(5)\\n * var v = ti.`val`\\n * Definition for a Node.\\n * class Node(var `val`: Int) {\\n *     var next: Node? = null\\n *     var random: Node? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun copyRandomList(node: Node?): Node? {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a Node.\\n * class Node {\\n *     public $val = null;\\n *     public $next = null;\\n *     public $random = null;\\n *     function __construct($val = 0) {\\n *         $this->val = $val;\\n *         $this->next = null;\\n *         $this->random = null;\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param Node $head\\n     * @return Node\\n     */\\n    function copyRandomList($head) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for Node.\\n * class Node {\\n *     val: number\\n *     next: Node | null\\n *     random: Node | null\\n *     constructor(val?: number, next?: Node, random?: Node) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.next = (next===undefined ? null : next)\\n *         this.random = (random===undefined ? null : random)\\n *     }\\n * }\\n */\\n\\nfunction copyRandomList(head: Node | null): Node | null {\\n    \\n};\"}]",
                    "sampleTestCase": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"copyRandomList\",\n  \"params\": [\n    {\n      \"name\": \"head\",\n      \"type\": \"ListNode\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"ListNode\"\n  },\n  \"languages\": [\n    \"cpp\",\n    \"java\",\n    \"python\",\n    \"csharp\",\n    \"javascript\",\n    \"python3\",\n    \"golang\",\n    \"swift\",\n    \"kotlin\",\n    \"ruby\",\n    \"c\",\n    \"scala\",\n    \"php\",\n    \"typescript\"\n  ],\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>null</code>.</p>\n\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> of the list. The deep copy should consist of exactly <code>n</code> <strong>brand new</strong> nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list</strong>.</p>\n\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n\n<p>Return <em>the head of the copied linked list</em>.</p>\n\n<p>The linked list is represented in the input/output as a list of <code>n</code> nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p>\n\n<ul>\n\t<li><code>val</code>: an integer representing <code>Node.val</code></li>\n\t<li><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</li>\n</ul>\n\n<p>Your code will <strong>only</strong> be given the <code>head</code> of the original linked list.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e1.png\" style=\"width: 700px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n<strong>Output:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e2.png\" style=\"width: 700px; height: 114px;\" />\n<pre>\n<strong>Input:</strong> head = [[1,1],[2,1]]\n<strong>Output:</strong> [[1,1],[2,1]]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/12/18/e3.png\" style=\"width: 700px; height: 122px;\" /></strong></p>\n\n<pre>\n<strong>Input:</strong> head = [[3,null],[3,0],[3,null]]\n<strong>Output:</strong> [[3,null],[3,0],[3,null]]\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> head = []\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The given linked list is empty (null pointer), so return null.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>-10000 &lt;= Node.val &lt;= 10000</code></li>\n\t<li><code>Node.random</code> is <code>null</code> or is pointing to some node in the linked list.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node.",
                        "You may want to use extra space to keep <b>old node ---> new node</b> mapping to prevent creating multiples copies of same node.",
                        "We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n<pre>\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'\r\n</pre>",
                        "The interweaving is done using <b>next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for <b>random</b> pointers."
                    ],
                    "solution": {
                        "title": "Copy List with Random Pointer",
                        "content": "[TOC]\n\n## Solution\n---\n\nLets first look at how the linked list looks like\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_1.png\" width=\"500\"/>\n</center>\n\nIn the above diagram, for a given node the `next` pointer points to the next node in the linked list. The `next` pointer is something standard for a linked list and this is what ***links*** the nodes together. What is interesting about the diagram and this problem is the `random` pointer which, as the name suggests can point to any node in the linked list or can be a null.\n\n#### Approach 1: Recursive\n\n**Intuition**\n\nThe basic idea behind the recursive solution is to consider the linked list like a graph. Every node of the Linked List has 2 pointers (edges in a graph). Since, random pointers add the randomness to the structure we might visit the same node again leading to cycles.\n\n<center>\n<img src=\"../Figures/138/138_Copy_List_Random_2.png\" width=\"500\"/>\n</center>\n\nIn the diagram above we can see the random pointer points back to the previously seen node hence leading to a cycle. We need to take care of these cycles in the implementation.\n\nAll we do in this approach is to just traverse the graph and clone it. Cloning essentially means creating a new node for every unseen node you encounter. The traversal part will happen recursively in a depth first manner. Note that we have to keep track of nodes already processed because, as pointed out earlier, we can have cycles because of the random pointers.\n\n**Algorithm**\n\n1. Start traversing the graph from `head` node.\n\n    Lets see the linked structure as a graph. Below is the graph representation of the above linked list example.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_7.png\" width=\"500\"/>\n    </center>\n\n    In the above example `head` is where we begin our graph traversal.\n\n2. If we already have a cloned copy of the current node in the visited dictionary, we use the cloned node reference.  \n3. If we don't have a cloned copy in the visited dictionary, we create a new node and add it to the visited dictionary.\n`visited_dictionary[current_node] = cloned_node_for_current_node.`\n4. We then make two recursive calls, one using the `random` pointer and the other using `next` pointer. The diagram from step 1, shows `random` and `next` pointers in red and blue color respectively. Essentially we are making recursive calls for the children of the current node. In this implementation, the children are the nodes pointed by the `random` and the `next` pointers.\n<pre>\ncloned_node_for_current_node.next = copyRandomList(current_node.next);\ncloned_node_for_current_node.random = copyRandomList(current_node.random);\n</pre>\n\n<br>\n\n<iframe src=\"https://leetcode.com/playground/gTqcFzpK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"gTqcFzpK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$ where N is the number of nodes in the linked list.\n* Space Complexity: $$O(N)$$. If we look closely, we have the recursion stack and we also have the space complexity to keep track of nodes already cloned i.e. using the visited dictionary. But asymptotically, the complexity is $$O(N)$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative with $$O(N)$$ Space\n\n**Intuition**\n\nThe iterative solution to this problem does not model it as a graph, instead simply treats it as a LinkedList.\nWhen we are iterating over the list, we can create new nodes via the random pointer or the next pointer whichever points to a node that doesn't exist in our old --> new dictionary.\n\n**Algorithm**\n\n1. Traverse the linked list starting at `head` of the linked list.\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_3.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram we create a new cloned `head` node. The cloned node is shown using dashed lines. In the implementation we would even store the reference of this newly created node in a visited dictionary.\n\n2. Random Pointer\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `random` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_4.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `random` pointer of node $$A$$ points to a node $$C$$. Node $$C$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$C'$$ node corresponding to node $$C$$ and add it to visited dictionary.\n\n3. Next Pointer\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ and a clone of $$j$$ already exists in the visited dictionary, we will simply use the cloned node reference from the visited dictionary.\n    * If the `next` pointer of the current node $$i$$ points to the a node $$j$$ which has not been created yet, we create a new node corresponding to $$j$$ and add it to the visited dictionary.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_5.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram the `next` pointer of node $$A$$ points to a node $$B$$. Node $$B$$ which was not visited yet as we can see from the previous diagram. Hence we create a new cloned $$B'$$ node corresponding to node $$B$$ and add it to visited dictionary.\n\n4. We repeat steps 2 and 3 until we reach the end of the linked list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_6.png\" width=\"600\"/>\n    </center>\n\n    In the above diagram, the `random` pointer of node $$B$$ points to an already visited node $$A$$. Hence in step 2, we don't create a new copy for the clone. Instead we point `random` pointer of cloned node $$B'$$ to already existing cloned node $$A'$$.\n\n    Also, the `next` pointer of node $$B$$ points to an already visited node $$C$$. Hence in step 3, we don't create a new copy for the clone. Instead we point `next` pointer of cloned node $$B'$$ to already existing cloned node $$C'$$.\n\n<iframe src=\"https://leetcode.com/playground/KBujstvq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KBujstvq\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$ because we make one pass over the original linked list.\n* Space Complexity : $$O(N)$$ as we have a dictionary containing mapping from old list nodes to new list nodes. Since there are $$N$$ nodes, we have $$O(N)$$ space complexity.\n<br/>\n<br/>\n\n---\n\n#### Approach 3: Iterative with $$O(1)$$ Space\n\n**Intuition**\n\nInstead of a separate dictionary to keep the old node --> new node mapping, we can tweak the original linked list and keep every cloned node next to its original node. This interleaving of old and new nodes allows us to solve this problem without any extra space. Lets look at how the algorithm works.\n\n**Algorithm**\n\n1. Traverse the original list and clone the nodes as you go and place the cloned copy next to its original node. This new linked list is essentially a interweaving of original and cloned nodes.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_1.png\" width=\"800\"/>\n    </center>\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_8_2.png\" width=\"800\"/>\n    </center>\n\n    As you can see we just use the value of original node to create the cloned copy. The `next` pointer is used to create the weaving. Note that this operation ends up modifying the original linked list.\n    <pre>\n    cloned_node.next = original_node.next\n    original_node.next = cloned_node\n    </pre>\n\n2. Iterate the list having both the new and old nodes intertwined with each other and use the original nodes' random pointers to assign references to random pointers for cloned nodes. For eg. If `B` has a random pointer to `A`, this means `B'` has a random pointer to `A'`.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_9_1.png\" width=\"800\"/>\n    </center>\n\n3. Now that the `random` pointers are assigned to the correct node, the `next` pointers need to be correctly assigned to unweave the current linked list and get back the original list and the cloned list.\n\n    <center>\n    <img src=\"../Figures/138/138_Copy_List_Random_10.png\" width=\"800\"/>\n    </center>\n\n\n<iframe src=\"https://leetcode.com/playground/ZbWnzEMt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"ZbWnzEMt\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$\n* Space Complexity : $$O(1)$$\n<br /><br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "copy-list-with-random-pointer",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.733,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "There are not a lot of difficult Linked List problems. However, these Linked List problems do require some thought.\n\nWe recommend all of these problems, all of them are classic Linked List interview questions, especially Copy List with Random Pointers which may seem impossible to solve at first glance."
    },
    {
        "id": "118",
        "title": "Trees and Graphs",
        "slug": "trees-and-graphs",
        "items": [
            {
                "id": "842",
                "title": "Word Ladder",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "127",
                    "questionFrontendId": "127",
                    "sessionId": "968792",
                    "questionTitle": "Word Ladder",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-ladder/submit/",
                    "interpretUrl": "/problems/word-ladder/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def ladderLength(self, beginWord, endWord, wordList):\\n        \\\"\\\"\\\"\\n        :type beginWord: str\\n        :type endWord: str\\n        :type wordList: List[str]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint ladderLength(char * beginWord, char * endWord, char ** wordList, int wordListSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} beginWord\\n * @param {string} endWord\\n * @param {string[]} wordList\\n * @return {number}\\n */\\nvar ladderLength = function(beginWord, endWord, wordList) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} begin_word\\n# @param {String} end_word\\n# @param {String[]} word_list\\n# @return {Integer}\\ndef ladder_length(begin_word, end_word, word_list)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func ladderLength(beginWord string, endWord string, wordList []string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun ladderLength(beginWord: String, endWord: String, wordList: List<String>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn ladder_length(begin_word: String, end_word: String, word_list: Vec<String>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $beginWord\\n     * @param String $endWord\\n     * @param String[] $wordList\\n     * @return Integer\\n     */\\n    function ladderLength($beginWord, $endWord, $wordList) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function ladderLength(beginWord: string, endWord: string, wordList: string[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (ladder-length beginWord endWord wordList)\\n  (-> string? string? (listof string?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec ladder_length(BeginWord :: unicode:unicode_binary(), EndWord :: unicode:unicode_binary(), WordList :: [unicode:unicode_binary()]) -> integer().\\nladder_length(BeginWord, EndWord, WordList) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec ladder_length(begin_word :: String.t, end_word :: String.t, word_list :: [String.t]) :: integer\\n  def ladder_length(begin_word, end_word, word_list) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"ladderLength\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"beginWord\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"endWord\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"wordList\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <strong>transformation sequence</strong> from word <code>beginWord</code> to word <code>endWord</code> using a dictionary <code>wordList</code> is a sequence of words <code>beginWord -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n\n<ul>\n\t<li>Every adjacent pair of words differs by a single letter.</li>\n\t<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>wordList</code>. Note that <code>beginWord</code> does not need to be in <code>wordList</code>.</li>\n\t<li><code>s<sub>k</sub> == endWord</code></li>\n</ul>\n\n<p>Given two words, <code>beginWord</code> and <code>endWord</code>, and a dictionary <code>wordList</code>, return <em>the <strong>number of words</strong> in the <strong>shortest transformation sequence</strong> from</em> <code>beginWord</code> <em>to</em> <code>endWord</code><em>, or </em><code>0</code><em> if no such sequence exists.</em></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> One shortest transformation sequence is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; cog&quot;, which is 5 words long.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> beginWord = &quot;hit&quot;, endWord = &quot;cog&quot;, wordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The endWord &quot;cog&quot; is not in wordList, therefore there is no valid transformation sequence.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= beginWord.length &lt;= 10</code></li>\n\t<li><code>endWord.length == beginWord.length</code></li>\n\t<li><code>1 &lt;= wordList.length &lt;= 5000</code></li>\n\t<li><code>wordList[i].length == beginWord.length</code></li>\n\t<li><code>beginWord</code>, <code>endWord</code>, and <code>wordList[i]</code> consist of lowercase English letters.</li>\n\t<li><code>beginWord != endWord</code></li>\n\t<li>All the words in <code>wordList</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Word Ladder",
                        "content": "## Video Solution\n\n---\n\n<div>\n  <div class=\"video-container\">\n    <iframe src=\"https://player.vimeo.com/video/497805462\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n  </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\nWe are given a `beginWord` and an `endWord`. Let these two represent `start node` and `end node` of a graph. We have to reach from the start node to the end node using some intermediate nodes/words. The intermediate nodes are determined by the `wordList` given to us. The only condition for every step we take on this ladder of words is the current word should change by just `one letter`.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_1.png\" width=\"400\"/>\n</center>\n\nWe will essentially be working with an undirected and unweighted graph with words as nodes and edges between words which differ by just one letter. The problem boils down to finding the shortest path from a start node to a destination node, if there exists one. Hence it can be solved using `Breadth First Search` approach.\n\nOne of the most important step here is to figure out how to find adjacent nodes i.e. words which differ by one letter. To efficiently find the neighboring nodes for any given word we do some pre-processing on the words of the given `wordList`. The pre-processing involves replacing the letter of a word by a non-alphabet say, `*`.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_2.png\" width=\"400\"/>\n</center>\n\nThis pre-processing helps to form generic states to represent a single letter change.\n\nFor e.g. `Dog ----> D*g <---- Dig`\n\nBoth `Dog` and `Dig` map to the same intermediate or generic state `D*g`.\n\nThe preprocessing step helps us find out the generic one letter away nodes for any word of the word list and hence making it easier and quicker to get the adjacent nodes. Otherwise, for every word we will have to iterate over the entire word list and find words that differ by one letter. That would take a lot of time. This preprocessing step essentially builds the adjacency list first before beginning the breadth first search algorithm.\n\nFor eg. While doing BFS if we have to find the adjacent nodes for `Dug` we can first find all the generic states for `Dug`.\n\n1. `Dug => *ug`\n2. `Dug => D*g`\n3. `Dug => Du*`\n\nThe second transformation `D*g` could then be mapped to `Dog` or `Dig`, since all of them share the same generic state. Having a common generic transformation means two words are connected and differ by one letter.\n\n#### Approach 1: Breadth First Search\n\n**Intuition**\n\nStart from `beginWord` and search the `endWord` using BFS.\n\n**Algorithm**\n\n1. Do the pre-processing on the given `wordList` and find all the possible generic/intermediate states. Save these intermediate states in a dictionary with key as the intermediate word and value as the list of words which have the same intermediate word.\n2. Push a tuple containing the `beginWord` and `1` in a queue. The `1` represents the level number of a node. We have to return the level of the `endNode` as that would represent the shortest sequence/distance from the `beginWord`.\n3. To prevent cycles, use a visited dictionary.\n4. While the queue has elements, get the front element of the queue. Let's call this word as `current_word`.\n5. Find all the generic transformations of the `current_word` and find out if any of these transformations is also a transformation of other words in the word list. This is achieved by checking the `all_combo_dict`.\n6. The list of words we get from `all_combo_dict` are all the words which have a common intermediate state with the `current_word`. These new set of words will be the adjacent nodes/words to `current_word` and hence added to the queue.\n6. Hence, for each word in this list of intermediate words, append `(word, level + 1)` into the queue where `level` is the level for the `current_word`.\n7. Eventually if you reach the desired word, its level would represent the shortest transformation sequence length.\n\n    >Termination condition for standard BFS is finding the end word.\n\n<iframe src=\"https://leetcode.com/playground/6MKoYxSP/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"6MKoYxSP\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O({M}^2 \\times N)$$, where $$M$$ is the length of each word and $$N$$ is the total number of words in the input word list.\n  * For each word in the word list, we iterate over its length to find all the intermediate words corresponding to it. Since the length of each word is $$M$$ and we have $$N$$ words, the total number of iterations the algorithm takes to create `all_combo_dict` is $$M \\times N$$. Additionally, forming each of the intermediate word takes $$O(M)$$ time because of the substring operation used to create the new string. This adds up to a complexity of $$O({M}^2 \\times N)$$.\n\n  * Breadth first search in the worst case might go to each of the $$N$$ words. For each word, we need to examine $$M$$ possible intermediate words/combinations. Notice, we have used the substring operation to find each of the combination. Thus, $$M$$ combinations take $$O({M} ^ 2)$$ time. As a result, the time complexity of BFS traversal would also be $$O({M}^2 \\times N)$$.\n\n  Combining the above steps, the overall time complexity of this approach is $$O({M}^2 \\times N)$$.\n\n* Space Complexity: $$O({M}^2 \\times N)$$.\n  * Each word in the word list would have $$M$$ intermediate combinations. To create the `all_combo_dict` dictionary we save an intermediate word as the key and its corresponding original words as the value. Note, for each of $$M$$ intermediate words we save the original word of length $$M$$. This simply means, for every word we would need a space of $${M}^2$$ to save all the transformations corresponding to it. Thus, `all_combo_dict` would need a total space of $$O({M}^2 \\times N)$$.\n  * `Visited` dictionary would need a space of $$O(M \\times N)$$ as each word is of length $$M$$.\n  * Queue for BFS in worst case would need a space for all $$O(N)$$ words and this would also result in a space complexity of $$O(M \\times N)$$.\n\n  Combining the above steps, the overall space complexity is $$O({M}^2 \\times N)$$ + $$O(M * N)$$ + $$O(M * N)$$ = $$O({M}^2 \\times N)$$ space.\n\n**Optimization:**\n We can definitely reduce the space complexity of this algorithm by storing the indices corresponding to each word instead of storing the word itself.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Bidirectional Breadth First Search\n\n**Intuition**\n\nThe graph formed from the nodes in the dictionary might be too big. The search space considered by the breadth first search algorithm depends upon the branching factor of the nodes at each level. If the branching factor remains the same for all the nodes, the search space increases exponentially along with the number of levels. Consider a simple example of a binary tree. With each passing level in a complete binary tree, the number of nodes increase in powers of `2`.\n\nWe can considerably cut down the search space of the standard breadth first search algorithm if we launch two simultaneous BFS. One from the `beginWord` and one from the `endWord`. We progress one node at a time from both sides and at any point in time if we find a common node in both the searches, we stop the search. This is known as `bidirectional BFS` and it considerably cuts down on the search space and hence reduces the time and space complexity.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_3.png\" width=\"600\"/>\n</center>\n\n**Algorithm**\n\n1. The algorithm is very similar to the standard BFS based approach we saw earlier.\n2. The only difference is we now do BFS starting two nodes instead of one. This also changes the termination condition of our search.\n3. We now have two visited dictionaries to keep track of nodes visited from the search starting at the respective ends.\n4. If we ever find a node/word which is in the visited dictionary of the parallel search we terminate our search, since we have found the meet point of this bidirectional search. It's more like meeting in the middle instead of going all the way through.\n\n    >Termination condition for bidirectional search is finding a word which is already been seen by the parallel search.\n\n5. The shortest transformation sequence is the sum of levels of the meet point node from both the ends. Thus, for every visited node we save its level as value in the visited dictionary.\n\n<center>\n<img src=\"../Figures/127/Word_Ladder_4.png\" width=\"600\"/>\n</center>\n\n\n<iframe src=\"https://leetcode.com/playground/oNcirzak/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"oNcirzak\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O({M}^2 \\times N)$$, where $$M$$ is the length of words and $$N$$ is the total number of words in the input word list. Similar to one directional, bidirectional also takes $$O({M}^2 \\times N)$$ time for finding out all the transformations. But the search time reduces to half, since the two parallel searches meet somewhere in the middle.\n\n* Space Complexity: $$O({M}^2 \\times N)$$, to store all $$M$$ transformations for each of the $$N$$ words in the `all_combo_dict` dictionary, same as one directional. But bidirectional reduces the search space. It narrows down because of meeting in the middle.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "word-ladder",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.578,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "843",
                "title": "Surrounded Regions",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "130",
                    "questionFrontendId": "130",
                    "sessionId": "968792",
                    "questionTitle": "Surrounded Regions",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/surrounded-regions/submit/",
                    "interpretUrl": "/problems/surrounded-regions/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void solve(vector<vector<char>>& board) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void solve(char[][] board) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def solve(self, board):\\n        \\\"\\\"\\\"\\n        :type board: List[List[str]]\\n        :rtype: None Do not return anything, modify board in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def solve(self, board: List[List[str]]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify board in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid solve(char** board, int boardSize, int* boardColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void Solve(char[][] board) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} board\\n * @return {void} Do not return anything, modify board in-place instead.\\n */\\nvar solve = function(board) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\\n# @return {Void} Do not return anything, modify board in-place instead.\\ndef solve(board)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func solve(_ board: inout [[Character]]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func solve(board [][]byte)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def solve(board: Array[Array[Char]]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun solve(board: Array<CharArray>): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn solve(board: &mut Vec<Vec<char>>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $board\\n     * @return NULL\\n     */\\n    function solve(&$board) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify board in-place instead.\\n */\\nfunction solve(board: string[][]): void {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (solve board)\\n  (-> (listof (listof char?)) void?)\\n\\n  )\"}]",
                    "sampleTestCase": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"solve\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"board\",\r\n      \"type\": \"character[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"void\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"]}",
                    "content": "<p>Given an <code>m x n</code> matrix <code>board</code> containing <code>&#39;X&#39;</code> and <code>&#39;O&#39;</code>, <em>capture all regions that are 4-directionally&nbsp;surrounded by</em> <code>&#39;X&#39;</code>.</p>\n\n<p>A region is <strong>captured</strong> by flipping all <code>&#39;O&#39;</code>s into <code>&#39;X&#39;</code>s in that surrounded region.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg\" style=\"width: 550px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;O&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;X&quot;,&quot;X&quot;,&quot;X&quot;],[&quot;X&quot;,&quot;O&quot;,&quot;X&quot;,&quot;X&quot;]]\n<strong>Explanation:</strong> Surrounded regions should not be on the border, which means that any &#39;O&#39; on the border of the board are not flipped to &#39;X&#39;. Any &#39;O&#39; that is not on the border and it is not connected to an &#39;O&#39; on the border will be flipped to &#39;X&#39;. Two cells are connected if they are adjacent cells connected horizontally or vertically.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> board = [[&quot;X&quot;]]\n<strong>Output:</strong> [[&quot;X&quot;]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> is <code>&#39;X&#39;</code> or <code>&#39;O&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Surrounded Regions",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\nThis problem is _almost_ identical as the [capture rule](https://en.wikipedia.org/wiki/Rules_of_Go#Capture) of the Go game, where one captures the opponent's stones by surrounding them. The difference is that in the Go game the borders of the board are considered to the walls that surround the stones, while in this problem a group of cells (_i.e._ region) is considered to be _**escaped**_ from the surrounding if it reaches any border.\n\n![pic](../Figures/130/130_eg.png)\n\nThis problem is yet another problem concerning the _**traversal of 2D grid**_, _e.g._ [Robot room cleaner](https://leetcode.com/articles/robot-room-cleaner/).\n\n>As similar to the traversal problems in a tree structure, there are generally two approaches in terms of solution: _**DFS**_ (Depth-First Search) and _**BFS**_ (Breadth-First Search).\n\nOne can apply either of the above strategies to traverse the 2D grid, while taking some specific actions to resolve the problems.\n\nGiven a traversal strategy (_DFS_ or _BFS_), there could be a thousand implementations for a thousand people, if we indulge ourselves to exaggerate a bit. However, there are some common neat _**techniques**_ that we could apply along with both of the strategies, in order to obtain a more optimized solution.\n<br/>\n<br/>\n\n---\n#### Approach 1: DFS (Depth-First Search)\n\n**Intuition**\n\n>The goal of this problem is to mark those _**captured**_ cells. \n\nIf we are asked to summarize the algorithm in one sentence, it would be that we enumerate all those candidate cells (_i.e._ the ones filled with `O`), and check _one by one_ if they are _captured_ or not, _i.e._ we start with a candidate cell (`O`), and then apply either DFS or BFS strategy to explore its surrounding cells.\n\n**Algorithm**\n\nLet us start with the DFS algorithm, which usually results in a more concise code than the BFS algorithm. The algorithm consists of three steps:\n\n- Step 1). We select all the cells that are located on the borders of the board.\n\n- Step 2). Start from each of the above selected cell, we then perform the _DFS_ traversal.\n\n    - If a cell on the border happens to be `O`, then we know that this cell is _alive_, together with the other `O` cells that are _connected_ to this border cell, based on the description of the problem. Two cells are _connected_, if there exists a path consisting of only `O` letter that bridges between the two cells.\n\n    - Based on the above conclusion, the goal of our DFS traversal would be to _mark_ out all those _**connected**_ `O` cells that is originated from the border, with any distinguished letter such as `E`.\n\n- Step 3). Once we iterate through all border cells, we would then obtain three types of cells:\n\n    - The one with the `X` letter: the cell that we could consider as the wall.\n\n    - The one with the `O` letter: the cells that are spared in our _DFS_ traversal, _i.e._ these cells has no connection to the border, therefore they are _**captured**_. We then should replace these cell with `X` letter.\n\n    - The one with the `E` letter: these are the cells that are marked during our DFS traversal, _i.e._ these are the cells that has at least one connection to the borders, therefore they are not _captured_. As a result, we would revert the cell to its original letter `O`.\n \n We demonstrate how the DFS works with an example in the following animation. \n\n!?!../Documents/130_LIS.json:1000,521!?!\n\n<iframe src=\"https://leetcode.com/playground/iCFkae9G/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iCFkae9G\"></iframe>\n\n**Optimizations**\n\nIn the above implementation, there are a few techniques that we applied _**under the hood**_, in order to further optimize our solution. Here we list them one by one.\n\n>Rather than iterating all candidate cells (the ones filled with `O`), we check only the ones on the **_borders_**.\n\nIn the above implementation, our starting points of _DFS_ are those cells that meet two conditions: 1). on the border. 2). filled with `O`.\n\n_As an alternative solution, one might decide to iterate all `O` cells, which is less optimal compared to our starting points._\n\nAs one can see, during DFS traversal, the alternative solution would traverse the cells that eventually might be captured, which is not necessary in our approach.\n\n>Rather than using a sort of `visited[cell_index]` map to keep track of the visited cells, we simply mark visited cell _**in place**_.\n\n_This technique helps us gain both in the space and time complexity._\n\nAs an alternative approach, one could use a additional data structure to keep track of the visited cells, which goes without saying would require additional memory. And also it requires additional calculation for the comparison. Though one might argue that we could use the hash table data structure for the `visited[]` map, which has the $$\\mathcal{O}(1)$$ asymptotic time complexity, but it is still more expensive than the simple comparison on the value of cell.\n\n>Rather than doing the boundary check within the `DFS()` function, we do it _**before**_ the invocation of the function. \n\nAs a comparison, here is the implementation where we do the boundary check within the `DFS()` function.\n\n<iframe src=\"https://leetcode.com/playground/GTZUV2MF/shared\" frameBorder=\"0\" width=\"100%\" height=\"208\" name=\"GTZUV2MF\"></iframe>\n\n_This measure reduces the number of recursion, therefore it reduces the overheads with the function calls._\n\nAs trivial as this modification might seem to be, it actually reduces the runtime of the Python implementation from _148 ms_ to _124 ms_, _i.e._ _16%_ of reduction, which beats 97% of submissions instead of 77% at the moment.\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of cells in the board. In the worst case where it contains only the `O` cells on the board, we would traverse each cell twice: once during the DFS traversal and the other time during the cell reversion in the last step.\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of cells in the board. There are mainly two places that we consume some additional memory.\n\n    - We keep a list of border cells as starting points for our traversal. We could consider the number of border cells is proportional to the total number ($$N$$) of cells.\n\n    - During the recursive calls of `DFS()` function, we would consume some space in the function call stack, _i.e._ the call stack will pile up along with the depth of recursive calls. And the maximum depth of recursive calls would be $$N$$ as in the worst scenario mentioned in the time complexity.\n\n    - As a result, the overall space complexity of the algorithm is $$\\mathcal{O}(N)$$.\n<br/>\n<br/>\n\n---\n#### Approach 2: BFS (Breadth-First Search)\n\n**Intuition**\n\n>In contrary to the DFS strategy, in BFS (Breadth-First Search) we prioritize the visit of a cell's neighbors before moving further (deeper) into the neighbor's neighbor. \n\nThough the order of visit might differ between DFS and BFS, eventually both strategies would visit the same set of cells, for most of the 2D grid traversal problems. This is also the case for this problem.\n\n**Algorithm**\n\nWe could reuse the bulk of the DFS approach, while simply replacing the `DFS()` function with a `BFS()` function.\nHere we just elaborate the implementation of the `BFS()` function.\n\n- Essentially we can implement the BFS with the help of queue data structure, which could be of `Array` or more preferably `LinkedList` in Java or `Deque` in Python.\n\n- Through the queue, we maintain the order of visit for the cells. Due to the **FIFO** (First-In First-Out) property of the queue, the one at the head of the queue would have the highest priority to be visited. \n\n- The main logic of the algorithm is a loop that iterates through the above-mentioned queue. At each iteration of the loop, we _pop out_ the **head** element from the queue.\n\n    - If the popped element is of the candidate cell (_i.e._ `O`), we mark it as escaped, otherwise we skip this iteration.\n\n    - For a candidate cell, we then simply append its neighbor cells into the queue, which would get their turns to be visited in the next iterations.\n\nAs comparison, we demonstrate how BFS works with the same example in DFS, in the following animation. \n\n!?!../Documents/130_SEC.json:1000,533!?!\n\n<iframe src=\"https://leetcode.com/playground/Vuo9LUBt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Vuo9LUBt\"></iframe>\n\n\n**From BFS to DFS**\n\nIn the above implementation of BFS, the fun part is that we could easily convert the BFS strategy to DFS by changing one single line of code. And the obtained DFS implementation is done in iteration, instead of recursion.\n\n>The key is that instead of using the _**queue**_ data structure which follows the principle of FIFO (First-In First-Out), if we use the _**stack**_ data structure which follows the principle of LIFO (Last-In First-Out), we then switch the strategy from BFS to DFS.\n\nSpecifically, at the moment we pop an element from the queue, instead of popping out the _head_ element, we pop the _tail_ element, which then changes the behavior of the container from queue to stack. Here is how it looks like.\n\n<iframe src=\"https://leetcode.com/playground/RM9t4VNg/shared\" frameBorder=\"0\" width=\"100%\" height=\"446\" name=\"RM9t4VNg\"></iframe>\n\nNote that, though the above implementations indeed follow the DFS strategy, they are NOT equivalent to the previous _**recursive**_ version of DFS, _i.e._ they do not produce the exactly same sequence of visit.\n\nIn the recursive DFS, we would visit the _right-hand side_ neighbor `(row, col+1)` first, while in the iterative DFS, we would visit the _up_ neighbor `(row-1, col)` first.\n\nIn order to obtain the same order of visit as the recursive DFS, one should _reverse_ the processing order of neighbors in the above iterative DFS.\n\n**Complexity**\n\n- Time Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of cells in the board. In the worst case where it contains only the `O` cells on the board, we would traverse each cell twice: once during the BFS traversal and the other time during the cell reversion in the last step.\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the number of cells in the board. There are mainly two places that we consume some additional memory.\n\n    - We keep a list of border cells as starting points for our traversal. We could consider the number of border cells is proportional to the total number ($$N$$) of cells.\n\n    - Within each invocation of `BFS()` function, we use a queue data structure to hold the cells to be visited. We then need to estimate the upper bound on the size of the queue. _Intuitively we could imagine the unfold of BFS as the structure of an onion._\n    Each layer of the onion represents the cells that has the same distance to the starting point. \n    Any given moment the queue would contain no more than two layers of _onion_, which in the worst case might cover _almost_ all cells in the board.\n\n    - As a result, the overall space complexity of the algorithm is $$\\mathcal{O}(N)$$.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "surrounded-regions",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.701,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "844",
                "title": "Lowest Common Ancestor of a Binary Tree",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "236",
                    "questionFrontendId": "236",
                    "sessionId": "968792",
                    "questionTitle": "Lowest Common Ancestor of a Binary Tree",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/submit/",
                    "interpretUrl": "/problems/lowest-common-ancestor-of-a-binary-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution(object):\\n    def lowestCommonAncestor(self, root, p, q):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :type p: TreeNode\\n        :type q: TreeNode\\n        :rtype: TreeNode\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\\n    \\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int x) { val = x; }\\n * }\\n */\\npublic class Solution {\\n    public TreeNode LowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val) {\\n *     this.val = val;\\n *     this.left = this.right = null;\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @param {TreeNode} p\\n * @param {TreeNode} q\\n * @return {TreeNode}\\n */\\nvar lowestCommonAncestor = function(root, p, q) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val)\\n#         @val = val\\n#         @left, @right = nil, nil\\n#     end\\n# end\\n\\n# @param {TreeNode} root\\n# @param {TreeNode} p\\n# @param {TreeNode} q\\n# @return {TreeNode}\\ndef lowest_common_ancestor(root, p, q)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init(_ val: Int) {\\n *         self.val = val\\n *         self.left = nil\\n *         self.right = nil\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func lowestCommonAncestor(_ root: TreeNode?, _ p: TreeNode?, _ q: TreeNode?) -> TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\n func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {\\n  \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var _value: Int) {\\n *   var value: Int = _value\\n *   var left: TreeNode = null\\n *   var right: TreeNode = null\\n * }\\n */\\n\\nobject Solution {\\n    def lowestCommonAncestor(root: TreeNode, p: TreeNode, q: TreeNode): TreeNode = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int = 0) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\n\\nclass Solution {\\n    fun lowestCommonAncestor(root: TreeNode?, p: TreeNode?, q: TreeNode?): TreeNode? {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($value) { $this->val = $value; }\\n * }\\n */\\n\\nclass Solution {\\n    /**\\n     * @param TreeNode $root\\n     * @param TreeNode $p\\n     * @param TreeNode $q\\n     * @return TreeNode\\n     */\\n    function lowestCommonAncestor($root, $p, $q) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\\n\\t\\n};\"}]",
                    "sampleTestCase": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"lowestCommonAncestor\",\n  \"params\": [\n    {\n      \"name\": \"root\",\n      \"type\": \"TreeNode\"\n    },\n    {\n      \"name\": \"p\",\n      \"type\": \"integer\"\n    },\n    {\n      \"name\": \"q\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"TreeNode\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>\n\n<p>According to the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">definition of LCA on Wikipedia</a>: &ldquo;The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow <b>a node to be a descendant of itself</b>).&rdquo;</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The LCA of nodes 5 and 1 is 3.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/14/binarytree.png\" style=\"width: 200px; height: 190px;\" />\n<pre>\n<strong>Input:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> root = [1,2], p = 1, q = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[2, 10<sup>5</sup>]</code>.</li>\n\t<li><code>-10<sup>9</sup> &lt;= Node.val &lt;= 10<sup>9</sup></code></li>\n\t<li>All <code>Node.val</code> are <strong>unique</strong>.</li>\n\t<li><code>p != q</code></li>\n\t<li><code>p</code> and <code>q</code> will exist in the tree.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Lowest Common Ancestor of a Binary Tree",
                        "content": "[TOC]\n\n## Solution\n\nFirst the given nodes `p` and `q` are to be searched in a binary tree and then their lowest common ancestor is to be found. We can resort to a normal tree traversal to search for the two nodes. Once we reach the desired nodes `p` and `q`, we can backtrack and find the lowest common ancestor.\n\n<center>\n<img src=\"../Figures/236/236_LCA_Binary_1.png\" width=\"600\"/>\n</center>\n\n#### Approach 1: Recursive Approach\n\n**Intuition**\n\nThe approach is pretty intuitive. Traverse the tree in a depth first manner. The moment you encounter either of the nodes `p` or `q`, return some boolean flag. The flag helps to determine if we found the required nodes in any of the paths. The least common ancestor would then be the node for which both the subtree recursions return a `True` flag. It can also be the node which itself is one of `p` or `q` and for which one of the subtree recursions returns a `True` flag.\n\nLet us look at the formal algorithm based on this idea.\n\n**Algorithm**\n\n1. Start traversing the tree from the root node.\n2. If the current node itself is one of `p` or `q`, we would mark a variable `mid` as `True` and continue the search for the other node in the left and right branches.\n3. If either of the left or the right branch returns `True`, this means one of the two nodes was found below.\n4. If at any point in the traversal, any two of the three flags `left`, `right` or `mid` become `True`, this means we have found the lowest common ancestor for the nodes `p` and `q`.\n\nLet us look at a sample tree and we search for the lowest common ancestor of two nodes `9` and `11` in the tree.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_1.json:770,460!?!\n\n</center>\n\nFollowing is the sequence of nodes that are followed in the recursion:\n\n<pre>\n1 --> 2 --> 4 --> 8\nBACKTRACK 8 --> 4\n4 --> 9 (ONE NODE FOUND, return True)\nBACKTRACK 9 --> 4 --> 2\n2 --> 5 --> 10\nBACKTRACK 10 --> 5\n5 --> 11 (ANOTHER NODE FOUND, return True)\nBACKTRACK 11 --> 5 --> 2\n\n2 is the node where we have left = True and right = True and hence it is the lowest common ancestor.\n</pre>\n\n\n<iframe src=\"https://leetcode.com/playground/SaUmkb92/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SaUmkb92\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity: $$O(N)$$. This is because the maximum amount of space utilized by the recursion stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n<br/>\n<br/>\n\n---\n\n#### Approach 2: Iterative using parent pointers\n\n**Intuition**\n\nIf we have parent pointers for each node we can traverse back from `p` and `q` to get their ancestors. The first common node we get during this traversal would be the LCA node. We can save the parent pointers in a dictionary as we traverse the tree.\n\n**Algorithm**\n\n1. Start from the root node and traverse the tree.\n2. Until we find `p` and `q` both, keep storing the parent pointers in a dictionary.\n3. Once we have found both `p` and `q`, we get all the ancestors for `p` using the parent dictionary and add to a set called `ancestors`.\n4. Similarly, we traverse through ancestors for node `q`. If the ancestor is present in the ancestors set for `p`, this means this is the first ancestor common between `p` and `q` (while traversing upwards) and hence this is the LCA node.\n\n<iframe src=\"https://leetcode.com/playground/uh78aTxV/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uh78aTxV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree.\n\n* Space Complexity : $$O(N)$$. In the worst case space utilized by the stack, the parent pointer dictionary and the ancestor set, would be $$N$$ each, since the height of a skewed binary tree could be $$N$$.\n<br>\n<br>\n\n---\n\n#### Approach 3: Iterative without parent pointers\n\n**Intuition**\n\nIn the previous approach, we come across the LCA during the backtracking process. We can get rid of the backtracking process itself. In this approach we always have a pointer to the probable LCA and the moment we find both the nodes we return the pointer as the answer.\n\n**Algorithm**\n\n1. Start with root node.\n2. Put the `(root, root_state)` on to the stack. `root_state` defines whether one of the children or both children of `root` are left for traversal.\n3. While the stack is not empty, peek into the top element of the stack represented as `(parent_node, parent_state)`.\n4. Before traversing any of the child nodes of `parent_node` we check if the `parent_node` itself is one of `p` or `q`.\n5. First time we find either of `p` or `q`, set a boolean flag called `one_node_found` to `True`. Also start keeping track of the lowest common ancestors by keeping a note of the top index of the stack in the variable `LCA_index`. Since all the current elements of the stack are ancestors of the node we just found.\n6. The second time `parent_node == p or parent_node == q` it means we have found both the nodes and we can return the `LCA node`.\n7. Whenever we visit a child of a `parent_node` we push the `(parent_node, updated_parent_state)` onto the stack. We update the state of the parent since a child/branch has been visited/processed and accordingly the state changes.\n8. A node finally gets popped off from the stack when the state becomes `BOTH_DONE` implying both left and right subtrees have been pushed onto the stack and processed. If `one_node_found` is `True` then we need to check if the top node being popped could be one of the ancestors of the found node. In that case we need to reduce `LCA_index` by one. Since one of the ancestors was popped off.\n\n> Whenever both `p` and `q` are found, `LCA_index` would be pointing to an index in the stack which would contain all the common ancestors between `p` and `q`. And the `LCA_index` element has the `lowest` ancestor common between p and q.\n\n<center>\n\n!?!../Documents/236_LCA_Binary_Tree_2.json:770,460!?!\n\n</center>\n\nThe animation above shows how a stack is used to traverse the binary tree and keep track of the common ancestors between nodes `p` and `q`.\n\n<iframe src=\"https://leetcode.com/playground/j6C3VpYf/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"j6C3VpYf\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity : $$O(N)$$, where $$N$$ is the number of nodes in the binary tree. In the worst case we might be visiting all the nodes of the binary tree. The advantage of this approach is that we can prune backtracking. We simply return once both the nodes are found.\n\n* Space Complexity : $$O(N)$$. In the worst case the space utilized by stack would be $$N$$ since the height of a skewed binary tree could be $$N$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.14,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "845",
                "title": "Binary Tree Maximum Path Sum",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "124",
                    "questionFrontendId": "124",
                    "sessionId": "968792",
                    "questionTitle": "Binary Tree Maximum Path Sum",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/binary-tree-maximum-path-sum/submit/",
                    "interpretUrl": "/problems/binary-tree-maximum-path-sum/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    int maxPathSum(TreeNode* root) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public int maxPathSum(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode(object):\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution(object):\\n    def maxPathSum(self, root):\\n        \\\"\\\"\\\"\\n        :type root: TreeNode\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     struct TreeNode *left;\\n *     struct TreeNode *right;\\n * };\\n */\\n\\n\\nint maxPathSum(struct TreeNode* root){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public int MaxPathSum(TreeNode root) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {TreeNode} root\\n * @return {number}\\n */\\nvar maxPathSum = function(root) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# Definition for a binary tree node.\\n# class TreeNode\\n#     attr_accessor :val, :left, :right\\n#     def initialize(val = 0, left = nil, right = nil)\\n#         @val = val\\n#         @left = left\\n#         @right = right\\n#     end\\n# end\\n# @param {TreeNode} root\\n# @return {Integer}\\ndef max_path_sum(root)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\nclass Solution {\\n    func maxPathSum(_ root: TreeNode?) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nfunc maxPathSum(root *TreeNode) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode(_value: Int = 0, _left: TreeNode = null, _right: TreeNode = null) {\\n *   var value: Int = _value\\n *   var left: TreeNode = _left\\n *   var right: TreeNode = _right\\n * }\\n */\\nobject Solution {\\n    def maxPathSum(root: TreeNode): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * Example:\\n * var ti = TreeNode(5)\\n * var v = ti.`val`\\n * Definition for a binary tree node.\\n * class TreeNode(var `val`: Int) {\\n *     var left: TreeNode? = null\\n *     var right: TreeNode? = null\\n * }\\n */\\nclass Solution {\\n    fun maxPathSum(root: TreeNode?): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// Definition for a binary tree node.\\n// #[derive(Debug, PartialEq, Eq)]\\n// pub struct TreeNode {\\n//   pub val: i32,\\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\\n// }\\n// \\n// impl TreeNode {\\n//   #[inline]\\n//   pub fn new(val: i32) -> Self {\\n//     TreeNode {\\n//       val,\\n//       left: None,\\n//       right: None\\n//     }\\n//   }\\n// }\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\nimpl Solution {\\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     public $val = null;\\n *     public $left = null;\\n *     public $right = null;\\n *     function __construct($val = 0, $left = null, $right = null) {\\n *         $this->val = $val;\\n *         $this->left = $left;\\n *         $this->right = $right;\\n *     }\\n * }\\n */\\nclass Solution {\\n\\n    /**\\n     * @param TreeNode $root\\n     * @return Integer\\n     */\\n    function maxPathSum($root) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * Definition for a binary tree node.\\n * class TreeNode {\\n *     val: number\\n *     left: TreeNode | null\\n *     right: TreeNode | null\\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\\n *         this.val = (val===undefined ? 0 : val)\\n *         this.left = (left===undefined ? null : left)\\n *         this.right = (right===undefined ? null : right)\\n *     }\\n * }\\n */\\n\\nfunction maxPathSum(root: TreeNode | null): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"; Definition for a binary tree node.\\n#|\\n\\n; val : integer?\\n; left : (or/c tree-node? #f)\\n; right : (or/c tree-node? #f)\\n(struct tree-node\\n  (val left right) #:mutable #:transparent)\\n\\n; constructor\\n(define (make-tree-node [val 0])\\n  (tree-node val #f #f))\\n\\n|#\\n\\n(define/contract (max-path-sum root)\\n  (-> (or/c tree-node? #f) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"%% Definition for a binary tree node.\\n%%\\n%% -record(tree_node, {val = 0 :: integer(),\\n%%                     left = null  :: 'null' | #tree_node{},\\n%%                     right = null :: 'null' | #tree_node{}}).\\n\\n-spec max_path_sum(Root :: #tree_node{} | null) -> integer().\\nmax_path_sum(Root) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"# Definition for a binary tree node.\\n#\\n# defmodule TreeNode do\\n#   @type t :: %__MODULE__{\\n#           val: integer,\\n#           left: TreeNode.t() | nil,\\n#           right: TreeNode.t() | nil\\n#         }\\n#   defstruct val: 0, left: nil, right: nil\\n# end\\n\\ndefmodule Solution do\\n  @spec max_path_sum(root :: TreeNode.t | nil) :: integer\\n  def max_path_sum(root) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxPathSum\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"root\",\r\n      \"type\": \"TreeNode\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <strong>path</strong> in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence <strong>at most once</strong>. Note that the path does not need to pass through the root.</p>\n\n<p>The <strong>path sum</strong> of a path is the sum of the node&#39;s values in the path.</p>\n\n<p>Given the <code>root</code> of a binary tree, return <em>the maximum <strong>path sum</strong> of any path</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\" style=\"width: 322px; height: 182px;\" />\n<pre>\n<strong>Input:</strong> root = [1,2,3]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The optimal path is 2 -&gt; 1 -&gt; 3 with a path sum of 2 + 1 + 3 = 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg\" />\n<pre>\n<strong>Input:</strong> root = [-10,9,20,null,null,15,7]\n<strong>Output:</strong> 42\n<strong>Explanation:</strong> The optimal path is 15 -&gt; 20 -&gt; 7 with a path sum of 15 + 20 + 7 = 42.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[1, 3 * 10<sup>4</sup>]</code>.</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Binary Tree Maximum Path Sum",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Recursion\n\n**Intuition**\n\nFirst of all, let's simplify the problem and implement a function \n`max_gain(node)`\nwhich takes a node as an argument and computes a maximum contribution\nthat this node and one/zero of its subtrees could add.  \n\n> In other words, it's a _maximum gain_ one could have including \nthe node (and maybe one of its subtrees) into the path.\n\n![gains](../Figures/124/124_gains.png)\n\nHence if one would know for sure that the max path contains `root`, \nthe problem would be solved as `max_gain(root)`.\nUnfortunately, _the max path does not need to go through the root_, and\nhere is an example of such a tree\n\n![gains](../Figures/124/124_max_path.png)\n\nThat means one needs to modify the above function and to check at\neach step what is better : to continue the current path or\nto start a new path with the current node as a highest node\nin this new path. \n\n**Algorithm**\n\nNow everything is ready to write down an algorithm.\n\n* Initiate `max_sum` as the smallest possible integer and \ncall `max_gain(node = root)`.\n* Implement `max_gain(node)` \nwith a check to continue the old path/to start a new path:\n    * Base case : if node is null, the max gain is `0`.\n    * Call `max_gain` recursively for the node children to\n    compute max gain from the left and right subtrees :\n    `left_gain = max(max_gain(node.left), 0)` and  \n    `right_gain = max(max_gain(node.right), 0)`.\n    * Now check to continue the old path or to start a new path.\n    To start a new path would cost \n    `price_newpath = node.val + left_gain + right_gain`.\n    Update `max_sum` if it's better to start a new path.\n    * For the recursion return the max gain \n    the node and one/zero of its subtrees could add \n    to the current path : \n    `node.val + max(left_gain, right_gain)`.       \n\n**Tree Node**\n\nHere is the definition of the `TreeNode` which we would use\nin the following implementation.\n\n<iframe src=\"https://leetcode.com/playground/UwSQTvV8/shared\" frameBorder=\"0\" width=\"100%\" height=\"225\" name=\"UwSQTvV8\"></iframe>\n\n**Implementation**\n\n!?!../Documents/124_LIS.json:1000,494!?!\n\n<iframe src=\"https://leetcode.com/playground/mvwsxCCt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mvwsxCCt\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$, where `N` is number of nodes,\nsince we visit each node not more than 2 times.\n\n* Space complexity: $$\\mathcal{O}(H)$$, where $$H$$ is a tree height, \nto keep the recursion stack. In the average case of balanced tree, the tree height\n$$H = \\log N$$, in the worst case of skewed tree, $$H = N$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "binary-tree-maximum-path-sum",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.787,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "846",
                "title": "Friend Circles",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "547",
                    "questionFrontendId": "547",
                    "sessionId": "968792",
                    "questionTitle": "Number of Provinces",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/number-of-provinces/submit/",
                    "interpretUrl": "/problems/number-of-provinces/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int findCircleNum(vector<vector<int>>& isConnected) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int findCircleNum(int[][] isConnected) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findCircleNum(self, isConnected):\\n        \\\"\\\"\\\"\\n        :type isConnected: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findCircleNum(self, isConnected: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint findCircleNum(int** isConnected, int isConnectedSize, int* isConnectedColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int FindCircleNum(int[][] isConnected) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} isConnected\\n * @return {number}\\n */\\nvar findCircleNum = function(isConnected) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} is_connected\\n# @return {Integer}\\ndef find_circle_num(is_connected)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findCircleNum(_ isConnected: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findCircleNum(isConnected [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findCircleNum(isConnected: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findCircleNum(isConnected: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_circle_num(is_connected: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $isConnected\\n     * @return Integer\\n     */\\n    function findCircleNum($isConnected) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findCircleNum(isConnected: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-circle-num isConnected)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_circle_num(IsConnected :: [[integer()]]) -> integer().\\nfind_circle_num(IsConnected) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_circle_num(is_connected :: [[integer]]) :: integer\\n  def find_circle_num(is_connected) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,1,0],[1,1,0],[0,0,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findCircleNum\",\n  \"params\": [\n    {\n      \"name\": \"isConnected\",\n      \"type\": \"integer[][]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p>\n\n<p>A <strong>province</strong> is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n\n<p>You are given an <code>n x n</code> matrix <code>isConnected</code> where <code>isConnected[i][j] = 1</code> if the <code>i<sup>th</sup></code> city and the <code>j<sup>th</sup></code> city are directly connected, and <code>isConnected[i][j] = 0</code> otherwise.</p>\n\n<p>Return <em>the total number of <strong>provinces</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg\" style=\"width: 222px; height: 142px;\" />\n<pre>\n<strong>Input:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>n == isConnected.length</code></li>\n\t<li><code>n == isConnected[i].length</code></li>\n\t<li><code>isConnected[i][j]</code> is <code>1</code> or <code>0</code>.</li>\n\t<li><code>isConnected[i][i] == 1</code></li>\n\t<li><code>isConnected[i][j] == isConnected[j][i]</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Friend Circles",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach #1 Using Depth First Search[Accepted]\n\n**Algorithm**\n\nThe given matrix can be viewed as the Adjacency Matrix of a graph. By viewing the matrix in such a manner, our problem reduces\nto the problem of finding the number of connected components in an undirected graph. In order to understand the above statement, consider the\nexample matrix below:\n\n```\nM= [1 1 0 0 0 0\n\n    1 1 0 0 0 0\n\n    0 0 1 1 1 0\n\n    0 0 1 1 0 0\n\n    0 0 1 0 1 0\n\n    0 0 0 0 0 1]\n\n```\n\nIf we view this matrix M as the adjancency matrix of a graph, the following graph is formed:\n\n![Friend_Circles](../Figures/547/547_Friend_Circles_1.jpg)\n\nIn this graph, the node numbers represent the indices in the matrix M and an edge exists between the nodes numbered $$i$$ and $$j$$,\nif there is a 1 at the corresponding $$M[i][j]$$.\n\nIn order to find the number of connected components in an undirected graph, one of the simplest methods is to make use of Depth First Search\nstarting from every node. We make use of $$visited$$ array of size $$N$$($$M$$ is of size $$NxN$$). This $$visited[i]$$ element\nis used to indicate that the $$i^{th}$$ node has already been visited while undergoing a Depth First Search from some node.\n\nTo undergo DFS, we pick up a node and visit all its directly connected nodes. But, as soon as we visit any of those nodes, we recursively apply the same process to them as well. Thus, we try to go as deeper into the levels of the graph as possible starting from a current node first, leaving the other direct neighbour nodes to be visited later on.\n\nThe depth first search for an arbitrary graph is shown below:\n\n<!--![Friend_Circles](../Figures/547/547_Friend_Circles2.gif)-->\n\n!?!../Documents/547_Friend_Circles_dfs.json:1000,563!?!\n\nFrom the graph, we can see that the components which are connected can be reached starting from any single node of the connected group.\nThus, to find the number of connected components, we start from every node which isn't visited right now and apply DFS starting with it.\nWe increment the $$count$$ of connected components for every new starting node.\n\n\n<iframe src=\"https://leetcode.com/playground/YcWQPXNS/shared\" frameBorder=\"0\" name=\"YcWQPXNS\" width=\"100%\" height=\"445\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. The complete matrix of size $$n^2$$ is traversed.\n\n* Space complexity : $$O(n)$$. $$visited$$ array of size $$n$$ is used.\n\n---\n\n#### Approach #2 Using Breadth First Search[Accepted]\n\n**Algorithm**\n\nAs discussed in the above method, if we view the given matrix as an adjacency matrix of a graph, we can use graph algorithms easily to find the number of connected components. This approach makes use of Breadth First Search for a graph.\n\nIn case of Breadth First Search, we start from a particular node and visit all its directly connected nodes first. After all the direct neighbours have been visited, we apply the same process to the neighbour nodes as well. Thus, we exhaust the nodes of a graph on a level by level basis. An example of Breadth First Search is shown below:\n\n<!--![Friend_Circles](../Figures/547/547_Friend_Circles3.gif)-->\n\n!?!../Documents/547_Friend_Circles_bfs.json:1000,563!?!\n\nIn this case also, we apply BFS starting from one of the nodes. We make use of a $$visited$$ array to keep a track of the already visited nodes. We increment the $$count$$ of connected components whenever we need to start off with a new node as the root node for applying BFS which hasn't been already visited.\n\n<iframe src=\"https://leetcode.com/playground/srJD42Lf/shared\" frameBorder=\"0\" name=\"srJD42Lf\" width=\"100%\" height=\"428\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. The complete matrix of size $$n^2$$ is traversed.\n\n* Space complexity : $$O(n)$$. A $$queue$$ and $$visited$$ array of size $$n$$ is used.\n\n---\n\n\n#### Approach #3 Using Union-Find Method[Accepted]\n\n**Algorithm**\n\nAnother method that can be used to determine the number of connected components in a graph is the union find method. The method is simple.\n\nWe make use of a $$parent$$ array of size $$N$$. We traverse over all the nodes of the graph. For every node traversed, we traverse over all the nodes directly connected to it and assign them to a single group which is represented by their $$parent$$ node. This process is called forming a $$union$$. Every group has a single $$parent$$ node, whose own parent is given by $$\\text{-1}$$.\n\nFor every new pair of nodes found, we look for the parents of both the nodes. If the parents nodes are the same, it indicates that they have already been united into the same group. If the parent nodes differ, it means they are yet to be united. Thus, for the pair of nodes $$(x, y)$$, while forming the union, we assign $$parent\\big[parent[x]\\big]=parent[y]$$, which ultimately combines them into the same group.\n\nThe following animation depicts the process for a simple matrix:\n\n<!--![Friend_Circles](../Figures/547/547_Friend_Circles4.gif)-->\n\n!?!../Documents/547_Friend_Circles_union.json:1000,563!?!\n\nAt the end, we find the number of groups, or the number of parent nodes. Such nodes have their parents indicated by a $$\\text{-1}$$. This gives us the required count.\n\n\n<iframe src=\"https://leetcode.com/playground/LC2i2T7b/shared\" frameBorder=\"0\" name=\"LC2i2T7b\" width=\"100%\" height=\"515\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$. We traverse over the complete matrix once. Union and find operations take $$O(n)$$ time in the worst case.\n* Space complexity : $$O(n)$$. $$parent$$ array of size $$n$$ is used.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "friend-circles",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.697,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "847",
                "title": "Course Schedule",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "207",
                    "questionFrontendId": "207",
                    "sessionId": "968792",
                    "questionTitle": "Course Schedule",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/course-schedule/submit/",
                    "interpretUrl": "/problems/course-schedule/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def canFinish(self, numCourses, prerequisites):\\n        \\\"\\\"\\\"\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool canFinish(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool CanFinish(int numCourses, int[][] prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} numCourses\\n * @param {number[][]} prerequisites\\n * @return {boolean}\\n */\\nvar canFinish = function(numCourses, prerequisites) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num_courses\\n# @param {Integer[][]} prerequisites\\n# @return {Boolean}\\ndef can_finish(num_courses, prerequisites)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func canFinish(numCourses int, prerequisites [][]int) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $numCourses\\n     * @param Integer[][] $prerequisites\\n     * @return Boolean\\n     */\\n    function canFinish($numCourses, $prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function canFinish(numCourses: number, prerequisites: number[][]): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (can-finish numCourses prerequisites)\\n  (-> exact-integer? (listof (listof exact-integer?)) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec can_finish(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> boolean().\\ncan_finish(NumCourses, Prerequisites) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec can_finish(num_courses :: integer, prerequisites :: [[integer]]) :: boolean\\n  def can_finish(num_courses, prerequisites) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2\n[[1,0]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"canFinish\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"numCourses\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"prerequisites\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <code>true</code> if you can finish all courses. Otherwise, return <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0. So it is possible.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0],[0,1]]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> There are a total of 2 courses to take. \nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li>All the pairs prerequisites[i] are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
                        "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
                        "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
                    ],
                    "solution": {
                        "title": "Course Schedule",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Backtracking\n\n**Intuition**\n\nThe problem could be modeled as yet another *__graph traversal__* problem, where each course can be represented as a _vertex_ in a graph and the dependency between the courses can be modeled as a directed edge between two vertex.\n\n>And the problem to determine if one could build a valid schedule of courses that satisfies all the dependencies (_i.e._ _**constraints**_) would be equivalent to determine if the corresponding graph is a **DAG** (_Directed Acyclic Graph_), _i.e._ there is no cycle existed in the graph.\n\n![pic](../Figures/207/207_graph.png)\n\nA typical strategy for graph traversal problems would be [backtracking](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/) or simply DFS (depth-first search).\n\nHere let us start with the backtracking algorithm, which arguably might be more intuitive.\n\n>As a reminder, [backtracking](https://en.wikipedia.org/wiki/Backtracking) is a general algorithm that is often applied to solve the [constraint satisfaction problems](https://en.wikipedia.org/wiki/Constraint_satisfaction_problem), which incrementally builds candidates to the solutions, and abandons a candidate (_i.e._ backtracks) as soon as it determines that the candidate would not lead to a valid solution.\n\nThe general idea here is that we could enumerate each course (vertex), to check if it could form cyclic dependencies (_i.e._ a cyclic path) starting from this course.\n\nThe check of cyclic dependencies for each course could be done via *__backtracking__*, where we incrementally follow the dependencies until either there is no more dependency or we come across a previously visited course along the path.\n\n\n**Algorithm**\n\nThe overall structure of the algorithm is simple, which consists of three main steps: \n\n- Step 1). we build a graph data structure from the given list of course dependencies. Here we adopt the adjacency list data structure as shown below to represent the graph, which can be implemented via hashmap or dictionary. Each entry in the adjacency list represents a node which consists of a node index and a list of neighbors nodes that follow from the node.\n![pic](../Figures/207/207_adjacency_list.png)\n<br/>\n- Step 2). we then enumerate each node (course) in the constructed graph, to check if we could form a dependency cycle starting from the node. \n<br/>\n- Step 3). we perform the cyclic check via backtracking, where we **_breadcrumb_** our path (_i.e._ mark the nodes we visited) to detect if we come across a previously visited node (hence a cycle detected). We also remove the breadcrumbs for each iteration.\n\n!?!../Documents/207_LIS.json:1000,383!?!\n\n<iframe src=\"https://leetcode.com/playground/3GfTcsvg/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"3GfTcsvg\"></iframe>\n\n\n\n**Complexity**\n\n- Time Complexity: $$\\mathcal{O}(|E| + |V| ^ 2)$$ where $$|E|$$ is the number of dependencies, $$|V|$$ is the number of courses and $$d$$ is the maximum length of acyclic paths in the graph.\n    <br/>\n    - First of all, it would take us $$|E|$$ steps to build a graph in the first step.\n    <br/>\n    - For a single round of backtracking, in the worst case where all the nodes chained up in a line, it would take us maximum $$|V|$$ steps to terminate the backtracking.\n    ![pic](../Figures/207/207_chain.png)\n    <br/>\n    - Again, follow the above worst scenario where all nodes are chained up in a line, it would take us in total $$\\sum_{i=1}^{|V|}{i} = \\frac{(1+|V|)\\cdot|V|}{2}$$ steps to finish the check for all nodes.\n    <br/>\n    - As a result, the overall time complexity of the algorithm would be $$\\mathcal{O}(|E| + |V| ^ 2)$$.\n<br/>\n<br/>\n\n- Space Complexity: $$\\mathcal{O}(|E| + |V|)$$, with the same denotation as in the above time complexity.\n    </br>\n    - We built a graph data structure in the algorithm, which would consume $$|E| + |V|$$ space.\n    <br/>\n    - In addition, during the backtracking process, we employed a sort of bitmap (`path`) to keep track of all visited nodes, which consumes $$|V|$$ space.\n    <br/>\n    - Finally, since we implement the function in recursion, which would incur additional memory consumption on call stack. In the worst case where all nodes are chained up in a line, the recursion would pile up $$|V|$$ times.\n    <br/>\n    - Hence the overall space complexity of the algorithm would be $$\\mathcal{O}(|E| + 3\\cdot|V|) = \\mathcal{O}(|E| + |V|) $$.\n<br/>\n<br/>\n\n---\n#### Approach 2: Postorder DFS (Depth-First Search)\n\n**Intuition**\n\nAs one might notice that, with the above backtracking algorithm, we would visit certain nodes multiple times, which is not the most efficient way.\n\n![pic](../Figures/207/207_chain.png)\n\nFor instance, in the above graph where the nodes are chained up in a line, the backtracking algorithm would end up of being a nested two-level iteration over the nodes, which we could rewrite as the following pseudo code:\n\n```python\nfor i in range(0, len(nodes)):\n    # start from the current node to check if a cycle might be formed.\n    for j in range(i, len(nodes)):\n        isCyclic(nodes[j], courseDict, path)\n```\n\nOne might wonder that if there is a better algorithm that visits each node once and only once. And the answer is yes.\n\n_In the above example, for the first node in the chain, once we've done the check that there would be no cycle formed starting from this node, we don't have to do the same check for all the nodes in the downstream._\n\n>The rationale is that given a node, if the subgraph formed by all descendant nodes from this node has no cycle, then adding this node to the subgraph would not form a cycle either. \n\nFrom the perspective of graph traversal, the above rationale could be implemented with the strategy of **postorder DFS** (depth-first search), in which strategy we visit a node's descendant nodes before the node itself. \n\n**Algorithm**\n\nWe could implement the postorder DFS based on the above backtracking algorithm, by simply adding another bitmap (_i.e._ `checked[node_index]`) which indicates whether we have done the cyclic check starting from a particular node.\n\nHere are the breakdowns of the algorithm, where the first 2 steps are the same as in the previous backtracking algorithm.\n\n- Step 1). We build a graph data structure from the given list of course dependencies.\n<br/>\n- Step 2). We then enumerate each node (course) in the constructed graph, to check if we could form a dependency cycle starting from the node.\n<br/>\n- Step 3.1). We check if the current node has been *checked* before, otherwise we enumerate through its child nodes via backtracking, where we **_breadcrumb_** our path (_i.e._ mark the nodes we visited) to detect if we come across a previously visited node (hence a cycle detected). We also remove the breadcrumbs for each iteration.\n<br/>\n- Step 3.2). Once we visited all the child nodes (_i.e._ postorder), we mark the current node as `checked`.\n\n<iframe src=\"https://leetcode.com/playground/RQmjEhiw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"RQmjEhiw\"></iframe>\n\nNote, one could also use a single bitmap with 3 states such as  `not_visited`, `visited`, `checked`, rather than having two bitmaps as we did in the algorithm, though we argue that it might be clearer to have two separated bitmaps.\n\n**Complexity**\n\n- Time Complexity: $$\\mathcal{O}(|E| + |V|)$$ where $$|V|$$ is the number of courses, and $$|E|$$ is the number of dependencies.\n<br/>\n    - As in the previous algorithm, it would take us $$|E|$$ time complexity to build a graph in the first step.\n    <br/>\n    - Since we perform a postorder DFS traversal in the graph, we visit each vertex and each edge once and only once in the worst case, _i.e._ $$|E| + |V|$$.\n<br/>\n<br/>\n\n- Space Complexity: $$\\mathcal{O}(|E| + |V|)$$, with the same denotation as in the above time complexity.\n    </br>\n    - We built a graph data structure in the algorithm, which would consume $$|E| + |V|$$ space.\n    <br/>\n    - In addition, during the backtracking process, we employed two bitmaps (`path` and `visited`) to keep track of the visited path and the status of check respectively, which consumes $$2 \\cdot |V|$$ space.\n    <br/>\n    - Finally, since we implement the function in recursion, which would incur additional memory consumption on call stack. In the worst case where all nodes chained up in a line, the recursion would pile up $$|V|$$ times.\n    <br/>\n    - Hence the overall space complexity of the algorithm would be $$\\mathcal{O}(|E| + 4\\cdot|V|) = \\mathcal{O}(|E| + |V|)$$.\n<br/>\n<br/>\n\n---\n#### Approach 3: Topological Sort\n\n**Intuition**\n\nActually, the problem is also known as [topological sort](https://en.wikipedia.org/wiki/Topological_sorting) problem, which is to find a global order for all nodes in a DAG (_Directed Acyclic Graph_) with regarding to their dependencies.\n\nA linear algorithm was first proposed by [Arthur Kahn](https://en.wikipedia.org/wiki/Topological_sorting) in 1962, in his paper of [\"Topological order of large networks\"](https://dl.acm.org/doi/10.1145/368996.369025). The algorithm returns a topological order if there is any. Here we quote the pseudo code of the Kahn's algorithm from wikipedia as follows:\n\n```python\nL = Empty list that will contain the sorted elements\nS = Set of all nodes with no incoming edge\n\nwhile S is non-empty do\n    remove a node n from S\n    add n to tail of L\n    for each node m with an edge e from n to m do\n        remove edge e from the graph\n        if m has no other incoming edges then\n            insert m into S\n\nif graph has edges then\n    return error   (graph has at least one cycle)\nelse \n    return L   (a topologically sorted order)\n```\n\nTo better understand the above algorithm, we summarize a few points here:\n\n- In order to find a global order, we can start from those nodes which do not have any prerequisites (_i.e._ indegree of node is zero), we then incrementally add new nodes to the global order, following the dependencies (edges).\n<br/>\n- Once we follow an edge, we then remove it from the graph.\n<br/>\n- With the removal of edges, there would more nodes appearing without any prerequisite dependency, in addition to the initial list in the first step.\n<br/>\n- The algorithm would terminate when we can no longer remove edges from the graph. There are two possible outcomes:\n    <br/>\n    - 1). If there are still some edges left in the graph, then these edges must have formed certain cycles, which is similar to the deadlock situation. It is due to these cyclic dependencies that we cannot remove them during the above processes.\n    <br/>\n    - 2). Otherwise, _i.e._ we have removed all the edges from the graph, and we got ourselves a topological order of the graph.\n    <br/>\n\n**Algorithm**\n\nFollowing the above intuition and pseudo code, here we list some sample implementations.\n\n!?!../Documents/207_RES.json:1000,353!?!\n\n<iframe src=\"https://leetcode.com/playground/hPhgAUJT/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hPhgAUJT\"></iframe>\n\nNote that we could use different types of containers, such as Queue, Stack or Set, to keep track of the nodes that have no incoming dependency, _i.e._ `indegree = 0`. Depending on the type of container, the resulting topological order would be different, though they are all valid.\n\n\n**Complexity**\n\n- Time Complexity: $$\\mathcal{O}(|E| + |V|)$$ where $$|V|$$ is the number of courses, and $$|E|$$ is the number of dependencies.\n<br/>\n    - As in the previous algorithm, it would take us $$|E|$$ time complexity to build a graph in the first step.\n    <br/>\n    - Similar with the above postorder DFS traversal, we would visit each vertex and each edge once and only once in the worst case, _i.e._ $$|E| + |V|$$.\n    <br/>\n    - As a result, the overall time complexity of the algorithm would be $$\\mathcal{O}(2\\cdot|E| + |V|) = \\mathcal{O}(|E| + |V|)$$.\n<br/>\n<br/>\n\n- Space Complexity: $$\\mathcal{O}(|E| + |V|)$$, with the same denotation as in the above time complexity.\n    </br>\n    - We built a graph data structure in the algorithm, which would consume $$|E| + |V|$$ space.\n    <br/>\n    - In addition, we use a container to keep track of the courses that have no prerequisite, and the size of the container would be bounded by $$|V|$$.\n    <br/>\n    - As a result, the overall space complexity of the algorithm would be $$\\mathcal{O}(|E| + 2\\cdot|V|) = \\mathcal{O}(|E| + |V|)$$.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "course-schedule",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "848",
                "title": "Course Schedule II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "210",
                    "questionFrontendId": "210",
                    "sessionId": "968792",
                    "questionTitle": "Course Schedule II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/course-schedule-ii/submit/",
                    "interpretUrl": "/problems/course-schedule-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findOrder(self, numCourses, prerequisites):\\n        \\\"\\\"\\\"\\n        :type numCourses: int\\n        :type prerequisites: List[List[int]]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesSize, int* prerequisitesColSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[] FindOrder(int numCourses, int[][] prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} numCourses\\n * @param {number[][]} prerequisites\\n * @return {number[]}\\n */\\nvar findOrder = function(numCourses, prerequisites) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} num_courses\\n# @param {Integer[][]} prerequisites\\n# @return {Integer[]}\\ndef find_order(num_courses, prerequisites)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findOrder(numCourses int, prerequisites [][]int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_order(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $numCourses\\n     * @param Integer[][] $prerequisites\\n     * @return Integer[]\\n     */\\n    function findOrder($numCourses, $prerequisites) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findOrder(numCourses: number, prerequisites: number[][]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-order numCourses prerequisites)\\n  (-> exact-integer? (listof (listof exact-integer?)) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_order(NumCourses :: integer(), Prerequisites :: [[integer()]]) -> [integer()].\\nfind_order(NumCourses, Prerequisites) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_order(num_courses :: integer, prerequisites :: [[integer]]) :: [integer]\\n  def find_order(num_courses, prerequisites) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "2\n[[1,0]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"numCourses\",\r\n      \"type\": \"integer\"\r\n    },\r\n    {\r\n      \"name\": \"prerequisites\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[]\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There are a total of <code>numCourses</code> courses you have to take, labeled from <code>0</code> to <code>numCourses - 1</code>. You are given an array <code>prerequisites</code> where <code>prerequisites[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that you <strong>must</strong> take course <code>b<sub>i</sub></code> first if you want to take course <code>a<sub>i</sub></code>.</p>\n\n<ul>\n\t<li>For example, the pair <code>[0, 1]</code>, indicates that to take course <code>0</code> you have to first take course <code>1</code>.</li>\n</ul>\n\n<p>Return <em>the ordering of courses you should take to finish all courses</em>. If there are many valid answers, return <strong>any</strong> of them. If it is impossible to finish all courses, return <strong>an empty array</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 2, prerequisites = [[1,0]]\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n<strong>Output:</strong> [0,2,1,3]\n<strong>Explanation:</strong> There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> numCourses = 1, prerequisites = []\n<strong>Output:</strong> [0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= numCourses &lt;= 2000</code></li>\n\t<li><code>0 &lt;= prerequisites.length &lt;= numCourses * (numCourses - 1)</code></li>\n\t<li><code>prerequisites[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; numCourses</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li>All the pairs <code>[a<sub>i</sub>, b<sub>i</sub>]</code> are <strong>distinct</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
                        "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
                        "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
                    ],
                    "solution": {
                        "title": "Course Schedule II",
                        "content": "[TOC]\n\n## Solution\n\nThis is a very common problem that some of us might face during college. We might want to take up a certain set of courses that interest us. However, as we all know, most of the courses do tend to have a lot of prerequisites associated with them. Some of these would be hard requirements whereas others would be simply `suggested` prerequisites which you may or may not take. However, for us to be able to have an all round learning experience, we should follow the suggested set of prerequisites. How does one decide what order of courses they should follow so as not to miss out on any subjects?\n\nAs mentioned in the problem statement, such a problem is a natural fit for graph based algorithms and we can easily model the elements in the problem statement as a graph. First of all, let's look at the graphical representation of the problem and it's components and then we will move onto the solutions.\n\nWe can represent the information provided in the question in the form of a graph.\n\n* Let $$G(V, E)$$ represent a `directed`, `unweighted` graph.\n* Each course would represent a vertex in the graph.\n* The edges are modeled after the prerequisite relationship between courses. So, we are given, that a pair such as $$[a, b]$$ in the question means the course `b` is a prerequisite for the course `a`. This can be represented as a `directed edge b \u2794 a` in the graph.\n* The graph is a cyclic graph because there is a possibility of a cycle in the graph. If the graph would be acyclic, then an ordering of subjects as required in the question would `always` be possible. Since it's mentioned that such an ordering may not always be possible, that means we have a cyclic graph.\n\nLet's look at a sample graph representing a set of courses where such an ordering is possible and one where such an ordering is not possible. It will be easier to explain the approaches once we look at two sample graphs.\n\n<center>\n<img src=\"../Figures/210_Course_Schedule_2/Fig-1.png\">\n</center>\n\nFor the sample graph shown above, one of the possible ordering of courses is: `C6 \u2794 C4 \u2794 C1 \u2794 C5 \u2794 C2 \u2794 C3` and another possible ordering of subjects is `C6 \u2794 C4 \u2794 C5 \u2794 C1 \u2794 C2 \u2794 C3`. Now let's look at a graph where no such ordering of courses is possible.\n\n<center>\n<img src=\"../Figures/210_Course_Schedule_2/Fig-2.png\">\n</center>\n\nNote that the edges that have changed from the previous graph have been highlighted in red.\n\n> Clearly, the presence of a cycle in the graph shows us that a proper ordering of prerequisites is not possible at all. Intuitively, it is not possible to have e.g. two subjects S1 and S2 prerequisites of each other. Similar ideology applies to a larger cycle in the graph like we have above.\n\nSuch an ordering of subjects is referred to as a `Topological Sorted Order` and this is a common algorithmic problem in the graph domain. There are two approaches that we will be looking at in this article to solve this problem.\n<br>\n<br>\n\n---\n\n#### Approach 1: Using Depth First Search\n\n**Intuition**\n\nSuppose we are at a node in our graph during the depth first traversal. Let's call this node `A`.\n\n> The way DFS would work is that we would consider all possible paths stemming from A before finishing up the recursion for A and moving onto other nodes. All the nodes in the paths stemming from the node A would have A as an ancestor. The way this fits in our problem is, all the courses in the paths stemming from the course A would have A as a prerequisite.\n\nNow we know how to get all the courses that have a particular course as a prerequisite. If a valid ordering of courses is possible, the course `A` would come before all the other set of courses that have it as a prerequisite. This idea for solving the problem can be explored using depth first search. Let's look at the pseudo-code before looking at the formal algorithm.\n\n<pre>\n\u2794 let S be a stack of courses\n\u2794 function dfs(node)\n\u2794     for each neighbor in adjacency list of node\n\u2794          dfs(neighbor)\n\u2794     add node to S\n</pre>\n\nLet's now look at the formal algorithm based on this idea.\n\n**Algorithm**\n\n1. Initialize a stack `S` that will contain the topologically sorted order of the courses in our graph.\n2. Construct the adjacency list using the edge pairs given in the input. An important thing to note about the input for the problem is that a pair such as `[a, b]` represents that the course `b` needs to be taken in order to do the course `a`. This implies an edge of the form `b \u2794 a`. Please take note of this when implementing the algorithm.\n3. For each of the nodes in our graph, we will run a depth first search in case that node was not already visited in some other node's DFS traversal.\n4. Suppose we are executing the depth first search for a node `N`. We will recursively traverse all of the neighbors of node `N` which have not been processed before.\n5. Once the processing of all the neighbors is done, we will add the node `N` to the stack. We are making use of a stack to simulate the ordering we need. When we add the node `N` to the stack, all the nodes that require the node `N` as a prerequisites (among others) will already be in the stack.\n6. Once all the nodes have been processed, we will simply return the nodes as they are present in the stack from top to bottom.\n\nLet's look at an animated dry run of the algorithm on a sample graph before moving onto the formal implementations.\n\n<center>\n\n!?!../Documents/210_Anim1.json:640,370!?!\n\n</center>\n\n> An important thing to note about topologically sorted order is that there won't be just one ordering of nodes (courses). There can be multiple. For e.g. in the above graph, we could have processed the node \"D\" before we did \"B\" and hence have a different ordering.\n\n\n<iframe src=\"https://leetcode.com/playground/DUnu4Fi9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"DUnu4Fi9\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(V + E)$$ where $$V$$ represents the number of vertices and $$E$$ represents the number of edges.\nEssentially we iterate through each node and each vertex in the graph once and only once.\n\n* Space Complexity: $$O(V + E)$$.\n\n  - We use the adjacency list to represent our graph initially. The space occupied is defined by the number of edges because for each node as the key, we have all its adjacent nodes in the form of a list as the value. Hence, $$O(E)$$\n\n  - Additionally, we apply recursion in our algorithm, which in worst case will incur $$O(E)$$ extra space in the function call stack.\n\n  - To sum up, the overall space complexity is $$O(V + E)$$.\n\n\n---\n\n#### Approach 2: Using Node Indegree\n\n**Intuition**\n\nThis approach is much easier to think about intuitively as will be clear from the following point/fact about topological ordering.\n\n> The first node in the topological ordering will be the node that doesn't have any incoming edges. Essentially, any node that has an in-degree of 0 can start the topologically sorted order. If there are multiple such nodes, their relative order doesn't matter and they can appear in any order.\n\nOur current algorithm is based on this idea. We first process all the nodes/course with 0 in-degree implying no prerequisite courses\nrequired. If we remove all these courses from the graph, along with their outgoing edges, we can find out the courses/nodes that should be processed next. These would again be the nodes with 0 in-degree. We can continuously do this until all the courses have been accounted for.\n\n**Algorithm**\n\n1. Initialize a queue, `Q` to keep a track of all the nodes in the graph with 0 in-degree.\n2. Iterate over all the edges in the input and create an adjacency list and also a map of node v/s in-degree.\n3. Add all the nodes with 0 in-degree to `Q`.\n4. The following steps are to be done until the `Q` becomes empty.\n    1. Pop a node from the `Q`. Let's call this node, `N`.\n    2. For all the neighbors of this node, `N`, reduce their in-degree by 1. If any of the nodes' in-degree reaches 0, add it to the `Q`.\n    3. Add the node `N` to the list maintaining topologically sorted order.\n    4. Continue from step 4.1.\n\nLet us now look at an animation depicting this algorithm and then we will get to the implementations.\n\n<center>\n\n!?!../Documents/210_Anim2.json:640,400!?!\n\n</center>\n\nAn important thing to note here is, using a queue is not a hard requirement for this algorithm. We can make use of a stack. That however, will give us a different ordering than what we might get from the queue because of the difference in access patterns between the two data-structures.\n\n<iframe src=\"https://leetcode.com/playground/NtxLSNC8/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"NtxLSNC8\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(V + E)$$ where $$V$$ represents the number of vertices and $$E$$ represents the number of edges. We pop each node exactly once from the zero in-degree queue and that gives us $$V$$. Also, for each vertex, we iterate over its adjacency list and in totality, we iterate over all the edges in the graph which gives us $$E$$. Hence, $$O(V + E)$$\n\n* Space Complexity: $$O(V + E)$$. We use an intermediate queue data structure to keep all the nodes with 0 in-degree. In the worst case, there won't be any prerequisite relationship and the queue will contain all the vertices initially since all of them will have 0 in-degree. That gives us $$O(V)$$. Additionally, we also use the adjacency list to represent our graph initially. The space occupied is defined by the number of edges because for each node as the key, we have all its adjacent nodes in the form of a list as the value. Hence, $$O(E)$$. So, the overall space complexity is $$O(V + E)$$.\n\nKudos to people in the comments section and @himanshujain71](https://leetcode.com/himanshujain71) for bringing up a grave oversight on my part in the complexity analysis for the second approach!\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "course-schedule-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.764,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "849",
                "title": "Longest Increasing Path in a Matrix",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "329",
                    "questionFrontendId": "329",
                    "sessionId": "968792",
                    "questionTitle": "Longest Increasing Path in a Matrix",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/longest-increasing-path-in-a-matrix/submit/",
                    "interpretUrl": "/problems/longest-increasing-path-in-a-matrix/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int longestIncreasingPath(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def longestIncreasingPath(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint longestIncreasingPath(int** matrix, int matrixSize, int* matrixColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LongestIncreasingPath(int[][] matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @return {number}\\n */\\nvar longestIncreasingPath = function(matrix) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @return {Integer}\\ndef longest_increasing_path(matrix)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func longestIncreasingPath(_ matrix: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func longestIncreasingPath(matrix [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def longestIncreasingPath(matrix: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun longestIncreasingPath(matrix: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn longest_increasing_path(matrix: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @return Integer\\n     */\\n    function longestIncreasingPath($matrix) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function longestIncreasingPath(matrix: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (longest-increasing-path matrix)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec longest_increasing_path(Matrix :: [[integer()]]) -> integer().\\nlongest_increasing_path(Matrix) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec longest_increasing_path(matrix :: [[integer]]) :: integer\\n  def longest_increasing_path(matrix) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[9,9,4],[6,6,8],[2,1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"longestIncreasingPath\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> integers <code>matrix</code>, return <em>the length of the longest increasing path in </em><code>matrix</code>.</p>\n\n<p>From each cell, you can either move in four directions: left, right, up, or down. You <strong>may not</strong> move <strong>diagonally</strong> or move <strong>outside the boundary</strong> (i.e., wrap-around is not allowed).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg\" style=\"width: 242px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[9,9,4],[6,6,8],[2,1,1]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> The longest increasing path is <code>[1, 2, 6, 9]</code>.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matrix = [[3,4,5],[3,2,6],[2,2,1]]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>The longest increasing path is <code>[3, 4, 5, 6]</code>. Moving diagonally is not allowed.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1]]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= matrix[i][j] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Longest Increasing Path in a Matrix",
                        "content": "[TOC]\n\n## Overview\n\nThis article is for advanced readers. It introduces the following ideas:\nDepth First Search (DFS), Memoization, Dynamic programming, Topological Sorting. It explains the relation between dynamic programming and topological sorting.\n\n## Solution\n---\n#### Approach #1 (Naive DFS) [Time Limit Exceeded]\n\n**Intuition**\n\nDFS can find the longest increasing path starting from any cell. We can do this for all the cells.\n\n**Algorithm**\n\nEach cell can be seen as a vertex in a graph $$G$$. If two adjacent cells have value $$a < b$$, i.e. increasing then we have a directed edge $$(a, b)$$. The problem then becomes:\n\n> Search the longest path in the directed graph $$G$$.\n\nNaively, we can use DFS or BFS to visit all the cells connected starting from a root. We update the maximum length of the path during search and find the answer when it finished.\n\nUsually, in DFS or BFS, we can employ a set `visited` to prevent the cells from duplicate visits. We will introduce a better algorithm based on this in the next section.\n\n<iframe src=\"https://leetcode.com/playground/4hDDoKmz/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4hDDoKmz\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(2^{m+n})$$. The search is repeated for each valid increasing path. In the worst case we can have $$O(2^{m+n})$$ calls.\n\n* Space complexity : $$O(mn)$$. For each DFS we need $$O(h)$$ space used by the system stack, where $$h$$ is the maximum depth of the recursion. In the worst case, $$O(h) = O(mn)$$.\n\n---\n#### Approach #2 (DFS + Memoization) [Accepted]\n\n**Intuition**\n\nCache the results for the recursion so that any subproblem will be calculated only once.\n\n**Algorithm**\n\nFrom previous analysis, we know that there are many duplicate calculations in the naive approach.\n\nOne optimization is that we can use a set to prevent the repeat visit in one DFS search. This optimization will reduce the time complexity for each DFS to $$O(mn)$$ and the total algorithm to $$O(m^2n^2)$$.\n\nHere, we will introduce more powerful optimization, Memoization.\n\n> In computing, memoization is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.\n\nIn our problem, we recursively call `dfs(x, y)` for many times. But if we already know all the results for the four adjacent cells, we only need constant time. During our search if the result for a cell is not calculated, we calculate and cache it; otherwise, we get it from the cache directly.\n\n<iframe src=\"https://leetcode.com/playground/c3zSm9iq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"c3zSm9iq\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(mn)$$. Each vertex/cell will be calculated once and only once, and each edge will be visited once and only once. The total time complexity is then $$O(V+E)$$. $$V$$ is the total number of vertices and $$E$$ is the total number of edges. In our problem, $$O(V) = O(mn)$$, $$O(E) = O(4V) = O(mn)$$.\n\n* Space complexity : $$O(mn)$$. The cache dominates the space complexity.\n\n---\n#### Approach #3 (Peeling Onion) [Accepted]\n\n**Intuition**\n\nThe result of each cell only related to the result of its neighbors. Can we use dynamic programming?\n\n**Algorithm**\n\nIf we define the longest increasing path starting from cell $$(i, j)$$ as a function\n\n$$\nf(i, j)\n$$\n\nthen we have the following transition function\n\n$$\nf(i, j) = max\\{f(x, y)| (x, y)~\\mathrm{is~a~neighbor~of} (i, j)~\\mathrm{and} ~\\mathrm{matrix}[x][y] \\gt \\mathrm{matrix}[i][j]\\} + 1\n$$\n\nThis formula is the same as used in the previous approaches. With such transition function, one may think that it is possible to use dynamic programming to deduce all the results without employing DFS!\n\nThat is right with one thing missing: we don't have the dependency list.\n\nFor dynamic programming to work, if problem B depends on the result of problem A, then we must make sure that problem A is calculated before problem B. Such order is natural and obvious for many problems. For example the famous Fibonacci sequence:\n\n$$\nF(0) = 1, F(1) = 1, F(n) = F(n - 1) + F(n - 2)\n$$\n\nThe subproblem $$F(n)$$ depends on its two predecessors. Therefore, the natural order from 0 to n is the correct order. The dependent is always behind the dependee.\n\nThe terminology of such dependency order is \"Topological order\" or \"Topological sorting\":\n\n> Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge $$(u, v)$$, vertex $$u$$ comes before $$v$$ in the ordering.\n\nIn our problem, the topological order is not natural. Without the value in the matrix, we couldn't know the dependency relation of any two neighbors A and B. We have to perform the topological sort explicitly  as a preprocess. After that, we can solve the problem dynamically using our transition function following the stored topological order.\n\nThere are several ways to perform the topological sorting. Here we employ one of them called \"Peeling Onion\".\n\nThe idea is that in a DAG, we will have some vertex who doesn't depend on others which we call \"leaves\". We put these leaves in a list (their internal ordering does matter), and then we remove them from the DAG. After the removal, there will be new leaves. We do the same repeatedly as if we are peeling an onion layer by layer. In the end, the list will have a valid topological ordering of our vertices.\n\nIn out problem, since we want the longest path in the DAG, which equals to the total number of layers of the \"onion\". Thus, we can count the number of layers during \"peeling\" and return the counts in the end without invoking dynamic programming.\n\n\n<iframe src=\"https://leetcode.com/playground/FxSdkVyw/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"FxSdkVyw\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(mn)$$. The the topological sort is $$O(V+E) = O(mn)$$.\nHere, $$V$$ is the total number of vertices and $$E$$ is the total number of edges. In our problem, $$O(V) = O(mn)$$, $$O(E) = O(4V) = O(mn)$$.\n\n* Space complexity : $$O(mn)$$. We need to store the out degrees and each level of leaves.\n\n---\n## Remarks\n\n* Memoization: for a problem with massive duplicate calls, cache the results.\n* Dynamic programming requires the subproblem solved in topological order. In many problems, it coincides the natural order. For those who doesn't, one need perform topological sorting first. Therefore, for those problems with complex topology (like this one), search with memorization is usually an easier and better choice.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "longest-increasing-path-in-a-matrix",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.828,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "850",
                "title": "Alien Dictionary",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "269",
                    "questionFrontendId": "269",
                    "sessionId": "968792",
                    "questionTitle": "Alien Dictionary",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/alien-dictionary/submit/",
                    "interpretUrl": "/problems/alien-dictionary/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string alienOrder(vector<string>& words) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String alienOrder(String[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def alienOrder(self, words):\\n        \\\"\\\"\\\"\\n        :type words: List[str]\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def alienOrder(self, words: List[str]) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * alienOrder(char ** words, int wordsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string AlienOrder(string[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string[]} words\\n * @return {string}\\n */\\nvar alienOrder = function(words) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String[]} words\\n# @return {String}\\ndef alien_order(words)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func alienOrder(_ words: [String]) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func alienOrder(words []string) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def alienOrder(words: Array[String]): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun alienOrder(words: Array<String>): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn alien_order(words: Vec<String>) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[] $words\\n     * @return String\\n     */\\n    function alienOrder($words) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function alienOrder(words: string[]): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (alien-order words)\\n  (-> (listof string?) string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec alien_order(Words :: [unicode:unicode_binary()]) -> unicode:unicode_binary().\\nalien_order(Words) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec alien_order(words :: [String.t]) :: String.t\\n  def alien_order(words) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"alienOrder\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"words\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.</p>\n\n<p>You are given a list of strings <code>words</code> from the alien language&#39;s dictionary, where the strings in <code>words</code> are <strong>sorted lexicographically</strong> by the rules of this new language.</p>\n\n<p>Return <em>a string of the unique letters in the new alien language sorted in <strong>lexicographically increasing order</strong> by the new language&#39;s rules. If there is no solution, return </em><code>&quot;&quot;</code><em>. If there are multiple solutions, return <strong>any of them</strong></em>.</p>\n\n<p>A string <code>s</code> is <strong>lexicographically smaller</strong> than a string <code>t</code> if at the first letter where they differ, the letter in <code>s</code> comes before the letter in <code>t</code> in the alien language. If the first <code>min(s.length, t.length)</code> letters are the same, then <code>s</code> is smaller if and only if <code>s.length &lt; t.length</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;wrt&quot;,&quot;wrf&quot;,&quot;er&quot;,&quot;ett&quot;,&quot;rftt&quot;]\n<strong>Output:</strong> &quot;wertf&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;]\n<strong>Output:</strong> &quot;zx&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;z&quot;,&quot;x&quot;,&quot;z&quot;]\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> The order is invalid, so return <code>&quot;&quot;</code>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 100</code></li>\n\t<li><code>words[i]</code> consists of only lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Alien Dictionary",
                        "content": "[TOC]\n\n## Solution\n\n---\n\nThis article assumes you already have some confidence with **graph algorithms**, such as **breadth-first search** and **depth-first searching**. If you're familiar with those, but not with **topological sort** (the topic tag for this problem), don't panic, as you should still be able to make sense of it. It is one of the many more advanced algorithms that keen programmers tend to \"invent\" themselves before realizing it's already a widely known and used algorithm. There are a couple of approaches to topological sort; [Kahn's Algorithm](https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm) and DFS.\n\nA few things to keep in mind:\n\n- The letters *within a word* don't tell us anything about the relative order. For example, the presence of the word `kitten` in the list does *not* tell us that the letter `k` is before the letter `i`. \n- The input can contain words followed by their prefix, for example, `abcd` and then `ab`. These cases will never result in a valid alphabet (because in a valid alphabet, prefixes are always first). You'll need to make sure your solution detects these cases correctly.\n- There can be more than one valid alphabet ordering. It is fine for your algorithm to return any one of them.\n- Your output string must contain *all* unique letters that were within the input list, including those that could be in any position within the ordering. It should *not* contain any additional letters that were *not* in the input.\n\n<br/>\n\n---\n\n#### Overview of Approaches\n\nAll approaches break the problem into three steps.\n\n1. Extracting dependency rules from the input. For example \"A must be before C\", \"X must be before D\", or \"E must be before B\". \n2. Putting the dependency rules into a graph with letters as nodes and dependencies as edges (an adjacency list is best).\n3. Topologically sorting the graph nodes.\n\nWe encourage you to go and have another go at implementing these steps yourself if you think you now know what to do. If this all sounded overwhelming and confusing though, don't panic, because we're going to work through it all in detail.\n\n<br/>\n\n---\n\n#### Approach 1: Breadth-First Search\n\n**Intuition**\n\nThere are three parts to this problem. \n\n1. Getting as much information about the alphabet order as we can out of the input word list.\n2. Representing that information in a meaningful way.\n3. Assembling a valid alphabet ordering.\n\n***Part 1: Extracting Information***\n\nLet's start with a large example of a dictionary in an \"alien language\", and see how much we can conclude with some simple reasoning. This is likely to be your first step in tackling this question in a programming interview.\n\n![List of alien words:  wxqkj, whqg, cckgh, cdxg, cdxdt, cdht, ktgxt, ktgch, ktdw, ktdc, jqw, jmc, jmg](../Figures/269/words.png)\n\nRemember that in an ordinary English dictionary, all the words starting with `a` are at the start, followed by all the ones starting with `b`, then `c`, `d`, `e`, and at the very end, `z`.  In the \"alien dictionary\", we also expect the first letters of each word to be in alphabetical order. So, let's look at them.\n\n![First letters of each word: w, w, c, c, c, c, k, k, k, k, j, and j](../Figures/269/first_letters.png)\n\nRemoving the duplicates, we get:\n\n![First letters of each word without duplicates: w, c, k, and j](../Figures/269/first_letters_no_duplicates.png)\n\nGoing by this, we know the *relative order* of four letters in the \"alien dictionary\". However, we don't know how these four letters fit in with the other seven letters, or even how those other seven letters fit in with each other. To get more information, we'll need to look further.\n\nGoing back to the English dictionary analogy, the word `abacus` will appear before `algorithm`. This is because when the first letter of two words is the same, we instead look at the second letter; `b` and `l` in this case. `b` is before `l` in the alphabet. \n\nLet's take a closer look at the first two words of the \"alien dictionary\"; `wxqkj` and `whgg`. Seeing as the first letters are the same, `w`, we look at the second letters. The first word has `x`, and the second word has `h`. Therefore, we know that `x` is before `h` in the alien dictionary. We know have two fragments of the letter-order.\n\n![First two sequences, w, c, k, j and x, h](../Figures/269/first_two_sequences.png)\n\nWe don't know yet how these two fragments could fit together into a single ordering. For example, we don't know whether `w` is before `x`, or `x` is before `w`, or even whether or not there's enough information available in the input for us to know.\n\nAnyway, we've now gotten all the information we can out of the first two words. All letters after `x` in `wxqkj`, and after `h` in `whqg`, should be ignored because they did not impact the relative ordering of the two words (if you're confused, think back to `abacus` and `algorithm`. Because `b > l`, the `gorithm` and `acus` parts are unimportant for determining alphabetical ordering).\n\nHopefully, you're starting to see a pattern here. Where two words are adjacent, we need to look for the *first difference* between them. That difference tells us the relative order between two letters. Let's have a look at all the relations we can find by comparing adjacent words.\n\n![Relations between words](../Figures/269/words_relations.png)\n\nYou might notice that we haven't included some rules, such as `w \u2192 j`. This is fine though, as we can still derive it from the rules we have: `w \u2192 c`, `c \u2192 k`, `k \u2192 j`.\n\nThis completes the first part. There is no further information we can extract from the input. Therefore, our task is now to put together what we know.\n\n***Part 2: Representing the Relations***\n\nWe now have a set of relations stating how pairs of letters are ordered relative to each other.\n\n![Relations: x \u2192 h, w \u2192 c, c \u2192 d, g \u2192 d, c \u2192 k, x \u2192 c, k \u2192 j, q \u2192 m, and c \u2192 g](../Figures/269/relations.png)\n\nHow could we put these together? You may be tempted to start trying to build \"chains\" out of them. Here are a few possible chains.\n\n![Some combined chains: w\u2192c\u2192k\u2192j, w\u2192c\u2192d, x\u2192c\u2192k\u2192j, and q\u2192m](../Figures/269/chains.png)\n\nThe problem here though is that some letters are in more than one chain. Simply putting the chains into the output list one-after-the-other won't work. Some letters will be duplicated, which invalidates the ordering. Simply deleting the duplicates will not work either.\n\nWhen we have a set of relations, often drawing a graph is the best way to visualize them. The nodes are the letters, and an edge between two letters, `A` and `B` represents that `A` is before `B` in the \"alien alphabet\". \n\n![Graph with sources highlighted](../Figures/269/graph_bfs_step_1.png)\n\n***Part 3: Assembling a Valid Ordering***\n\nAs we can see from the graph, four of the letters have no arrows going into them. What this means is that there are no letters that *have* to be before any of these four (remember that the question states there could be multiple valid orderings, and if there are, then it's fine for us to return any of them). \n\nTherefore, a valid start to the ordering we return would be:\n\n![First group ordering: q w t x](../Figures/269/one_group_ordering.png)\n\nWe can now remove these letters and edges from the graph, because any other letters that required them first will now have this requirement satisfied.\n\n![Graph after first step with new sources highlighted](../Figures/269/graph_bfs_step_2.png)\n\nOn this new graph, there are now three new letters that have no in-arrows. We can add these to our output list.\n\n![Two groups ordering: q w t x, m h c](../Figures/269/two_groups_ordering.png)\n\nAgain, we can remove these from the graph.\n\n![Graph after second step with new sources highlighted](../Figures/269/graph_bfs_step_3.png)\n\nThen add the two new letters with no in-arrows.\n\n![Three groups ordering: q w t x, m h c, g k](../Figures/269/three_groups_ordering.png)\n\nWhich leaves the following graph.\n\n![Graph after third step with new sources highlighted](../Figures/269/graph_bfs_step_4.png)\n\nWith the final two letters.\n\n![All groups ordering: q w t x, m h c, g k, j d](../Figures/269/all_groups_ordering.png)\n\nWhich is a valid ordering that we can return.\n\nAs a side note, each of the four groups of letters we picked off could have been in any order within themselves (as another side note, it's not too difficult to calculate *how many* valid orderings there are. Have a think about this if you want, determining how many valid alphabet orderings there are is an interesting follow-up question!)\n\n**Algorithm**\n\nNow that we have come up with an approach, we need to figure out how to implement it efficiently. \n\nThe first and second parts are straightforward; we'll leave you to look at the code for these. It should extract the order relations and then insert them into an **adjacency list**. The only thing we need to be careful of is ensuring that we've handled the \"prefix\" edge case correctly.\n\n![Adjacency list](../Figures/269/adjacency_list.png)\n\nThe third part is more complicated. We need to somehow identify which letters have no incoming links left. With the adjacency list format above, this is a bit annoying to do, because determining whether or not a particular letter has any incoming links requires repeatedly checking over the adjacency lists of all the other letters to see whether or not they feature that letter.\n\nA na\u00efve solution would be to do exactly this. While this would be efficient enough with at most `26` letters, it may result in your interviewer quickly telling you that we might want to use the same algorithm on an \"alien language\" with millions of unique letters.\n\nAn alternative is to keep two adjacency lists; one the same as above, and another that is the reverse, showing the *incoming* links. Then, each time we traverse an edge, we could remove the corresponding edge in the reverse adjacency list. Seeing when a letter has no more incoming links would now be straightforward.\n\n![Reverse adjacency list](../Figures/269/reverse_adjacency_list.png)\n\nHowever, we can do even better than that. Instead of keeping track of all the other letters that must be before a particular letter, we only need to keep track of *how many* of them there are! While building the forward adjacency list, we can also count up how many incoming edges each letter has. We call the number of incoming edges the **indegree** of a node.\n\n![Count list](../Figures/269/indegree_count_list.png)\n\nThen, instead of removing an edge from a reverse adjacency list, we can simply decrement the count by 1. Once the count reaches 0, this is equivalent to there being no incoming edges left in the reverse adjacency list.\n\nWe'll do a BFS for all letters that are reachable, adding each letter to the output as soon as it's reachable. A letter is reachable once all of the letters that need to be before it have been added to the output. To do a BFS, recall that we use a queue. We should initially put all letters with an in-degree of `0` onto that queue. Each time a letter gets down to an in-degree of `0`, it is added to the queue.\n\nWe continue this until the queue is empty. After that, we check whether or not all letters were put in the output list. If some are missing, this is because we got to a point where all remaining letters had at least one edge going in; this means there must be a cycle! In that case, we should return `\"\"` as per the problem description. Otherwise, we should return the complete ordering we found.\n\nOne edge case we need to be careful of is where a word is *followed by* its own prefix. In these cases, it is impossible to come up with a valid ordering and so we should return `\"\"`. The best place to detect it is in the loop that compares each adjacent pair of words.\n\nAlso, remember that not all letters will necessarily have an edge going into or out of them. These letters can go *anywhere* in the output. But we need to be careful to not forget about them in our implementation.\n\nHere is an animation showing the entire algorithm on our example from earlier.\n\n!?!../Documents/269_bfs_animation.json:960,540!?!\n\n<iframe src=\"https://leetcode.com/playground/xC3Ymt6h/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"xC3Ymt6h\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of strings in the input list.\n\nLet $$C$$ be the total length of all the words in the input list, added together. \n\nLet $$U$$ be the total number of unique letters in the alien alphabet. While this is limited to $$26$$ in the question description, we'll still look at how it would impact the complexity if it was not limited (as this could potentially be a follow-up question).\n\n- Time complexity : $$O(C)$$.\n\n    There were three parts to the algorithm; identifying all the relations, putting them into an adjacency list, and then converting it into a valid alphabet ordering.\n\n    In the worst case, the first and second parts require checking every letter of every word (if the difference between two words was always in the last letter). This is $$O(C)$$.\n\n    For the third part, recall that a breadth-first search has a cost of $$O(V + E)$$, where $$V$$ is the number of vertices and $$E$$ is the number of edges. Our algorithm has the same cost as BFS, as it too is visiting each edge and node once (a node is visited once *all* of its edges are visited, unlike the traditional BFS where it is visited once one edge is visited). Therefore, determining the cost of our algorithm requires determining how many nodes and edges there are in the graph.\n\n    *Nodes:* We know that there is one vertex for each unique letter, i.e. $$O(U)$$ vertices.\n\n    *Edges:* Each edge in the graph was generated from comparing two adjacent words in the input list. There are $$N - 1$$ pairs of adjacent words, and only *one* edge can be generated from each pair. This might initially seem a bit surprising, so let's quickly look at an example. We'll use English words.\n\n    ```\n    abacus\n    algorithm\n    ```\n\n    The *only* conclusion we can draw is that *b is before l*. This is the reason `abacus` appears before `algorithm` in an English dictionary. The characters afterward are irrelevant. It is the same for the \"alien\" alphabets we're working with here. The only rule we can draw is the one based on the *first difference* between the two words.\n\n    Also, remember that we are only generating rules for adjacent words. We are not adding the \"implied\" rules to the adjacency list. For example, assume we have the following word list.\n\n    ```\n    rgh\n    xcd\n    tny\n    bcd\n    ```\n\n    We are only generating the following 3 edges.\n\n    ```\n    r -> x\n    x -> t\n    t -> b\n    ```\n\n    We are *not* generating these implied rules (the graph structure shows them indirectly).\n\n    ```\n    r -> t\n    r -> b\n    x -> b\n    ```\n\n    So with this, we know that there are *at most `N - 1` edges*. \n\n    There is an additional upper limit on the number of edges too\u2014it is impossible for there to be more than one edge between each pair of nodes. With $$U$$ nodes, this means there can't be more than $$U^2$$ edges.\n\n    It's not common in complexity analysis that we get two separate upper bounds like this. Because the number of edges has to be *lower than both $$N - 1$$ and $$U^2$$*, we know it is at *most* the *smallest* of these two values. Mathematically, we can say this is $$\\min(U^2, N - 1)$$.\n\n    Going all the way back to the cost of breadth first search, we can now substiute in the number of nodes and the number of edges: $$V = U$$ and $$E = \\min(U^2, N - 1)$$. This gives us:\n    \n    $$O(V + E) = O(U + \\min(U^2, N - 1)) = O(U + \\min(U^2, N))$$.\n\n    Finally, we need to combine the two parts: $$O(C)$$ for the first and second parts, and $$O(U + \\min(U^2, N))$$ for the third part. When we have two independent parts, we add the costs together, as we don't necessarily know which is larger. After we've done this, we should look at the final formula and see whether or not we can actually draw any conclusions about which is larger. Adding them together, we initially get the following:\n    \n    $$O(C) + O(U + \\min(U^2, N)) = O(C + U + \\min(U^2, N))$$. \n\n    So, what do we know about the relative values of $$N$$, $$C$$, and $$U$$? Well, we know that $$N < C$$, as each word contains at least one character (remember, $$C$$ is total characters across the words, not *unique* characters). Additionally, $$U < C$$ because there can't be more unique characters than there are characters. \n\n    In summary, $$C$$ is the biggest of the three, and $$N$$ and $$U$$ are smaller, although we don't know which is smaller out of those two.\n\n    So for starters, we know that the $$U$$ bit is insignificant compared to the $$C$$. Therefore, we can just remove it:\n    \n    $$O(C + U + \\min(U^2, N))  \u2192  O(C + \\min(U^2, N))$$\n    \n    Now, to simplify the rest, consider two cases:\n\n    1. If $$U^2$$ is smaller than $$N$$, then $$\\min(U^2, N) = U^2$$. By definition, we've just said that $$U^2$$ is smaller than $$N$$, which is in turn smaller than $$C$$, and so $$U^2$$ is definitely less than $$C$$. This leaves us with $$O(C)$$. \n    \n    2. If $$U^2$$ is larger than $$N$$, then $$\\min(U^2, N) = N$$. Because $$C > N$$, we're left with $$O(C)$$.\n    \n    <br/>\n\n    So in all cases, we know that $$C > \\min(U^2, N)$$. This gives us a final time complexity of $$O(C)$$.\n    \n- Space complexity : $$O(1)$$ or $$O(U + \\min(U^2, N))$$.\n\n    The adjacency list uses the most auxiliary memory. This list uses $$O(V + E)$$ memory, where $$V$$ is the number of unique letters, and $$E$$ is the number of relations.\n    \n    The number of vertices is simply $$U$$; the number of unique letters.\n    \n    The number of edges in the worst case is $$\\min(U^2, N)$$, as explained in the time complexity analysis.\n\n    So in total the adjacency list takes $$O(U + \\min(U^2, N))$$ space.\n\n    So for the question we're given, where $$U$$ is a constant fixed at a maximum of $$26$$, the space complexity is simply $$O(1)$$. This is because $$U$$ is fixed at $$26$$, and the number of relations is fixed at $$26^2$$, so $$O(\\min(26^2, N)) = O(26^2) = O(1)$$.\n\n    But when we consider an arbitrarily large number of possible letters, we use the size of the adjacency list; $$O(U + \\min(U^2, N))$$.\n\n<br/>\n\n---\n\n#### Approach 2: Depth-First Search\n\n**Intuition**\n\nAnother approach to the third part is to use a depth-first search. We still need to extract relations and then generate an adjacency list in the same way as before, but this time we don't need the `indegrees` map.\n\nRecall that in a depth-first search, nodes are returned once they either have no outgoing links left, or all their outgoing links have been visited. Therefore, the order in which nodes are returned by the depth-first search will be the reverse of a valid alphabet order.\n\n**Algorithm**\n\nIf we made a reverse adjacency list instead of a forward one, the output order would be correct (without needing to be reversed). Remember that when we reverse the edges of a directed graph, the nodes with no incoming edges became the ones with no outgoing edges. This means that the ones at the start of the alphabet will now be the ones returned first.\n\nOne issue we need to be careful of is cycles. In directed graphs, we often detect cycles by using **graph coloring**. All nodes start as white, and then once they're first visited they become grey, and then once all their outgoing nodes have been fully explored, they become black. We know there is a cycle if we *enter* a node that is currently grey (it works because all nodes that are currently on the stack are grey. Nodes are changed to black when they are removed from the stack).\n\nHere is an animation showing the DFS, starting from a reverse adjacency list of the input.\n\n!?!../Documents/269_dfs_animation.json:960,540!?!\n\n<iframe src=\"https://leetcode.com/playground/PYYBJUzC/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"PYYBJUzC\"></iframe>\n\n**Complexity Analysis**\n\n- Time complexity : $$O(C)$$.\n\n    Building the adjacency list has a time complexity of $$O(C)$$ for the same reason as in Approach 1.\n\n    Again, like in Approach 1, we traverse every \"edge\", but this time we're using depth-first-search.\n\n- Space complexity : $$O(1)$$ or $$O(U + \\min(U^2, N))$$.\n\n    Like in Approach 1, we build an adjacency list. Even though this one is a reversed adjacency list, it still contains the same number of relations.\n\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "alien-dictionary",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.929,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "851",
                "title": "Count of Smaller Numbers After Self",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 118,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "315",
                    "questionFrontendId": "315",
                    "sessionId": "968792",
                    "questionTitle": "Count of Smaller Numbers After Self",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/count-of-smaller-numbers-after-self/submit/",
                    "interpretUrl": "/problems/count-of-smaller-numbers-after-self/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<int> countSmaller(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<Integer> countSmaller(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def countSmaller(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def countSmaller(self, nums: List[int]) -> List[int]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nint* countSmaller(int* nums, int numsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<int> CountSmaller(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number[]}\\n */\\nvar countSmaller = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer[]}\\ndef count_smaller(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func countSmaller(_ nums: [Int]) -> [Int] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func countSmaller(nums []int) []int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def countSmaller(nums: Array[Int]): List[Int] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun countSmaller(nums: IntArray): List<Int> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn count_smaller(nums: Vec<i32>) -> Vec<i32> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer[]\\n     */\\n    function countSmaller($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function countSmaller(nums: number[]): number[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (count-smaller nums)\\n  (-> (listof exact-integer?) (listof exact-integer?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec count_smaller(Nums :: [integer()]) -> [integer()].\\ncount_smaller(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec count_smaller(nums :: [integer]) :: [integer]\\n  def count_smaller(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[5,2,6,1]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"countSmaller\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<integer>\",\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an integer array <code>nums</code> and you have to return a new <code>counts</code> array. The <code>counts</code> array has the property where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,6,1]\n<strong>Output:</strong> [2,1,1,0]\n<strong>Explanation:</strong>\nTo the right of 5 there are <b>2</b> smaller elements (2 and 1).\nTo the right of 2 there is only <b>1</b> smaller element (1).\nTo the right of 6 there is <b>1</b> smaller element (1).\nTo the right of 1 there is <b>0</b> smaller element.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1]\n<strong>Output:</strong> [0]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,-1]\n<strong>Output:</strong> [0,0]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Count of Smaller Numbers After Self",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Overview\r\n\r\nThe problem is straightforward. For each `num` in `nums`, we need to obtain the number of smaller elements after `num`.\r\n\r\nA straightforward approach is to use brute force with two for-loops. The first loop iterates over all `num` in `nums`, and the second loop iterates over all elements after `num`. However, this approach costs $$O(N^2)$$ and yields _Time Limit Exceed_, given that $$N$$ is the length of `nums`.\r\n\r\nLuckily, there are two helpful data structures: [segment tree](https://en.wikipedia.org/wiki/Segment_tree) and [binary indexed tree](https://en.wikipedia.org/wiki/Fenwick_tree), which are able to do the range query in logarithmic time.\r\n\r\nAlso, a solution based on [Merge Sort](https://en.wikipedia.org/wiki/Merge_sort) is available.\r\n\r\nBelow, we will discuss each of the three approaches: _Segment Tree_, _Binary Indexed Tree_, and _Merge Sort_.\r\n\r\n> After you finish, you can practice by solving some similar questions:\r\n>\r\n> - [Reverse Pairs](https://leetcode.com/problems/reverse-pairs/solution/)\r\n> - [Create Sorted Array through Instructions](https://leetcode.com/problems/create-sorted-array-through-instructions/)\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Segment Tree\r\n\r\n**Intuition**\r\n\r\n> **Prerequisite: segment tree**\r\n>\r\n> If you are not familiar with segment trees, you should check out our [Recursive Approach to segment trees](https://leetcode.com/articles/a-recursive-approach-to-segment-trees-range-sum-queries-lazy-propagation/) tutorial before continuing.\r\n>\r\n> Also, here are some relevant applications for segment trees that you can practice on:\r\n>\r\n> - [Range Sum Query - Mutable](https://leetcode.com/problems/range-sum-query-mutable/)\r\n> - [Count of Range Sum](https://leetcode.com/problems/count-of-range-sum/)\r\n>\r\n> For a full list, check out the [segment tree Tag](https://leetcode.com/tag/segment-tree/).\r\n\r\nFor a particular element in `nums`, located at index `i`, we want to count how many of the numbers on the right side of index `i` are smaller than `nums[i]`. Notice that the value of the smaller numbers must be in the range $$(-\\infty, \\text{nums[i]}-1]$$.\r\n\r\nHence, if we can find the count of **each number** in the range $$(-\\infty, \\text{nums[i]}-1]$$ on the right side of index `i`, then the answer will be the sum of those counts.\r\n\r\nTherefore, for each index `i`, we need a query to find the sum of those counts. Recall that the segment tree and the binary indexed tree are two data structures that are generally helpful when solving range query problems.\r\n\r\nSince we need counts of values, we can use an approach similar to [bucket sort](https://en.wikipedia.org/wiki/Bucket_sort), where we have buckets of values and `buckets[value]` stores the count of `value`. For each value, we increment `buckets[value]` by 1. With this approach, the number of elements smaller than `nums[i]` is the range sum of $$(-\\infty, \\text{num}-1]$$ in buckets.\r\n\r\nWith the help of a segment tree or binary indexed tree, we can perform the range sum query in logarithmic time.\r\n\r\n![Figure 1](../Documents/315/315_bucket1.drawio.svg)\r\n\r\n![Figure 2](../Documents/315/315_bucket2.drawio.svg)\r\n\r\nWith the given constraint `-10^4 <= nums[i] <= 10^4`, we can initialize buckets from `-10^4` to `10^4`.\r\n\r\nWait, there is a problem: Usually, we store buckets in an array, so the indices of buckets are non-negative. However, here we need to store some **negative** values. How can we resolve this problem?\r\n\r\nThere are two solutions:\r\n\r\n1. Use a map rather than an array.\r\n2. Shift all numbers to non-negative.\r\n\r\nBoth solutions work, and here we have chosen the second one since it is easier to implement. Interested readers are welcome to try the first one on their own.\r\n\r\nTo shift all numbers to non-negative, we simply add a constant. Here we chose the constant `offset = 10^4` and increase each number by `offset`:\r\n\r\n```python\r\nnums[i] = nums[i] + offset\r\n```\r\n\r\nThe smallest number `-10^4` becomes `0` under this shift.\r\n\r\n![Figure 3](../Documents/315/315_shift.drawio.svg)\r\n\r\nNote that while querying a particular index, we only need to consider elements that are on the right side of the index. Therefore we need to make sure that when we query an index, say `i`, only elements from index `i+1` to the end of the array are present in the buckets.\r\n\r\nTo achieve this, we need to traverse `nums` from **right to left**, while performing range sum queries and updating the counts.\r\n\r\nSimilarly, with the help of a segment tree or binary indexed tree, we can perform the updates in logarithmic time.\r\n\r\n![Figure 4](../Documents/315/315_right_to_left.drawio.svg)\r\n\r\n(For convenience, the offset is not included in the above picture.)\r\n\r\n**Algorithm**\r\n\r\n- Implement the segment tree. Since the tree is initialized with all zeros, only `update` and `query` need to be implemented. Set `offset = 10^4`.\r\n\r\n- Iterate over each `num` in `nums` in reverse. For each `num`:\r\n\r\n  - Shift `num` to `num + offset`.\r\n  - Query the number of elements in the segment tree smaller than `num`.\r\n  - Update the count of `num` in the segment tree.\r\n\r\n- Return the result.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/JkZ5ysmJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JkZ5ysmJ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the length of `nums` and $$M$$ be the difference between the maximum and minimum values in `nums`.\r\n\r\nNote that for convenience, we fix $$M=2*10^4$$ in the above implementations.\r\n\r\n- Time Complexity: $$O(N\\log(M))$$.  \r\n  We need to iterate over `nums`. For each element, we spend $$O(\\log(M))$$ to find the number of smaller elements after it, and spend $$O(\\log(M))$$ time to update the counts. In total, we need $$O(N \\cdot \\log(M)) = O(N\\log(M))$$ time.\r\n\r\n- Space Complexity: $$O(M)$$, since we need, at most, an array of size $$2M+2$$ to store the segment tree.  \r\n  We need at most $$M+1$$ buckets, where the extra $$1$$ is for the value $$0$$. For the segment tree, we need twice the number of buckets, which is $$(M+1)\\times 2 = 2M+2$$.\r\n\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 2: Binary Indexed Tree (Fenwick Tree)\r\n\r\n**Intuition**\r\n\r\n> **Prerequisite: binary indexed tree**\r\n>\r\n> If you are not familiar with binary indexed tree (BIT), you should check relevant tutorials, such as [Range Sum Query 2D - Mutable](https://leetcode.com/problems/range-sum-query-2d-mutable/solution/) before continuing.\r\n>\r\n> Also, here are some relevant applications for binary indexed trees that you can practice on:\r\n>\r\n> - [Range Sum Query - Mutable](https://leetcode.com/problems/range-sum-query-mutable/)\r\n> - [Count of Range Sum](https://leetcode.com/problems/count-of-range-sum/)\r\n>\r\n> (Yes, many problems which can be solved by segment tree can also be solved by binary indexed tree.)\r\n>\r\n> For a full list, you can check the [binary indexed tree Tag](https://leetcode.com/tag/binary-indexed-tree/).\r\n\r\nBinary indexed tree is similar to segment tree. It allows us to perform a prefix query, such as prefix sum, in $$\\log$$ time. Can we transform this problem into a **prefix sum** problem?\r\n\r\nYes, using the same tricks that we used in approach 1, buckets and shift, we can transform the number of smaller elements into a prefix sum for the range $$[0, \\text{num}+\\text{offset}-1]$$, where $$\\text{offset}=10^4$$.\r\n\r\n![Figure 5](../Documents/315/315_bit.drawio.svg)\r\n\r\nSimilarly, when querying, we need to traverse `nums` from right to left in order to ensure that only the elements to the right are in the buckets.\r\n\r\n**Algorithm**\r\n\r\n- Implement the binary indexed tree. Since the tree is initialized with all zeros, only `update` and `query` need to be implemented. Set `offset = 10^4`.\r\n\r\n- Iterate over each `num` in `nums` in reverse. For each `num`:\r\n\r\n  - Shift `num` to `num + offset`.\r\n  - Query the number of elements in the BIT that are smaller than `num`.\r\n  - Update the count of `num` in the BIT.\r\n\r\n- Return the result.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/NSkvX6EL/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"NSkvX6EL\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the length of `nums` and $$M$$ be the difference between the maximum and minimum values in `nums`.\r\n\r\nNote that for convenience, we fix $$M=2*10^4$$ in the above implementations.\r\n\r\n- Time Complexity: $$O(N\\log(M))$$.  \r\n  We need to iterate over `nums`. For each element, we spend $$O(\\log(M))$$ to find the number of smaller elements after it, and spend $$O(\\log(M))$$ time to update the counts. In total, we need $$O(N \\cdot \\log(M)) = O(N\\log(M))$$ time.\r\n\r\n- Space Complexity: $$O(M)$$, since we need, at most, an array of size $$M+2$$ to store the BIT.  \r\nWe need at most $$M+1$$ buckets, where the extra $$1$$ is for the value $$0$$. The BIT requires an extra dummy node, so the size is $$(M+1)+1 = M+2$$.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 3: Merge Sort\r\n\r\n**Intuition**\r\n\r\n> **Prerequisite: Merge Sort**\r\n>\r\n> If you are not familiar with Merge Sort, you should check relevant tutorials before continuing.\r\n>\r\n> Also, here is a basic application of Merge Sort that you can practice on:\r\n>\r\n> - [Sort an Array](https://leetcode.com/problems/sort-an-array/)\r\n\r\nTo apply merge sort, one key observation is that:\r\n\r\n> The smaller elements on the right of a number will **jump from its right to its left** during the sorting process.\r\n\r\n![Figure 6](../Documents/315/315_jumping.drawio.svg)\r\n\r\nIf we can record the numbers of those elements during sorting, then the problem is solved.\r\n\r\nCan we modify the merge sort a little to meet our needs?\r\n\r\nConsider when merging two sorted list\r\n\r\n![Figure 7](../Documents/315/315_merging.drawio.svg)\r\n\r\nYes! When we select an element `i` on the left array, we know that elements selected previously from the right array **jump** from `i`'s right to `i`'s left.\r\n\r\nBy adding the counts of those elements in every merge step, we get the total number of elements that jumped from `i`'s right to `i`'s left.\r\n\r\n**Algorithm**\r\n\r\n- Implement a merge sort function.\r\n\r\n  - For each element `i`, the function records the number of elements jumping from `i`'s right to `i`'s left during the merge sort.\r\n\r\n- Merge sort `nums`, store the number of elements jumping from right to left in `result`.\r\n\r\n  - Alternatively, one can sort the _indices_ with corresponding values in `nums`. That is to say, we are going to sort list `[0, 1, ..., n-1]` according to the comparator `nums[i]`. This helps to track the indices and update `result`. You can find additional details in the implementations below.\r\n\r\n- Return `result`.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/deoB8KuH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"deoB8KuH\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the length of `nums`.\r\n\r\n- Time Complexity: $$O(N\\log(N))$$. We need to perform a merge sort which takes $$O(N\\log(N))$$ time. All other operations take at most $$O(N)$$ time.\r\n\r\n- Space Complexity: $$O(N)$$, since we need a constant number of arrays of size $$O(N)$$.\r\n\r\n\r\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "count-of-smaller-numbers-after-self",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.513,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Tree is a special type of graphs, so the two usual techniques used to traverse a graph are also applicable to trees.\n\nWe recommend: Word Ladder, Lowest Common Ancestor of a Binary Tree, Course Schedule, Longest Increasing Path in a Matrix and Alien Dictionary.\n\nNote that some of the tree problems can also be asked in n-ary tree format, so make sure you know what an n-ary tree is.\n\nNote: The last problem may be quite tricky to solve, so feel free to skip that one."
    },
    {
        "id": "119",
        "title": "Backtracking",
        "slug": "backtracking",
        "items": [
            {
                "id": "852",
                "title": "Palindrome Partitioning",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 119,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "131",
                    "questionFrontendId": "131",
                    "sessionId": "968792",
                    "questionTitle": "Palindrome Partitioning",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/palindrome-partitioning/submit/",
                    "interpretUrl": "/problems/palindrome-partitioning/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<string>> partition(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<String>> partition(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def partition(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: List[List[str]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def partition(self, s: str) -> List[List[str]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nchar *** partition(char * s, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<string>> Partition(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string[][]}\\n */\\nvar partition = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String[][]}\\ndef partition(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func partition(_ s: String) -> [[String]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func partition(s string) [][]string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def partition(s: String): List[List[String]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun partition(s: String): List<List<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn partition(s: String) -> Vec<Vec<String>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String[][]\\n     */\\n    function partition($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function partition(s: string): string[][] {\\n\\n};\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec partition(S :: unicode:unicode_binary()) -> [[unicode:unicode_binary()]].\\npartition(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec partition(s :: String.t) :: [[String.t]]\\n  def partition(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aab\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"partition\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\",\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code>, partition <code>s</code> such that every substring of the partition is a <strong>palindrome</strong>. Return all possible palindrome partitioning of <code>s</code>.</p>\n\n<p>A <strong>palindrome</strong> string is a string that reads the same backward as forward.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> s = \"aab\"\n<strong>Output:</strong> [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> s = \"a\"\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 16</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Palindrome Partitioning",
                        "content": "[TOC]\n\n## Solution\n---\n\n#### Overview ####\n\nThe aim to partition the string into all possible palindrome combinations. To achieve this, we must generate all possible substrings of a string by partitioning at every index until we reach the end of the string. Example, `abba` can be partitioned as `[\"a\",\"ab\",\"abb\",\"abba\"]`. Each generated substring is considered as a potential candidate if it a [Palindrome](https://en.wikipedia.org/wiki/Palindrome).\n\nLet's look at a few approaches to implement this idea.\n\n---\n\n#### Approach 1: Backtracking\n\n**Intuition**\n\nThe idea is to generate all possible substrings of a given string and expand each possibility if is a potential candidate. The first thing that comes to our mind is  [Depth First Search](https://en.wikipedia.org/wiki/Depth-first_search). In Depth First Search, we recursively expand potential candidate until the defined goal is achieved. After that, we backtrack to explore the next potential candidate.\n\n[Backtracking](https://en.wikipedia.org/wiki/Backtracking)  incrementally build the candidates for the solution and discard the candidates (backtrack) if it doesn't satisfy the condition.\n\nThe backtracking algorithms consists of the following steps:\n\n- _Choose_: Choose the potential candidate. Here, our potential candidates are all substrings that could be generated from the given string.\n\n- _Constraint_: Define a constraint that must be satisfied by the chosen candidate. In this case, the constraint is that the string must be a _palindrome_.\n\n- _Goal_: We must define the goal that determines if have found the required solution and we must backtrack. Here, our goal is achieved if we have reached the end of the string.\n\n**Algorithm**\n\nIn the backtracking algorithm, we recursively traverse over the string in depth-first search fashion. For each recursive call, the beginning index of the string is given as $$\\text{start}$$.\n\n1) Iteratively generate all possible substrings beginning at $$\\text{start}$$ index. The $$\\text{end}$$ index increments from $$\\text{start}$$ till the end of the string.\n\n3) For each of the substring generated, check if it is a palindrome.\n\n4) If the substring is a palindrome, the substring is a potential candidate. Add substring to the $$\\text{currentList}$$ and perform a depth-first search on the remaining substring. If current substring ends at index $$\\text{end}$$, $$\\text{end}+1$$ becomes the $$\\text{start}$$ index for the next recursive call.\n\n5) Backtrack if $$\\text{start}$$ index is greater than or equal to the string length and add the $$\\text{currentList}$$ to the result.\n\n\n!?!../Documents/131_LIS.json:1772,888!?!\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/SVz6Z7cu/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"SVz6Z7cu\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$\\mathcal{O}(N \\cdot 2^{N})$$, where $$N$$ is the length of string $$s$$. This is the worst-case time complexity when all the possible substrings are palindrome.\n\nExample, if = s = `aaa`, the recursive tree can be illustrated as follows:\n\n![img](../Figures/131/time_complexity.png)\n\n\nHence, there could be $$2^{N}$$ possible substrings in the worst case. For each substring, it takes $$\\mathcal{O}(N)$$ time to generate substring and determine if it a palindrome or not. This gives us time complexity as $$\\mathcal{O}(N \\cdot 2^{N})$$\n\n- Space Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the length of the string $$s$$. This space will be used to store the recursion stack. For s = `aaa`, the maximum depth of the recursive call stack is 3 which is equivalent to $$N$$.\n\n---\n\n#### Approach 2: Backtracking with Dynamic Programming\n\n**Intuition**\n\nThis approach uses a similar Backtracking algorithm as discussed in _Approach 1_. But, the previous approach performs one extra iteration to determine if a given substring is a palindrome or not. Here, we are repeatedly iterating over the same substring multiple times and the result is always the same. There are [Overlapping Subproblems](https://en.wikipedia.org/wiki/Overlapping_subproblems) and we could further optimize the approach by using dynamic programming to determine if a string is a palindrome in constant time. Let's understand the algorithm in detail.\n\n**Algorithm**\n\nA given string $$s$$ starting at index $$\\text{start}$$ and ending at index $$\\text{end}$$ is a palindrome if  following conditions are satisfied :\n1) The characters at $$\\text{start}$$ and $$\\text{end}$$ indexes are equal.\n2) The substring starting at index $$\\text{start}+1$$ and ending at index $$\\text{end}-1$$ is a palindrome.\n\n![img](../Figures/131/palindrome_dp.png)\n\nLet $$N$$ be the length of the string.\nTo determine if a substring starting at index $$\\text{start}$$ and ending at index $$\\text{end}$$ is a palindrome or not, we use a 2 Dimensional array $$\\text{dp}$$ of size $$N \\cdot N$$  where,\n\n$$\\text{dp[start][end]} = \\text{true}$$ , if the substring beginning at index $$\\text{start}$$ and ending at index $$\\text{end}$$ is a palindrome.\n\nOtherwise, $$\\text{dp[start][end] }== \\text{false}$$.\n\nAlso, we must update the $$\\text{dp}$$ array, if we find that the current string is a palindrome.  \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/foWP6HLD/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"foWP6HLD\"></iframe>\n\n**Complexity Analysis**\n\n- Time Complexity : $$\\mathcal{O}(N \\cdot 2^{N})$$, where $$N$$ is the length of string $$s$$. In the worst case, there could be $$2^{N}$$ possible substrings and it will take $$\\mathcal{O}(N)$$ to generate each substring using `substr` as in _Approach 1_. However, we are eliminating one additional iteration to check if substring is a palindrome or not.\n\n- Space Complexity: $$\\mathcal{O}(N \\cdot N)$$, where $$N$$ is the length of the string $$s$$. The recursive call stack would require $$N$$ space as in _Approach 1_. Additionally we also use 2 dimensional array $$\\text{dp}$$ of size $$N \\cdot N$$ .\n\nThis gives us total space complexity as $$\\mathcal{O}(N \\cdot N)$$ + $$\\mathcal{O}(N)$$ = $$\\mathcal{O}(N \\cdot N)$$",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "palindrome-partitioning",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.435,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "853",
                "title": "Word Search II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 119,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "212",
                    "questionFrontendId": "212",
                    "sessionId": "968792",
                    "questionTitle": "Word Search II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-search-ii/submit/",
                    "interpretUrl": "/problems/word-search-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> findWords(char[][] board, String[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findWords(self, board, words):\\n        \\\"\\\"\\\"\\n        :type board: List[List[str]]\\n        :type words: List[str]\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** findWords(char** board, int boardSize, int* boardColSize, char ** words, int wordsSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> FindWords(char[][] board, string[] words) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {character[][]} board\\n * @param {string[]} words\\n * @return {string[]}\\n */\\nvar findWords = function(board, words) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Character[][]} board\\n# @param {String[]} words\\n# @return {String[]}\\ndef find_words(board, words)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findWords(board [][]byte, words []string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_words(board: Vec<Vec<char>>, words: Vec<String>) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String[][] $board\\n     * @param String[] $words\\n     * @return String[]\\n     */\\n    function findWords($board, $words) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findWords(board: string[][], words: string[]): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-words board words)\\n  (-> (listof (listof char?)) (listof string?) (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_words(Board :: [[char()]], Words :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nfind_words(Board, Words) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_words(board :: [[char]], words :: [String.t]) :: [String.t]\\n  def find_words(board, words) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"findWords\",\n  \"params\": [\n    {\n      \"name\": \"board\",\n      \"type\": \"character[][]\"\n    },\n    {\n      \"name\": \"words\",\n      \"type\": \"string[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>m x n</code> <code>board</code>&nbsp;of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>\n\n<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search1.jpg\" style=\"width: 322px; height: 322px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]\n<strong>Output:</strong> [&quot;eat&quot;,&quot;oath&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/11/07/search2.jpg\" style=\"width: 162px; height: 162px;\" />\n<pre>\n<strong>Input:</strong> board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 12</code></li>\n\t<li><code>board[i][j]</code> is a lowercase English letter.</li>\n\t<li><code>1 &lt;= words.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 10</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are unique.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
                        "If the current candidate does not exist in all words&#39; prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
                    ],
                    "solution": {
                        "title": "Word Search II",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Backtracking with Trie\n\n**Intuition**\n\nThe problem is actually a simplified crossword puzzle game, where the word solutions have been given on the board embedded with some noise letters. All we need to to do is to *cross* them out.\n\n>Intuitively, in order to cross out all potential words, the overall strategy would be to iterate the cell one by one, and from each cell we walk along its neighbors in four potential directions to find matched words.\nWhile wandering around the board, we would stop the exploration when we know it would not lead to the discovery of new words.\n\nOne might have guessed the paradigm that we would use for this problem. Yes, it is **backtracking**, which would be the backbone of the solution. It is fairly simply to construct a solution of backtracking. One could even follow a template given in our [Explore card of Recursion II](https://leetcode.com/explore/learn/card/recursion-ii/472/backtracking/2793/).\n\nThe key of the solution lies on _how we find the matches of word from the dictionary_. Intuitively, one might resort to the hashset data structure (_e.g._ `set()` in Python). This could work.\n\nHowever, during the backtracking process, one would encounter more often the need to tell if there exists any word that contains certain prefix, rather than if a string exists as a word in the dictionary. Because if we know that there does not exist any match of word in the dictionary for a given prefix, then we would not need to further explore certain direction. And this, would greatly reduce the exploration space, therefore improve the performance of the backtracking algorithm.\n\nThe capability of finding matching prefix is where the data structure called [Trie](https://leetcode.com/explore/learn/card/trie/) would shine, comparing the hashset data structure. Not only can Trie tell the membership of a word, but also it can instantly find the words that share a given prefix. As it turns out, the choice of data structure (`Trie` _VS._ `hashset`), which could end with a solution that ranks either the top $$5\\%$$ or the bottom $$5\\%$$.\n\nHere we show an example of Trie that is built from a list of words. As one can see from the following graph, at the node denoted `d`, we would know there are at least two words with the prefix `d` from the dictionary.\n\n![pic](../Figures/212/212_trie_example.png)\n\nWe have a problem about [implementing a Trie data structure](https://leetcode.com/problems/implement-trie-prefix-tree/). One can start with the Trie problem as warm up, and come back this problem later.\n\n\n**Algorithm**\n\nThe overall workflow of the algorithm is intuitive, which consists of a loop over each cell in the board and a recursive function call starting from the cell. Here is the skeleton of the algorithm.\n\n- We build a Trie out of the words in the dictionary, which would be used for the matching process later.\n\n- Starting from each cell, we start the backtracking exploration (_i.e._ `backtracking(cell)`), if there exists any word in the dictionary that starts with the letter in the cell.\n\n- During the recursive function call `backtracking(cell)`, we explore the neighbor cells (_i.e._ `neighborCell`) around the current cell for the next recursive call `backtracking(neighborCell)`. At each call, we check if the sequence of letters that we traverse so far matches any word in the dictionary, with the help of the Trie data structure that we built at the beginning.\n\nHere is an overall impression how the algorithm works. We give some sample implementation based on the rough idea above. And later, we detail some optimization that one could further apply to the algorithm. \n\n![pic](../Figures/212/212_trie_algo.png)\n\n<iframe src=\"https://leetcode.com/playground/5ayu6UzY/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5ayu6UzY\"></iframe>\n\nTo better understand the backtracking process, we demonstrate how we find the match of `dog` along the Trie in the following animation.\n\n!?!../Documents/212_LIS.json:1000,474!?!\n\n#### Optimizations\n\nIn the above implementation, we applied a few tricks to further speed up the running time, in addition to the application of the Trie data structure. In particular, the Python implementation could run faster than `98%` of the submissions. We detail the tricks as follows, ordered by their significance.\n\n>_Backtrack along the nodes in Trie._\n\n- One could use Trie simply as a dictionary to quickly find the match of words and prefixes, _i.e._ at _each step_ of backtracking, we start all over from the root of the Trie. This could work.\n- However, a more efficient way would be to traverse the Trie together with the progress of backtracking, _i.e._ at each step of `backtracking(TrieNode)`, the depth of the `TrieNode` corresponds to the length of the prefix that we've matched so far. This measure could lift your solution out of the bottom $$5\\%$$ of submissions.\n\n>_Gradually **prune** the nodes in Trie during the backtracking._\n\n- The idea is motivated by the fact that the time complexity of the overall algorithm sort of depends on the size of the Trie. For a leaf node in Trie, once we traverse it (_i.e._ find a matched word), we would no longer need to traverse it again. As a result, we could prune it out from the Trie.\n\n- Gradually, those non-leaf nodes could become leaf nodes later, since we trim their children leaf nodes. In the extreme case, the Trie would become empty, once we find a match for all the words in the dictionary. This pruning measure could reduce up to $$50\\%$$ of the running time for the test cases of the online judge.\n\n![pic](../Figures/212/212_trie_prune.png)\n\n> _Keep words in the Trie_.\n\n- One might use a flag in the Trie node to indicate if the path to the current code match any word in the dictionary. It is not necessary to keep the words in the Trie.\n- However, doing so could improve the performance of the algorithm a bit. One benefit is that one would not need to pass the prefix as the parameter in the `backtracking()` call. And this could speed up a bit the recursive call. Similarly, one does not need to reconstruct the matched word from the prefix, if we keep the words in Trie.\n\n>_Remove the matched words from the Trie._\n\n- In the problem, we are asked to return all the matched words, rather than the number of potential matches. Therefore, once we reach certain Trie node that contains a match of word, we could simply remove the match from the Trie.\n- As a _side_ benefit, we do not need to check if there is any duplicate in the result set. As a result, we could simply use a list instead of set to keep the results, which could speed up the solution a bit.\n<br/>\n\n\n**Complexity**\n\n- Time complexity: $$\\mathcal{O}(M(4\\cdot3^{L-1}))$$, where $$M$$ is the number of cells in the board and $$L$$ is the maximum length of words.\n  \n    - It is tricky is calculate the exact number of steps that a backtracking algorithm would perform. We provide a upper bound of steps for the worst scenario for this problem. The algorithm loops over all the cells in the board, therefore we have $$M$$ as a factor in the complexity formula. It then boils down to the _maximum_ number of steps we would need for each starting cell (_i.e._$$4\\cdot3^{L-1}$$).\n  \n    - Assume the maximum length of word is $$L$$, starting from a cell, initially we would have at most 4 directions to explore. Assume each direction is valid (_i.e._ worst case), during the following exploration, we have at most 3 neighbor cells (excluding the cell where we come from) to explore. As a result, we would traverse at most $$4\\cdot3^{L-1}$$ cells during the backtracking exploration.\n\n    - One might wonder what the worst case scenario looks like. Well, here is an example. Imagine, each of the cells in the board contains the letter `a`, and the word dictionary contains a single word `['aaaa']`. Voila. This is one of the worst scenarios that the algorithm would encounter.\n![pic](../Figures/212/212_complexity_example.png)\n  \n    - Note that, the above time complexity is estimated under the assumption that the Trie data structure would not change once built. If we apply the optimization trick to gradually remove the nodes in Trie, we could greatly improve the time complexity, since the cost of backtracking would reduced to zero once we match all the words in the dictionary, _i.e._ the Trie becomes empty.\n\n<br/>\n\n- Space Complexity: $$\\mathcal{O}(N)$$, where $$N$$ is the total number of letters in the dictionary.\n\n    - The main space consumed by the algorithm is the Trie data structure we build. In the worst case where there is no overlapping of prefixes among the words, the Trie would have as many nodes as the letters of all words. And optionally, one might keep a copy of words in the Trie as well. As a result, we might need $$2N$$ space for the Trie.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "word-search-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.879,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "854",
                "title": "Remove Invalid Parentheses",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 119,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "301",
                    "questionFrontendId": "301",
                    "sessionId": "968792",
                    "questionTitle": "Remove Invalid Parentheses",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/remove-invalid-parentheses/submit/",
                    "interpretUrl": "/problems/remove-invalid-parentheses/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> removeInvalidParentheses(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> removeInvalidParentheses(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def removeInvalidParentheses(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def removeInvalidParentheses(self, s: str) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** removeInvalidParentheses(char * s, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> RemoveInvalidParentheses(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {string[]}\\n */\\nvar removeInvalidParentheses = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {String[]}\\ndef remove_invalid_parentheses(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func removeInvalidParentheses(_ s: String) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func removeInvalidParentheses(s string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def removeInvalidParentheses(s: String): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun removeInvalidParentheses(s: String): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn remove_invalid_parentheses(s: String) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return String[]\\n     */\\n    function removeInvalidParentheses($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function removeInvalidParentheses(s: string): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (remove-invalid-parentheses s)\\n  (-> string? (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec remove_invalid_parentheses(S :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\\nremove_invalid_parentheses(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec remove_invalid_parentheses(s :: String.t) :: [String.t]\\n  def remove_invalid_parentheses(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"()())()\"",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"name\":\"removeInvalidParentheses\",\r\n    \"params\":[\r\n        {\r\n            \"name\":\"s\",\r\n            \"type\":\"string\"\r\n        }\r\n    ],\r\n    \"return\":{\r\n        \"type\":\"list<string>\"\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.</p>\n\n<p>Return <em>all the possible results</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;()())()&quot;\n<strong>Output:</strong> [&quot;(())()&quot;,&quot;()()()&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(a)())()&quot;\n<strong>Output:</strong> [&quot;(a())()&quot;,&quot;(a)()()&quot;]\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;)(&quot;\n<strong>Output:</strong> [&quot;&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 25</code></li>\n\t<li><code>s</code> consists of lowercase English letters and parentheses <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>.</li>\n\t<li>There will be at most <code>20</code> parentheses in <code>s</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "Since we don't know which of the brackets can possibly be removed, we try out all the options!",
                        "We can use recursion to try out all possibilities for the given expression. For each of the brackets, we have 2 options:\r\n\r\n<ol>\r\n<li> We keep the bracket and add it to the expression that we are building on the fly during recursion.</li>\r\n<li> OR, we can discard the bracket and move on.\r\n</ol>",
                        "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
                        "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
                        "For every left parenthesis, we should have a corresponding right parenthesis. We can make use of two counters which keep track of misplaced left and right parenthesis and in one iteration we can find out these two values. \r\n\r\n<pre>\r\n0 1 2 3 4 5 6 7\r\n( ) ) ) ( ( ( )  \r\ni = 0, left = 1, right = 0\r\ni = 1, left = 0, right = 0\r\ni = 2, left = 0, right = 1\r\ni = 3, left = 0, right = 2\r\ni = 4, left = 1, right = 2\r\ni = 5, left = 2, right = 2\r\ni = 6, left = 3, right = 2\r\ni = 7, left = 2, right = 2\r\n</pre>\r\n\r\nWe have 2 misplaced left and 2 misplaced right parentheses.",
                        "We found out that the exact number of left and right parenthesis that has to be removed to get a valid expression. So, e.g. in a 1000 parentheses string, if there are 2 misplaced left and 2 misplaced right parentheses, after we are done discarding 2 left and 2 right parentheses, we will have only one option per remaining character in the expression i.e. to consider them. We can't discard them."
                    ],
                    "solution": {
                        "title": "Remove Invalid Parentheses",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Backtracking\n\n**Intuition**\n\nFor this question, we are given an expression consisting of parentheses and there can be some misplaced or extra brackets in the expression that cause it to be invalid. An expression consisting of parentheses is considered valid only when every closing bracket has a corresponding opening bracket and vice versa.\n\nThis means if we start looking at each of the bracket from left to right, as soon as we encounter a closing bracket, there should be an unmatched opening bracket available to match it. Otherwise the expression would become invalid. The expression can also become invalid if the number of opening parentheses i.e. `(` are more than the number of closing parentheses i.e. `)`.\n\nLet us look at an invalid expression and all the possible valid expressions that can be formed from it by removing some of the brackets. There is no restriction on which parentheses we can remove. We simply have to make the expression valid.\n\n> The only condition is that we should be removing the minimum number of brackets to make an invalid expression, valid. If this condition was not present, we could potentially remove most of the brackets and come down to say 2 brackets in the end which form `()` and that would be a valid expression.\n\n<center>\n<img src=\"../Figures/301/Diag_1.png\" width=\"800\"></center>\n\nAn important thing to observe in the above diagram is that there are multiple ways of reaching the same solution i.e. say the optimal number of parentheses to be removed to make the original expression valid is K. We can remove multiple different sets of K brackets that will eventually give us the same final expression. But, each valid expression should be recorded only once. We have to take care of this in our solution. Note that there are other possible ways of reaching one of the two valid expressions shown above. We have simply shown 3 ways each for the two valid expressions.\n\nComing back to our problem, the question that now arises is, how to decide which of the parentheses to remove?\n\n> Since we don't know which of the brackets can possibly be removed, we try out all the options!\n\nFor every bracket we have two choices:\n\n* Either it can be considered a part of the final expression OR\n* It can be ignored i.e. we can delete it from our final expression.\n\nSuch kind of problems where we have multiple options and we have no strategy or metric of deciding greedily which option to take, we try out all of the options and see which ones lead to an answer. These type of problems are perfect candidates for the programming paradigm, `Recursion`.\n\n**Algorithm**\n\n1. Initialize an array that will store all of our valid expressions finally.\n2. Start with the leftmost bracket in the given sequence and proceed right in the recursion.\n3. The state of recursion is defined by the index which we are currently processing in the original expression. Let this index be represented by the character `i`. Also, we have two different variables `left_count` and `right_count` that represent the number of left and right parentheses we have added to our expression till now. These are the parentheses that were considered.\n4. If the current character i.e. `S[i]` (considering S is the expression string) is neither a closing or an opening parenthesis, then we simply add this character to our final solution string for the current recursion.\n5. However, if the current character is either of the two brackets i.e. `S[i] == '(' or S[i] == ')'`, then we have two options. We can either discard this character by marking it an invalid character or we can consider this bracket to be a part of the final expression.\n6. When all of the parentheses in the original expression have been processed, we simply check if the expression represented by `expr` i.e. the expression formed till now is valid one or not. The way we check if the final expression is valid or not is by looking at the values in `left_count` and `right_count`. For an expression to be valid `left_count == right_count`. If it is indeed valid, then it could be one of our possible solutions.\n    * Even though we have a valid expression, we also need to keep track of the number of removals we did to get this expression. This is done by another variable passed in recursion called `rem_count`.\n    * Once recursion finishes we check if the current value of `rem_count` is < the least number of steps we took to form a valid expression till now i.e. the global minima. If this is not the case, we don't record the new expression, else we record it.\n\nOne small optimization that we can do from an implementation perspective is introducing some sort of pruning in our algorithm. Right now we simply go till the very end i.e. process all of the parentheses and when we are done processing all of them, we check if the expression we have can be considered or not.\n\nWe have to wait till the very end to decide if the expression formed in recursion is a valid expression or not. Is there a way for us to cutoff from some of the recursion paths early on because they wouldn't lead to a solution? The answer to this is Yes! The optimization is based on the following idea.\n\nFor a left bracket encountered during recursion, if we decide to consider it, then it may or may not lead to an invalid final expression. It may lead to an invalid expression eventually if there are no matching closing bracket available afterwards. But, we don't know for sure if this will happen or not.\n\n> However, for a closing bracket, if we decide to keep it as a part of our final expression (remember for every bracket we have two options, either to keep it or to remove it and recurse further) and there is no corresponding opening bracket to match it in the expression till now, then it will definitely lead to an invalid expression no matter what we do afterwards.\n\ne.g.\n\n<pre>\n( (  ) ) )\n</pre>\n\nIn this case the third closing bracket will make the expression invalid. No matter what comes afterwards, this will give us an invalid expression and if such a thing happens, we shouldn't recurse further and simply prune the recursion tree.\n\nThat is why, in addition to having the index in the original string/expression which we are currently processing and the expression string formed till now, we also keep track of the number of left and right parentheses. Whenever we keep a left parenthesis in the expression, we increment its counter. For a right parenthesis, we check if `right_count < left_count`. If this is the case then only we consider that right parenthesis and recurse further. Otherwise we don't as we know it will make the expression invalid. This simple optimization saves a lot of runtime.\n\nNow, let us look at the implementation for this algorithm.\n\n<iframe src=\"https://leetcode.com/playground/VfQamz4z/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"VfQamz4z\"></iframe>\n\n**Complexity analysis**\n\n* Time Complexity : $$O(2^N)$$ since in the worst case we will have only left parentheses in the expression and for every bracket we will have two options i.e. whether to remove it or consider it. Considering that the expression has $$N$$ parentheses, the time complexity will be $$O(2^N)$$.\n* Space Complexity : $$O(N)$$ because we are resorting to a recursive solution and for a recursive solution there is always stack space used as internal function states are saved onto a stack during recursion. The maximum depth of recursion decides the stack space used. Since we process one character at a time and the base case for the recursion is when we have processed all of the characters of the expression string, the size of the stack would be $$O(N)$$. Note that we are not considering the space required to store the valid expressions. We only count the intermediate space here.\n<br />\n<br />\n---\n#### Approach 2: Limited Backtracking!\n\nAlthough the previous solution does get accepted on the platform, it is a very inefficient solution because we try removing each and every possible parentheses from the expression and in the end we check two things:\n\n1. if the expression is valid or not\n2. if the total number of removed parentheses removed in the current recursion is less than the global minimum till now or not.\n\nWe cannot determine which of the parentheses are misplaced because, as the problem statement puts across, we can remove multiple combinations of parentheses and end up with a valid expression. This means there can be multiple valid expressions from a single invalid expression and we have to find all of them.\n\n> The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed.\n\nWhat if we could determine this count?\n\nWhat if in addition to determining this count of characters to be removed, we could also determine the number of left parentheses and number of right parentheses to be removed from the original expression to get **any** valid expression?\n\nThis would cut down the computations immensely and the runtime would plummet as a result. The reason for this is, if we knew how many left and right parentheses are to be removed from the original expression to get a valid expression, we would cut down on so many unwanted recursive calls.\n\nImagine the original expression to be 1000 characters with only 3 misplaced `(` parentheses and 2 misplaced `)` parentheses. In our previous solution we would end up trying to remove each one of left and right parentheses and try to reach a valid expression in the end whereas we should only be trying out removing 3 `(` brackets and 2 `)` brackets.\n\n> This is the exact number of `(` and `)` that have to be removed to get a valid expression. No more, no less.\n\nLet us look at how we can find out the number of misplaced left and right parentheses in a given expression first and then we will slightly modify our original algorithm to incorporate these counts as well.\n\n1. We process the expression one bracket at a time starting from the left.\n2. Suppose we encounter an opening bracket i.e. `(`, it may or may not lead to an invalid expression because there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we simply increment the counter keeping track of left parentheses till now. `left += 1`\n3. If we encounter a closing bracket, this has two meanings:\n    * Either there was no matching opening bracket for this closing bracket and in that case we have an invalid expression. This is the case when `left == 0` i.e. when there are no unmatched left brackets available. In such a case we increment another counter say `right += 1` to represent misplaced right parentheses.\n    * Or, we had some unmatched opening bracket available to match this closing bracket. This is the case when `left > 0`. In this case we simply decrement the left counter we had i.e. `left -= 1`\n4. Continue processing the string until all parentheses have been processed.\n5. In the end the values of `left` and `right` would tell us the number of unmatched `(` and `)` parentheses respectively.\n\nNow that we have these two values available that tell us the total number of left i.e. `(` and right i.e. `)` parentheses that have to be removed to make the invalid expression valid, we will modify our original algorithm discussed in the previous session to avoid unwanted recursions.\n\n**Algorithm**\n\nThe overall algorithm remains exactly the same as before. The changes that we will incorporate are listed below:\n\n* The state of the recursion is now defined by five different variables:\n    1. `index` which represents the current character that we have to process in the original string.\n    2. `left_count` which represents the number of left parentheses that have been added to the expression we are building.\n    3. `right_count` which represents the number of right parentheses that have been added to the expression we are building.\n    4. `left_rem` is the number of left parentheses that remain to be removed.\n    5. `right_rem` represents the number of right parentheses that remain to be removed. Overall, for the final expression to be valid, `left_rem == 0` and `right_rem == 0`.\n* When we decide to not consider a parenthesis i.e. delete a parenthesis, be it a left or a right parentheses, we have to consider their corresponding remaining counts as well. This means that we can only discard a left parentheses if `left_rem > 0` and similarly for the right one we will check for `right_rem > 0`.\n* There are no changes to checks for **considering** a parenthesis. Only the conditions change for **discarding** a parenthesis.\n* Condition for an expression being valid in the base case would now become `left_rem == 0 and right_rem == 0`. Note that we don't have to check if `left_count == right_count` anymore because in the case of a valid expression, we would have removed all the misplaced or invalid parenthesis by the time the recursion ends. So, the only check we need if `left_rem == 0 and right_rem == 0`.\n\n> The most important thing here is that we have completely gotten rid of checking if the number of parentheses removed is lesser than the current minimum or not. The reason for this is we always remove the same number of parentheses as defined by `left_rem + right_rem` at the start of recursion.\n\nNow let us look at the implementation for this modified version of algorithm.\n\n<iframe src=\"https://leetcode.com/playground/GvFntTBm/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"GvFntTBm\"></iframe>\n\n**Complexity analysis**\n\n* Time Complexity : The optimization that we have performed is simply a better form of pruning. Pruning here is something that will vary from one test case to another. In the worst case, we can have something like `(((((((((` and the `left_rem = len(S)` and in such a case we can discard all of the characters because all are misplaced. So, in the worst case we **still** have 2 options per parenthesis and that gives us a complexity of $$O(2^N)$$.\n* Space Complexity : The space complexity remains the same i.e. $$O(N)$$ as previous solution. We have to go to a maximum recursion depth of $$N$$ before hitting the base case. Note that we are not considering the space required to store the valid expressions. We only count the intermediate space here.\n\n<br />\n<br />",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "remove-invalid-parentheses",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.774,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "855",
                "title": "Wildcard Matching",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 119,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "44",
                    "questionFrontendId": "44",
                    "sessionId": "968792",
                    "questionTitle": "Wildcard Matching",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/wildcard-matching/submit/",
                    "interpretUrl": "/problems/wildcard-matching/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isMatch(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isMatch(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isMatch(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isMatch(char * s, char * p){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsMatch(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {boolean}\\n */\\nvar isMatch = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Boolean}\\ndef is_match(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isMatch(_ s: String, _ p: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isMatch(s: String, p: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_match(s: String, p: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Boolean\\n     */\\n    function isMatch($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isMatch(s: string, p: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-match s p)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aa\"\n\"a\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isMatch\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    { \r\n      \"name\": \"p\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;?&#39;</code> Matches any single character.</li>\n\t<li><code>&#39;*&#39;</code> Matches any sequence of characters (including the empty sequence).</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; matches any sequence.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cb&quot;, p = &quot;?a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong>&nbsp;&#39;?&#39; matches &#39;c&#39;, but the second letter is &#39;a&#39;, which does not match &#39;b&#39;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;adceb&quot;, p = &quot;*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;The first &#39;*&#39; matches the empty sequence, while the second &#39;*&#39; matches the substring &quot;dce&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acdcb&quot;, p = &quot;a*c?b&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= s.length, p.length &lt;= 2000</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;?&#39;</code> or <code>&#39;*&#39;</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Wildcard Matching",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Approach 1: Recursion with Memoization\n\n**Intuition**\n\nThe first idea here is a recursion. It is a relatively straightforward\napproach but quite time consuming because of huge recursion depth for long input strings.\n\n- If the strings are equal (`p == s`), then return `True`.\n\n- If the pattern matches any string (`p == '*'`), then return `True`.\n\n- If `p` is empty, or `s` is empty, return `False`.\n\n- If the current characters match (`p[0] == s[0]` or `p[0] == '?'`), \nthen compare the next ones and return `isMatch(s[1:], p[1:])`.\n\n- If the current pattern character is a star (`p[0] == '*'`), then\nthere are two possible situations:\n\n    - The star matches no characters, and hence the answer is\n    `isMatch(s, p[1:])`.\n    \n    - The star matches one or more characters, and so the answer is\n    `isMatch(s[1:], p)`.\n    \n- If `p[0] != s[0]`, return `False`.\n\n![pic](../Figures/44/stupid.png)\n\nThe problem of this algorithm is that it doesn't pass \nall test cases because of time limit issue, \nand hence has to be optimised.\nHere is what could be done:\n\n1. _Memoization_. That is a standard way to optimise the recursion. \nLet's have a memoization hashmap using pair `(s, p)` as a key and\nmatch/doesn't match as a boolean value. \nOne could keep all already checked pairs `(s, p)` in this hashmap, so that\nif there are any duplicate checks, the answer is right here, \nand there is no need to proceed to the computations again.\n\n2. _Clean up of the input data_. Whether the patterns with multiple stars \nin a row `a****bc**cc` are valid wildcards or not, they could be \nsimplified without any data loss to `a*bc*cc`. Such a cleanup helps to decrease\nthe recursion depth. \n\n**Algorithm**\n\nHere is the algorithm.\n\n- Clean up the input by replacing more than one star in a row by a single star: \n`p = remove_duplicate_stars(p)`.\n\n- Initiate the memoization hashmap `dp`.\n\n- Return the helper function with a cleaned input: `helper(s, p)`.\n\n- `helper(s, p)`:\n\n    - If `(s, p)` is already known and stored in `dp`, return the value.\n\n    - If the strings are equal (`p == s`), or the pattern matches any string (`p == '*'`),\n    add `dp[(s, p)] = True`.\n    \n    - Else if `p` is empty, or `s` is empty, add `dp[(s, p)] = False`.\n    \n    - Else if the current characters match (`p[0] == s[0]` or `p[0] == '?'`), \n    then compare the next ones and add `dp[(s, p)] = helper(s[1:], p[1:])`.\n    \n    - Else if the current pattern character is a star (`p[0] == '*'`), then\n    there are two possible situations: the star matches no characters,\n    and the star matches one or more characters: \n    `dp[(s, p)] = helper(s, p[1:]) or helper(s[1:], p)`.\n        \n    - Else `p[0] != s[0]`, then add `dp[(s, p)] = False`.\n    \n    - Now when the value is computed, return it: `dp[(s, p)]`.\n\n**Implementation**   \n\n<iframe src=\"https://leetcode.com/playground/YN36qKvr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"YN36qKvr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(S \\cdot P \\cdot (S + P))$$\n\t\n    * Removing duplicate stars requires us to traverse the string `p` once, this requires $$O(P)$$ time. \n\t\n    *  Regarding the helper function, every non-memoized recursive call we will: \n        1. Check if `helper(s, p)` has already been calculated.  This takes $$O(S + P)$$ time to create a hash of the tuple `(s, p)` the first time and $$O(1)$$ time to check if the result has already been cached.\n\n        2. Go through our if statements.  If `(s, p)` is one of the base cases, this will take $$O(min(S, P))$$ time for the string equality check or just $$O(1)$$ time for other checks, otherwise, it will take $$O(S + P)$$ time to create a substring `s[1:]` and a substring `p[1:]`.  Here, let's assume the worst-case scenario where most of the non-memoized recursive calls require $$O(S + P)$$ time.  \n\n        3. Then we will cache our result, which takes $$O(1)$$ time since the hash for tuple `(s, p)` was already created when we checked if the result for `(s, p)` is already cached.\n\t      \n        So in total, we spend $$O(2 \\cdot (S + P)) = O(S + P)$$ time on every non-memoized call ($$S + P$$ for creating a hash and $$S + P$$ for creating substrings).  We can only have as many non-memoized calls as there are combinations of `s` and `p`. Therefore, in the worst case, we can have $$S \\cdot P$$ non-memoized calls. This gives us a total time spent on non-memoized calls of $$O(S \\cdot P \\cdot (S + P))$$.\n\t      \n    * As for the memoized calls, for each non-memoized call, we can make at most 2 additional calls to `helper`.  This means that there will be at most $$S \\cdot P$$ memoized calls.  Each memoized call takes $$O(S + P)$$ time to create the hash for `(s, p)` and $$O(1)$$ time to get the cached result.  So the total time spent on memoized calls is $$O(S \\cdot P \\cdot (S + P))$$ which is a loose upper bound. \n\n    * Adding all 3 time complexities together we get: $$O(P + 2 \\cdot S \\cdot P \\cdot (S + P)) = O(S \\cdot P \\cdot (S + P))$$.\n\t\n        > Note: This approach can be optimized by using two pointers to track the current position on `s` and `p` instead of passing substrings of `s` and `p` as arguments.  To improve readability, this was not implemented here, however, doing so will reduce the time complexity to $$O(S \\cdot P)$$ since hashing two integers takes $$O(1)$$ time and each recursive call to `helper` would no longer require creating new substrings which takes linear time.  Thus the total time complexity is $$O(1)$$ per call for a maximum of $$S \\cdot P$$ non-memoized calls and $$S \\cdot P$$ memoized calls.\n\n* Space complexity: $$O(S \\cdot P)$$. Creating a new string `p` requires $$O(P)$$ space. The recursion call stack may exceed `max(S, P)` in cases such as `(s, p)` = `(aaab, *a*b)`, however, it is bounded by $$O(S + P)$$.  Lastly, the hashmap requires $$O(S \\cdot P)$$ space to memoize the result of each call to `helper`.\n<br />\n<br />\n\n\n---\n#### Approach 2: Dynamic Programming \n\n**Intuition**\n\nRecursion approach above shows how painful the large recursion depth could be,\nso let's try something more iterative. \n\nMemoization from the first approach gives an idea to try a dynamic programming.\nThe problem is very similar with [Edit Distance problem](https://leetcode.com/problems/edit-distance/solution/),\nso let's use exactly the same approach here.\n\nThe idea would be to reduce the problem to simple ones. \nFor example, there is a string `adcebdk` and pattern `*a*b?k`,\nand we want to compute if there is a match for them: `D = True/False`. \nOne could notice that it seems to be more simple for short strings and patterns \nand so it would be logical to relate a match `D[p_len][s_len]` with the lengths `p_len` \nand `s_len` of input pattern and string correspondingly.\n\nLet's go further and introduce a match `D[p_idx][s_idx]` \nwhich is a match between the first `p_idx` characters of the pattern \nand the first `s_idx` characters of the string.\n\n![pic](../Figures/44/dp_match2_fixed.png)\n\nIt turns out that one could compute `D[p_idx][s_idx]`, knowing \na match without the last characters `D[p_idx - 1][s_idx - 1]`.\n\nIf the last characters are the same or pattern character is '?', then \n\n> $$D[p_{idx}][s_{idx}] = D[p_{idx} - 1][s_{idx} - 1] \\qquad (1)$$\n\n![pic](../Figures/44/word_match3.png)\n\nIf the pattern character is '*' and there was a match on the previous step\n`D[p_idx - 1][s_idx - 1] = True`, then \n\n- The star at the end of pattern still results in a match. \n\n- The star could match as many characters as you wish.\n\n> $$D[p_{idx} - 1][i] = \\textrm{True}, i \\ge s_{idx} - 1 \\qquad(2)$$\n\n\nSo each step of the computation would be done based on the previous ones,\nas follows: \n\n![pic](../Figures/44/if_match.png)\n\n![pic](../Figures/44/dpstar.png)\n\n**Algorithm**\n\n- Start from the table `D` filled with `False` everywhere but `D[0][0] = True`.\n\n- Apply rules (1) and (2) in a loop and return `D[p_len][s_len]` as an answer.\n\n![pic](../Figures/44/fixed.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/KwWWkXwr/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KwWWkXwr\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(S \\cdot P)$$ where $$S$$ and $$P$$ are lengths of \nthe input string and the pattern respectively. \n* Space complexity: $$O(S \\cdot P)$$ to store the matrix.\n<br />\n<br />\n\n\n---\n#### Approach 3: Backtracking\n\n**Intuition**\n\nComplexity $$O(S \\cdot P)$$ is much better than $$O(S \\cdot P \\cdot (S + P))$$,\nbut still could be improved. There is no need to compute the entire matrix,\ni.e., to check all the possibilities for each star:\n\n- Star matches zero characters.\n- Star matches one character.\n- Star matches two characters. \n\n...\n\n- Star matches all remaining characters.  \n\nLet's just pick up the first opportunity \"matches zero characters\" and proceed further.\nIf this assumption would lead in \"no match\" situation, then _backtrack_: come back\nto the previous star, assume now that it matches one more character (one) and \nproceed again. Again \"no match\" situation? \n_Backtrack again_: come back to the previous star, \nand assume now that it matches one more character (two), etc. \n\n![pic](../Figures/44/backtrack.png)\n\n**Algorithm**\n\nHere is the algorithm.\n\n- Let's use two pointers here: `s_idx` to iterate over the string, and `p_idx` to \niterate over the pattern. While `s_idx < s_len`:\n\n    - If there are still characters in the pattern (`p_idx < p_len`) and\n    the characters under the pointers match \n    (`p[p_idx] == s[s_idx]` or `p[p_idx] == '?'`),\n    then move forward by increasing both pointers.\n    \n    - Otherwise, if there are still characters in the pattern (`p_idx < p_len`), and\n    `p[p_idx] == '*'`, then first check \"match zero characters\" situation, i.e.,\n    increase only pattern pointer `p_idx++`.\n    Write down for a possible backtrack the star position in `star_idx` variable,\n    and the current string pointer in `s_tmp_idx` variable.\n    \n    - Else if there is \"no match\" situation: \n    the pattern is used up `p_idx < p_len`\n    or the characters under the pointers doesn't match. \n    \n        - If there was no stars in the pattern, i.e., no `star_idx`, return `False`.\n        \n        - If there was a star, then backtrack: set pattern pointer\n        just after the last star `p_idx = star_idx + 1`, and string \n        pointer `s_idx = s_tmp_idx + 1`, i.e., assume that this time the star\n        matches _one more character_. Save the current string pointer \n        for the possible backtrack `s_tmp_idx = s_idx`.\n        \n- Return `True` if all remaining characters in the pattern are stars. \n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/K3Pd2N7F/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"K3Pd2N7F\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(\\min(S, P))$$ for the best case and\nbetter than $$O(S \\log P)$$ for the average case, where $$S$$ and $$P$$ are lengths of \nthe input string and the pattern correspondingly. \nPlease refer to [this article](https://arxiv.org/pdf/1407.0950.pdf) for detailed proof. However, in the worst-case scenario, this algorithm requires $$O(S \\cdot P)$$ time.\n* Space complexity: $$O(1)$$ since it's a constant space solution.\n<br />\n<br />\n\n\n---\n#### Further reading\n\nThere are a lot of search-related questions around this problem \nwhich could pop up during the interview.\nTo prepare, you could read about [string searching algorithm](https://en.wikipedia.org/wiki/String-searching_algorithm)\nand [KMP algorithm](https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm).",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "wildcard-matching",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.788,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "856",
                "title": "Regular Expression Matching",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 119,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "10",
                    "questionFrontendId": "10",
                    "sessionId": "968792",
                    "questionTitle": "Regular Expression Matching",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/regular-expression-matching/submit/",
                    "interpretUrl": "/problems/regular-expression-matching/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool isMatch(string s, string p) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean isMatch(String s, String p) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def isMatch(self, s, p):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type p: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool isMatch(char * s, char * p){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool IsMatch(string s, string p) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string} p\\n * @return {boolean}\\n */\\nvar isMatch = function(s, p) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String} p\\n# @return {Boolean}\\ndef is_match(s, p)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func isMatch(_ s: String, _ p: String) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func isMatch(s string, p string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def isMatch(s: String, p: String): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun isMatch(s: String, p: String): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn is_match(s: String, p: String) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String $p\\n     * @return Boolean\\n     */\\n    function isMatch($s, $p) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function isMatch(s: string, p: string): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (is-match s p)\\n  (-> string? string? boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec is_match(S :: unicode:unicode_binary(), P :: unicode:unicode_binary()) -> boolean().\\nis_match(S, P) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec is_match(s :: String.t, p :: String.t) :: boolean\\n  def is_match(s, p) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"aa\"\n\"a\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"isMatch\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"p\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an input string <code>s</code>&nbsp;and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p>\n\n<ul>\n\t<li><code>&#39;.&#39;</code> Matches any single character.\u200b\u200b\u200b\u200b</li>\n\t<li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li>\n</ul>\n\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a&quot;\n<strong>Output:</strong> false\n<strong>Explanation:</strong> &quot;a&quot; does not match the entire string &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aa&quot;, p = &quot;a*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&#39;*&#39; means zero or more of the preceding&nbsp;element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ab&quot;, p = &quot;.*&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;&quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aab&quot;, p = &quot;c*a*b&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong>&nbsp;c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches &quot;aab&quot;.\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;mississippi&quot;, p = &quot;mis*is*p*.&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length&nbsp;&lt;= 20</code></li>\n\t<li><code>1 &lt;= p.length&nbsp;&lt;= 30</code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n\t<li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and&nbsp;<code>&#39;*&#39;</code>.</li>\n\t<li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Regular Expression Matching",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Recursion\n\n**Intuition**\n\nIf there were no Kleene stars (the `*` wildcard character for regular expressions), the problem would be easier - we simply check from left to right if each character of the text matches the pattern.\n\nWhen a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.  A recursive solution is a straightforward way to represent this relationship.\n\n**Algorithm**\n\nWithout a Kleene star, our solution would look like this:\n\n\n<iframe src=\"https://leetcode.com/playground/Z2XSmAHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"123\" name=\"Z2XSmAHG\"></iframe>\n\nIf a star is present in the pattern, it will be in the second position $$\\text{pattern[1]}$$.  Then, we may ignore this part of the pattern, or delete a matching character in the text.  If we have a match on the remaining strings after any of these operations, then the initial inputs matched.\n\n<iframe src=\"https://leetcode.com/playground/EX8cYcs3/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"EX8cYcs3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  In the worst case, a call to `match(text[i:], pattern[2j:])` will be made $$\\binom{i+j}{i}$$ times, and strings of the order $$O(T - i)$$ and $$O(P - 2*j)$$ will be made.  Thus, the complexity has the order $$\\sum_{i = 0}^T \\sum_{j = 0}^{P/2} \\binom{i+j}{i} O(T+P-i-2j)$$.  With some effort outside the scope of this article, we can show this is bounded by $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$.\n\n* Space Complexity:  For every call to `match`, we will create those strings as described above, possibly creating duplicates.  If memory is not freed, this will also take a total of $$O\\big((T+P)2^{T + \\frac{P}{2}}\\big)$$ space, even though there are only order $$O(T^2 + P^2)$$ unique suffixes of $$P$$ and  $$T$$ that are actually required.\n<br />\n<br />\n---\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nAs the problem has an **optimal substructure**, it is natural to cache intermediate results.  We ask the question $$\\text{dp(i, j)}$$: does $$\\text{text[i:]}$$ and $$\\text{pattern[j:]}$$ match?  We can describe our answer in terms of answers to questions involving smaller strings.\n\n**Algorithm**\n\nWe proceed with the same recursion as in [Approach 1](#approach-1-recursion), except because calls will only ever be made to `match(text[i:], pattern[j:])`, we use $$\\text{dp(i, j)}$$ to handle those calls instead, saving us expensive string-building operations and allowing us to cache the intermediate results.\n\n\n*Top-Down Variation*\n<iframe src=\"https://leetcode.com/playground/Fpg6LXEX/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Fpg6LXEX\"></iframe>\n\n*Bottom-Up Variation*\n\n<iframe src=\"https://leetcode.com/playground/dmAyPDG3/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"dmAyPDG3\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: Let $$T, P$$ be the lengths of the text and the pattern respectively.  The work for every call to `dp(i, j)` for $$i=0, ... ,T$$; $$j=0, ... ,P$$ is done once, and it is $$O(1)$$ work.  Hence, the time complexity is $$O(TP)$$.\n\n* Space Complexity:  The only memory we use is the $$O(TP)$$ boolean entries in our cache.  Hence, the space complexity is $$O(TP)$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "regular-expression-matching",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.964,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some of the best backtracking interview questions.\n\nWe recommend: Word Search II, Remove Invalid Parentheses and Regular Expression Matching."
    },
    {
        "id": "120",
        "title": "Sorting and Searching",
        "slug": "sorting-and-searching",
        "items": [
            {
                "id": "857",
                "title": "Wiggle Sort II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 120,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "324",
                    "questionFrontendId": "324",
                    "sessionId": "968792",
                    "questionTitle": "Wiggle Sort II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/wiggle-sort-ii/submit/",
                    "interpretUrl": "/problems/wiggle-sort-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    void wiggleSort(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public void wiggleSort(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def wiggleSort(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: None Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def wiggleSort(self, nums: List[int]) -> None:\\n        \\\"\\\"\\\"\\n        Do not return anything, modify nums in-place instead.\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nvoid wiggleSort(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public void WiggleSort(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {void} Do not return anything, modify nums in-place instead.\\n */\\nvar wiggleSort = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Void} Do not return anything, modify nums in-place instead.\\ndef wiggle_sort(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func wiggleSort(_ nums: inout [Int]) {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wiggleSort(nums []int)  {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def wiggleSort(nums: Array[Int]): Unit = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun wiggleSort(nums: IntArray): Unit {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn wiggle_sort(nums: &mut Vec<i32>) {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return NULL\\n     */\\n    function wiggleSort(&$nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n Do not return anything, modify nums in-place instead.\\n */\\nfunction wiggleSort(nums: number[]): void {\\n\\n};\"}]",
                    "sampleTestCase": "[1,5,1,1,6,4]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"wiggleSort\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"void\"\n  },\n  \"output\": {\n    \"paramindex\": 0\n  },\n  \"manual\": false\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, reorder it such that <code>nums[0] &lt; nums[1] &gt; nums[2] &lt; nums[3]...</code>.</p>\n\n<p>You may assume the input array always has a valid answer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5,1,1,6,4]\n<strong>Output:</strong> [1,6,1,5,1,4]\n<strong>Explanation:</strong> [1,4,1,5,1,6] is also accepted.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,2,2,3,1]\n<strong>Output:</strong> [2,3,1,3,1,2]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 5000</code></li>\n\t<li>It is guaranteed that there will be an answer for the given input <code>nums</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow Up:</strong> Can you do it in <code>O(n)</code> time and/or <strong>in-place</strong> with <code>O(1)</code> extra space?",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "858",
                "title": "Kth Smallest Element in a Sorted Matrix",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 120,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "378",
                    "questionFrontendId": "378",
                    "sessionId": "968792",
                    "questionTitle": "Kth Smallest Element in a Sorted Matrix",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/kth-smallest-element-in-a-sorted-matrix/submit/",
                    "interpretUrl": "/problems/kth-smallest-element-in-a-sorted-matrix/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int kthSmallest(int[][] matrix, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def kthSmallest(self, matrix, k):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint kthSmallest(int** matrix, int matrixSize, int* matrixColSize, int k){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int KthSmallest(int[][] matrix, int k) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n * @param {number} k\\n * @return {number}\\n */\\nvar kthSmallest = function(matrix, k) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} matrix\\n# @param {Integer} k\\n# @return {Integer}\\ndef kth_smallest(matrix, k)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func kthSmallest(_ matrix: [[Int]], _ k: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func kthSmallest(matrix [][]int, k int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def kthSmallest(matrix: Array[Array[Int]], k: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun kthSmallest(matrix: Array<IntArray>, k: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn kth_smallest(matrix: Vec<Vec<i32>>, k: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $matrix\\n     * @param Integer $k\\n     * @return Integer\\n     */\\n    function kthSmallest($matrix, $k) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function kthSmallest(matrix: number[][], k: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (kth-smallest matrix k)\\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec kth_smallest(Matrix :: [[integer()]], K :: integer()) -> integer().\\nkth_smallest(Matrix, K) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec kth_smallest(matrix :: [[integer]], k :: integer) :: integer\\n  def kth_smallest(matrix, k) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,5,9],[10,11,13],[12,13,15]]\n8",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"kthSmallest\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"matrix\",\r\n      \"type\": \"integer[][]\"\r\n    },\r\n    {\r\n      \"name\": \"k\",\r\n      \"type\": \"integer\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an <code>n x n</code> <code>matrix</code> where each of the rows and columns are sorted in ascending order, return <em>the</em> <code>k<sup>th</sup></code> <em>smallest element in the matrix</em>.</p>\n\n<p>Note that it is the <code>k<sup>th</sup></code> smallest element <strong>in the sorted order</strong>, not the <code>k<sup>th</sup></code> <strong>distinct</strong> element.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> The elements in the matrix are [1,5,9,10,11,12,13,<u><strong>13</strong></u>,15], and the 8<sup>th</sup> smallest number is 13\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matrix = [[-5]], k = 1\n<strong>Output:</strong> -5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 300</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= matrix[i][j] &lt;= 10<sup>9</sup></code></li>\n\t<li>All the rows and columns of <code>matrix</code> are <strong>guaranteed</strong> to be sorted in <strong>non-decreasing order</strong>.</li>\n\t<li><code>1 &lt;= k &lt;= n<sup>2</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Kth Smallest Element in a Sorted Matrix",
                        "content": "[TOC]\n\n## Solution\n\n#### Approach 1: Min-Heap approach\n\n**Intuition**\n\nThe intuition for this approach is really simple. If you think about it, we can reframe the problem as finding the $$K^{\\text{th}}$$ smallest elements from amongst `N sorted lists` right? We know that the rows are sorted and so are the columns. So, we can treat each row (or column) as a sorted list in itself. Then, the problem just boils down to finding the $$K^{\\text{th}}$$ smallest element from amongst these `N` sorted lists. However, before we get to this problem, lets first talk about a simpler version of the problem which is to find the $$K^{\\text{th}}$$ smallest element from amongst 2 sorted lists. This is easy enough to solve since all we need are a pair of pointers which act as indices in the two lists. \n\nAt each step we check which element is smaller amongst the two being pointed at by the indices and progress the corresponding index accordingly. If you think about it, we just need to run the algorithm for merging two sorted lists without actually merging them. We need to keep on running this algorithm until we find our $$K^{\\text{th}}$$ element. Let's quickly look at how this would look like diagrammatically.\n\n<center>\n<img src=\"../Figures/378/img1.png\"/>\n</center>\n\nWe can use this two-pointer approach for finding the $$K^{\\text{th}}$$ element. As explained above, at each step we check the two values and move the pointer corresponding to the smaller value forward.\n\n<center>\n<img src=\"../Figures/378/img2.png\"/>\n</center>\n\nNow that was simple enough to do. In this particular problem, we have $$N$$ sorted lists instead of just 2. That's what adds to the complexity. We can't really keep $$N$$ different pointers now, can we? The heap data structure is perfect for this problem since at all times, we want to maintain `N` different `variables` with each of them pointing to an element in their corresponding lists. We want to be able to find the `minimum` amongst these $$N$$ pointers quickly and then replace that element with the next one in its corresponding list. \n\nThe heap data structure gives us $$O(1)$$ access to the minimum element and $$log(N)$$ removal of the minimum element and addition of a new one. We just need to perform this operation `K` times to get our $$K^{\\text{th}}$$ smallest number. It's possible that our matrix has say 100 rows whereas we just need to find out the 5th smallest element. In this case, we can safely discard the rows in the lower part of the matrix i.e. in this case starting from the 6th row to the end of the matrix because the columns are sorted as well. So, we need the $$min(N, K)$$ rows essentially to find out the answer.\n\n**Algorithm**\n\n1. Initialize a min-heap called `H`.\n2. For our implementation, we will be considering each row an individual list. Since the columns are sorted as well, we can easily treat each column as an individual list as well.\n3. As mentioned before, we will take the first element of $$min(N, K)$$ rows where $$N$$ represents the number of rows, and add each of these elements to the heap. It's important to know what row and column an element belongs to. Without knowing that, we won't be able to move forward in that particular list. So, apart from adding an element to the heap, we also need to add its row and column number. Hence, our min-heap will contain a triplet of information `(value, row, column)`. The heap will be arranged on the basis of the values and we will use the row and column number to add a replacement for the next element in case it gets popped off the heap. \n\n    <center>\n    <img src=\"../Figures/378/img3.png\"/>\n    </center>\n\n4. At this point, our heap contains $$min(N, K)$$ elements. Now we start a loop that goes until we iterate over `K` elements.\n5. At each step, we remove the minimum element from the heap. The element will tell us which row should be further consumed. Using the row and column information we will add the next element to the heap. Specifically, if the current minimum element was from row `r` and had a column position `c`, then the next element to be added to the heap will be `(r, c+1)`.\n\n    `Extract-Min`\n    \n    <center>\n    <img src=\"../Figures/378/img4.png\"/>\n    </center>\n\n    `Add a new element`\n\n    <center>\n    <img src=\"../Figures/378/img5.png\"/>\n    </center>\n\n\n6. Keep on iterating till we exhaust `K` elements. The last element to be popped at the end of the loop will be the $$K^{\\text{th}}$$ smallest element.\n\n<iframe src=\"https://leetcode.com/playground/zsr3NGuD/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"zsr3NGuD\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$\\text{let X=} \\text{min}(K, N); X + K \\log(X)$$\n\n    * Well the heap construction takes $$O(X)$$ time.\n    * After that, we perform $$K$$ iterations and each iteration has two operations. We extract the minimum element from a heap containing $$X$$ elements. Then we add a new element to this heap. Both the operations will take $$O(\\log(X))$$ time. \n    * Thus, the total time complexity for this algorithm comes down to be $$O(X + K\\log(X))$$ where $$X$$ is $$\\text{min}(K, N)$$.\n\n* Space Complexity: $$O(X)$$ which is occupied by the heap.\n<br/>\n<br/>\n\n---\n#### Approach 2: Binary Search\n\n**Inuition**\n\nSince each row and column of the matrix is sorted, is it possible to use Binary Search to find the $$K^{\\text{th}}$$ smallest number? The biggest problem to use Binary Search in this case is that we don\u2019t have a straightforward sorted array, instead we have a matrix. As we remember, in Binary Search, we calculate the middle index of the search space (`1` to `N`) and see if our required number is pointed out by the middle index; if not we either search in the lower half or the upper half. In a sorted matrix, we can't really find a middle. Even if we do consider some index as middle, it is not straightforward to find the search space containing numbers bigger or smaller than the number pointed out by the middle index.\n\nAn alternate could be to apply the Binary Search on the `number range` instead of the `index range`. As we know that the smallest number of our matrix is at the top left corner and the biggest number is at the bottom lower corner. These two number can represent the `range` i.e., the start and the end for the Binary Search. This does sound a bit counter-intuitive now, however, it will start to make sense soon. We are all accustomed to the linear array binary search algorithm. So, to delve into this idea a bit deeper, let's represent the `number range` on a single line as a one-dimensional array and see why and how binary search makes sense.\n\n<center>\n<img src=\"../Figures/378/img6.png\"/>\n</center>\n\nNow, let's proceed with the first step that we take in any binary search implementation. We find the middle element, right? In a normal, one-dimensional binary search, we use the indices to find the middle element. In this case, the left and the right ends of our sorted matrix are the two values. So, we use them to find the `hypothetical` middle of the matrix. The reason we call this hypothetical is because it is not necessary that the middle value will exist in the matrix. However, that is not a requirement for our algorithm. \n\n<center>\n<img src=\"../Figures/378/img7.png\"/>\n</center>\n\nEven though this is a stupid question, it will help us to understand the overall logic here: How will you find out the $$K^{\\text{th}}$$ smallest number in a sorted one-dimensional array? It's simple, right? You'll just return the $$K^{\\text{th}}$$ element in the array. This is because you know the index $$K$$ in the array contains your answer. In our example, we know the two extremes and the middle element value. However, what we don't know are the sizes of the two halves. For all we know, we could have 8 elements in the left half and just 2 on the right in the example above. We don't know! \n\n>So, after finding the middle element, we need to determine the size of the left half. Why, you might ask? Well because we want the Kth smallest element and not the largest. If the question asked us for the largest, we would be determining the size of the right half.\n\nWe already have a [problem on LeetCode](https://leetcode.com/problems/search-a-2d-matrix/solution/) that is about searching for an element in a sorted 2D matrix. However, we don't want to search for our middle element. We want to `count the number of elements` in the left half of the number range of which we know the middle element and the two extremes as well. As it turns out, this can be done in $$O(N + N) = O(N)$$ time where $$N$$ represents the number of rows and columns. We will make use of the sorted nature of the matrix and count all the elements we need without actually iterating over them.\n\n> For example, if an element in the cell [i, j] is smaller than our middle element, then it means that all the elements in the column \"j\" before this element i.r. (i-1) other elements in this column are also going to be less than the middle element. Why? Because the columns are sorted as well!\n\n<center>\n<img src=\"../Figures/378/img8.png\"/>\n</center>\n\n<center>\n<img src=\"../Figures/378/img9.png\"/>\n</center>\n\n<center>\n<img src=\"../Figures/378/img10.png\"/>\n</center>\n\nWhat do we do with this newfound information of ours? Well, that depends on the value of K. So, let's consider our 3 different cases here. \n\n`Case 1: The size of the left half is EQUAL to K`\n\n<center>\n<img src=\"../Figures/378/img11.png\"/>\n</center>\n\n`Case 2: The size of the left half is LESS than K`\n\n<center>\n<img src=\"../Figures/378/img12.png\"/>\n</center>\n\n`Case 3: The size of the left half is MORE than K`\n\n<center>\n<img src=\"../Figures/378/img13.png\"/>\n</center>\n\nSo, as we can see from the above figures, when we are trying to determine the size of our left-half, we also need to keep track of two values. The largest element less-than-or-equal-to the middle element and the smallest element greater than the middle. For an index-based binary search, this wouldn't be a problem since `middle+1` and `middle-1` would represent these entries :).\n\n**Algorithm**\n\n* Start the binary search with `start = matrix[0][0]` and `end = matrix[N-1][N-1]`\n* Find the `middle` of the start and the end. This middle number is `NOT` necessarily an element in the matrix.\n* Count all the numbers smaller than or equal to middle in the matrix. As the matrix is sorted, we can do this in $$O(N)$$. Note that this is determining the size of the left-half of the array.\n* While counting, we need to keep track of the `smallest number greater than the middle` (let\u2019s call it `R`) and at the same time the `biggest number less than or equal to the middle` (let\u2019s call it `L`). These two numbers will be used to adjust the `number range` for the binary search in the next iteration.\n* If the count is equal to `K`, `L` will be our required number as it is the `biggest number less than or equal to the middle`, and is definitely present in the matrix.\n* If the count is less than `K`, we can update `start = R` to search in the higher part of the matrix\n* If the count is greater than `K`, we can update `end = L` to search in the lower part of the matrix in the next iteration.\n\n<iframe src=\"https://leetcode.com/playground/eJKkrhYK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eJKkrhYK\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(N \\times log(\\text{Max}-\\text{Min}))$$\n\n    * Let's think about the time complexity in terms of the normal binary search algorithm. For a one-dimensional binary search over an array with $$N$$ elements, the complexity comes out to be $$O(log(N))$$. \n    * For our scenario, we are kind of defining our binary search space in terms of the minimum and the maximum numbers in the array. Going by this idea, the complexity for our binary search should be $$O(log(\\text{Max}-\\text{Min}))$$ where $$\\text{Max}$$ is the maximum element in the array and likewise, $$\\text{Min}$$ is the minimum element. \n    * However, we update our search space after each iteration. So, even if the maximum element is super large as compared to the remaining elements in the matrix, we will bring down the search space considerably in the next iterations. But, going purely by the extremes for our search space, the complexity of our binary search in search of $$K^{\\text{th}}$$ smallest element will be $$O(log(\\text{Max}-\\text{Min}))$$.\n    * In each iteration of our binary search approach, we iterate over the matrix trying to determine the size of the left-half as explained before. That takes $$O(N)$$. \n    * Thus, the overall time complexity is $$O(N \\times log(\\text{Max}-\\text{Min}))$$\n\n* Space Complexity: $$O(1)$$ since we don't use any additional space for performing our binary search.\n\nAlthough there are a series of posts about the Binary Search approach in our discussions section, the one I consulted personally was [this](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/301357/Java-0ms-(added-Python-and-C++):-Easy-to-understand-solutions-using-Heap-and-Binary-Search). Most of the code and some portions of the explanation are taken from the post. I just tried to add a bit more visual flair to further explain things.\n\nAlso, [Stefan Pochmann](https://leetcode.com/stefanpochmann/) has another great approach based on a research paper for this very problem. [Do check it out](https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/85170/O(n)-from-paper.-Yes-O(rows).)!\n<br/><br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.606,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "859",
                "title": "Median of Two Sorted Arrays",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 120,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "4",
                    "questionFrontendId": "4",
                    "sessionId": "968792",
                    "questionTitle": "Median of Two Sorted Arrays",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/median-of-two-sorted-arrays/submit/",
                    "interpretUrl": "/problems/median-of-two-sorted-arrays/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def findMedianSortedArrays(self, nums1, nums2):\\n        \\\"\\\"\\\"\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\ndouble findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums1\\n * @param {number[]} nums2\\n * @return {number}\\n */\\nvar findMedianSortedArrays = function(nums1, nums2) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums1\\n# @param {Integer[]} nums2\\n# @return {Float}\\ndef find_median_sorted_arrays(nums1, nums2)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn find_median_sorted_arrays(nums1: Vec<i32>, nums2: Vec<i32>) -> f64 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums1\\n     * @param Integer[] $nums2\\n     * @return Float\\n     */\\n    function findMedianSortedArrays($nums1, $nums2) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (find-median-sorted-arrays nums1 nums2)\\n  (-> (listof exact-integer?) (listof exact-integer?) flonum?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec find_median_sorted_arrays(Nums1 :: [integer()], Nums2 :: [integer()]) -> float().\\nfind_median_sorted_arrays(Nums1, Nums2) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec find_median_sorted_arrays(nums1 :: [integer], nums2 :: [integer]) :: float\\n  def find_median_sorted_arrays(nums1, nums2) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,3]\n[2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"findMedianSortedArrays\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums1\",\r\n      \"type\": \"integer[]\"\r\n    },\r\n    {\r\n      \"name\": \"nums2\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"double\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p>\n\n<p>The overall run time complexity should be <code>O(log (m+n))</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,3], nums2 = [2]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> merged array = [1,2,3] and median is 2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [1,2], nums2 = [3,4]\n<strong>Output:</strong> 2.50000\n<strong>Explanation:</strong> merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [0,0], nums2 = [0,0]\n<strong>Output:</strong> 0.00000\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [], nums2 = [1]\n<strong>Output:</strong> 1.00000\n</pre>\n\n<p><strong>Example 5:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums1 = [2], nums2 = []\n<strong>Output:</strong> 2.00000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums1.length == m</code></li>\n\t<li><code>nums2.length == n</code></li>\n\t<li><code>0 &lt;= m &lt;= 1000</code></li>\n\t<li><code>0 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m + n &lt;= 2000</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": null,
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These problems deal with sorting or searching in a sorted structure.\n\nWe recommend: Median of Two Sorted Arrays. Hands down one of the best interview questions."
    },
    {
        "id": "121",
        "title": "Dynamic Programming",
        "slug": "dynamic-programming",
        "items": [
            {
                "id": "860",
                "title": "Maximum Product Subarray",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "152",
                    "questionFrontendId": "152",
                    "sessionId": "968792",
                    "questionTitle": "Maximum Product Subarray",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/maximum-product-subarray/submit/",
                    "interpretUrl": "/problems/maximum-product-subarray/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxProduct(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxProduct(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxProduct(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxProduct(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxProduct(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxProduct(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar maxProduct = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef max_product(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxProduct(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProduct(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxProduct(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxProduct(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_product(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function maxProduct($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxProduct(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-product nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_product(Nums :: [integer()]) -> integer().\\nmax_product(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_product(nums :: [integer]) :: integer\\n  def max_product(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,3,-2,4]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxProduct\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer array <code>nums</code>, find a contiguous non-empty subarray within the array that has the largest product, and return <em>the product</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that the answer will fit in a <strong>32-bit</strong> integer.</p>\n\n<p>A <strong>subarray</strong> is a contiguous subsequence of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,-2,4]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [2,3] has the largest product 6.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-2,0,-1]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The result cannot be 2, because [-2,-1] is not a subarray.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>-10 &lt;= nums[i] &lt;= 10</code></li>\n\t<li>The product of any prefix or suffix of <code>nums</code> is <strong>guaranteed</strong> to fit in a <strong>32-bit</strong> integer.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Maximum Product Subarray",
                        "content": "[TOC]\n\n## Solution\n\nIt is advisable to approach [Maximum Subarray](https://leetcode.com/problems/maximum-subarray/) problem first before approaching this problem. The intuition acquired from that problem will help a lot with this problem.\n\n---\n\n#### Approach 1: Brute Force\n\n**Intuition**\n\nThe most naive way to tackle this problem is to go through each element in `nums`, and for each element, consider the product of every a contiguous subarray starting from that element. This will result in a cubic runtime. \n\n    for i in [0...nums-1]: \n        for j in [i..nums-1]: \n            accumulator = 1\n            for k in [i..j]:\n                accumulator = accumulator * nums[k]\n            result = max(result, accumulator)\n\nWe can improve the runtime from cubic to quadratic by removing the innermost `for` loop in the above pseudo code. Rather than calculating the product of every contiguous subarray over and over again, for each element in `nums` (the outermost `for` loop), we accumulate the products of contiguous subarrays starting from that element to subsequent elements as we go through them (the second `for` loop). By doing so, we only need to multiply the current number with accumulated product to get the product of numbers up to the current number.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/TxvynHcJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"TxvynHcJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N^2)$$ where $$N$$ is the size of `nums`. Since we are checking every possible contiguous subarray following every element in `nums` we have quadratic runtime.\n\n* Space complexity : $$O(1)$$ since we are not consuming additional space other than two variables: `result` to hold the final result and `accu` to accumulate product of preceding contiguous subarrays.\n\n---\n\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nRather than looking for every possible subarray to get the largest product, we can scan the array and solve smaller subproblems.\n\nLet's see this problem as a problem of getting the highest combo chain. The way combo chains work is that they build on top of the previous combo chains that you have acquired. The simplest case is when the numbers in `nums` are all positive numbers. In that case, you would only need to keep on multiplying the accumulated result to get a bigger and bigger combo chain as you progress.\n\nHowever, two things can disrupt your combo chain:\n\n- Zeros\n- Negative numbers\n\n**Zeros** will reset your combo chain. A high score which you have achieved will be recorded in placeholder `result`. You will have to *restart* your combo chain after zero. If you encounter another combo chain which is higher than the recorded high score in `result`, you just need to update the `result`.\n\n**Negative numbers** are a little bit tricky. A single negative number can flip the largest combo chain to a very small number. This may sound like your combo chain has been completely disrupted but if you encounter another negative number, your combo chain can be saved. Unlike zero, you still have a hope of saving your combo chain as long as you have another negative number in `nums` (Think of this second negative number as an antidote for the poison that you just consumed). However, if you encounter a zero while you are looking your another negative number to save your combo chain, you lose the hope of saving that combo chain.\n\nWhile going through numbers in `nums`, we will have to keep track of the maximum product up to that number (we will call `max_so_far`) and minimum product up to that number (we will call `min_so_far`). The reason behind keeping track of `max_so_far` is to keep track of the accumulated product of positive numbers. The reason behind keeping track of `min_so_far` is to properly handle negative numbers.\n\n`max_so_far` is updated by taking the **maximum** value among:\n    \n1. Current number.\n    * This value will be picked if the accumulated product has been really bad (even compared to the current number). This can happen when the current number has a preceding zero (e.g. `[0,4]`) or is preceded by a single negative number (e.g. `[-3,5]`).\n2. Product of last `max_so_far` and current number.\n    * This value will be picked if the accumulated product has been steadily increasing (all positive numbers).\n3. Product of last `min_so_far` and current number.\n    * This value will be picked if the current number is a negative number and the combo chain has been disrupted by a single negative number before (In a sense, this value is like an antidote to an already poisoned combo chain).\n\n`min_so_far` is updated in using the same three numbers except that we are taking **minimum**  among the above three numbers.\n\nIn the animation below, you will observe a negative number `-5` disrupting a combo chain but that combo chain is later saved by another negative number `-4`. The only reason this can be saved is because of `min_so_far`. You will also observe a zero disrupting a combo chain. \n\n!?!../Documents/152_maximum_product_subarray.json:1200,600!?!\n\n**Implementation**\n\n\n<iframe src=\"https://leetcode.com/playground/gQYpEw94/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"gQYpEw94\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(N)$$ where $$N$$ is the size of `nums`. The algorithm achieves linear runtime since we are going through `nums` only once. \n\n* Space complexity : $$O(1)$$ since no additional space is consumed rather than variables which keep track of the maximum product so far, the minimum product so far, current variable, temp variable, and placeholder variable for the result.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "maximum-product-subarray",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.887,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "861",
                "title": "Decode Ways",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "91",
                    "questionFrontendId": "91",
                    "sessionId": "968792",
                    "questionTitle": "Decode Ways",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/decode-ways/submit/",
                    "interpretUrl": "/problems/decode-ways/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numDecodings(string s) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numDecodings(String s) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numDecodings(self, s):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numDecodings(self, s: str) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numDecodings(char * s){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumDecodings(string s) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar numDecodings = function(s) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @return {Integer}\\ndef num_decodings(s)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numDecodings(_ s: String) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numDecodings(s string) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numDecodings(s: String): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numDecodings(s: String): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_decodings(s: String) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function numDecodings($s) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numDecodings(s: string): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-decodings s)\\n  (-> string? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_decodings(S :: unicode:unicode_binary()) -> integer().\\nnum_decodings(S) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_decodings(s :: String.t) :: integer\\n  def num_decodings(s) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"12\"",
                    "enableTestMode": false,
                    "metaData": "{ \r\n  \"name\": \"numDecodings\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A message containing letters from <code>A-Z</code> can be <strong>encoded</strong> into numbers using the following mapping:</p>\n\n<pre>\n&#39;A&#39; -&gt; &quot;1&quot;\n&#39;B&#39; -&gt; &quot;2&quot;\n...\n&#39;Z&#39; -&gt; &quot;26&quot;\n</pre>\n\n<p>To <strong>decode</strong> an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, <code>&quot;11106&quot;</code> can be mapped into:</p>\n\n<ul>\n\t<li><code>&quot;AAJF&quot;</code> with the grouping <code>(1 1 10 6)</code></li>\n\t<li><code>&quot;KJF&quot;</code> with the grouping <code>(11 10 6)</code></li>\n</ul>\n\n<p>Note that the grouping <code>(1 11 06)</code> is invalid because <code>&quot;06&quot;</code> cannot be mapped into <code>&#39;F&#39;</code> since <code>&quot;6&quot;</code> is different from <code>&quot;06&quot;</code>.</p>\n\n<p>Given a string <code>s</code> containing only digits, return <em>the <strong>number</strong> of ways to <strong>decode</strong> it</em>.</p>\n\n<p>The answer is guaranteed to fit in a <strong>32-bit</strong> integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;12&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> &quot;12&quot; could be decoded as &quot;AB&quot; (1 2) or &quot;L&quot; (12).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;226&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> &quot;226&quot; could be decoded as &quot;BZ&quot; (2 26), &quot;VF&quot; (22 6), or &quot;BBF&quot; (2 2 6).\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;0&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> There is no character that is mapped to a number starting with 0.\nThe only valid mappings with 0 are &#39;J&#39; -&gt; &quot;10&quot; and &#39;T&#39; -&gt; &quot;20&quot;, neither of which start with 0.\nHence, there are no valid ways to decode this since all digits need to be mapped.\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;06&quot;\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> &quot;06&quot; cannot be mapped to &quot;F&quot; because of the leading zero (&quot;6&quot; is different from &quot;06&quot;).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> contains only digits and may contain leading zero(s).</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Decode Ways",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/493947967\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\nThe most important point to understand in this problem is that at any given step when you are trying to decode a string of numbers it can either be a single digit decode e.g. `1` to `A` or a double digit decode e.g. `25` to `Y`. As long as it's a valid decoding we move ahead to decode the rest of the string.\n\nThe subproblem could be thought of as number of ways decoding a substring.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_1.png\" width=\"800\"/>\n</center>\n<br>\nThe above diagram shows string \"326\" could be decoded in two ways.\n<br/>\n<br/>\n\n---\n\n#### Approach 1: Recursive Approach with Memoization\n\n**Intuition**\n\nThe problem deals with finding number of ways of decoding a string. What helps to crack the problem is to think why there would be many ways to decode a string. The reason is simple since at any given point we either decode using `two digits` or `single` digit. This choice while decoding can lead to different combinations.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_2.png\" width=\"800\"/>\n</center>\n<br>\n\nThus at any given time for a string we enter a recursion after successfully decoding two digits to a single character or a single digit to a character. This leads to multiple paths to decoding the entire string. If a given path leads to the end of the string this means we could successfully decode the string. If at any point in the traversal we encounter digits which cannot be decoded, we backtrack from that path.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_3.png\" width=\"500\"/>\n</center>\n<br>\n\nIn the following diagram we can see how the paths have to deal with similar subproblems. Overlapping subproblems means we can reuse the answer. Thus, we do memoization to solve this problem.\n\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_4.png\" width=800\"/>\n</center>\n<br>\n\n**Algorithm**\n\n1. Enter recursion with the given string i.e. start with index 0.\n\n2. For the terminating case of the recursion we check for the end of the string. If we have reached the end of the string we return `1`.\n\n3. Every time we enter recursion it's for a substring of the original string. For any recursion if the first character is `0` then terminate that path by returning `0`. Thus this path won't contribute to the number of ways.\n\n4. Memoization helps to reduce the complexity which would otherwise be exponential. We check the dictionary `memo` to see if the result for the given substring already exists.\n\n5. If the result is already in `memo` we return the result. Otherwise the number of ways for the given string is determined by making a recursive call to the function with `index + 1` for next substring string and `index + 2` after checking for valid 2-digit decode. The result is also stored in `memo` with key as current index, for saving for future overlapping subproblems.\n\n<iframe src=\"https://leetcode.com/playground/a8HJf3Yq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"a8HJf3Yq\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. Memoization helps in pruning the recursion tree and hence decoding for an index only once. Thus this solution is linear time complexity.\n\n* Space Complexity: $$O(N)$$. The dictionary used for memoization would take the space equal to the length of the string. There would be an entry for each index value. The recursion stack would also be equal to the length of the string.\n\n<br/>\n\n---\n\n#### Approach 2: Iterative Approach\n\nThe iterative approach might be a little bit less intuitive. Let's try to understand it. We use an array for DP to store the results for subproblems. A cell with index `i` of the `dp` array is used to store the number of decode ways for substring of `s` from index `0` to index `i-1`.\n\nWe initialize the starting two indices of the `dp` array. It's similar to relay race where the first runner is given a `baton` to be passed to the subsequent runners. The first two indices of the `dp` array hold a baton. As we iterate the `dp` array from left to right this baton which signifies the number of ways of decoding is passed to the next index or not depending on whether the decode is possible.\n\n`dp[i]` can get the baton from two other previous indices, either `i-1` or `i-2`. Two previous indices are involved since both single and two digit decodes are possible.\n\nUnlike the relay race we don't get only one baton in the end. The batons add up as we pass on. If someone has one baton, they can provide a copy of it to everyone who comes to them with a success. Thus, leading to number of ways of reaching the end.\n<center>\n<img src=\"../Figures/91/91_Decode_Ways_5.png\" width=\"800\"/>\n</center>\n<br>\n\n`dp[i]` = Number of ways of decoding substring `s[:i]`. So we might say `dp[i] = dp[i-1] + dp[i-2]`, which is not always true for this decode ways problem. As shown in the above diagram, only when the decode is possible we add the results of the previous indices. Thus, in this race we don't just pass the baton. The baton is passed to the next index or not depending on possibility of the decode.\n\n**Algorithm**\n\n1. If the string `s` is empty or null we return the result as `0`.\n\n2. Initialize `dp` array. dp[0] = 1 to provide the baton to be passed.\n\n3. If the first character of the string is zero then no decode is possible hence initialize dp[1] to `0`, otherwise the first character is valid to pass on the baton, dp[1] = 1.\n\n3. Iterate the `dp` array starting at index 2. The index `i` of dp is the i-th character of the string `s`, that is character at index `i-1` of s.\n\n4. We check if valid single digit decode is possible. This just means the character at index `s[i-1]` is non-zero. Since we do not have a decoding for zero. If the valid single digit decoding is possible then we add `dp[i-1]` to `dp[i]`. Since all the ways up to (i-1)-th character now lead up to i-th character too.\n\n5. We check if valid two digit decode is possible. This means the substring `s[i-2]s[i-1]` is between 10 to 26. If the valid two digit decoding is possible then we add `dp[i-2]` to `dp[i]`.\n\n6. Once we reach the end of the `dp` array we would have the number of ways of decoding string `s`.\n\n<iframe src=\"https://leetcode.com/playground/fPtbGrHG/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"fPtbGrHG\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. We iterate the length of `dp` array which is $$N+1$$.\n\n* Space Complexity: $$O(N)$$. The length of the DP array.\n\n<br/>\n\n---\n\n#### Approach 3: Iterative, Constant Space\n\n**Intuition**\n\nIn Approach 2 we are using an array `dp` to save the results for future. As we move ahead character by character of the given string, we look back only two steps. For calculating `dp[i]` we need to know `dp[i-1]` and `dp[i-2]` only. Thus, we can easily cut down our $$O(N)$$ space requirement to $$O(1)$$ by using only two variables to store the last two results.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/i5cdnBHM/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"i5cdnBHM\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity: $$O(N)$$, where $$N$$ is length of the string. We're essentially doing the same work as what we were in Approach 2, except this time we're throwing away calculation results when we no longer need them.\n\n* Space Complexity: $$O(1)$$. Instead of a `dp` array, we're simply using two variables.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "decode-ways",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.524,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "862",
                "title": "Best Time to Buy and Sell Stock with Cooldown",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "309",
                    "questionFrontendId": "309",
                    "sessionId": "968792",
                    "questionTitle": "Best Time to Buy and Sell Stock with Cooldown",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/best-time-to-buy-and-sell-stock-with-cooldown/submit/",
                    "interpretUrl": "/problems/best-time-to-buy-and-sell-stock-with-cooldown/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxProfit(vector<int>& prices) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxProfit(self, prices):\\n        \\\"\\\"\\\"\\n        :type prices: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxProfit(self, prices: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxProfit(int* prices, int pricesSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxProfit(int[] prices) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} prices\\n * @return {number}\\n */\\nvar maxProfit = function(prices) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} prices\\n# @return {Integer}\\ndef max_profit(prices)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxProfit(_ prices: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxProfit(prices []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxProfit(prices: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxProfit(prices: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_profit(prices: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $prices\\n     * @return Integer\\n     */\\n    function maxProfit($prices) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxProfit(prices: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-profit prices)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_profit(Prices :: [integer()]) -> integer().\\nmax_profit(Prices) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_profit(prices :: [integer]) :: integer\\n  def max_profit(prices) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[1,2,3,0,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxProfit\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"prices\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>i<sup>th</sup></code> day.</p>\n\n<p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p>\n\n<ul>\n\t<li>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).</li>\n</ul>\n\n<p><strong>Note:</strong> You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1,2,3,0,2]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> transactions = [buy, sell, cooldown, buy, sell]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> prices = [1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= prices.length &lt;= 5000</code></li>\n\t<li><code>0 &lt;= prices[i] &lt;= 1000</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Best Time to Buy and Sell Stock with Cooldown",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Overview\n\nFirst of all, we would like to mention that this is yet another problem from the series of Best-Time-to-Buy-and-Sell-Stock problems, which we list as follows:\n\n- [Best Time to Buy and Sell Stock](https://leetcode.com/problems/best-time-to-buy-and-sell-stock/)\n- [Best Time to Buy and Sell Stock II](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/)\n- [Best Time to Buy and Sell Stock III](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/)\n- [Best Time to Buy and Sell Stock IV](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/)\n\nOne could try to resolve them one by one, which certainly could help with this problem.\n\nThere have been quite some excellent posts in the [Discussion forum](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/). We would like to mention that the user [fun4LeetCode](https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75924/Most-consistent-ways-of-dealing-with-the-series-of-stock-problems) even developed a mathematical representation that is able to be generalized to each of the problems.\n\nThat being said, here we contribute some approaches, which hopefully could provide you different perspectives for the problem.\n\nAs one might have seen the hint from the problem description, which says \"dynamic programming\" (_i.e._ DP), we could tackle this problem mainly with the technique called **dynamic programming**.\n\nOften the case, in order to come up with a dynamic programming solution, it would be beneficial to draw down some mathematical formulas to model the problem.\n\n>As a reminder, the nature of dynamic programming is to break the original problem into several subproblems, and then reuse the results of subproblems for the original problem.\n\nTherefore, due to the nature of DP, the mathematical formulas that we should come up with would almost certainly assume the form of **_recursion_**.\n\nBefore embarking on the next sections of this article, we kindly ask the audiences to keep an open mind, fasten your seat belts and enjoy the ride with a heavy (yet healthy) dose of mathematical formulas.\n<br/>\n<br/>\n\n---\n#### Approach 1: Dynamic Programming with State Machine\n\n**Intuition**\n\nFirst of all, let us take a different perspective to look at the problem, unlike the other algorithmic problems.\n\nHere, we will treat the problem as a game, and the trader as an agent in the game.\nThe agent can take actions that lead to gain or lose of game points (_i.e._ profits).\nAnd the goal of the game for the agent is to gain the maximal points.\n\nIn addition, we will introduce a tool called [state machine](https://en.wikipedia.org/wiki/Finite-state_machine), which is a mathematical model of computation.\nLater one will see how the state machine coupled with the dynamic programming technique can help us solve the problem easily.\n\nIn the following sections, we will first define a _**state machine**_ that is used to model the behaviors and states of the game agent.\n\nThen, we will demonstrate how to apply the state machine to solve the problem.\n\n**Definition**\n\nLet us define a **_state machine_** to model our agent. The state machine consists of three states, which we define as follows: \n\n- state `held`: in this state, the agent holds a stock that it bought at some point before.\n<br/>\n\n- state `sold`: in this state, the agent has just sold a stock right before entering this state. And the agent holds no stock at hand.\n<br/>\n\n- state `reset`: first of all, one can consider this state as the starting point, where the agent holds no stock and did not sell a stock before.\nMore importantly, it is also the _transient_ state before the `held` and `sold`.\nDue to the **_cooldown_** rule, after the `sold` state, the agent can not immediately acquire any stock, but is _forced_ into the `reset` state.\nOne can consider this state as a \"reset\" button for the cycles of buy and sell transactions.\n\nAt any moment, the agent can only be in **_one_** state. The agent would transition to another state by performing some actions, namely:\n\n- action `sell`: the agent sells a stock at the current moment. After this action, the agent would transition to the `sold` state.\n\n- action `buy`: the agent acquires a stock at the current moment. After this action, the agent would transition to the `held` state.\n\n- action `rest`: this is the action that the agent does no transaction, neither buy or sell. For instance, while holding a stock at the `held` state, the agent might simply do nothing, and at the next moment the agent would remain in the `held` state.\n\nNow, we can assemble the above states and actions into a **state machine**, which we show in the following graph where each node represents a state, and each edge represents a transition between two states. On top of each edge, we indicate the action that triggers the transition.\n\n![state machine](../Figures/309/309_state_machine.png)\n\nNotice that, in all states except the `sold` state, by doing nothing, we would remain in the same state, which is why there is a self-looped transition on these states.\n\n**Deduction**\n\nNow, one might wonder how exactly the state machine that we defined can help to solve the problem.\n\nAs we mentioned before, we model the problem as a **_game_**, and the trader as an **_agent_** in the game. And this is where our state machine comes into the picture. The behaviors and the states of the game agent can be modeled by our state machine. \n\n![mario game](../Figures/309/309_game.png)\n\nGiven a list stock prices (_i.e._ `price[0...n]`), our agent would walk through each price point one by one.\nAt each point, the agent would be in one of three states (_i.e._ `held`, `sold` and `reset`) that we defined before.\nAnd at each point, the agent would take one of the three actions (_i.e._ `buy`, `sell` and `rest`), which then would lead to the next state at the next price point.\n\n>Now if we chain up each state at each price point, it would form a **_graph_** where each **_path_** that starts from the initial price point and ends at the last price point represents a combination of transactions that the agent could perform through out the game.\n\n![graph of state transition](../Figures/309/309_graph.png)\n\nThe above graph shows all possible paths that our game agent agent walks through the list, which corresponds to all possible combinations of transactions that the trader can perform with the given price sequence.\n\n>In order to solve the problem, the goal is to find such a path in the above graph that maximizes the profits.\n\nIn each node of graph, we also indicate the maximal profits that the agent has gained so far in each state of each step. And we highlight the path that generates the maximal profits.\nDon't worry about them for the moment. We will explain in detail how to calculate in the next section.\n\n**Algorithm**\n\nIn order to implement the above state machine, we could define three arrays (_i.e._ `held[i]`, `sold[i]` and `reset[i]`) which correspond to the three states that we defined before.\n\n>Each element in each array represents the maximal profits that we could gain at the specific price point `i` with the specific state.\nFor instance, the element `sold[2]` represents the maximal profits we gain if we sell the stock at the price point `price[2]`.\n\nAccording to the state machine we defined before, we can then deduce the formulas to calculate the values for the state arrays, as follows:\n\n$$\n    \\text{sold}[i] = \\text{hold}[i-1] + \\text{price}[i] \\\\\n    \\text{held}[i] = \\max{(\\text{held}[i-1], \\quad \\text{reset}[i-1] - \\text{price}[i])} \\\\\n    \\text{reset}[i] = \\max{(\\text{reset}[i-1], \\quad \\text{sold}[i-1])} \n$$\n\nHere is how we interpret each formulas:\n\n- $$\\text{sold}[i]$$: the previous state of `sold` can only be `held`. Therefore, the maximal profits of this state is the maximal profits of the previous state plus the revenue by selling the stock at the current price.\n<br/>\n\n- $$\\text{held}[i]$$: the previous state of `held` could also be `held`, _i.e._ one does no transaction. Or its previous state could be `reset`, from which state, one can acquire a stock at the current price point.\n<br/>\n\n- $$\\text{reset}[i]$$: the previous state of `reset` could either be `reset` or `sold`. Both transitions do not involve any transaction with the stock. \n\n>Finally, the maximal profits that we can gain from this game would be $$\\max{(\\text{sold}[n], \\text{reset}[n])}$$, _i.e._ at the last price point, either we sell the stock or we simply do no transaction, to have the maximal profits.\nIt makes no sense to acquire the stock at the last price point, which only leads to the reduction of profits.\n\nIn particular, as a base case, the game should be kicked off from the state `reset`, since initially we don't hold any stock and we don't have any stock to sell neither.\nTherefore, we assign the initial values of `sold[-1]` and `held[-1]` to be `Integer.MIN_VALUE`, which are intended to _render_ the paths that start from these two states impossible.\n\n\nAs one might notice in the above formulas, in order to calculate the value for each array, we reuse the intermediate values, and this is where the paradigm of _**dynamic programming**_ comes into play.\n\nMore specifically, we only need the intermediate values at exactly one step before the current step. As a result, rather than keeping all the values in the three arrays, we could use a **_sliding window_** of size `1` to calculate the value for $$\\max{(\\text{sold}[n], \\text{reset}[n])}$$.\n\nIn the following animation, we demonstrate the process on how the three arrays are calculated step by step.\n\n!?!../Documents/309_LIS.json:1000,343!?!\n\n>As a **_byproduct_** of this algorithm, not only would we obtain the maximal profits at the end, but also we could recover each action that we should perform along the path, although this is not required by the problem.\n\nIn the above graph, by starting from the final state, and walking backward following the path, we could obtain a sequence of actions that leads to the maximal profits at the end, _i.e._ [`buy`, `sell`, `cooldown`, `buy`, `sell`].\n\n\n<iframe src=\"https://leetcode.com/playground/G3tLgwPY/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"G3tLgwPY\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the length of the input price list.\n\n    - We have one loop over the input list, and the operation within one iteration takes constant time.\n    <br/>\n\n- Space Complexity: $$\\mathcal{O}(1)$$, constant memory is used regardless the size of the input.\n<br/>\n<br/>\n\n---\n#### Approach 2: Yet-Another Dynamic Programming\n\n**Intuition**\n\nMost of the times, there are more than one approaches to decompose the problem, so that we could apply the technique of dynamic programming.\n\nHere we would like to propose a different perspective on how to model the problem purely with mathematical formulas.\n\nAgain, this would be a journey loaded with mathematical notations, which might be complicated, but it showcases how the mathematics could help one with the dynamic _programming_ (pun intended). \n\n**Definition**\n\nFor a sequence of prices, denoted as $$\\text{price}[0, 1, ..., n]$$, let us first define our **target** function called $$\\text{MP}(i)$$.\nThe function $$\\text{MP}(i)$$ gives the maximal profits that we can gain for the price _subsequence_ starting from the index $$i$$, _i.e._ $$\\text{price}[i, i+1, ..., n]$$.\n\nGiven the definition of the $$\\text{MP}(i)$$ function, one can see that when $$i=0$$ the output of the function, _i.e._ $$\\text{MP}(0)$$, is exactly the result that we need to solve the problem, which is the maximal profits that one can gain for the price subsequence of $$\\text{price}[0, 1, ..., n]$$.\n\nSuppose that we know all the values for $$\\text{MP}(i)$$ onwards until $$\\text{MP}(n)$$, _i.e._ we know the maximal profits that we can gain for any subsequence of $$\\text{price}[k...n] \\quad k \\in [i, n]$$.\n\nNow, let us add a new price point $$\\text{price}[i-1]$$ into the subsequence $$\\text{price}[i...n]$$, all we need to do is to deduce the value for the **unknown** $$\\text{MP}(i-1)$$.\n\n>Up to this point, we have just modeled the problem with our **target** function $$\\text{MP}(i)$$, along with a series of definitions.\nThe problem now is boiled down to deducing the formula for $$\\text{MP}(i-1)$$.\n\nIn the following section, we will demonstrate how to deduce the formula for $$\\text{MP}(i-1)$$.\n\n**Deduction**\n\nWith the newly-added price point $$\\text{price}[i-1]$$, we need to consider **all** possible transactions that we can do to the stock at this price point, which can be broken down into two cases:\n\n- Case 1): we buy this stock with $$\\text{price}[i-1]$$ and then sell it at some point in the following price sequence of $$\\text{price}[i...n]$$.\nNote that, once we sell the stock at a certain point, we need to cool down for a day, then we can reengage with further transactions.\nSuppose that we sell the stock right after we bought it, at the next price point $$\\text{price}[i]$$, the maximal profits we would gain from this choice would be the profit of this transaction (_i.e._ $$\\text{price}[i] - \\text{price}[i-1]$$) **plus** the maximal profits from the rest of the price sequence, as we show in the following:\n\n![example of profit calculation](../Figures/309/309_formula.png)\n\nIn addition, we need to **enumerate** all possible points to sell this stock, and take the maximum among them.\nThe maximal profits that we could gain from this case can be represented by the following:\n\n$$\nC_1 = \\max_{\\{k \\in [i, n]\\}}\\big( \\text{price}[k] - \\text{p}[i-1] + \\text{MP}(k+2) \\big)\n$$\n\n- Case 2): we simply do nothing with this stock. Then the maximal profits that we can gain from this case would be $$\\text{MP}(i)$$, which are also the maximal profits that we can gain from the rest of the price sequence.\n\n$$\nC_2 = \\text{MP}(i)\n$$\n\nBy combining the above two cases, _i.e._ selecting the max value among them, we can obtain the value for $$\\text{MP}(i-1)$$, as follows:\n\n$$\n    \\text{MP}(i-1) = \\max(C_1, C_2)\n$$\n\n$$\n    \\text{MP}(i-1) = \\max\\Big(\\max_{\\{k \\in [i, n]\\}}\\big( \\text{price}[k] - \\text{price}[i-1] + \\text{MP}(k+2) \\big), \\quad \\text{MP}(i) \\Big)\n$$\n\nBy the way, the base case for our recursive function $$\\text{MP}(i)$$ would be $$\\text{MP}(n)$$ which is the maximal profits that we can gain from the sequence with a single price point $$\\text{price}[n]$$.\nAnd the best thing we should do with a single price point is to do no transaction, hence we would neither lose money nor gain any profit, _i.e._ $$\\text{MP}(n) = 0$$.\n\nThe above formulas do model the problem soundly.\nIn addition, one should be able to translate them directly into code.\n\n**Algorithm**\n\nWith the final formula we derived for our target function $$\\text{MP}(i)$$, we can now go ahead and translate it into any programming language.\n\n- Since the formula deals with subsequences of price that start from the last price point, we then could do an **iteration** over the price list in the reversed order.\n<br/>\n\n- We define an array `MP[i]` to hold the values for our target function $$\\text{MP}(i)$$. We initialize the array with zeros, which correspond to the base case where the minimal profits that we can gain is zero. Note that, here we did a trick to pad the array with two additional elements, which is intended to simplify the branching conditions, as one will see later.\n<br/>\n\n- To calculate the value for each element `MP[i]`, we need to look into two cases as we discussed in the previous section, namely:\n\n    - Case 1). we buy the stock at the price point `price[i]`, then we sell it at a later point. As one might notice, the initial padding on the `MP[i]` array saves us from getting out of boundary in the array.\n\n    - Case 2). we do no transaction with the stock at the price point `price[i]`.\n\n- At the end of each iteration, we then pick the largest value from the above two cases as the final value for `MP[i]`.\n\n- At the end of the loop, the `MP[i]` array will be populated. We then return the value of `MP[0]`, which is the desired solution for the problem.\n\n<iframe src=\"https://leetcode.com/playground/MM2cVbSW/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"MM2cVbSW\"></iframe>\n\n\n**Complexity Analysis**\n\n- Time Complexity: $$\\mathcal{O}(N^2)$$ where $$N$$ is the length of the price list.\n\n    - As one can see, we have nested loops over the price list. The number of iterations in the outer loop is $$N$$. The number of iterations in the inner loop varies from $$1$$ to $$N$$. Therefore, the total number of iterations that we perform is $$ \\sum_{i=1}^{N} i = \\frac{N\\cdot(N+1)}{2}$$.\n\n    - As a result, the overall time complexity of the algorithm is $$\\mathcal{O}(N^2)$$.\n    <br/>\n\n- Space Complexity: $$\\mathcal{O}(N)$$ where $$N$$ is the length of the price list.\n\n    - We allocated an array to hold all the values for our target function $$\\text{MP}(i)$$.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.872,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "863",
                "title": "Perfect Squares",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "279",
                    "questionFrontendId": "279",
                    "sessionId": "968792",
                    "questionTitle": "Perfect Squares",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/perfect-squares/submit/",
                    "interpretUrl": "/problems/perfect-squares/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int numSquares(int n) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int numSquares(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def numSquares(self, n):\\n        \\\"\\\"\\\"\\n        :type n: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def numSquares(self, n: int) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint numSquares(int n){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int NumSquares(int n) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} n\\n * @return {number}\\n */\\nvar numSquares = function(n) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer} n\\n# @return {Integer}\\ndef num_squares(n)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func numSquares(_ n: Int) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func numSquares(n int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def numSquares(n: Int): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun numSquares(n: Int): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn num_squares(n: i32) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer $n\\n     * @return Integer\\n     */\\n    function numSquares($n) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function numSquares(n: number): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (num-squares n)\\n  (-> exact-integer? exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_squares(N :: integer()) -> integer().\\nnum_squares(N) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec num_squares(n :: integer) :: integer\\n  def num_squares(n) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "12",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"numSquares\",\n  \"params\": [\n    {\n      \"name\": \"n\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an integer <code>n</code>, return <em>the least number of perfect square numbers that sum to</em> <code>n</code>.</p>\n\n<p>A <strong>perfect square</strong> is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 12\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 12 = 4 + 4 + 4.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 13\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 13 = 4 + 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Perfect Squares",
                        "content": "[TOC]\n\n## Solution\n\n\n---\n\n#### Approach 1: Brute-force Enumeration [Time Limit Exceeded]\n\n**Intuition**\n\nThe problem asks us to find the **least** numbers of square numbers that can sum up to a given number. We could rephrase the problem as follows:\n\n>Given a list of square numbers and a positive integer number `n`, one is asked to find a combination of square numbers that sum up to `n`, and the combination should contain the **_least_** numbers among all possible solutions.<br/>\n>_Note:_ one could reuse the square numbers in the combination.\n\nFrom the above narrative of the problem, it seems to be a _combination_ problem, to which an intuitive solution would be the `brute-force enumeration` where we enumerate all possible combinations and find the minimal one of them.\n\nWe could formulate the problem in the following formula:\n\n$$\n\\text{numSquares}(n) = \\min \\Big(\\text{numSquares(n-k) + 1}\\Big) \\qquad \\forall k \\in \\{\\text{square numbers}\\}\n$$\n\nFrom the above formula, one can translate it into a **_recursive_** solution literally. Here is one example.\n\n<iframe src=\"https://leetcode.com/playground/zG7aTCNV/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"zG7aTCNV\"></iframe>\n\nThe above solution could work for small numbers. However, as one would find out, we would quickly run into the `Time Limit Exceeded` exception even for medium-size numbers (_e.g._ 55).\n\nOr simply we might encounter the `Stack Overflow` due the to the excessive recursion. \n<br/>\n<br/>\n\n---\n\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nThe reason why it failed with the brute-force approach is simply because we re-calculate the sub-solutions over and over again. However, the formula that we derived before is still valuable. All we need is a better way to implement the formula.\n\n$$\n\\text{numSquares}(n) = \\min \\Big(\\text{numSquares(n-k) + 1}\\Big) \\qquad \\forall k \\in \\{\\text{square numbers}\\}\n$$\n\nOne might notice that, the problem is similar to the [Fibonacci number problem](https://leetcode.com/problems/fibonacci-number/), judging from the formula. And like Fibonacci number, we have several more efficient ways to calculate the solution, other than the simple recursion.\n\nOne of the ideas to solve the stack overflow issue in recursion is to apply the **_Dynamic Programming_** (DP) technique, which is built upon the idea of reusing the results of intermediate sub-solutions to calculate the final solution. \n\nTo calculate the value of $$\\text{numSquares}(n)$$, first we need to calculate all the values before $$n$$, _i.e._ $$\\text{numSquares}(n-k) \\qquad \\forall{k} \\in\\{\\text{square numbers}\\}$$. If we have already kept the solution for the number $$n-k$$ in somewhere, we then would not need to resort to the recursive calculation which prevents the stack overflow. \n\n**Algorithm**\n\nBased on the above intuition, we could implement the DP solution in the following steps.\n\n- As for almost all DP solutions, we first create an array `dp` of one or multiple dimensions to hold the values of intermediate sub-solutions, as well as the final solution which is usually the last element in the array. _Note that_, we create a fictional element `dp[0]=0` to simplify the logic, which helps in the case that the remainder (`n-k`) happens to be a square number.\n<br/>\n- As an additional preparation step, we pre-calculate a list of square numbers (_i.e._ `square_nums`) that is less than the given number `n`.\n<br/>\n- As the main step, we then loop from the number `1` to `n`, to calculate the solution for each number `i` (_i.e._ `numSquares(i)`). At each iteration, we keep the result of `numSquares(i)` in `dp[i]`, while resuing the previous results stored in the array.\n<br/>\n- At the end of the loop, we then return the last element in the array as the result of the solution.\n\nIn the graph below, we illustrate how to calculate the results of `numSquares(4)` and `numSquares(5)` which correspond to the values in `dp[4]` and `dp[5]`.\n\n![pic](../Figures/279/279_dp.png)\n\nHere are some sample implementations. In particular, the Python solution took ~3500 ms, which was faster than ~50% submissions at the time.\n\n**Note:** the following python solution works for Python2 only. For some unknown reason, it takes significantly longer time for Python3 to run the same code.\n\n<iframe src=\"https://leetcode.com/playground/9WxGDWVU/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"9WxGDWVU\"></iframe>\n\n\n**Complexity**\n\n* Time complexity:  $$\\mathcal{O}(n\\cdot\\sqrt{n})$$. In main step, we have a nested loop, where the outer loop is of $$n$$ iterations and in the inner loop it takes at maximum $$\\sqrt{n}$$ iterations.\n\n* Space Complexity: $$\\mathcal{O}(n)$$. We keep all the intermediate sub-solutions in the array `dp[]`.\n<br/>\n<br/>\n\n---\n\n#### Approach 3: Greedy Enumeration\n\n**Intuition**\n\nRecursion isn't bad though. Above all, it provides us a concise and intuitive way to understand the problem. We could still resolve the problem with recursion. To improve the above brute-force enumeration solution, we could add a touch of `Greedy` into the recursion process. We could reformulate the enumeration solution as follows:\n> Starting from the combination of one single number to multiple numbers, _once_ we find a combination that can sum up to the given number `n`, then we can say that we must have found the `smallest` combination, since we enumerate the combinations _greedily_ from small to large.\n\nTo better explain the above intuition, let us first define a function called `is_divided_by(n, count)` which returns a boolean value to indicate whether the number `n` can be divided by a combination with `count` number of square numbers, rather than returning the exact size of combination as the previous function `numSquares(n)`.\n\n$$\n\\text{numSquares}(n) = \\argmin_{\\text{count} \\in [1, 2, ...n]} \\Big(\n\\text{is\\_divided\\_by}(n, \\text{count}) \\Big)\n$$\n\nIn addition, the function `is_divided_by(n, count)` could also assume the form of recursion as follows:\n$$\n\\text{is\\_divided\\_by}(n, \\text{count}) = \\text{is\\_divided\\_by}(n-k, \\text{count}-1) \\quad \\exists{k} \\in \\{\\text{square numbers}\\}\n$$\n\n>Different from the recursive function of `numSquare(n)`, the recursion process of `is_divided_by(n, count)` would boil down to its bottom case (_i.e._ `count==1`) much more _rapid_.\n\nHere is one example on how the function `is_divided_by(n, count)` breaks down for the input `n=5` and `count=2`.\n\n<br/>\n\n![pic](../Figures/279/279_greedy.png)\n\nWith this trick of reformulation, we could dramatically reduce the risk of stack overflow.\n\n\n**Algorithm**\n\n- First of all, we prepare a list of square numbers (named `square_nums`) that are less than the given number `n`.\n<br/>\n- In the main loop, iterating the size of combination (named `count`) from one to `n`, we check if the number `n` can be divided by the sum of the combination, _i.e._ `is_divided_by(n, count)`.\n<br>\n- The function `is_divided_by(n, count)` can be implemented in the form of recursion as we defined in the intuition section.\n<br/>\n- In the bottom case, we have `count==1`, we just need to check if the number `n` is a square number itself. We could use the inclusion test with the list `square_nums` that we prepared before, _i.e._ $$n \\in \\text{square\\_nums}$$. And if we use the `set` data structure for `square_nums`, we could obtain a faster running time than the approach of `n == int(sqrt(n)) ^ 2`.\n\nConcerning the correctness of the algorithm, often the case we could prove the Greedy algorithm by **contradiction**. This is no exception. Suppose we find a `count=m` that can divide the number `n`, and suppose in the later iterations there exists another number `count=p` that can also divide the number and the combination is smaller than the found one _i.e._ `p < m`. Given the order of the iteration, the `count=p` would have been discovered before `count=m` which is contradict to the fact that `p` comes later than `m`. Therefore, we can say that the algorithm works as expected, which always finds the minimal size of combination.\n\nHere are some sample implementation. In particular, the Python solution took ~_70ms_, which was faster than ~ _90%_ submissions at the time.\n\n<iframe src=\"https://leetcode.com/playground/EY7XLxTf/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"EY7XLxTf\"></iframe>\n\n**Complexity**\n\n* Time complexity:  $$\\mathcal{O}( \\frac{\\sqrt{n}^{h+1} - 1}{\\sqrt{n} - 1} ) = \\mathcal{O}(n^{\\frac{h}{2}}) $$ where `h` is the maximal number of recursion that could happen. As one might notice, the above formula actually resembles the formula to calculate the number of nodes in a complete N-ary tree. Indeed, the trace of recursive calls in the algorithm form a N-ary tree, where N is the number of squares in `square_nums`, _i.e._ $$\\sqrt{n}$$. In the worst case, we might have to traverse the entire tree to find the solution.\n<br/>\n\n* Space Complexity: $$\\mathcal{O}(\\sqrt{n})$$. We keep a list of `square_nums`, which is of $$\\sqrt{n}$$ size. In addition, we would need additional space for the recursive call stack. But as we will learn later, the size of the call track would not exceed 4.\n<br/>\n<br/>\n\n---\n\n#### Approach 4: Greedy + BFS (Breadth-First Search)\n\n**Intuition**\n\nAs we mentioned in the complexity analysis in the above Greedy approach, the trace of the call stack forms a N-ary tree where each node represents a call to the `is_divided_by(n, count)` function. Based on the above intuition, again we could reformulate the original problem as follows:\n\n>Given a N-ary tree, where each node represents a **remainder** of the number `n` subtracting a combination of square numbers, our task is to find a node in the tree, which should meet two conditions:\n1). the value of the node (_i.e._ the remainder) should be a square number as well.\n2). the distance between the node and the root should be minimal among all nodes that meet the condition (1).\n\nHere is an example how the tree would look like.\n\n![pic](../Figures/279/279_greedy_tree.png)\n\nIn the previous Approach #3, due to the _Greedy_ strategy that we perform the calls, we were actually constructing the N-ary tree level-by-level from top to down. And the we were traversing it in a **_BFS_** (Breadth-First Search) manner. At each level of the N-ary tree, we were enumerating the combinations that are of the same size.\n\nThe order of traversing is of BFS, rather than DFS (Depth-First Search), is due to the fact that before exhausting all the possibilities of decomposing a number `n` with a fixed amount of squares, we would not explore any potential combination that needs more elements.  \n\n\n**Algorithm**\n\n- Again, first of all, we prepare a list of square numbers (named `square_nums`) that are less than the given number `n`.\n<br/>\n- We then create a `queue` variable which would keep all the remainders to enumerate at each level.\n<br/>\n- In the main loop, we iterate over the `queue` variable. At each iteration, we check if the remainder is one of the square numbers. If the remainder is not a square number, we subtract it with one of the square numbers to obtain a new remainder and then add the new remainder to the `next_queue` for the iteration of the next level. We break out of the loop once we encounter a remainder that is of a square number, which also means that we find the solution. \n\n**_Note_**: in a typical BFS algorithm, the `queue` variable usually would be of array or list type. However, here we use the set type, in order to eliminate the redundancy of remainders within the same level. As it turns out, this tiny trick could even provide a 5 times speedup on running time.\n\nIn the following graph, we illustrate the layout of the queue, on the example of `numSquares(7)`.\n\n![pic](../Figures/279/279_greedy_bfs.png)\n\nHere are some sample implementations. In particular, the Python implementation inspired from the post of [ChrisZhang12240](https://leetcode.com/problems/perfect-squares/discuss/71475/Short-Python-solution-using-BFS) took ~200 ms which was faster than ~72% of submission at that time.\n\n<iframe src=\"https://leetcode.com/playground/QpfaLd5R/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"QpfaLd5R\"></iframe>\n\n**Complexity**\n\n* Time complexity: $$\\mathcal{O}( \\frac{\\sqrt{n}^{h+1} - 1}{\\sqrt{n} - 1} ) = \\mathcal{O}(n^{\\frac{h}{2}}) $$ where `h` is the height of the N-ary tree. One can see the detailed explanation on the previous Approach #3.\n<br/>\n\n* Space complexity: $$\\mathcal{O}\\Big((\\sqrt{n})^h\\Big)$$, which is also the maximal number of nodes that can appear at the level `h`. As one can see, though we keep a list of `square_nums`, the main consumption of the space is the `queue` variable, which keep track of the remainders to visit for a given level of N-ary tree.\n<br/>\n<br/>\n\n---\n\n#### Approach 5: Mathematics \n\n**Intuition**\n\nThe problem can be solved with the mathematical theorems that have been proposed and proved over time. We will break down the problem into several cases in this section.\n\nIn 1770, [Joseph Louis Lagrange](https://en.wikipedia.org/wiki/Lagrange%27s_four-square_theorem) proved a theorem, called _Lagrange's four-square theorem_, also known as Bachet's conjecture, which states that every natural number can be represented as the sum of four integer squares:\n$$\np=a_{0}^{2}+a_{1}^{2}+a_{2}^{2}+a_{3}^{2}\n$$\nwhere the four numbers \n$$a_{0},a_{1},a_{2},a_{3}$$ are integers.\n\nFor example, 3, 31 can be represented as the sum of four squares as follows:\n$$\n3=1^{2}+1^{2}+1^{2}+0^{2} \\qquad\n31=5^{2}+2^{2}+1^{2}+1^{2}\n$$\n\n>Case 1). The Lagrange's four-square theorem sets the upper bound for the results of the problem, _i.e._ if the number `n` cannot be decomposed into a fewer number of squares, _at least_ it can be decomposed into the sum of **4** square numbers, _i.e._ $$\\text{numSquares}(n) \\le 4$$.\n\nAs one might notice in the above example, the number zero is also considered as a square number, so we can consider that the number 3 can either be decomposed into 3 or 4 square numbers.\n\n_However, Lagrange's four-square theorem does not tell us directly the *least* numbers of square to decompose a natural number._ \n\nLater, in 1797, [Adrien-Marie Legendre](https://en.wikipedia.org/wiki/Adrien-Marie_Legendre) completed the four-square theorem with his **_three-square theorem_**, by proving a particular condition that a positive integer can be expressed as the sum of three squares:\n$$\nn \\ne 4^{k}(8m+7) \\iff n = a_{0}^{2}+a_{1}^{2}+a_{2}^{2}\n$$\nwhere $$k$$ and $$m$$ are integers.\n\n> Case 2). Unlike the four-square theorem, Adrien-Marie Legendre's three-square theorem gives us a **necessary** and **sufficient** condition to check if the number can **ONLY** be decomposed into 4 squares, not fewer.\n\nIt might be tricky to see the conclusion that we made in the case (2) from the three-square theorem. Let us elaborate the deduction procedure a bit.\nFirst of all, the three-square theorem tells us that if the number `n` is of the form $$n = 4^{k}(8m+7)$$, then the number `n` cannot be decomposed into the sum of 3 numbers of squares. Further, we can also **assert** that the number `n` cannot be decomposed into the sum of two squares, neither the number itself is a square. Because suppose the number `n` can be decomposed as $$n = a_{0}^{2}+a_{1}^{2}$$, then by adding the square number zero into the expression, _i.e._ $$n = a_{0}^{2}+a_{1}^{2} + 0^2$$, we obtain the conclusion that the number `n` can be decomposed into 3 squares, which is **contradicted** to the three-square theorem. Therefore, together with the four-square theorem, we can assert that if the number does not meet the condition of the three-square theorem, it can ONLY be decomposed into the sum of 4 squares, not fewer.\n<br/>\n\nIf the number meets the condition of the three-square theorem, we know that if can be decomposed into 3 squares. But what we don't know is that whether the number can be decomposed into fewer squares, _i.e._ one or two squares.\nSo before we attribute the number to the bottom case (three-square theorem), here are the two cases remained to check, namely:\n\n>Case 3.1). if the number is a square number itself, which is easy to check _e.g._ `n == int(sqrt(n)) ^ 2`.\n\n>Case 3.2). if the number can be decomposed into the sum of two squares. Unfortunately, there is no mathematical weapon that can help us to check this case in one shot. We need to resort to the **enumeration** approach.\n\n\n**Algorithm**\n\nOne can literally follow the above cases to implement the solution.\n\n- First, we check if the number `n` is of the form $$n = 4^{k}(8m+7)$$, if so we return 4 directly.\n<br/>\n- Otherwise, we further check if the number is of a square number itself or the number can be decomposed the sum of two squares.\n<br/>\n- In the bottom case, the number can be decomposed into the sum of 3 squares, though we can also consider it decomposable by 4 squares by adding zero according to the four-square theorem. But we are asked to find the least number of squares.\n\nWe give some sample implementations here. The solution is inspired from the posts of [TCarmic](https://leetcode.com/problems/perfect-squares/discuss/376795/100-O(log-n)-Python3-Solution-Lagrange's-four-square-theorem) and [StefanPochmann](https://tinyurl.com/y4falx4f) in the [Discussion](https://leetcode.com/problems/perfect-squares/discuss/) forum.\n\n<iframe src=\"https://leetcode.com/playground/yBD2ZPv5/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"yBD2ZPv5\"></iframe>\n\n**Complexity**\n\n* Time complexity: $$\\mathcal{O}(\\sqrt{n})$$. In the main loop, we check if the number can be decomposed into the sum of two squares, which takes $$\\mathcal{O}(\\sqrt{n})$$ iterations. In the rest of cases, we do the check in constant time.\n<br/>\n\n* Space complexity: $$\\mathcal{O}(1)$$. The algorithm consumes a constant space, regardless the size of the input number.\n<br/>\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "perfect-squares",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.789,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "864",
                "title": "Word Break",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "139",
                    "questionFrontendId": "139",
                    "sessionId": "968792",
                    "questionTitle": "Word Break",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-break/submit/",
                    "interpretUrl": "/problems/word-break/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    bool wordBreak(string s, vector<string>& wordDict) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public boolean wordBreak(String s, List<String> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def wordBreak(self, s, wordDict):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type wordDict: List[str]\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def wordBreak(self, s: str, wordDict: List[str]) -> bool:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nbool wordBreak(char * s, char ** wordDict, int wordDictSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public bool WordBreak(string s, IList<string> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string[]} wordDict\\n * @return {boolean}\\n */\\nvar wordBreak = function(s, wordDict) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String[]} word_dict\\n# @return {Boolean}\\ndef word_break(s, word_dict)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordBreak(s string, wordDict []string) bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn word_break(s: String, word_dict: Vec<String>) -> bool {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String[] $wordDict\\n     * @return Boolean\\n     */\\n    function wordBreak($s, $wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function wordBreak(s: string, wordDict: string[]): boolean {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (word-break s wordDict)\\n  (-> string? (listof string?) boolean?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> boolean().\\nword_break(S, WordDict) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: boolean\\n  def word_break(s, word_dict) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"leetcode\"\n[\"leet\",\"code\"]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"wordBreak\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"s\",\r\n      \"type\": \"string\"\r\n    },\r\n    {\r\n      \"name\": \"wordDict\",\r\n      \"type\": \"list<string>\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"boolean\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.\nNote that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> false\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 300</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Word Break",
                        "content": "[TOC]\n\n## Video Solution\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/487458046\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nThe naive approach to solve this problem is to use recursion and backtracking.\nFor finding the solution, we check every possible prefix of that string in the dictionary of words, if it is found in the dictionary, then the recursive function is called for the remaining portion of that string. And, if in some function call it is found that the complete string is in dictionary, then it will return true.\n\n<iframe src=\"https://leetcode.com/playground/WU7Ko323/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"WU7Ko323\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(2^n)$$.\nGiven a string of length $$n$$, there are $$n + 1$$ ways to split it into two parts.\nAt each step, we have a choice: to split or not to split.\nIn the worse case, when all choices are to be checked, that results in $$O(2^n)$$.\n\n* Space complexity : $$O(n)$$. The depth of the recursion tree can go upto $$n$$.\n\n<br />\n\n---\n\n#### Approach 2: Recursion with memoization\n\n**Algorithm**\n\nIn the previous approach we can see that many subproblems were redundant, i.e we were calling the recursive function multiple times for a particular string. To avoid this we can use memoization method, where an array $$memo$$ is used to store the result of the subproblems. Now, when the function is called again for a particular string, value will be fetched and returned using the $$memo$$ array, if its value has been already evaluated.\n\nWith memoization many redundant subproblems are avoided and recursion tree is pruned and thus it reduces the time complexity by a large factor.\n\n<iframe src=\"https://leetcode.com/playground/AoWyyN8i/shared\" frameBorder=\"0\" width=\"100%\" height=\"497\" name=\"AoWyyN8i\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. Size of recursion tree can go up to $$n^2$$.\n\n* Space complexity : $$O(n)$$. The depth of recursion tree can go up to $$n$$.\n\n\n<br />\n---\n\n#### Approach 3: Using Breadth-First-Search\n\n**Algorithm**\n\nAnother approach is to use Breadth-First-Search. Visualize the string as a tree where each node represents the prefix upto index $$end$$.\nTwo nodes are connected only if the substring between the indices linked with those nodes is also a valid string which is present in the dictionary.\nIn order to form such a tree, we start with the first character of the given string (say $$s$$) which acts as the root of the tree being formed and find every possible substring starting with that character which is a part of the dictionary. Further, the ending index (say $$i$$) of every such substring is pushed at the back of a queue which will be used for Breadth First Search. Now, we pop an element out from the front of the queue and perform the same process considering the string $$s(i+1,end)$$ to be the original string and the popped node as the root of the tree this time. This process is continued, for all the nodes appended in the queue during the course of the process. If we are able to obtain the last element of the given string as a node (leaf) of the tree, this implies that the given string can be partitioned into substrings which are all a part of the given dictionary.\n\nThe formation of the tree can be better understood with this example:\n<!--![Word Break](../Figures/139_wordbreak.gif)-->\n!?!../Documents/139_Word_Break.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/bQwBSJLH/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"bQwBSJLH\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. For every starting index, the search can continue till the end of the given string.\n\n* Space complexity : $$O(n)$$. Queue of at most $$n$$ size is needed.\n\n<br />\n\n---\n\n#### Approach 4: Using Dynamic Programming\n\n**Algorithm**\n\nThe intuition behind this approach is that the given problem ($$s$$) can be divided into subproblems $$s1$$ and $$s2$$. If these subproblems individually satisfy the required conditions, the complete problem, $$s$$ also satisfies the same. e.g. \"$$\\text{catsanddog}$$\" can be split into two substrings \"$$\\text{catsand}$$\", \"$$\\text{dog}$$\". The subproblem \"$$\\text{catsand}$$\" can be further divided into \"$$\\text{cats}$$\",\"$$\\text{and}$$\", which individually are a part of the dictionary making \"$$\\text{catsand}$$\" satisfy the condition. Going further backwards, \"$$\\text{catsand}$$\", \"$$\\text{dog}$$\" also satisfy the required criteria individually leading to the complete string \"$$\\text{catsanddog}$$\" also to satisfy the criteria.\n\nNow, we'll move onto the process of $$\\text{dp}$$ array formation. We make use of $$\\text{dp}$$ array of size $$n+1$$, where $$n$$ is the length of the given string. We also use two index pointers $$i$$ and $$j$$, where $$i$$ refers to the length of the substring ($$s'$$) considered currently starting from the beginning, and $$j$$ refers to the index partitioning the current substring ($$s'$$) into smaller substrings $$s'(0,j)$$ and $$s'(j+1,i)$$. To fill in the $$\\text{dp}$$ array, we initialize the element $$\\text{dp}[0]$$ as $$\\text{true}$$, since the null string is always present in the dictionary, and the rest of the elements of $$\\text{dp}$$ as $$\\text{false}$$. We consider substrings of all possible lengths starting from the beginning by making use of index $$i$$. For every such substring, we partition the string into two further substrings $$s1'$$ and $$s2'$$ in all possible ways using the index $$j$$ (Note that the $$i$$ now refers to the ending index of $$s2'$$). Now, to fill in the entry $$\\text{dp}[i]$$, we check if the $$\\text{dp}[j]$$ contains $$\\text{true}$$, i.e. if the substring $$s1'$$ fulfills the required criteria. If so, we further check if $$s2'$$ is present in the dictionary. If both the strings fulfill the criteria, we make $$\\text{dp}[i]$$ as $$\\text{true}$$, otherwise as $$\\text{false}$$.\n\n<iframe src=\"https://leetcode.com/playground/3U4EDoNd/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"3U4EDoNd\"></iframe>\n\n**Complexity Analysis**\n\n$$n$$ is the length of the input string.\n\n* Time complexity : $$O(n^3)$$. There are two nested loops,\nand substring computation at each iteration. Overall that results in $$O(n^3)$$\ntime complexity.\n\n* Space complexity : $$O(n)$$. Length of $$p$$ array is $$n+1$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "word-break",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.028,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "865",
                "title": "Word Break II",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "140",
                    "questionFrontendId": "140",
                    "sessionId": "968792",
                    "questionTitle": "Word Break II",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/word-break-ii/submit/",
                    "interpretUrl": "/problems/word-break-ii/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<String> wordBreak(String s, List<String> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def wordBreak(self, s, wordDict):\\n        \\\"\\\"\\\"\\n        :type s: str\\n        :type wordDict: List[str]\\n        :rtype: List[str]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Note: The returned array must be malloced, assume caller calls free().\\n */\\nchar ** wordBreak(char * s, char ** wordDict, int wordDictSize, int* returnSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {string} s\\n * @param {string[]} wordDict\\n * @return {string[]}\\n */\\nvar wordBreak = function(s, wordDict) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {String} s\\n# @param {String[]} word_dict\\n# @return {String[]}\\ndef word_break(s, word_dict)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func wordBreak(s string, wordDict []string) []string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn word_break(s: String, word_dict: Vec<String>) -> Vec<String> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param String $s\\n     * @param String[] $wordDict\\n     * @return String[]\\n     */\\n    function wordBreak($s, $wordDict) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function wordBreak(s: string, wordDict: string[]): string[] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (word-break s wordDict)\\n  (-> string? (listof string?) (listof string?))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec word_break(S :: unicode:unicode_binary(), WordDict :: [unicode:unicode_binary()]) -> [unicode:unicode_binary()].\\nword_break(S, WordDict) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec word_break(s :: String.t, word_dict :: [String.t]) :: [String.t]\\n  def word_break(s, word_dict) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"wordBreak\",\n  \"params\": [\n    {\n      \"name\": \"s\",\n      \"type\": \"string\"\n    },\n    {\n      \"name\": \"wordDict\",\n      \"type\": \"list<string>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"list<string>\",\n    \"dealloc\": true\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, add spaces in <code>s</code> to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in <strong>any order</strong>.</p>\n\n<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsanddog&quot;, wordDict = [&quot;cat&quot;,&quot;cats&quot;,&quot;and&quot;,&quot;sand&quot;,&quot;dog&quot;]\n<strong>Output:</strong> [&quot;cats and dog&quot;,&quot;cat sand dog&quot;]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;pineapplepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;,&quot;applepen&quot;,&quot;pine&quot;,&quot;pineapple&quot;]\n<strong>Output:</strong> [&quot;pine apple pen apple&quot;,&quot;pineapple pen apple&quot;,&quot;pine applepen apple&quot;]\n<strong>Explanation:</strong> Note that you are allowed to reuse a dictionary word.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]\n<strong>Output:</strong> []\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= wordDict[i].length &lt;= 10</code></li>\n\t<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>\n\t<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Word Break II",
                        "content": "[TOC]\n\n## Solution\n\n\n---\n#### Overview\n\nThe solutions for this problem go by many names, such as Dynamic Programming, recursion with memoization, DFS, and backtracking _etc._\nThey all capture certain traits of the solutions.\n\nIn essence, all these solutions can all be categorized as variants of **_Dynamic Programming_** (DP), as we will discuss in this article.\n\n>As a reminder, with DP, we break the original problem down to several sub-problems _recursively_ until the sub-problems are small enough to be solved directly.\nThen we combine the results of sub-problems to obtain the final solution for the original problem.\n\nAs one can see, the DP solutions are also the embodiment of the divide-and-conquer principle. \n\nTo come up a DP solution, the essential step is to **represent** the solution of the original problem with the results of its sub-problems.\nIn general, there are two approaches to implement a DP solution, namely **_Top-Down_** and **_Bottom-Up_**.\nWe would explain in detail how to apply these two approaches to this problem in the following sections. \n<br/>\n<br/>\n\n\n---\n#### Approach 1: Top-Down Dynamic Programming\n\n**Intuition**\n\nLet us start with the top-down approach, which is more efficient compared to bottom-up approach in this case.\n\nGiven an input string $$\\text{s} = \\text{`catsanddog'} $$, we define the results of breaking it into words with the function $$\\text{F(s)}$$.\n\nFor any word (denoted as $$\\text{w}$$) in the dictionary, if it matches with a prefix of the input string, we then can _divide_ the string into two parts: the word and the postfix, _i.e._ $$s = \\text{w} + \\text{postfix} $$.\n\nConsequently, the solution for the input string can be represented as follows:\n\n$$\n    \\forall \\text{w} \\in \\text{dict}, \\quad  s = \\text{w} + \\text{postfix} \\implies \\{ \\text{w} + \\text{F(postfix)} \\} \\subseteq \\text{F(s)} \n$$\n\n_i.e._ we add the matched word to the solutions from the postfix.\n\nFor example, the word `cat` matches with a prefix of the string. As a result, we can divide the string into $$s = \\text{`cat'} + \\text{`sanddog'}$$. \n\nFor the postfix of `sanddog`, we could obtain the results by recursively applying our function, _i.e._ $$\\text{F(`sanddog')} = \\{ \\text{`sand dog'} \\} $$.\nBy adding the prefix word to the solutions of the postfix, we then obtain one of the solutions for the original string, \n_i.e._ $$ \\text{`cat sand dog'} \\in \\text{F(s)}  $$.\n\n\n>The above approach can be considered as a **_top-down_** DP.\nThe reason lies in the part that we adopt the _laissez-faire_ strategy, _i.e._ we simply take a first step, while assuming the subsequent steps will figure out on their owns.\n\nIn our case, we first find a match to a prefix of the string, while assuming that we would eventually obtain the results for the corresponding postfix.\n\nIn the following graph, we illustrate how the top-down approach works with a concrete example, _i.e._ with the input string as `s=\"catsanddogo\"` and the word dictionary as `wordDict=[\"cat\", \"cats\", \"and\", \"sand\", \"dog\", \"do\", \"go\"]`.\n\n![DFS](../Figures/140/140_DFS.png)\n\nEach node in the graph represents a postfix of the input string.\nIn particular, we have some nodes with an empty string, which indicates the end of the input string.\nEach edge indicates the reduction from one postfix to another.\nThe label on top of each edge indicates the word that is used to trigger the reduction.\n\nAs one might notice, the above graph is a **tree** data structure.\nFrom **top** to **bottom**, we reduce the input string down to its postfixes recursively until the string becomes empty.\n\n>Each path that starts with the root node (input string) and ends with a leaf node of an empty string represents a sequence of words that the input string can be broke down into, as we highlighted in the graph.\n\n**Algorithm**\n\nFollowing the above intuition, it seems intuitive to implement the solution with recursion.\n\nWe define a recursive function called `_wordBreak_topdown(s)` which generates the results for the input string.\nHere are a few steps to implement our recursive function.\n\n- First of all, as the _**base case**_ of the recursion, when the input string is empty, the recursion would terminate. Note that we return a list of empty list as the result, rather than just an empty list.\n\n- As the main body of the function, we run an iteration over all the prefixes of the input string. If the corresponding prefix happens to match a word in the dictionary, we then invoke recursively the function on the postfix.\n\n- At the end of the iteration, we keep the results in the hashmap named `memo` with each valid postfix string as its key and the list of words that compose the prefix of as the value.\nFor instance, for the postfix `dogo`, its corresponding entry in the hashmap would be `memo[\"dogo\"] = [\"do\", \"go\"]`.\n\n- Finally, as the result, we return the entry of `memo` with the input string as the key. (The string itself is a postfix of the string itself.)\n\n<iframe src=\"https://leetcode.com/playground/4UqVvMtK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"4UqVvMtK\"></iframe>\n\n\n**Optimization**\n\nThe execution of the recursion would unfold as a tree as we shown before.\n\nAs one might notice, there are some duplicate nodes in the tree, _e.g._ the node with the postfix `dogo`, which is due to the fact that there are several ways to reduce the input string down to the same postfix.\n\nTherefore, it would be natural to reuse the results that we've calculated for certain postfix, rather than re-calculating them at each occasion. Together with recursion, this optimization technique is also called **_memoization_**.\n\nAnother essential characteristic about DP solutions is that we reuse the results of intermediate solutions.\nWithout this optimization, _i.e._ if we do not reuse the intermediate solutions, our top-down approach could not be fully qualified as the DP solution.\n\n![DP with memoization](../Figures/140/140_dp_memoization.png)\n\nOn the other hand, as revealed by the execution graph, we can consider our top-down approach as _backtracking_ or DFS (Depth-First Search) traversal over the tree / graph alike data structure.\nHere is how we formulate the approaches.\n\n- **Backtracking**: given an input string, we *explore* all the possibilities to break it down to words.\nAt certain step, if we cannot move forwards, we would _backtrack_ to the previous step and try another alternative.\n\n- **DFS traversal**: we can reformulate the problem as finding all the paths from the root to the leaf nodes in a tree consisting of postfixes.\nTherefore, by traversing the tree in the manner of DFS as we did, we could achieve the goal easily.\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input string and $$W$$ be the number of words in the dictionary.\n\n- Time Complexity: $$\\mathcal{O}(N ^ 2 + 2^N + W)$$ \n\n    - In the execution graph shown before, we might visit certain nodes multiple times, but we visit each edge once and only once.\n    Therefore, the time complexity of the algorithm is proportional to the number of **edges**, which depends on the construction of the input string and the word dictionary.\n\n    - In the worst case, there could be $$N$$ valid postfixes, _i.e._ each prefix of the input string is a valid word.\n    For example, it is one of the worst cases with the input string as `s=aaa` and the word dictionary as `wordDict=[\"a\", \"aa\", \"aaa\"]`.\n\n    ![worst case](../Figures/140/140_worst_case_example.png)\n\n    - For a postfix of length $$i$$, it could make at most $$i$$ invocation of the recursive function, _i.e._ a node with the prefix of length $$i$$ would have at most $$i$$ outgoing edges.\n    Since we have $$N$$ prefixes, in total, we could have $$\\sum_{i=1}^{N}{i} = \\frac{(1 + N)\\cdot N}{2}$$ edges in th execution graph.\n\n    - In addition, at each visit of the edge, we need to iterate through the number of solutions that bring back by the edge. In the above worst case, each postfix of length $$i$$ would have $$2^{i-1}$$ number of solutions, _i.e._ each edge brings back $$2^{i-1}$$ number of solution from the target postfix. Therefore, in total, we need $$\\mathcal{O}(\\sum_{i=1}^{N}{2^{i-1}}) = \\mathcal{O}(2^N)$$ iterations to construct the final solutions.\n\n    - At the beginning of the algorithm, we construct a set out of the dictionary, which takes $$\\mathcal{O}(W)$$ time.\n\n    - In total, the overall time complexity of the algorithm is $$\\mathcal{O}(N ^ 2 + 2^N + W)$$.\n\n\n- Space Complexity: $$\\mathcal{O}(2 ^ {N} \\cdot N + W)$$\n\n    - In the worst case, it could be possible to insert a break between every adjacent characters in the string.\n    Therefore, there could be $$2 ^ {N-1}$$ possible combinations to break the input string into words. Each combination would consist of $$N$$ characters from the input string.\n    As a result, in total we would need $$\\mathcal{O}(2 ^ {N-1} \\cdot N)$$ space to hold the values in the hashmap.\n    In addition, we would have $$N$$ entries for the keys, which could amount to $$\\mathcal{O}(N ^ 2)$$ space.\n\n    - We use a set to keep all the words from the dictionary, which we assume to be $$\\mathcal{O}(W)$$ space.\n\n    - It is worth mentioning that the recursion would incur additional space consumption on the function call stack.\n    But since they would not dominate the other space overhead, we can omit them here.\n\n    - In total, the overall space complexity of the algorithm is $$\\mathcal{O}(2 ^ {N-1} \\cdot N + N ^ 2 + W) = \\mathcal{O}(2 ^ {N} \\cdot N + W)$$.\n<br/>\n<br/>\n\n---\n#### Approach 2: Bottom-Up Dynamic Programming\n\n**Intuition**\n\n>As opposed to the top-down approach, the **_bottom-up_** dynamic programming _progressively_ builds up the solutions for the sub-problems upfront, rather than delaying them to the end.\n\nWe will demonstrate the difference between the two approaches with a concrete example later.\n\nFollowing the same definition in the top-down approach, given an input string $$\\text{s}$$, _e.g._ $$\\text{s} = \\text{`catsanddog'} $$, we define the results of breaking it into words with the function $$\\text{F(s)}$$.\n\nFor any word (denoted as $$\\text{w}$$) in the dictionary, if it matches with a postfix of the input string, we then can _divide_ the string into two parts: the prefix and the word, _i.e._ $$s = \\text{prefix} + \\text{w}$$.\n\nConsequently, the solution for the input string can be represented as follows:\n\n$$\n    \\forall \\text{w} \\in \\text{dict}, \\quad  s = \\text{prefix} + \\text{w} \\implies \\{ \\text{F(prefix)} + \\text{w} \\} \\subseteq \\text{F(s)} \n$$\n\n_i.e._ we add the matched word to the solutions from the prefix.\n\nWe start from an empty prefix (_i.e._ the bottom case), to progressively extend the solutions to a larger prefix.\nEventually, the extended prefix would grow to be the original string.\n\nIn the following graph, we demonstrate how the bottom-up approach works for the same example in the top-down approach,\n_i.e._ with the input string as `s=\"catsanddogo\"` and the word dictionary as `wordDict=[\"cat\", \"cats\", \"and\", \"sand\", \"dog\", \"do\", \"go\"]`.\n\n![DP table](../Figures/140/140_dp_value_table.png)\n\nAs one can see from the above graph, by appending words to the prefixes, we obtain the solutions for the larger strings.\nAt the end, we calculate the solutions for all possible prefixes, which includes the solutions for the original string, since the string itself is a prefix of the string.\n\n**Algorithm**\n\nTo implement the bottom-up DP approach, we often use an array to keep track of all the intermediate solutions.\nThe problem is no exception.\n\nWe define an array called `dp`.\nEach element in the array (`dp[i]`) would be used to hold the solutions for the corresponding prefix `s[0:i]`.\n\nFor example, for the prefix of `s[0:3] = \"cat\"`, the value for the element of `dp[3]` would be `[\"cat\"]`, as we indicated in the previous graph.\n\n>The goal of the algorithm boils down to calculating each element in the `dp` array.\nAnd the desired result would be the last element in the array, _i.e._ `dp[len(s)]`, which corresponds to the results for the entire string.\n\nHere are a few steps on how to calculate the values for the `dp` array:\n\n- First of all, we create an empty `dp` array to hold all the intermediate solutions.\n\n- We then iterate through all prefixes of the input string, from the bottom case (empty string) to the entire string.\n\n- For each prefix, we enumerate all possible combinations to see if we could reuse the solutions from the previous prefixes.\n\n<iframe src=\"https://leetcode.com/playground/mbusRNjc/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"mbusRNjc\"></iframe>\n\n**Note:** since this is not the most efficient algorithm, as we will see in the analysis later, we added an additional check at the beginning of the algorithm, to see if the input string contains some characters that do not appear in any of the words in the dictionary.\nIf this is the case, then we are sure that the input string cannot be broken down into words, which can save us from running the algorithm.\n\nWith this check, we could by pass some tricky test cases, not ending up with the TLE (Time Limit Exceeded) error.\n\nWe mentioned previously that we could consider the top-down DP approach as the DFS (Depth-First Traversal) over the structure of graph.\n\n>Similarly, we could consider the bottom-up DP approach as the BFS **_(Breadth-First Search)_** over the same graph structure, as shown in the following graph.\n\n![BFS with DP table](../Figures/140/140_BFS_with_table.png)\n\nRather than going in depth, the bottom-up DP approach explores the breadth first.\nIt is not the best strategy in the case, since not every branch would lead to a potential solution, yet with BFS we have to keep all the intermediate solutions regardless of whether they would lead to a final solution or not.\nWhile in DFS, no intermediate solution is kept until it leads to a final solution.\nThis is the main reason why DFS (top-down approach) is a much more efficient algorithm for this problem, compared to BFS (bottom-down approach).\n\n**Keep Breaks Not Words**\n\nOne of the drawbacks of the above bottom-up implementation is that we keep the intermediate solutions in the form of strings, _e.g._ `dp[7] = ['cat sand', 'cats and']`.\n\nIt is rather costly to do so. The rationale is twofold: 1). we have to keep many copies of string in the memory. 2). we have to iterate through the string to make a new copy, which is time-consuming.\n\nOne of the optimizations that we can do is that rather than keeping the words (strings), we simply keep the **positions** to insert the breaks into the original string.\nFor the same example of `dp[7]`, we can store the values as `dp[7] = [[3, 7], [4, 7]]`, which we could interpret as follows:\n\n- For the solution of `[3, 7]`, by inserting a break respectively at the indices of 3 and 7 in the original string, we could obtain a list of words, _i.e._ `\"cat sand\"`.\n\n- Similarly, the solution of `[4, 7]` corresponds to the list of words `\"cats and\"`.\n\nWith this optimization, we then can convert the previous dp array to the following:\n![BFS with breaks](../Figures/140/140_BFS_with_breaks.png)\nAs one can see, not only do we save the space to store the intermediate solutions, but also the time to calculate them.\n\n<iframe src=\"https://leetcode.com/playground/iKYiMxAT/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iKYiMxAT\"></iframe>\n\n\n**Recursive Encoding**\n\nAlthough we save quite some efforts by storing just the breaks rather than the words themselves, still we were **repeating** the solutions of small prefixes in the solutions for the larger prefixes.\n\n>To avoid this repetition, we could simply refer to the previous solutions with their indices in the dp array, rather than copying them.\n\nWith the above _recursive encoding_ schema, we could further reduce the dp array into the following:\n\n![BFS with recursive encoding](../Figures/140/140_BFS_recursive_encoding.png)\n\nAs shown in the above graph, each element in the encoding is a two-element tuple as `[previous_dp_index, word_end_index]`.\nFirst of all, the two indices define the scope of the word to be added.\nIn addition, the first index (_i.e._ `previous_dp_index`) indicates the previous dp entry that we should _recursively_ look into, in order to add the words that compose the prefix.\n\nWith this schema, we could further save some space and time to calculate the intermediate solutions.\n\nOne caveat though is that it is slightly more complex to decode the final solutions from the encoded results.\n\n<iframe src=\"https://leetcode.com/playground/iXCegxyT/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"iXCegxyT\"></iframe>\n\n\n**Complexity Analysis**\n\nLet $$N$$ be the length of the input string and $$W$$ be the number of words in the dictionary.\n\n- Time Complexity: $$\\mathcal{O}(N^2 + 2 ^ N + W)$$\n\n    - As we discussed before, in the worst case, it could be possible to insert a break between every adjacent characters in the input string, _i.e._ each prefix of length $$k$$ would have $$2 ^ {k-1}$$ number of solutions.\n\n    - While we iterate over all prefixes of the input string, starting from the empty prefix, the number of solutions for each prefix would double at each step.\n\n    - Assume that we adopt the most optimal recursive encoding for the solutions, we would need $$k$$ steps to build solutions for the prefix of length $$k$$. In total, we would need $$\\sum_{i=1}^{N}{i} = \\frac{(N+1) \\cdot N}{2}$$ steps to build all intermediate solutions.\n\n    - However, at the end, we need to reconstruct the solutions from the encoding.\n    In the worst case, we would have $$2 ^ {N-1}$$ number of solutions.\n    Thus it would take at least $$2 ^ {N-1}$$ steps to reconstruct the solutions.\n\n    - Similarly, it would take $$W$$ steps to build the word set from the dictionary.\n\n    - In total, the overall time complexity for the bottom-up DP approach with the recursive encoding is $$\\mathcal{O}(\\frac{(N+1) \\cdot N}{2} + 2 ^ {N-1} + W ) = \\mathcal{O}(N^2 + 2 ^ N + W)$$.\n\n\n- Space Complexity: $$\\mathcal{O}(2^N \\cdot N + N^2 + W)$$\n\n    - As stated above, in the worst case, each prefix of length $$k$$ would have $$2 ^ {k-1}$$ number of solutions.\n    Therefore, in total, we would have $$\\sum_{k=1}^{N}{2 ^ {k-1}} = 2^N$$\n    intermediate solutions.\n    If we keep the solutions as words or breaks, we would need $$N$$ space for each solution. Thus, it amounts to $$2^N \\cdot N$$ for the approaches that keep the intermediate solutions as words or breaks.\n\n    - On the other hand, if we use the recursive encoding, each prefix of length $$k$$ would only need $$k$$ entries at most to keep its solutions. With the encoding, we would only need $$\\sum_{k=1}^{N}{k} = \\frac{(1+N) \\cdot N}{2}$$ space to keep all intermediate solutions.\n\n    - As always, we would need an additional $$W$$ space to hold the words in the dictionary.\n\n    - In total, the space complexity of the algorithm is $$\\mathcal{O}(2^N \\cdot N + N^2 + W)$$, if we adopt the recursive encoding schema.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "word-break-ii",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.615,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "866",
                "title": "Burst Balloons",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 121,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "312",
                    "questionFrontendId": "312",
                    "sessionId": "968792",
                    "questionTitle": "Burst Balloons",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/burst-balloons/submit/",
                    "interpretUrl": "/problems/burst-balloons/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxCoins(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxCoins(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxCoins(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxCoins(self, nums: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxCoins(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxCoins(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar maxCoins = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {Integer}\\ndef max_coins(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxCoins(_ nums: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxCoins(nums []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxCoins(nums: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxCoins(nums: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_coins(nums: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return Integer\\n     */\\n    function maxCoins($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxCoins(nums: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-coins nums)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_coins(Nums :: [integer()]) -> integer().\\nmax_coins(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_coins(nums :: [integer]) :: integer\\n  def max_coins(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[3,1,5,8]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"maxCoins\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given <code>n</code> balloons, indexed from <code>0</code> to <code>n - 1</code>. Each balloon is painted with a number on it represented by an array <code>nums</code>. You are asked to burst all the balloons.</p>\n\n<p>If you burst the <code>i<sup>th</sup></code> balloon, you will get <code>nums[i - 1] * nums[i] * nums[i + 1]</code> coins. If <code>i - 1</code> or <code>i + 1</code> goes out of bounds of the array, then treat it as if there is a balloon with a <code>1</code> painted on it.</p>\n\n<p>Return <em>the maximum coins you can collect by bursting the balloons wisely</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,5,8]\n<strong>Output:</strong> 167\n<strong>Explanation:</strong>\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; []\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,5]\n<strong>Output:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Burst Balloons",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Overview\r\n\r\nThis is an interesting problem. Whenever we burst a balloon, we gain a certain number of coins equal to the product of the points of the burst balloon and its neighbors. Our goal is to maximize the total coins gained. A visual example of the balloon bursting process is given below.\r\n\r\n![Overview](../Documents/312/312_overview.drawio.svg)\r\n\r\nTwo hints can be observed from the diagram above and the problem description. First, the problem asks us to **maximize** some value (the number of coins we can collect).  Second, each decision that we make at depends on previously made decisions, in this case the balloons that we have to choose from depends on which ballons we already popped.  Both of these attributes are characteristic of dynamic programming (DP) problems.  As such, we will approach this problem using dynamic programming. We will start with a naive DP approach that is intuitive but suboptimal.  The approach is good starting point that needs some optimizations, which may require you to think outside the box.\r\n\r\nBelow, we will discuss three approaches: _Dynamic Programming (Naive)_, _Dynamic Programming (Top-Down)_, and _Dynamic Programming (Bottom-Up)_.\r\n\r\nThe first approach (naive DP) receives _Time Limit Exceed_ and will be optimized in approaches 2 and 3. The purpose of including this approach is to show the thought process from scratch to the optimized solutions. Approaches 2 and 3 have the same ideas but differ in implementation details. We will explain the intuition behind them heavily in Approach 2.\r\n\r\nTherefore, the recommended reading order is **Approach 1 then Approach 2 then Approach 3**.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 1: Dynamic Programming (Naive)\r\n\r\n> This approach is _Time Limit Exceed_ and will be optimized in approaches 2 and 3.\r\n> It is still recommended to read since the ideas of approaches 2 and 3 are evolved from here.\r\n\r\n**Intuition**\r\n\r\n>In this part, we will explain how to think of this approach step by step.\r\n>\r\n>If you are purely interested in the algorithm, you can jump to the algorithm part in Approach 2.\r\n\r\nWhenever the problem involves different intermediate states and only one final state, it may hint that **_Dynamic Programming_** is a viable approach.\r\n\r\nAlso, DP is our old friend in hard-level problems. If you do not have any idea, you can always give DP a try.\r\n\r\nOften, the Top-Down DP approach is more intuitive to implement than the Bottom-Up DP approach. Let's try Top-Down DP first.\r\n\r\n>**Tip: Top-Down DP vs. Bottom-Up DP**\r\n>\r\n>Top-Down DP, also known as Memoization DP, uses recursive function and memoization.\r\n>\r\n>Bottom-Up DP, also known as Tabulation DP, uses iteration and DP array.\r\n>\r\n>For details, check out [Stack Overflow: What is the difference between bottom-up and top-down?](https://stackoverflow.com/questions/6164629/what-is-the-difference-between-bottom-up-and-top-down).\r\n\r\nGenerally, a basic template of a Top-Down DP follows the below pseudo-code. Don't worry if you do not get the idea from this template alone, we will dive into details right after this, just follow along for now.\r\n\r\n```js\r\nfunction dp(dp_state, memo_dict) {\r\n    // check if we have seen this dp_state\r\n    if dp_state in memo_dict\r\n        return memo_dict[dp_state]\r\n\r\n    // base case (a case that we know the answer for already) such as dp_state is empty\r\n    if dp_state is the base cases\r\n        return things like 0 or null\r\n    \r\n    calculate dp(dp_state) from dp(other_state)\r\n    \r\n    save dp_state and the result into memo_dict\r\n}\r\nfunction answerToProblem(input) {\r\n    return dp(start_state, empty_memo_dict)\r\n}\r\n```\r\n\r\n>**Tip: Decorators for Memoization**\r\n>\r\n>In some languages such as `Python`, there are some decorators for memoization, such as `lru_cache`.\r\n>\r\n>Such decorators automatically maintain the memo_dict for us and check if each dp_state has been seen.\r\n\r\nOkay, let's fill in the template. There are four key items that we need to fill in:\r\n\r\n1. What is `dp_state`?\r\n2. What does `dp` function return?\r\n3. What is the base case?\r\n4. How to calculate `dp(dp_state)` from `dp(other_state)`?\r\n\r\nBack to the problem. Since we are bursting balloons in `nums` and `nums` keeps changing, it might be a good idea to use `nums` to define our `dp_state`. `dp(nums, memo_dict)` will return the maximum coins obtainable if we burst all balloons in `nums`.\r\n\r\nThe base case should be a subproblem for which we already know the answer.  For example: When `nums` is empty, we cannot burst any more balloons, so return 0.\r\n\r\n```js\r\n// memo_dict is ignored for readability\r\n// return maximum coins obtainable by optimally bursting all balloons in `nums`.\r\nfunction dp(nums) {\r\n    // base case\r\n    if nums is empty\r\n        return 0\r\n    calculate dp(nums) from dp(other_state)\r\n}\r\n```\r\n\r\nHow do we calculate `dp(nums)` from `dp(other_state)`?\r\n\r\nWhen given `nums`, we can burst any balloon in `nums`. We can try all possibilities and return the maximum.\r\n\r\n```js\r\n// memo_dict is ignored for readability\r\n// return maximum coins obtainable by optimally bursting all balloons in `nums`.\r\nfunction dp(nums) {\r\n    // base case is ignored\r\n    max_coins = 0\r\n    for i in 1...nums.length-2:\r\n        // burst nums[i]\r\n        gain = nums[i - 1] * nums[i] * nums[i + 1]\r\n        // burst the remaining balloons\r\n        remaining = dp(nums without nums[i])\r\n        max_coins = max(max_coins, gain + remaining)\r\n    return max_coins\r\n}\r\n```\r\n\r\nThe above template will work for the most part of `nums`. However, `nums[i - 1]` and `nums[i + 1]` may be out of bounds for edge cases (leftmost and rightmost).\r\n\r\nTo handle these edge cases, we have two solutions:\r\n\r\n1. Add fake balloons (each with the value of 1) to the beginning and the end of the original `nums`.\r\n2. Use a customary `getOrDefault(nums, i, default)` to replace `nums[i]`.\r\n\r\nBoth options work, but here we will implement the first one, and just let `nums = [1] + nums + [1]`.\r\n\r\n![Add One](../Documents/312/312_add_one.drawio.svg)\r\n\r\n>**Tip: Sentinel Node**\r\n>\r\n>The fake balloons solution is a bit similar to Sentinel Node we use in linked lists. Both are fake and used to handle edge cases.\r\n>\r\n>To learn more about Sentinel Nodes, check out [Wikipedia: Sentinel node](https://en.wikipedia.org/wiki/Sentinel_node).\r\n\r\nTo sum up, our pseudo-code right now is:\r\n\r\n```js\r\n// return maximum coins obtainable if we burst all balloons in `nums`.\r\nfunction dp(nums, memo_dict) {\r\n    // check if have we seen this dp_state\r\n    if nums in memo_dict\r\n        return memo_dict[dp_state]\r\n\r\n    // base case\r\n    if nums is empty\r\n        return 0\r\n    \r\n    max_coins = 0\r\n    for i in 1 ... nums.length - 2:\r\n        // burst nums[i]\r\n        gain = nums[i - 1] * nums[i] * nums[i + 1]\r\n        // burst the remaining balloons\r\n        remaining = dp(nums without nums[i])\r\n        max_coins = max(max_coins, gain + remaining)\r\n    \r\n    save dp_state and the result into memo_dict\r\n    return max_coins\r\n}\r\n\r\nfunction maxCoin(nums) {\r\n    nums = [1] + nums + [1] // add fake balloons\r\n    return dp(nums, empty_memo_dict)\r\n}\r\n```\r\n\r\nHopefully, at this point, the above variation of the basic template is not difficult to follow.\r\n\r\nLet's take a moment to analyze the complexity of our solution so far.\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the number of balloons given.\r\n* Time complexity: $$O(N2^N)$$\r\n  * There are $$O(2^N)$$ states. For each state, determining the maximum coins requires iterating over all balloons. Thus the total time complexity is $$O(2^N) \\times O(N) = O(N2^N)$$.\r\n  \r\n  * From the problem description, we know that `1 <= N <= 500`. Therefore, in the worst case, time_complexity $$ = 2^{500} \\times 500 \\approx 1.6 \\times 10^{154}$$, which is unacceptable. Generally, a number around or less then $$10^8$$ is feasible.\r\n\r\n* Space complexity: $$O(N2^N)$$\r\n  * There are $$O(2^N)$$ states, and we need $$O(N)$$ to store each state. In total, this algorithm requires $$O(2^N) \\times O(N) = O(N2^N)$$ space.\r\n\r\nHow can we improve our time complexity? Let's go to **Approach 2**.\r\n\r\n> This approach is _Time Limit Exceed_ and will be optimized in Approach 2 and 3.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 2: Dynamic Programming (Top-Down)\r\n\r\n**Intuition**\r\n\r\nWe are going to improve our naive DP approach.\r\n\r\n> If you haven't read the Approach 1 (the naive DP approach), it is recommended to read it first.\r\n>\r\n> If you are purely interested in the algorithm, you can jump to the algorithm section below.\r\n\r\nLet's dig deeper into the time complexity, which can be divided into two parts: `number_of_states` and `time_spent_on_each_state`.\r\n\r\nTherefore, generally, there are two approaches to decrease the time complexity.\r\n\r\n1. Decrease `number_of_states`.\r\n2. Decrease `time_spent_on_each_state`.\r\n\r\nHere, our `number_of_states` is $$O(2^N)$$, which is far larger than `time_spent_on_each_state`. As such, we may benefit more by considering how to reduce `number_of_states`. For this problem, a good target to reduce `number_of_states` to is $$O(N^2)$$.  This would reduce the total operations to $$N^2 \\times N = N^3 \\approx 1.25 * 10^8$$ which as mentioned before is close to the upper limit of operations that can be executed in a reasonable amount of time.\r\n\r\nWhat can we do to decrease `number_of_states`?\r\n\r\nAs you may remember, we can use `left` and `right` pointers to represent a subarray in the original array.\r\n\r\nIf we can use `dp(left, right)` to replace `dp(nums)`, then the problem is solved.\r\n\r\nBut our DP states are not continuous and are not always a subarray of `nums`. For example, we can burst many balloons in the middle.\r\n\r\n![Not Continuous](../Documents/312/312_not_continuous.drawio.svg)\r\n\r\nIs that really true? Do we have a workaround?\r\n\r\nTake a deeper look at what happens when we burst the first balloon.\r\n\r\n![First Burst](../Documents/312/312_first_burst.drawio.svg)\r\n\r\nIs there any continuous array? Yes! The burst balloon divides the original array into two **subarrays**.\r\n\r\nWe can recursively call the left subarray and the right subarray, and add the results together.\r\n\r\n```js\r\n// memo_dict is ignored for readability\r\n// return the maximum coins obtainable if we burst all balloons \r\n// in nums[left] ... nums[right], inclusively.\r\nfunction dp(left, right) {\r\n    // base case is ignored\r\n    max_coins = 0\r\n    for i in 1 ... nums.length - 2:\r\n        // burst nums[i]\r\n        gain = nums[i - 1] * nums[i] * nums[i + 1]\r\n        // burst remaining\r\n        remaining = dp(left, i - 1) + dp(i + 1, right)\r\n        max_coins = max(result, gain + remaining)\r\n    return max_coins\r\n}\r\n```\r\n\r\n>**Tip: Divide and Conquer**\r\n>\r\n>Here we divide the original array into two subarrays and then conquer them respectively. It is a perfect example of the Divide and Conquer algorithm.\r\n>\r\n>For details, check out [Wikipedia: Divide and Conquer](https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm)\r\n\r\n>**Tip: Inclusive or Not**\r\n>\r\n>Should `dp(left, right)` represent the maximum coins obtainable after bursting `[left, right]`, `[left, right)`, ..., or `(left, right)`?\r\n>\r\n>In other words, should we include the edge case?\r\n>\r\n>The answer is that all of them work. However, `[left, right]` may be easier to visualize, and `[left, right)` maybe easier to implement. Here, we choose `[left, right]`.\r\n\r\nWait! You may say, this code yields the wrong answer!\r\n\r\nOh. What happened?\r\n\r\nNote in this line\r\n\r\n```js\r\nremaining = dp(left, i - 1) + dp(i + 1, right)\r\n```\r\n\r\nInside the left part `dp(left, i - 1)`, when we burst the rightmost balloon (i.e., `i - 1`th), what will we gain?\r\n\r\n`nums[i - 2] * nums[i - 1] * nums[i]`? No, `nums[i]` has been burst, so `nums[i]` should be replaced by **some balloon** in the right part.\r\n\r\nBut exactly which one? Well...it seems it depends on the **order** of bursting balloons in the left part and in the right part.\r\n\r\n![Not Independent](../Documents/312/312_not_independent.drawio.svg)\r\n\r\nIn other words, `dp(left, i - 1)` and `dp(i + 1, right)` are not independent, and cannot be calculated separately.\r\n\r\nBad news. Our divide and conquer plan fails. Is there any way to fix this?\r\n\r\nWhat if...`nums[i]` has not burst? If we keep `nums[i]` alive **all the time**, then `nums[i - 2] * nums[i - 1] * nums[i]` always refers to the correct balloons, and the left part and right part are independent.\r\n\r\nHow to keep `nums[i]` alive **all the time**? Easy, just mark `nums[i]` as the **last** burst balloon among `[left, right]`.\r\n\r\n![Keep i](../Documents/312/312_keep_i.drawio.svg)\r\n\r\n>**Tip: Thinking Backwards**\r\n>\r\n>Instead of thinking of which one to burst **first**, we think of which one to burst **last**.\r\n>\r\n>Alternatively, you can reverse the whole process: instead of bursting the balloon, we add balloons to the empty array. This approach will result in the same code.\r\n\r\n##### Special Cases\r\n\r\nNow\u00a0our\u00a0time\u00a0complexity\u00a0is\u00a0$$O(N^3)$$.\u00a0Are\u00a0there\u00a0any\u00a0other rooms\u00a0to\u00a0optimize?\u00a0Note that if\u00a0the\u00a0array\u00a0has\u00a0some\u00a0special\u00a0properties,\u00a0we\u00a0may\u00a0be\u00a0able\u00a0to\u00a0calculate\u00a0the\u00a0result\u00a0very\u00a0fast.\r\n\r\nFor example, if all the numbers are the same, the answer is straight forward.\r\n\r\nLet `N` be the length of `nums`, and `a` be the element in `nums`. The coins we gain, no matter which one is burst, are always `a * a * a`, since all balloons are the same, except the last two balloons. For the last two balloons, one yields `a * a * 1`, and the other yields `1 * a * 1`.\r\n\r\nTherefore, we have `N-2` `a * a * a`, one `a * a * 1`, and one `1 * a * 1`. Adding together, we have `(N - 2) * a * a * a + a * a + a`.\r\n\r\nWe can improve the performance sightly by handling those special cases one by one. However, please notice that this optimization does not improve the time complexity and can not speed up too much if the input is highly randomized.\r\n\r\n>**Tip: Matrix-Chain Multiplication**\r\n>\r\n>In fact, this problem is a variant of a classical DP problem, Matrix-Chain Multiplication, where we need to find the most efficient way to multiply a given sequence of matrices. The main idea is the same as above: DP, Divide and Conquer, and Thinking Backwards.\r\n>\r\n>For details of Matrix-Chain Multiplication, check out [Wikipedia: Matrix Chain Multiplication](https://en.wikipedia.org/wiki/Matrix_chain_multiplication).\r\n\r\n**Algorithm**\r\n\r\n1. Handle the special cases (all numbers are the same) if you want.\r\n2. Add one balloon at the start of `nums` and one at the end to handle edge cases.\r\n3. Define a function `dp` to return the maximum coins obtainable, if we burst all balloons on the interval `[left, right]`, inclusively.\r\n\r\n     The base case is that the interval is empty, which yields 0 coin.\r\n     \r\n     For general cases, we iterate over every index `i` in `[left, right]`, and mark the balloon at that index as the **last** one burst.\r\n     \r\n     First, We burst all balloons expect the `i`th one. What we gain is:\r\n    \r\n     ```python\r\n     dp(left, i - 1) + dp(i + 1, right)\r\n     ```\r\n\t\r\n     Then, we burst the `i`th one:\r\n     \r\n     ```python\r\n     nums[left - 1] * nums[i] * nums[right + 1]\r\n     ```\r\n\t\r\n     Just return the maximum sum of those two among all possible `i`s.\r\n     \r\n4. Finally, return `dp(1, len(dp) - 2)`.\r\n\r\n     Do not return `dp(0, len(dp) - 1)` since the first and the last balloons were added by us and we cannot burst them.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/Y2kysycN/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Y2kysycN\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the number of balloons given.\r\n\r\n* Time complexity: $$O(N^3)$$. There are $$O(N^2)$$ states. For each state, determining the maximum coins requires iterating over all balloons in the range `[left, right]`.  Thus the total time complexity is $$O(N^2) \\times O(N) = O(N^3)$$.\r\n\r\n* Space complexity: $$O(N^2)$$. We need $$O(N^2)$$ to store all states, $$O(N)$$ for stacks to perform recursion, and $$O(N)$$ to store `[1] + nums + [1]`. In total, this algorithm requires $$O(N^2) + O(N) + O(N) = O(N^2)$$ space.\r\n\r\n</br>\r\n\r\n---\r\n\r\n#### Approach 3: Dynamic Programming (Bottom-Up)\r\n\r\n**Intuition**\r\n\r\nThe intuition is the same as Approach 1. Here, we use DP array and iteration to re-implement Approach 1.\r\n\r\nWhen iterating, we need to carefully arrange the order of iteration, such that `dp[left][i - 1]` and `dp[i + 1][right]` are iterated **before** `dp[left][right]`, where `left <= i <= right`.\r\n\r\nThis is important because in order to calculate `dp[left][right]`, we will use the results of `dp[left][i - 1]` and `dp[i + 1][right]`, where `left <= i <= right`.\r\n\r\nBut how arrange the order of iteration? Let's take a look at the DP table.\r\n\r\nSuppose we have added fake balloons to the beginning and the end of `nums`, and `n` is the length of the **new** `nums` array.\r\n\r\nWe only need the top-right triangle since we only need `dp[left][right]` where `left` will always be less than or equal to `right`.\r\n\r\n![DP Table](../Documents/312/312_dp_table.drawio.svg)\r\n\r\n(Here `left` is for rows and `right` is for columns, or you can use a transposed one. Either way works.)\r\n\r\nAlso, we cannot have `dp[0][j]` and `dp[i][n-1]`, where `0 <= i < n` and `0 <= j < n`, since we cannot burst the fake balloons that we added.\r\n\r\n![DP Table Inner](../Documents/312/312_dp_table_inner.drawio.svg)\r\n\r\nOkay, now let's consider `dp[left][right]`. `dp[left][i - 1]` and `dp[i + 1][right]` should be iterated before `dp[left][right]`, where `left <= i <= right`. Where are they?\r\n\r\n![DP Table Cell](../Documents/312/312_dp_table_cell.drawio.svg)\r\n\r\nNotice that `dp[left][right]` depends on the cells directly below it and the cells to its left. If we always iterate from the lowest or the leftmost cell, then we can ensure that `dp[left][i - 1]` and `dp[i + 1][right]` are calculated before `dp[left][right]`.\r\n\r\nThere are many ways to do that. One possible iteration path is given below.\r\n\r\n![DP Table Iterate](../Documents/312/312_dp_table_iterate.drawio.svg)\r\n\r\n**Algorithm**\r\n\r\n1. Handle the special cases (all numbers are the same) if you want.\r\n\r\n2. Add one balloon at the start of `nums` and one at the end to handle edge cases.\r\n\r\n3. Define an array `dp`, where `dp[left][right]` represents the maximum coins obtainable, if we burst all balloons on the interval `[left, right]`, inclusively.\r\n\r\n4. Iterate over the `dp` array such that `dp[left][i - 1]` and `dp[i + 1][right]` are visited before `dp[left][right]` is visited.\r\n  For `dp[left][right]`:\r\n\r\n    We iterate over every index `i` in the range `[left, right]`, and mark it as the **last** burst balloon.\r\n\r\n    First, we burst all balloons except the `i`th balloon. What we gain is:\r\n\r\n    ```python\r\n    dp[left][i - 1] + dp[i + 1][right]\r\n    ```\r\n\r\n    Then, we burst the `i`th balloon and gain:\r\n\r\n    ```python\r\n    nums[left - 1] * nums[i] * nums[right + 1]\r\n    ```\r\n\r\n    Let `dp[left][right]` be the maximum sum of these two values among all possible `i`s.\r\n\r\n5. Finally, return `dp[1][len(nums) - 2]`.\r\n\r\n   Note: Do not return `dp[0][len(nums) - 1]` because the first and the last balloons were added by us and we cannot be popped.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/JNP6zpza/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"JNP6zpza\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\nLet $$N$$ be the number of balloons given.\r\n\r\n* Time complexity: $$O(N^3)$$. There are $$O(N^2)$$ states. For each state, determining the maximum coins requires iterating over all balloons in the range `[left, right]`, giving $$O(N^2) \\times O(N) = O(N^3)$$.\r\n\r\n* Space complexity: $$O(N^2)$$. We need $$O(N^2)$$ to store `dp`, and $$O(N)$$ to store `[1] + nums + [1]` (if fake balloons are added). In total, we need $$O(N^2) + O(N) + O(N) = O(N^2)$$ space.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "burst-balloons",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 5,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some classic Dynamic Programming interview questions.\n\nWe recommend: Best Time to Buy and Sell Stock with Cooldown and Word Break.\n\nBurst Balloons is a great problem too, highly recommended for the more advanced level."
    },
    {
        "id": "122",
        "title": "Design",
        "slug": "design",
        "items": [
            {
                "id": "867",
                "title": "LRU Cache",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 122,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "146",
                    "questionFrontendId": "146",
                    "sessionId": "968792",
                    "questionTitle": "LRU Cache",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/lru-cache/submit/",
                    "interpretUrl": "/problems/lru-cache/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class LRUCache {\\npublic:\\n    LRUCache(int capacity) {\\n        \\n    }\\n    \\n    int get(int key) {\\n        \\n    }\\n    \\n    void put(int key, int value) {\\n        \\n    }\\n};\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache* obj = new LRUCache(capacity);\\n * int param_1 = obj->get(key);\\n * obj->put(key,value);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int get(int key) {\\n        \\n    }\\n    \\n    public void put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.get(key);\\n * obj.put(key,value);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class LRUCache(object):\\n\\n    def __init__(self, capacity):\\n        \\\"\\\"\\\"\\n        :type capacity: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def get(self, key):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def put(self, key, value):\\n        \\\"\\\"\\\"\\n        :type key: int\\n        :type value: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class LRUCache:\\n\\n    def __init__(self, capacity: int):\\n        \\n\\n    def get(self, key: int) -> int:\\n        \\n\\n    def put(self, key: int, value: int) -> None:\\n        \\n\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key,value)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} LRUCache;\\n\\n\\nLRUCache* lRUCacheCreate(int capacity) {\\n    \\n}\\n\\nint lRUCacheGet(LRUCache* obj, int key) {\\n  \\n}\\n\\nvoid lRUCachePut(LRUCache* obj, int key, int value) {\\n  \\n}\\n\\nvoid lRUCacheFree(LRUCache* obj) {\\n    \\n}\\n\\n/**\\n * Your LRUCache struct will be instantiated and called as such:\\n * LRUCache* obj = lRUCacheCreate(capacity);\\n * int param_1 = lRUCacheGet(obj, key);\\n \\n * lRUCachePut(obj, key, value);\\n \\n * lRUCacheFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class LRUCache {\\n\\n    public LRUCache(int capacity) {\\n        \\n    }\\n    \\n    public int Get(int key) {\\n        \\n    }\\n    \\n    public void Put(int key, int value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * LRUCache obj = new LRUCache(capacity);\\n * int param_1 = obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number} capacity\\n */\\nvar LRUCache = function(capacity) {\\n    \\n};\\n\\n/** \\n * @param {number} key\\n * @return {number}\\n */\\nLRUCache.prototype.get = function(key) {\\n    \\n};\\n\\n/** \\n * @param {number} key \\n * @param {number} value\\n * @return {void}\\n */\\nLRUCache.prototype.put = function(key, value) {\\n    \\n};\\n\\n/** \\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class LRUCache\\n\\n=begin\\n    :type capacity: Integer\\n=end\\n    def initialize(capacity)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :rtype: Integer\\n=end\\n    def get(key)\\n        \\n    end\\n\\n\\n=begin\\n    :type key: Integer\\n    :type value: Integer\\n    :rtype: Void\\n=end\\n    def put(key, value)\\n        \\n    end\\n\\n\\nend\\n\\n# Your LRUCache object will be instantiated and called as such:\\n# obj = LRUCache.new(capacity)\\n# param_1 = obj.get(key)\\n# obj.put(key, value)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass LRUCache {\\n\\n    init(_ capacity: Int) {\\n        \\n    }\\n    \\n    func get(_ key: Int) -> Int {\\n        \\n    }\\n    \\n    func put(_ key: Int, _ value: Int) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache(capacity)\\n * let ret_1: Int = obj.get(key)\\n * obj.put(key, value)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type LRUCache struct {\\n    \\n}\\n\\n\\nfunc Constructor(capacity int) LRUCache {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Get(key int) int {\\n    \\n}\\n\\n\\nfunc (this *LRUCache) Put(key int, value int)  {\\n    \\n}\\n\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * obj := Constructor(capacity);\\n * param_1 := obj.Get(key);\\n * obj.Put(key,value);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class LRUCache(_capacity: Int) {\\n\\n    def get(key: Int): Int = {\\n        \\n    }\\n\\n    def put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class LRUCache(capacity: Int) {\\n\\n    fun get(key: Int): Int {\\n        \\n    }\\n\\n    fun put(key: Int, value: Int) {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct LRUCache {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl LRUCache {\\n\\n    fn new(capacity: i32) -> Self {\\n        \\n    }\\n    \\n    fn get(&self, key: i32) -> i32 {\\n        \\n    }\\n    \\n    fn put(&self, key: i32, value: i32) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * let obj = LRUCache::new(capacity);\\n * let ret_1: i32 = obj.get(key);\\n * obj.put(key, value);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class LRUCache {\\n    /**\\n     * @param Integer $capacity\\n     */\\n    function __construct($capacity) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @return Integer\\n     */\\n    function get($key) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $key\\n     * @param Integer $value\\n     * @return NULL\\n     */\\n    function put($key, $value) {\\n        \\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * $obj = LRUCache($capacity);\\n * $ret_1 = $obj->get($key);\\n * $obj->put($key, $value);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class LRUCache {\\n    constructor(capacity: number) {\\n\\n    }\\n\\n    get(key: number): number {\\n\\n    }\\n\\n    put(key: number, value: number): void {\\n\\n    }\\n}\\n\\n/**\\n * Your LRUCache object will be instantiated and called as such:\\n * var obj = new LRUCache(capacity)\\n * var param_1 = obj.get(key)\\n * obj.put(key,value)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define lru-cache%\\n  (class object%\\n    (super-new)\\n\\n    ; capacity : exact-integer?\\n    (init-field\\n      capacity)\\n    \\n    ; get : exact-integer? -> exact-integer?\\n    (define/public (get key)\\n\\n      )\\n    ; put : exact-integer? exact-integer? -> void?\\n    (define/public (put key value)\\n\\n      )))\\n\\n;; Your lru-cache% object will be instantiated and called as such:\\n;; (define obj (new lru-cache% [capacity capacity]))\\n;; (define param_1 (send obj get key))\\n;; (send obj put key value)\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec lru_cache_init_(Capacity :: integer()) -> any().\\nlru_cache_init_(Capacity) ->\\n  .\\n\\n-spec lru_cache_get(Key :: integer()) -> integer().\\nlru_cache_get(Key) ->\\n  .\\n\\n-spec lru_cache_put(Key :: integer(), Value :: integer()) -> any().\\nlru_cache_put(Key, Value) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% lru_cache_init_(Capacity),\\n%% Param_1 = lru_cache_get(Key),\\n%% lru_cache_put(Key, Value),\\n\\n%% lru_cache_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule LRUCache do\\n  @spec init_(capacity :: integer) :: any\\n  def init_(capacity) do\\n\\n  end\\n\\n  @spec get(key :: integer) :: integer\\n  def get(key) do\\n\\n  end\\n\\n  @spec put(key :: integer, value :: integer) :: any\\n  def put(key, value) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# LRUCache.init_(capacity)\\n# param_1 = LRUCache.get(key)\\n# LRUCache.put(key, value)\\n\\n# LRUCache.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]",
                    "enableTestMode": false,
                    "metaData": "{\n    \"classname\": \"LRUCache\",\n    \"maxbytesperline\": 200000,\n    \"constructor\": {\n        \"params\": [\n            {\n                \"type\": \"integer\",\n                \"name\": \"capacity\"\n            }\n        ]\n    },\n    \"methods\": [\n        {\n            \"name\" : \"get\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"integer\"\n            }\n        },\n        {\n            \"name\" : \"put\",\n            \"params\": [\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"key\"\n                },\n                {\n                    \"type\": \"integer\",\n                    \"name\": \"value\"\n                }\n            ],\n            \"return\": {\n                \"type\": \"void\"\n            }\n        }\n    ],\n    \"systemdesign\": true,\n    \"params\": [\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        },\n        {\n            \"name\": \"inputs\",\n            \"type\": \"integer[]\"\n        }\n    ],\n    \"return\": {\n        \"type\": \"list<String>\",\n        \"dealloc\": true\n    }\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Design a data structure that follows the constraints of a <strong><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\" target=\"_blank\">Least Recently Used (LRU) cache</a></strong>.</p>\n\n<p>Implement the <code>LRUCache</code> class:</p>\n\n<ul>\n\t<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>\n\t<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>-1</code>.</li>\n\t<li><code>void put(int key, int value)</code>&nbsp;Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>\n</ul>\n\n<p>The functions&nbsp;<code data-stringify-type=\"code\">get</code>&nbsp;and&nbsp;<code data-stringify-type=\"code\">put</code>&nbsp;must each run in <code>O(1)</code> average time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n<strong>Output</strong>\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\n<strong>Explanation</strong>\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= capacity &lt;= 3000</code></li>\n\t<li><code>0 &lt;= key &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= value &lt;= 10<sup>5</sup></code></li>\n\t<li>At most 2<code>&nbsp;* 10<sup>5</sup></code>&nbsp;calls will be made to <code>get</code> and <code>put</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "LRU Cache",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Ordered dictionary\n\n**Intuition**\n\nWe're asked to implement [the structure](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) \nwhich provides the following operations in $$\\mathcal{O}(1)$$ time :\n\n- Get the key / Check if the key exists \n\n- Put the key\n\n- Delete the first added key\n\nThe first two operations in $$\\mathcal{O}(1)$$ time are provided \nby the standard hashmap, and the last one - by linked list.\n\n> There is a structure called _ordered dictionary_, it combines \nbehind both hashmap and linked list. In Python this structure is called\n[_OrderedDict_](https://docs.python.org/3/library/collections.html#collections.OrderedDict)\nand in Java [_LinkedHashMap_](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html).\n\nLet's use this structure here.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/hfQBGVXK/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"hfQBGVXK\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get` since all operations with\nordered dictionary : `get/in/set/move_to_end/popitem` \n(`get/containsKey/put/remove`) are done in a constant time.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for an ordered dictionary with at most `capacity + 1` elements.\n<br />\n<br />\n\n\n---\n#### Approach 2: Hashmap + DoubleLinkedList\n\n**Intuition**\n\nThis Java solution is an extended version of the \n[the article published on the Discuss forum](https://leetcode.com/problems/lru-cache/discuss/45911/Java-Hashtable-%2B-Double-linked-list-(with-a-touch-of-pseudo-nodes)).\n\nThe problem can be solved with a hashmap\nthat keeps track of the keys and its values in the double linked list. \nThat results in $$\\mathcal{O}(1)$$ time for `put` and `get` operations and\nallows to remove the first added node in $$\\mathcal{O}(1)$$ time as well.\n\n![compute](../Figures/146/structure.png)\n\nOne advantage of _double_ linked list is that the node can remove itself without other reference. \nIn addition, it takes constant time to add and remove nodes from the head or tail.\n\nOne particularity about the double linked list implemented here\nis that there are _pseudo head_ and _pseudo tail_ to mark the boundary, \nso that we don't need to check the `null` node during the update. \n\n![compute](../Figures/146/new_node.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/dcSrw233/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dcSrw233\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(1)$$ both for `put`\nand `get`.\n \n* Space complexity : $$\\mathcal{O}(capacity)$$ since the \nspace is used only for a hashmap and double linked list \nwith at most `capacity + 1` elements.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "lru-cache",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.763,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "868",
                "title": "Implement Trie (Prefix Tree)",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 122,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "208",
                    "questionFrontendId": "208",
                    "sessionId": "968792",
                    "questionTitle": "Implement Trie (Prefix Tree)",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/implement-trie-prefix-tree/submit/",
                    "interpretUrl": "/problems/implement-trie-prefix-tree/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Trie {\\npublic:\\n    /** Initialize your data structure here. */\\n    Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    void insert(string word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    bool search(string word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    bool startsWith(string prefix) {\\n        \\n    }\\n};\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie* obj = new Trie();\\n * obj->insert(word);\\n * bool param_2 = obj->search(word);\\n * bool param_3 = obj->startsWith(prefix);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Trie {\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void insert(String word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public boolean search(String word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public boolean startsWith(String prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.insert(word);\\n * boolean param_2 = obj.search(word);\\n * boolean param_3 = obj.startsWith(prefix);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Trie(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, word):\\n        \\\"\\\"\\\"\\n        Inserts a word into the trie.\\n        :type word: str\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def search(self, word):\\n        \\\"\\\"\\\"\\n        Returns if the word is in the trie.\\n        :type word: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n    def startsWith(self, prefix):\\n        \\\"\\\"\\\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        :type prefix: str\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Trie:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def insert(self, word: str) -> None:\\n        \\\"\\\"\\\"\\n        Inserts a word into the trie.\\n        \\\"\\\"\\\"\\n        \\n\\n    def search(self, word: str) -> bool:\\n        \\\"\\\"\\\"\\n        Returns if the word is in the trie.\\n        \\\"\\\"\\\"\\n        \\n\\n    def startsWith(self, prefix: str) -> bool:\\n        \\\"\\\"\\\"\\n        Returns if there is any word in the trie that starts with the given prefix.\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.startsWith(prefix)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} Trie;\\n\\n/** Initialize your data structure here. */\\n\\nTrie* trieCreate() {\\n    \\n}\\n\\n/** Inserts a word into the trie. */\\nvoid trieInsert(Trie* obj, char * word) {\\n  \\n}\\n\\n/** Returns if the word is in the trie. */\\nbool trieSearch(Trie* obj, char * word) {\\n  \\n}\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nbool trieStartsWith(Trie* obj, char * prefix) {\\n  \\n}\\n\\nvoid trieFree(Trie* obj) {\\n    \\n}\\n\\n/**\\n * Your Trie struct will be instantiated and called as such:\\n * Trie* obj = trieCreate();\\n * trieInsert(obj, word);\\n \\n * bool param_2 = trieSearch(obj, word);\\n \\n * bool param_3 = trieStartsWith(obj, prefix);\\n \\n * trieFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Trie {\\n\\n    /** Initialize your data structure here. */\\n    public Trie() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    public void Insert(string word) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    public bool Search(string word) {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    public bool StartsWith(string prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * Trie obj = new Trie();\\n * obj.Insert(word);\\n * bool param_2 = obj.Search(word);\\n * bool param_3 = obj.StartsWith(prefix);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * Initialize your data structure here.\\n */\\nvar Trie = function() {\\n    \\n};\\n\\n/**\\n * Inserts a word into the trie. \\n * @param {string} word\\n * @return {void}\\n */\\nTrie.prototype.insert = function(word) {\\n    \\n};\\n\\n/**\\n * Returns if the word is in the trie. \\n * @param {string} word\\n * @return {boolean}\\n */\\nTrie.prototype.search = function(word) {\\n    \\n};\\n\\n/**\\n * Returns if there is any word in the trie that starts with the given prefix. \\n * @param {string} prefix\\n * @return {boolean}\\n */\\nTrie.prototype.startsWith = function(prefix) {\\n    \\n};\\n\\n/** \\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class Trie\\n\\n=begin\\n    Initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    Inserts a word into the trie.\\n    :type word: String\\n    :rtype: Void\\n=end\\n    def insert(word)\\n        \\n    end\\n\\n\\n=begin\\n    Returns if the word is in the trie.\\n    :type word: String\\n    :rtype: Boolean\\n=end\\n    def search(word)\\n        \\n    end\\n\\n\\n=begin\\n    Returns if there is any word in the trie that starts with the given prefix.\\n    :type prefix: String\\n    :rtype: Boolean\\n=end\\n    def starts_with(prefix)\\n        \\n    end\\n\\n\\nend\\n\\n# Your Trie object will be instantiated and called as such:\\n# obj = Trie.new()\\n# obj.insert(word)\\n# param_2 = obj.search(word)\\n# param_3 = obj.starts_with(prefix)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass Trie {\\n\\n    /** Initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    func insert(_ word: String) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    func search(_ word: String) -> Bool {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    func startsWith(_ prefix: String) -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie()\\n * obj.insert(word)\\n * let ret_2: Bool = obj.search(word)\\n * let ret_3: Bool = obj.startsWith(prefix)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type Trie struct {\\n    \\n}\\n\\n\\n/** Initialize your data structure here. */\\nfunc Constructor() Trie {\\n    \\n}\\n\\n\\n/** Inserts a word into the trie. */\\nfunc (this *Trie) Insert(word string)  {\\n    \\n}\\n\\n\\n/** Returns if the word is in the trie. */\\nfunc (this *Trie) Search(word string) bool {\\n    \\n}\\n\\n\\n/** Returns if there is any word in the trie that starts with the given prefix. */\\nfunc (this *Trie) StartsWith(prefix string) bool {\\n    \\n}\\n\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.Insert(word);\\n * param_2 := obj.Search(word);\\n * param_3 := obj.StartsWith(prefix);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class Trie() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a word into the trie. */\\n    def insert(word: String) {\\n        \\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    def search(word: String): Boolean = {\\n        \\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    def startsWith(prefix: String): Boolean = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Trie() {\\n\\n    /** Initialize your data structure here. */\\n    \\n\\n    /** Inserts a word into the trie. */\\n    fun insert(word: String) {\\n        \\n    }\\n\\n    /** Returns if the word is in the trie. */\\n    fun search(word: String): Boolean {\\n        \\n    }\\n\\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fun startsWith(prefix: String): Boolean {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct Trie {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl Trie {\\n\\n    /** Initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    /** Inserts a word into the trie. */\\n    fn insert(&self, word: String) {\\n        \\n    }\\n    \\n    /** Returns if the word is in the trie. */\\n    fn search(&self, word: String) -> bool {\\n        \\n    }\\n    \\n    /** Returns if there is any word in the trie that starts with the given prefix. */\\n    fn starts_with(&self, prefix: String) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * let obj = Trie::new();\\n * obj.insert(word);\\n * let ret_2: bool = obj.search(word);\\n * let ret_3: bool = obj.starts_with(prefix);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Trie {\\n    /**\\n     * Initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * Inserts a word into the trie.\\n     * @param String $word\\n     * @return NULL\\n     */\\n    function insert($word) {\\n        \\n    }\\n  \\n    /**\\n     * Returns if the word is in the trie.\\n     * @param String $word\\n     * @return Boolean\\n     */\\n    function search($word) {\\n        \\n    }\\n  \\n    /**\\n     * Returns if there is any word in the trie that starts with the given prefix.\\n     * @param String $prefix\\n     * @return Boolean\\n     */\\n    function startsWith($prefix) {\\n        \\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * $obj = Trie();\\n * $obj->insert($word);\\n * $ret_2 = $obj->search($word);\\n * $ret_3 = $obj->startsWith($prefix);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class Trie {\\n    constructor() {\\n\\n    }\\n\\n    insert(word: string): void {\\n\\n    }\\n\\n    search(word: string): boolean {\\n\\n    }\\n\\n    startsWith(prefix: string): boolean {\\n\\n    }\\n}\\n\\n/**\\n * Your Trie object will be instantiated and called as such:\\n * var obj = new Trie()\\n * obj.insert(word)\\n * var param_2 = obj.search(word)\\n * var param_3 = obj.startsWith(prefix)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define trie%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; insert : string? -> void?\\n    (define/public (insert word)\\n\\n      )\\n    ; search : string? -> boolean?\\n    (define/public (search word)\\n\\n      )\\n    ; starts-with : string? -> boolean?\\n    (define/public (starts-with prefix)\\n\\n      )))\\n\\n;; Your trie% object will be instantiated and called as such:\\n;; (define obj (new trie%))\\n;; (send obj insert word)\\n;; (define param_2 (send obj search word))\\n;; (define param_3 (send obj starts-with prefix))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec trie_init_() -> any().\\ntrie_init_() ->\\n  .\\n\\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\\ntrie_insert(Word) ->\\n  .\\n\\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\\ntrie_search(Word) ->\\n  .\\n\\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\\ntrie_starts_with(Prefix) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% trie_init_(),\\n%% trie_insert(Word),\\n%% Param_2 = trie_search(Word),\\n%% Param_3 = trie_starts_with(Prefix),\\n\\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Trie do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec insert(word :: String.t) :: any\\n  def insert(word) do\\n\\n  end\\n\\n  @spec search(word :: String.t) :: boolean\\n  def search(word) do\\n\\n  end\\n\\n  @spec starts_with(prefix :: String.t) :: boolean\\n  def starts_with(prefix) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# Trie.init_()\\n# Trie.insert(word)\\n# param_2 = Trie.search(word)\\n# param_3 = Trie.starts_with(prefix)\\n\\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"Trie\",\r\n    \"maxbytesperline\": 210000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n        ],\r\n        \"comment\": \"Initialize your data structure here.\"\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"insert\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            },\r\n            \"comment\": \"Inserts a word into the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"search\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"word\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if the word is in the trie.\"\r\n        },\r\n        {\r\n            \"name\" : \"startsWith\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"string\",\r\n                    \"name\": \"prefix\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"boolean\"\r\n            },\r\n            \"comment\": \"Returns if there is any word in the trie that starts with the given prefix.\"\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as &quot;try&quot;) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]\n[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // return True\ntrie.search(&quot;app&quot;);     // return False\ntrie.startsWith(&quot;app&quot;); // return True\ntrie.insert(&quot;app&quot;);\ntrie.search(&quot;app&quot;);     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Implement Trie (Prefix Tree)",
                        "content": "[TOC]\r\n\r\n## Summary\r\nThis article is for intermediate level users. It introduces the following ideas:\r\nThe data structure Trie (Prefix tree) and most common operations with it.\r\n\r\n## Solution\r\n\r\n#### Applications\r\n\r\nTrie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.\r\nThere are various applications of this very efficient data structure such as :\r\n\r\n##### 1. [Autocomplete](https://en.wikipedia.org/wiki/Autocomplete)\r\n\r\n![Google Suggest](https://leetcode.com/media/original_images/208_GoogleSuggest.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 1. Google Suggest in action.*\r\n{:align=\"center\"}\r\n\r\n##### 2. [Spell checker](https://en.wikipedia.org/wiki/Spell_checker)\r\n\r\n![Spell Checker](https://leetcode.com/media/original_images/208_SpellCheck.png){:width=\"400px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 2. A spell checker used in word processor.*\r\n{:align=\"center\"}\r\n\r\n##### 3. [IP routing (Longest prefix matching)](https://en.wikipedia.org/wiki/Longest_prefix_match)\r\n\r\n![IP Routing](https://leetcode.com/media/original_images/208_IPRouting.gif){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table.*\r\n{:align=\"center\"}\r\n\r\n##### 4. [T9 predictive text](https://en.wikipedia.org/wiki/T9_(predictive_text))\r\n\r\n![T9 Predictive Text](https://leetcode.com/media/original_images/208_T9.jpg)\r\n{:align=\"center\"}\r\n\r\n*Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.*\r\n{:align=\"center\"}\r\n\r\n##### 5. [Solving word games](https://en.wikipedia.org/wiki/Boggle)\r\n\r\n![Boggle](https://leetcode.com/media/original_images/208_Boggle.png){:width=\"350px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 5. Tries is used to solve Boggle efficiently by pruning the search space.*\r\n{:align=\"center\"}\r\n\r\nThere are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie?\r\nAlthough hash table has $$O(1)$$ time complexity for looking for a key, it is not efficient in the following operations :\r\n\r\n* Finding all keys with a common prefix.\r\n* Enumerating a dataset of strings in lexicographical order.\r\n\r\nAnother reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to $$O(n)$$, where $$n$$ is the number of keys inserted.\r\nTrie could use less space compared to Hash Table when storing many keys with the same prefix.\r\nIn this case using trie has only $$O(m)$$ time complexity, where $$m$$ is the key length.\r\nSearching for a key in a balanced tree costs  $$O(m \\log n)$$ time complexity.\r\n\r\n#### Trie node structure\r\n\r\nTrie is a rooted tree. Its nodes have the following fields:\r\n\r\n* Maximum of $$R$$ links to its children, where each link corresponds to one of $$R$$ character values from dataset alphabet.\r\nIn this article we assume that $$R$$ is 26, the number of lowercase latin letters.\r\n* Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.\r\n\r\n![Representation of a key in trie](https://leetcode.com/media/original_images/208_Node.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 6. Representation of a key \"leet\" in trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass TrieNode {\r\n\r\n    // R links to node children\r\n    private TrieNode[] links;\r\n\r\n    private final int R = 26;\r\n\r\n    private boolean isEnd;\r\n\r\n    public TrieNode() {\r\n        links = new TrieNode[R];\r\n    }\r\n\r\n    public boolean containsKey(char ch) {\r\n        return links[ch -'a'] != null;\r\n    }\r\n    public TrieNode get(char ch) {\r\n        return links[ch -'a'];\r\n    }\r\n    public void put(char ch, TrieNode node) {\r\n        links[ch -'a'] = node;\r\n    }\r\n    public void setEnd() {\r\n        isEnd = true;\r\n    }\r\n    public boolean isEnd() {\r\n        return isEnd;\r\n    }\r\n}\r\n```\r\n\r\nTwo of the most common operations in a trie are insertion of a key and search for a key.\r\n\r\n#### Insertion of a key to a trie\r\n\r\nWe insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :\r\n\r\n* A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.\r\n* A link does not exist. Then we create a new node and link it with the parent's link matching the current key character.\r\nWe repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.\r\n\r\n![Insertion of keys into a trie](https://leetcode.com/media/original_images/208_TrieInsert.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 7. Insertion of keys into a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n```java\r\nclass Trie {\r\n    private TrieNode root;\r\n\r\n    public Trie() {\r\n        root = new TrieNode();\r\n    }\r\n\r\n    // Inserts a word into the trie.\r\n    public void insert(String word) {\r\n        TrieNode node = root;\r\n        for (int i = 0; i < word.length(); i++) {\r\n            char currentChar = word.charAt(i);\r\n            if (!node.containsKey(currentChar)) {\r\n                node.put(currentChar, new TrieNode());\r\n            }\r\n            node = node.get(currentChar);\r\n        }\r\n        node.setEnd();\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$, where m is the key length.\r\n\r\nIn each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only $$m$$ operations.\r\n\r\n* Space complexity : $$O(m)$$.\r\n\r\nIn the worst case newly inserted key doesn't share a prefix with the the keys already inserted in the trie. We have to add $$m$$\r\nnew nodes, which takes us  $$O(m)$$ space.\r\n\r\n#### Search for a key in a trie\r\n\r\nEach key is represented in the trie as a path from the root to the internal node or leaf.\r\nWe start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :\r\n\r\n* A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.\r\n* A link does not exist. If there are no available key characters and current node is marked as `isEnd` we return true. Otherwise there are possible two cases in each of them we return false :\r\n\r\n    * There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.\r\n    * No key characters left, but current node is not marked as `isEnd`. Therefore the search key is only a prefix of another key in the trie.\r\n\r\n![Search of a key in a trie](https://leetcode.com/media/original_images/208_TrieSearchKey.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 8. Search for a key in a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass Trie {\r\n    ...\r\n\r\n    // search a prefix or whole key in trie and\r\n    // returns the node where search ends\r\n    private TrieNode searchPrefix(String word) {\r\n        TrieNode node = root;\r\n        for (int i = 0; i < word.length(); i++) {\r\n           char curLetter = word.charAt(i);\r\n           if (node.containsKey(curLetter)) {\r\n               node = node.get(curLetter);\r\n           } else {\r\n               return null;\r\n           }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    // Returns if the word is in the trie.\r\n    public boolean search(String word) {\r\n       TrieNode node = searchPrefix(word);\r\n       return node != null && node.isEnd();\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$\r\nIn each step of the algorithm we search for the next key character. In the worst case the algorithm performs $$m$$ operations.\r\n\r\n* Space complexity : $$O(1)$$\r\n\r\n#### Search for a key prefix in a trie\r\n\r\nThe approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above `search for a key` algorithm is that when we come to an end of the key prefix, we always return true. We don't need to consider the `isEnd` mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.\r\n\r\n![Search of a key prefix in a trie](https://leetcode.com/media/original_images/208_TrieSearchPrefix.png){:width=\"539px\"}\r\n{:align=\"center\"}\r\n\r\n*Figure 9. Search for a key prefix in a trie.*\r\n{:align=\"center\"}\r\n\r\n**Java**\r\n\r\n```java\r\nclass Trie {\r\n    ...\r\n\r\n    // Returns if there is any word in the trie\r\n    // that starts with the given prefix.\r\n    public boolean startsWith(String prefix) {\r\n        TrieNode node = searchPrefix(prefix);\r\n        return node != null;\r\n    }\r\n}\r\n```\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$O(m)$$\r\n\r\n* Space complexity : $$O(1)$$\r\n\r\n## Practice Problems\r\n\r\nHere are some wonderful problems for you to practice which uses the Trie data structure.\r\n\r\n1. [Add and Search Word - Data structure design](https://leetcode.com/problems/add-and-search-word-data-structure-design/) - Pretty much a direct application of Trie.\r\n2. [Word Search II](https://leetcode.com/problems/word-search-ii/) - Similar to Boggle.\r\n\r\nAnalysis written by: @elmirap.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "implement-trie-prefix-tree",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.924,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "869",
                "title": "Flatten Nested List Iterator",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 122,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "341",
                    "questionFrontendId": "341",
                    "sessionId": "968792",
                    "questionTitle": "Flatten Nested List Iterator",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/flatten-nested-list-iterator/submit/",
                    "interpretUrl": "/problems/flatten-nested-list-iterator/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *   public:\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool isInteger() const;\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     int getInteger() const;\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     const vector<NestedInteger> &getList() const;\\n * };\\n */\\n\\nclass NestedIterator {\\npublic:\\n    NestedIterator(vector<NestedInteger> &nestedList) {\\n        \\n    }\\n    \\n    int next() {\\n        \\n    }\\n    \\n    bool hasNext() {\\n        \\n    }\\n};\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * NestedIterator i(nestedList);\\n * while (i.hasNext()) cout << i.next();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * public interface NestedInteger {\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public boolean isInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     public Integer getInteger();\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return empty list if this NestedInteger holds a single integer\\n *     public List<NestedInteger> getList();\\n * }\\n */\\npublic class NestedIterator implements Iterator<Integer> {\\n\\n    public NestedIterator(List<NestedInteger> nestedList) {\\n        \\n    }\\n\\n    @Override\\n    public Integer next() {\\n        \\n    }\\n\\n    @Override\\n    public boolean hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * NestedIterator i = new NestedIterator(nestedList);\\n * while (i.hasNext()) v[f()] = i.next();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger(object):\\n#    def isInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        :rtype bool\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self):\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        :rtype int\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self):\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        :rtype List[NestedInteger]\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator(object):\\n\\n    def __init__(self, nestedList):\\n        \\\"\\\"\\\"\\n        Initialize your data structure here.\\n        :type nestedList: List[NestedInteger]\\n        \\\"\\\"\\\"\\n        \\n\\n    def next(self):\\n        \\\"\\\"\\\"\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n    def hasNext(self):\\n        \\\"\\\"\\\"\\n        :rtype: bool\\n        \\\"\\\"\\\"\\n        \\n\\n# Your NestedIterator object will be instantiated and called as such:\\n# i, v = NestedIterator(nestedList), []\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"# \\\"\\\"\\\"\\n# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n# \\\"\\\"\\\"\\n#class NestedInteger:\\n#    def isInteger(self) -> bool:\\n#        \\\"\\\"\\\"\\n#        @return True if this NestedInteger holds a single integer, rather than a nested list.\\n#        \\\"\\\"\\\"\\n#\\n#    def getInteger(self) -> int:\\n#        \\\"\\\"\\\"\\n#        @return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return None if this NestedInteger holds a nested list\\n#        \\\"\\\"\\\"\\n#\\n#    def getList(self) -> [NestedInteger]:\\n#        \\\"\\\"\\\"\\n#        @return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return None if this NestedInteger holds a single integer\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator:\\n    def __init__(self, nestedList: [NestedInteger]):\\n        \\n    \\n    def next(self) -> int:\\n        \\n    \\n    def hasNext(self) -> bool:\\n         \\n\\n# Your NestedIterator object will be instantiated and called as such:\\n# i, v = NestedIterator(nestedList), []\\n# while i.hasNext(): v.append(i.next())\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"/**\\n * *********************************************************************\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * *********************************************************************\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * bool NestedIntegerIsInteger(struct NestedInteger *);\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * int NestedIntegerGetInteger(struct NestedInteger *);\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * struct NestedInteger **NestedIntegerGetList(struct NestedInteger *);\\n *\\n * // Return the nested list's size that this NestedInteger holds, if it holds a nested list\\n * // The result is undefined if this NestedInteger holds a single integer\\n * int NestedIntegerGetListSize(struct NestedInteger *);\\n * };\\n */\\nstruct NestedIterator {\\n    \\n};\\n\\nstruct NestedIterator *nestedIterCreate(struct NestedInteger** nestedList, int nestedListSize) {\\n    \\n}\\n\\nbool nestedIterHasNext(struct NestedIterator *iter) {\\n    \\n}\\n\\nint nestedIterNext(struct NestedIterator *iter) {\\n    \\n}\\n\\n/** Deallocates memory previously allocated for the iterator */\\nvoid nestedIterFree(struct NestedIterator *iter) {\\n    \\n}\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * struct NestedIterator *i = nestedIterCreate(nestedList, nestedListSize);\\n * while (nestedIterHasNext(i)) printf(\\\"%d\\\\n\\\", nestedIterNext(i));\\n * nestedIterFree(i);\\n */\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * interface NestedInteger {\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     bool IsInteger();\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     int GetInteger();\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     IList<NestedInteger> GetList();\\n * }\\n */\\npublic class NestedIterator {\\n\\n    public NestedIterator(IList<NestedInteger> nestedList) {\\n        \\n    }\\n\\n    public bool HasNext() {\\n        \\n    }\\n\\n    public int Next() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * NestedIterator i = new NestedIterator(nestedList);\\n * while (i.HasNext()) v[f()] = i.Next();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * function NestedInteger() {\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     @return {boolean}\\n *     this.isInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     @return {integer}\\n *     this.getInteger = function() {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     Return null if this NestedInteger holds a single integer\\n *     @return {NestedInteger[]}\\n *     this.getList = function() {\\n *         ...\\n *     };\\n * };\\n */\\n/**\\n * @constructor\\n * @param {NestedInteger[]} nestedList\\n */\\nvar NestedIterator = function(nestedList) {\\n    \\n};\\n\\n\\n/**\\n * @this NestedIterator\\n * @returns {boolean}\\n */\\nNestedIterator.prototype.hasNext = function() {\\n    \\n};\\n\\n/**\\n * @this NestedIterator\\n * @returns {integer}\\n */\\nNestedIterator.prototype.next = function() {\\n    \\n};\\n\\n/**\\n * Your NestedIterator will be called like this:\\n * var i = new NestedIterator(nestedList), a = [];\\n * while (i.hasNext()) a.push(i.next());\\n*/\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# This is the interface that allows for creating nested lists.\\n# You should not implement it, or speculate about its implementation\\n#\\n#class NestedInteger\\n#    def is_integer()\\n#        \\\"\\\"\\\"\\n#        Return true if this NestedInteger holds a single integer, rather than a nested list.\\n#        @return {Boolean}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_integer()\\n#        \\\"\\\"\\\"\\n#        Return the single integer that this NestedInteger holds, if it holds a single integer\\n#        Return nil if this NestedInteger holds a nested list\\n#        @return {Integer}\\n#        \\\"\\\"\\\"\\n#\\n#    def get_list()\\n#        \\\"\\\"\\\"\\n#        Return the nested list that this NestedInteger holds, if it holds a nested list\\n#        Return nil if this NestedInteger holds a single integer\\n#        @return {NestedInteger[]}\\n#        \\\"\\\"\\\"\\n\\nclass NestedIterator\\n    # @param {NestedInteger[]} nested_list\\n    def initialize(nested_list)\\n        \\n    end\\n\\n    # @return {Boolean}\\n    def has_next\\n        \\n    end\\n\\n    # @return {Integer}\\n    def next\\n        \\n    end\\nend\\n\\n# Your NestedIterator will be called like this:\\n# i, v = NestedIterator.new(nested_list), []\\n# while i.has_next()\\n#    v << i.next\\n# end\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     public func isInteger() -> Bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     public func getInteger() -> Int\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     public func setInteger(value: Int)\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     public func add(elem: NestedInteger)\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     public func getList() -> [NestedInteger]\\n * }\\n */\\n\\nclass NestedIterator {\\n\\n    init(_ nestedList: [NestedInteger]) {\\n        \\n    }\\n    \\n    func next() -> Int {\\n        \\n    }\\n    \\n    func hasNext() -> Bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * let obj = NestedIterator(nestedList)\\n * let ret_1: Int = obj.next()\\n * let ret_2: Bool = obj.hasNext()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * type NestedInteger struct {\\n * }\\n *\\n * // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n * func (this NestedInteger) IsInteger() bool {}\\n *\\n * // Return the single integer that this NestedInteger holds, if it holds a single integer\\n * // The result is undefined if this NestedInteger holds a nested list\\n * // So before calling this method, you should have a check\\n * func (this NestedInteger) GetInteger() int {}\\n *\\n * // Set this NestedInteger to hold a single integer.\\n * func (n *NestedInteger) SetInteger(value int) {}\\n *\\n * // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n * func (this *NestedInteger) Add(elem NestedInteger) {}\\n *\\n * // Return the nested list that this NestedInteger holds, if it holds a nested list\\n * // The list length is zero if this NestedInteger holds a single integer\\n * // You can access NestedInteger's List element directly if you want to modify it\\n * func (this NestedInteger) GetList() []*NestedInteger {}\\n */\\n\\ntype NestedIterator struct {\\n    \\n}\\n\\nfunc Constructor(nestedList []*NestedInteger) *NestedIterator {\\n    \\n}\\n\\nfunc (this *NestedIterator) Next() int {\\n    \\n}\\n\\nfunc (this *NestedIterator) HasNext() bool {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * trait NestedInteger {\\n *\\n *   // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *   def isInteger: Boolean\\n *\\n *   // Return the single integer that this NestedInteger holds, if it holds a single integer.\\n *   def getInteger: Int\\n *\\n *   // Set this NestedInteger to hold a single integer.\\n *   def setInteger(i: Int): Unit\\n *\\n *   // Return the nested list that this NestedInteger holds, if it holds a nested list.\\n *   def getList: Array[NestedInteger]\\n *\\n *   // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *   def add(ni: NestedInteger): Unit\\n * }\\n */\\n\\nclass NestedIterator(_nestedList: List[NestedInteger]) {\\n    def next(): Int = {\\n        \\n    }\\n    \\n    def hasNext(): Boolean = {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * var obj = new NestedIterator(nestedList)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     // Constructor initializes an empty nested list.\\n *     constructor()\\n *\\n *     // Constructor initializes a single integer.\\n *     constructor(value: Int)\\n *\\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     fun isInteger(): Boolean\\n *\\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // Return null if this NestedInteger holds a nested list\\n *     fun getInteger(): Int?\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     fun setInteger(value: Int): Unit\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     fun add(ni: NestedInteger): Unit\\n *\\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // Return null if this NestedInteger holds a single integer\\n *     fun getList(): List<NestedInteger>?\\n * }\\n */\\n\\nclass NestedIterator(nestedList: List<NestedInteger>) {\\n    fun next(): Int {\\n        \\n    }\\n    \\n    fun hasNext(): Boolean {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * var obj = NestedIterator(nestedList)\\n * var param_1 = obj.next()\\n * var param_2 = obj.hasNext()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"// #[derive(Debug, PartialEq, Eq)]\\n// pub enum NestedInteger {\\n//   Int(i32),\\n//   List(Vec<NestedInteger>)\\n// }\\nstruct NestedIterator {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl NestedIterator {\\n\\n    fn new(nestedList: Vec<NestedInteger>) -> Self {\\n        \\n    }\\n    \\n    fn next(&self) -> i32 {\\n        \\n    }\\n    \\n    fn has_next(&self) -> bool {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * let obj = NestedIterator::new(nestedList);\\n * let ret_1: i32 = obj.next();\\n * let ret_2: bool = obj.has_next();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *\\n *     // if value is not specified, initializes an empty list.\\n *     // Otherwise initializes a single integer equal to value.\\n *     function __construct($value = null)\\n *\\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     function isInteger() : bool\\n *\\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     // The result is undefined if this NestedInteger holds a nested list\\n *     function getInteger()\\n *\\n *     // Set this NestedInteger to hold a single integer.\\n *     function setInteger($i) : void\\n *\\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\\n *     function add($ni) : void\\n *\\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\\n *     // The result is undefined if this NestedInteger holds a single integer\\n *     function getList() : array\\n * }\\n */\\n\\nclass NestedIterator {\\n    /**\\n     * @param NestedInteger[] $nestedList\\n     */\\n    function __construct($nestedList) {\\n        \\n    }\\n    \\n    /**\\n     * @return Integer\\n     */\\n    function next() {\\n        \\n    }\\n    \\n    /**\\n     * @return Boolean\\n     */\\n    function hasNext() {\\n        \\n    }\\n}\\n\\n/**\\n * Your NestedIterator object will be instantiated and called as such:\\n * $obj = NestedIterator($nestedList);\\n * $ret_1 = $obj->next();\\n * $ret_2 = $obj->hasNext();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"/**\\n * // This is the interface that allows for creating nested lists.\\n * // You should not implement it, or speculate about its implementation\\n * class NestedInteger {\\n *     If value is provided, then it holds a single integer\\n *     Otherwise it holds an empty nested list\\n *     constructor(value?: number) {\\n *         ...\\n *     };\\n *\\n *     Return true if this NestedInteger holds a single integer, rather than a nested list.\\n *     isInteger(): boolean {\\n *         ...\\n *     };\\n *\\n *     Return the single integer that this NestedInteger holds, if it holds a single integer\\n *     Return null if this NestedInteger holds a nested list\\n *     getInteger(): number | null {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a single integer equal to value.\\n *     setInteger(value: number) {\\n *         ...\\n *     };\\n *\\n *     Set this NestedInteger to hold a nested list and adds a nested integer elem to it.\\n *     add(elem: NestedInteger) {\\n *         ...\\n *     };\\n *\\n *     Return the nested list that this NestedInteger holds,\\n *     or an empty list if this NestedInteger holds a single integer\\n *     getList(): NestedInteger[] {\\n *         ...\\n *     };\\n * };\\n */\\n\\nclass NestedIterator {\\n    constructor(nestedList: NestedInteger[]) {\\n\\t\\t\\n    }\\n\\n    hasNext(): boolean {\\n\\t\\t\\n    }\\n\\n\\tnext(): number {\\n\\t\\t\\n    }\\n}\\n\\n/**\\n * Your ParkingSystem object will be instantiated and called as such:\\n * var obj = new NestedIterator(nestedList)\\n * var a: number[] = []\\n * while (obj.hasNext()) a.push(obj.next());\\n */\"}]",
                    "sampleTestCase": "[[1,1],2,[1,1]]",
                    "enableTestMode": false,
                    "metaData": "{\n  \"name\": \"\",\n  \"params\": [\n    {\n      \"name\": \"nestedList\",\n      \"type\": \"list<NestedInteger>\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer\"\n  },\n  \"manual\": true\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"]}",
                    "content": "<p>You are given a nested list of integers <code>nestedList</code>. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.</p>\n\n<p>Implement the <code>NestedIterator</code> class:</p>\n\n<ul>\n\t<li><code>NestedIterator(List&lt;NestedInteger&gt; nestedList)</code> Initializes the iterator with the nested list <code>nestedList</code>.</li>\n\t<li><code>int next()</code> Returns the next integer in the nested list.</li>\n\t<li><code>boolean hasNext()</code> Returns <code>true</code> if there are still some integers in the nested list and <code>false</code> otherwise.</li>\n</ul>\n\n<p>Your code will be tested with the following pseudocode:</p>\n\n<pre>\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\n    append iterator.next() to the end of res\nreturn res\n</pre>\n\n<p>If <code>res</code> matches the expected flattened list, then your code will be judged as correct.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [[1,1],2,[1,1]]\n<strong>Output:</strong> [1,1,2,1,1]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nestedList = [1,[4,[6]]]\n<strong>Output:</strong> [1,4,6]\n<strong>Explanation:</strong> By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nestedList.length &lt;= 500</code></li>\n\t<li>The values of the integers in the nested list is in the range <code>[-10<sup>6</sup>, 10<sup>6</sup>]</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Flatten Nested Iterator",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Overview\n\nIf you aren't at all familiar with Iterators, then we suggest having a go at [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/). Additionally, the [Solution Article for Peeking Iterator](https://leetcode.com/problems/peeking-iterator/solution/) has a special introduction section that introduces you to what Iterators are.\n\nIf you're still having trouble, have a go at writing a function that simply flattens a nested list (i.e. not as an iterator). Then, think about how you could adapt it to be an iterator.\n\nIn this article, we cover 5 approaches. Approach 4 is primarily for Java programmers, and Approach 5 is for programmers of languages where generators are supported.\n\n<br/>\n\n---\n\n#### Approach 1: Make a Flat List with Recursion\n\n**Intuition**\n\nThe simplest way of solving this problem is to flatten the entire input list, in the constructor. Then the actual iterator methods can simply work with this flattened list instead of needing to worry about the input structure.\n\nThis approach splits the coding into two parts:\n\n1. A function that the constructor can call to make a flattened list. \n2. `next()` and `hasNext()` methods that iterate over a plain list, by keeping track of the current position within it.\n\nThe first part is best done with recursion (iteration is more complicated, and if you were going to use it, then you may as well look at approaches 2, 3, and 4 instead). This approach is the only recursive one that works in any programming language (as of the time of writing this article, things are changing!).\n\nTo flatten the list recursively, notice that we can look at the input as a tree. The integers are the leaf nodes, and the order they should be returned is from left to right.\n\n!?!../Documents/341_flatten_tree_expansion.json:960,540!?!\n\nTherefore, we can use a recursive depth-first search to flatten it.\n\n```text\nintegers = []\n\ndefine function flattenList(nestedList):\n    for nestedInteger in nestedList:\n        if nestedInteger.isInteger():\n            append nestedInteger.getInteger() to integers\n        else:\n            recursively call flattenList on nestedInteger.getList()\n```\n\nHere is an animation showing the flattening algorithm.\n\n!?!../Documents/341_flatten_tree.json:960,600!?!\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/eSjMjErq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"eSjMjErq\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    We'll analyze each of the methods separately.\n\n    \n    - **Constructor:** $$O(N + L)$$.\n\n        The constructor is where all the time-consuming work is done.\n\n        For each list within the nested list, there will be one call to `flattenList(...)`. The loop within `flattenList(...)` will then iterate $$n$$ times, where $$n$$ is the number of integers within that list. Across all calls to `flattenList(...)`, there will be a total of $$N$$ loop iterations. Therefore, the time complexity is the number of lists plus the number of integers, giving us $$O(N + L)$$.\n\n        Notice that the maximum depth of the nesting does not impact the time complexity.\n        \n\n    - **next():** $$O(1)$$.\n        \n        Getting the next element requires incrementing `position` by 1 and accessing an element at a particular index of the `integers` list. Both of these are $$O(1)$$ operations.\n\n    - **hasNext():** $$O(1)$$.\n\n        Checking whether or not there is a next element requires comparing the length of the `integers` list to the `position` variable. This is an $$O(1)$$ operation.\n        \n\n- Space complexity : $$O(N + D)$$.\n\n    The most obvious auxiliary space is the `integers` list. The length of this is $$O(N)$$.\n\n    The less obvious auxiliary space is the space used by the `flattenList(...)` function. Recall that recursive functions need to keep track of where they're up to by putting stack frames on the runtime stack. Therefore, we need to determine what the maximum number of stack frames there could be at a time is. Each time we encounter a nested list, we call `flattenList(...)` and a stack frame is added. Each time we finish processing a nested list, `flattenList(...)` returns and a stack frame is removed. Therefore, the maximum number of stack frames on the runtime stack is the maximum nesting depth, $$D$$. \n\n    Because these two operations happen one-after-the-other, and either could be the largest, we add their time complexities together giving a final result of $$O(N + D)$$.\n\n<br/>\n\n---\n\n#### Approach 2: Stack\n\n**Intuition**\n\nThe downside of Approach 1 is that it creates a new data structure instead of simply iterating over the given one. Instead, we should find a way to step through the integers, one at a time, keeping track of where we're currently up to in `nestedList`.\n\nA better way is to do an iterative depth-first search, based on the following tree traversal algorithm:\n\n```text\ndefine function iterativeDepthFirstSearch(nestedList):\n    result = []\n\n    stack = a new Stack\n    push all items in nestedList onto stack, in reverse order\n\n    while stack is not empty:\n        nestedInteger = pop top of stack\n        if nestedInteger.isInteger():\n            append nestedInteger.getInteger() to result\n        else:\n            list = nestedInteger.getList()\n            push all items in list onto stack, in reverse order\n\n    return result\n```\n\nWhile we could use this algorithm in the constructor like before, a better way would be to store `stack` on the iterator object and progress the algorithm on each call to `next()` to get the next integer out.\n\nNotice that if the top of the stack is an integer, then we've already found the next integer. Otherwise, if it's a list, then the `else` is adding the list contents to `stack`. On the next loop iteration, the same will happen. We could write an algorithm to get the next integer as follows.\n\n```text\nstack = a new Stack\npush all items in nestedList onto stack, in reverse order\n\ndefine function getNextInteger():\n    while stack is not empty:\n        nestedInteger = pop top off stack\n        if nestedInteger.isInteger():\n            RETURN nestedInteger.getInteger()\n        else:\n            list = nestedInteger.getList()\n            push all items in list onto stack, in reverse order\n\n```\n\nNotice that the `stack` is shared between calls. This means that `getNextInteger()` will find an integer and return it, while still preserving the state of the stack. We can then call `getNextInteger()` again to get the next integer, and so forth.\n\nTo simplify the code a bit, we can change our loop condition so that it checks if the top of the stack is still a list. The loop body should push the contents of the list onto the stack (in reverse). Eventually, there will be an integer on the top of the stack, OR the stack will be empty. Being able to get the next integer to the top of the stack allows the `next()` and `hasNext()` methods to access it.\n\n```text\nstack = a new Stack\npush all items in nestedList onto stack, in reverse order\n\ndefine function makeStackTopAnInteger():\n    while stack is not empty AND the nestedInteger at top of stack is a list:\n        nestedInteger = pop top off stack\n        list = nestedInteger.getList()\n        push all items in list onto stack, in reverse order\n```\n\n\n**Algorithm**\n\nLet's define a private method called `makeStackTopAnInteger()` that contains the algorithm to make the stack top an integer (as described above). The `makeStackTopAnInteger()` method never *removes* integers. \n\nThe `next()` and `hasNext()` methods should call `makeStackTopAnInteger()` before doing anything else. This means that they can then *assume* that either the stack top is an integer, *or* the stack is empty. Then, their definitions are as follows:\n\n- **hasNext():** Returns `true` if the stack still contains items, `false` if not.\n- **next():** If the stack still contains items, then it is guaranteed the top is an integer. This integer is popped and returned. If the stack is empty, then the behavior is language-dependent. For example, in Java, a `NoSuchElementException` should be throw.\n\n\n<iframe src=\"https://leetcode.com/playground/TP2VJHdq/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"TP2VJHdq\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity.\n\n    - **Constructor:** $$O(N + L)$$.\n\n        The worst-case occurs when the initial input nestedList consists entirely of integers and empty lists (everything is in the top-level). In this case, every item is reversed and stored, giving a total time complexity of $$O(N + L)$$.\n\n    - **makeStackTopAnInteger():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        If the top of the stack is an integer, then this function does nothing; taking $$O(1)$$ time.\n\n        Otherwise, it needs to process the stack until an integer is on top. The best way of analyzing the time complexity is to look at the total cost across all calls to `makeStackTopAnInteger()` and then divide by the number of calls made. Once the iterator is exhausted `makeStackTopAnInteger()` must have seen every integer at least once, costing $$O(N)$$ time. Additionally, it has seen every list (except the first) on the stack at least once also, so this costs $$O(L)$$ time. Adding these together, we get $$O(N + L)$$ time.\n\n        The amortized time of a single `makeStackTopAnInteger` is the total cost, $$O(N + L)$$, divided by the number of times it's called. In order to get all integers, we need to have called it $$N$$ times. This gives us an amortized time complexity of $$\\dfrac{O(N + L)}{N} = O(\\dfrac{N}{N} + \\dfrac{L}{N}) = O(\\dfrac{L}{N})$$.\n\n    - **next():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        All of this method is $$O(1)$$, except for possibly the call to `makeStackTopAnInteger()`, giving us a time complexity the same as `makeStackTopAnInteger()`.\n\n    - **hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        All of this method is $$O(1)$$, except for possibly the call to `makeStackTopAnInteger()`, giving us a time complexity the same as `makeStackTopAnInteger()`.\n\n- Space complexity : $$O(N + L)$$.\n\n    In the worst case, where the top list contains $$N$$ integers, or $$L$$ empty lists, it will cost $$O(N + L)$$ space. Other expensive cases occur when the nesting is very deep. However, it's useful to remember that $$D \u2264 L$$ (because each layer of nesting requires another list), and so we don't need to take this into account.\n\n<br/>\n\n---\n\n#### Approach 3: Two Stacks\n\n**Intuition**\n\nReversing the lists to put them onto the stack can be an expensive operation, and it turns out it isn't necessary.\n\nInstead of pushing every item of a sub-list onto the stack, we can instead associate an index pointer with each sub-list, that keeps track of how far along that sub-list we are. Adding a new sub-list to the stack now becomes an $$O(1)$$ operation instead of a $$O(length of sublist)$$ one. \n\nHere is an animation showing this approach.\n\n!?!../Documents/341_flatten_tree_two_stacks.json:960,400!?!\n\nThe *total* time complexity across all method calls for using up the entire iterator remains the same, *but* work is only done when it's necessary, thus improving performance when we only use part of the iterator. This is a desirable property for an iterator.\n\n**Algorithm**\n\nThis approach can be implemented as either one stack of pairs/ tuples, or two stacks with one for `NestedInteger`s and the other for indexes. The best decision for this is language-dependent. I tried both for the Java and found that attempting to put `Pair` objects onto a single stack doesn't work well because updating an index count requires popping and then reconstructing the entire `Pair` due to immutability (alternatives such as using length-2 `Lists`s as pairs are possible, but I don't think ideal). Using two stacks is cleaner.\n\n<iframe src=\"https://leetcode.com/playground/kw9U2WL6/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"kw9U2WL6\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        Pushing a list onto a `stack` is *by reference* in all the programming languages we're using here. This means that instead of creating a new list, some information about how to get to the existing list is put onto the stack. The list is not traversed, as it doesn't need reversing this time, and we're not pushing the items on one-by-one. This is, therefore, an $$O(1)$$ operation.\n\n    - **makeStackTopAnInteger() / next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as Approach 2.\n\n- Space complexity : $$O(D)$$.\n\n    At any given time, the stack contains only *one* nestedList reference for each level. This is unlike the previous approach, wherein the worst case we need to put almost all elements onto the stack.\n\n    Because there's one reference on the stack at each level, the worst case is when we're looking at the deepest leveled list, giving a space complexity is $$O(D)$$.\n\n<br/>\n\n---\n\n#### Approach 4: Stack of Iterators\n\n**Intuition**\n\n*This approach works best in Java but isn't well suited to other languages. Have a look at Approach 5 if you're looking for an elegant Python and JavaScript approach.*\n\nIf you're using Java, a very elegant approach is to maintain a stack of `ListIterators`. This approach is closely based on Approach 3. \n\nInstead of keeping a `Stack` of indexes to keep track of where we are in each `List`, we can simply make each `List` a `ListIterator`, thus keeping a `Stack` of `ListIterator`s. Then, we can use the `next()` and `hasNext()` methods on those `ListIterators`. Internally, the `ListIterator` is storing the index.\n\nA downside to this approach is that for `hasNext()` to work correctly, it needs to know whether or not there are any *integers* remaining (empty lists don't count!). The only way it can do this is to remove items from the `ListIterator` and check whether or not they are an integer. It cannot, however, put the integers back again. Therefore, if it removes an integer it will need to put it into a `peeked` field so that the `next()` function can return that integer. This is the same as in the [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/) problem.\n\nA clean design is to have a `setPeeked()` method that is analogous to the `makeStackTopAnInteger()` method. This method should firstly check if `peeked` is empty, and if it is empty, then find the next integer to put in it. This integer is *removed* from the stack (as explained above).\n\nRegardless of the need for `peeked`, this is probably the best design if you're coding in Java.\n\n**Algorithm**\n\n<iframe src=\"https://leetcode.com/playground/uMiDg5K9/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"uMiDg5K9\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        Same as Approach 3.\n\n    - **makeStackTopAnInteger() / next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as Approach 3.\n\n- Space complexity : $$O(D)$$.\n\n    Same as Approach 3.\n\nIn practice, this code runs faster than Approach 3, probably because most of the functionality relies on `ListIterator`; an optimized API class. Approach 3 was really just our own implementation of `ListIterator`s.\n\n<br/>\n\n---\n\n#### Approach 5: Using a Generator\n\n**Intuition**\n\n*This approach will only work in programming languages that support **generator functions**, for example, **Python**, **JavaScript** and **C#**. At the time of writing this article, **C++** doesn't support it, but it is expected to support them soon.* \n\nIn a nutshell, generator functions are a special type of function that can \"return\" multiple values. When you call a **generator function**, you get back a special object called a **generator**. This **generator** can then be used to get each value from the function, one at a time.\n\nTo \"return\" multiple values from these **generator functions**, a special keyword, `yield`, is used. `yield` behaves similarly to a `return` statement, except that it does not terminate the function. Instead, it pauses the function, and \"returns\" the `yield`ed value. Then, when we need another value, the function resumes from where it left off. It continues until it gets to another `yield`, just like before. When the function gets to the end (no more code left to run), it stops. \n\nFor example in Python, if we have a **generator** `gen`, we can tell it to resume the function and get the next value by calling `next(gen)`.\n\nAs an example, the **generators** created by this Python **generator function** can be used to get all numbers from `a` to `b`:\n\n```python\n# This is effectively how range works in Python. We're implementing our own\n# version of it here to see how generators work.\n# Many Python 3 library functions are generators.\ndef range_generator(a, b):\n    current = a\n    while current < b:\n        # This yield \"returns\" a value from the function and pauses it\n        yield current\n        # Once the function is \"woken up\" by another call to next(...), it will resume\n        # by continuing with the next statement (current += 1), until it either\n        # hits another yield or reaches the end of the function\n        current += 1\n    # When we get here, the generator is finished.\n\n# Create a new range_generator object for the numbers 10 to 20.\nten_to_twenty_generator = range_generator(10, 20)\n\n# Get the first 3 values out of the range_generator object we made.\nprint(next(ten_to_twenty_generator)) # 10\nprint(next(ten_to_twenty_generator)) # 11\nprint(next(ten_to_twenty_generator)) # 12\n\n# Here's another example of using the generator with a loop. As we said, it's\n# the same as the range function.\n# This is a new generator object, not the 10-20 one from above.\nfor number in range_generator(5, 9):\n    print(number)\nprint(\"Done!\")\n# Will print\n# 5\n# 6\n# 7\n# 8\n# Done\n```\n\n\nEnd-of-function behaviour for **generators** is language-dependent. For example, in Python, once the end of the function is reached, a `StopIteration` exception is raised. When you use your generator in a loop, e.g. `for number in range_generator(5, 9):`, it will simply stop when it gets this exception. The programmer doesn't need to explicitly handle it.\n\nNow that we know what a **generator** is, we'll use one to implement a `NestedIterator`. \n\nBack in Approach 1, we started by flattening the entire list with the following recursive algorithm:\n\n```python\nintegers = []\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            integers.append(nested_integer.getInteger())\n        else:\n            flatten_list(nested_integer.getList())\n```\n\nSomething cool about **generator functions** is that they can be recursive.\n\nSo, instead of pushing each integer to a list, we could just `yield` them. This way, when we want the next integer, the function will resume from after the `yield` until it finds the next one. \n\nLet's replace the list append with `yield`.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            flatten_list(nested_integer.getList())\n```\n\nThis has a mistake though; because `flatten_list` is now a generator function, the recursive call to `flatten_list` only *creates a new generator*; it doesn't actually `yield` the values from the nested generator.\n\nTo fix this, we can loop over each item of the recursive generator and `yield` them instead.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            for integer in flatten_list(nested_integer.getList()):\n                yield integer\n```\n\nSome languages, such as Python, offer a shorthand for this looping, in Python called `yield from`. Here is its usage.\n\n```python\ndef flatten_list(nested_list):\n    for nested_integer in nested_list:\n        if nested_integer.isInteger():\n            yield nested_integer.getInteger()\n        else:\n            yield from flatten_list(nested_integer.getList())\n```\n\nNote that, not all languages that support `yield` also support `yield from`. For example, **C#** has `yield`, but no `yield from` equivalent. JavaScript supports it, but instead calls it `yield*`.\n\n**Algorithm**\n\nFor this approach, we also need to add a `peeked` field, much like in the [Peeking Iterator](https://leetcode.com/problems/peeking-iterator/) problem. This is because the only way to know if there *is* a next value is to take it out of the generator, and generators can only go forwards, not backward.\n\n<iframe src=\"https://leetcode.com/playground/T6oKpBQF/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"T6oKpBQF\"></iframe>\n\n**Complexity Analysis**\n\nLet $$N$$ be the total number of *integers* within the nested list, $$L$$ be the total number of *lists* within the nested list, and $$D$$ be the maximum nesting depth (maximum number of lists inside each other).\n\n- Time complexity:\n\n    - **Constructor:** $$O(1)$$.\n\n        In the constructor, we only create a generator object. Simply creating a generator object doesn't invoke any code in the generator function itself (only calls to next do).\n\n        Because the time taken to create the generator doesn't vary with the size of the input, the time complexity is $$O(1)$$.\n\n    - **next() / hasNext():** $$O(\\dfrac{L}{N})$$ or $$O(1)$$.\n\n        Same as approaches 2, 3, and 4.\n\n\n- Space complexity : $$O(D)$$.\n\n    We recursively call `_int_generator` within itself for nested lists. Therefore, the runtime stack uses memory proportional to the current depth of the list. Seeing as the largest depth is $$D$$, the space complexity is $$O(D)$$.\n\n<br/>",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "flatten-nested-iterator",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.974,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "870",
                "title": "Find Median from Data Stream",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 122,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "295",
                    "questionFrontendId": "295",
                    "sessionId": "968792",
                    "questionTitle": "Find Median from Data Stream",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/find-median-from-data-stream/submit/",
                    "interpretUrl": "/problems/find-median-from-data-stream/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        \\n    }\\n    \\n    double findMedian() {\\n        \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        \\n    }\\n    \\n    public void addNum(int num) {\\n        \\n    }\\n    \\n    public double findMedian() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class MedianFinder(object):\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def addNum(self, num):\\n        \\\"\\\"\\\"\\n        :type num: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def findMedian(self):\\n        \\\"\\\"\\\"\\n        :rtype: float\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class MedianFinder:\\n\\n    def __init__(self):\\n        \\\"\\\"\\\"\\n        initialize your data structure here.\\n        \\\"\\\"\\\"\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        \\n\\n    def findMedian(self) -> float:\\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} MedianFinder;\\n\\n/** initialize your data structure here. */\\n\\nMedianFinder* medianFinderCreate() {\\n    \\n}\\n\\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\\n  \\n}\\n\\ndouble medianFinderFindMedian(MedianFinder* obj) {\\n  \\n}\\n\\nvoid medianFinderFree(MedianFinder* obj) {\\n    \\n}\\n\\n/**\\n * Your MedianFinder struct will be instantiated and called as such:\\n * MedianFinder* obj = medianFinderCreate();\\n * medianFinderAddNum(obj, num);\\n \\n * double param_2 = medianFinderFindMedian(obj);\\n \\n * medianFinderFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        \\n    }\\n    \\n    public void AddNum(int num) {\\n        \\n    }\\n    \\n    public double FindMedian() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.AddNum(num);\\n * double param_2 = obj.FindMedian();\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    \\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    \\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class MedianFinder\\n\\n=begin\\n    initialize your data structure here.\\n=end\\n    def initialize()\\n        \\n    end\\n\\n\\n=begin\\n    :type num: Integer\\n    :rtype: Void\\n=end\\n    def add_num(num)\\n        \\n    end\\n\\n\\n=begin\\n    :rtype: Float\\n=end\\n    def find_median()\\n        \\n    end\\n\\n\\nend\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder.new()\\n# obj.add_num(num)\\n# param_2 = obj.find_median()\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    init() {\\n        \\n    }\\n    \\n    func addNum(_ num: Int) {\\n        \\n    }\\n    \\n    func findMedian() -> Double {\\n        \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * let obj = MedianFinder()\\n * obj.addNum(num)\\n * let ret_2: Double = obj.findMedian()\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type MedianFinder struct {\\n    \\n}\\n\\n\\n/** initialize your data structure here. */\\nfunc Constructor() MedianFinder {\\n    \\n}\\n\\n\\nfunc (this *MedianFinder) AddNum(num int)  {\\n    \\n}\\n\\n\\nfunc (this *MedianFinder) FindMedian() float64 {\\n    \\n}\\n\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * obj := Constructor();\\n * obj.AddNum(num);\\n * param_2 := obj.FindMedian();\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class MedianFinder() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    def addNum(num: Int) {\\n        \\n    }\\n\\n    def findMedian(): Double = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class MedianFinder() {\\n\\n    /** initialize your data structure here. */\\n    \\n\\n    fun addNum(num: Int) {\\n        \\n    }\\n\\n    fun findMedian(): Double {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct MedianFinder {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    fn new() -> Self {\\n        \\n    }\\n    \\n    fn add_num(&self, num: i32) {\\n        \\n    }\\n    \\n    fn find_median(&self) -> f64 {\\n        \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * let obj = MedianFinder::new();\\n * obj.add_num(num);\\n * let ret_2: f64 = obj.find_median();\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class MedianFinder {\\n    /**\\n     * initialize your data structure here.\\n     */\\n    function __construct() {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $num\\n     * @return NULL\\n     */\\n    function addNum($num) {\\n        \\n    }\\n  \\n    /**\\n     * @return Float\\n     */\\n    function findMedian() {\\n        \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * $obj = MedianFinder();\\n * $obj->addNum($num);\\n * $ret_2 = $obj->findMedian();\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class MedianFinder {\\n    constructor() {\\n\\n    }\\n\\n    addNum(num: number): void {\\n\\n    }\\n\\n    findMedian(): number {\\n\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define median-finder%\\n  (class object%\\n    (super-new)\\n    (init-field)\\n    \\n    ; add-num : exact-integer? -> void?\\n    (define/public (add-num num)\\n\\n      )\\n    ; find-median : -> flonum?\\n    (define/public (find-median)\\n\\n      )))\\n\\n;; Your median-finder% object will be instantiated and called as such:\\n;; (define obj (new median-finder%))\\n;; (send obj add-num num)\\n;; (define param_2 (send obj find-median))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec median_finder_init_() -> any().\\nmedian_finder_init_() ->\\n  .\\n\\n-spec median_finder_add_num(Num :: integer()) -> any().\\nmedian_finder_add_num(Num) ->\\n  .\\n\\n-spec median_finder_find_median() -> float().\\nmedian_finder_find_median() ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% median_finder_init_(),\\n%% median_finder_add_num(Num),\\n%% Param_2 = median_finder_find_median(),\\n\\n%% median_finder_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule MedianFinder do\\n  @spec init_() :: any\\n  def init_() do\\n\\n  end\\n\\n  @spec add_num(num :: integer) :: any\\n  def add_num(num) do\\n\\n  end\\n\\n  @spec find_median() :: float\\n  def find_median() do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# MedianFinder.init_()\\n# MedianFinder.add_num(num)\\n# param_2 = MedianFinder.find_median()\\n\\n# MedianFinder.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"classname\": \"MedianFinder\",\r\n  \"maxbytesperline\": 410000,\r\n  \"constructor\": {\r\n      \"params\": [\r\n      ],\r\n      \"comment\": \"initialize your data structure here.\"\r\n  },\r\n  \"methods\": [\r\n      { \"name\" : \"addNum\",\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"num\"\r\n            }],\r\n        \"return\": {\r\n            \"type\": \"void\"\r\n        }\r\n      },\r\n      { \"name\": \"findMedian\",\r\n        \"params\": [],\r\n        \"return\": {\r\n            \"type\": \"double\"\r\n        }\r\n      }\r\n  ],\r\n  \"systemdesign\": true,\r\n  \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>\n\t<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>Implement the MedianFinder class:</p>\n\n<ul>\n\t<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>\n\t<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>\n\t<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]\n[[], [1], [2], [], [3], []]\n<strong>Output</strong>\n[null, null, null, 1.5, null, 2.0]\n\n<strong>Explanation</strong>\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n\t<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Find Median From Data Stream",
                        "content": "[TOC]\r\n\r\n## Solution\r\n---\r\n#### Approach 1: Simple Sorting\r\n\r\n**Intuition**\r\n\r\nDo what the question says.\r\n\r\n**Algorithm**\r\n\r\nStore the numbers in a resize-able container. Every time you need to output the median, sort the container and output the median.\r\n\r\n<iframe src=\"https://leetcode.com/playground/RBBNZJxa/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"RBBNZJxa\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n\\log n) + O(1) \\simeq O(n\\log n)$$.\r\n\r\n    + Adding a number takes amortized $$O(1)$$ time for a container with an efficient resizing scheme.\r\n    + Finding the median is primarily dependent on the sorting that takes place. This takes $$O(n\\log n)$$ time for a standard comparative sort.\r\n\r\n* Space complexity: $$O(n)$$ linear space to hold input in a container. No extra space other than that needed (since sorting can usually be done in-place).\r\n\r\n---\r\n#### Approach 2: Insertion Sort\r\n\r\n**Intuition**\r\n\r\nKeeping our input container always sorted (i.e. maintaining the sorted nature of the container as an *invariant*).\r\n\r\n**Algorithm**\r\n\r\nWhich algorithm allows a number to be added to a sorted list of numbers and yet keeps the entire list sorted? Well, for one, **insertion sort!**\r\n\r\nWe assume that the current list is already sorted. When a new number comes, we have to add it to the list while maintaining the sorted nature of the list. This is achieved easily by finding the correct place to insert the incoming number, using a **binary search** (remember, the list is *always sorted*). Once the position is found, we need to shift all higher elements by one space to make room for the incoming number.\r\n\r\nThis method would work well when the amount of insertion queries is lesser or about the same as the amount of median finding queries.\r\n\r\n<iframe src=\"https://leetcode.com/playground/XXppd6zk/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"XXppd6zk\"></iframe>\r\n\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n) + O(\\log n) \\approx O(n)$$.\r\n\r\n    + Binary Search takes $$O(\\log n)$$ time to find correct insertion position.\r\n    + Insertion can take up to $$O(n)$$ time since elements have to be shifted inside the container to make room for the new element.\r\n\r\n> **Pop quiz:** Can we use a *linear* search instead of a *binary* search to find insertion position, without incurring any significant runtime penalty?\r\n\r\n* Space complexity: $$O(n)$$ linear space to hold input in a container.\r\n\r\n---\r\n#### Approach 3: Two Heaps\r\n\r\n**Intuition**\r\n\r\nThe above two approaches gave us some valuable insights on how to tackle this problem. Concretely, one can infer two things:\r\n\r\n1. If we could maintain direct access to median elements at all times, then finding the median would take a constant amount of time.\r\n2. If we could find a reasonably fast way of adding numbers to our containers, additional penalties incurred could be lessened.\r\n\r\nBut perhaps the most important insight, which is not readily observable, is the fact that we *only* need a consistent way to access the median elements. Keeping the *entire* input sorted is **not a requirement.**\r\n\r\n> Well, if only there were a data structure which could handle our needs.\r\n\r\nAs it turns out there are two data structures for the job:\r\n\r\n+ Heaps (or Priority Queues [^note-1])\r\n+ Self-balancing Binary Search Trees (we'll talk more about them in [Approach 4](#approach-4-multiset-and-two-pointers))\r\n\r\nHeaps are a natural ingredient for this dish! Adding elements to them take logarithmic order of time. They also give direct access to the maximal/minimal elements in a group.\r\n\r\nIf we could maintain *two* heaps in the following way:\r\n\r\n+ A max-heap to store the smaller half of the input numbers\r\n+ A min-heap to store the larger half of the input numbers\r\n\r\nThis gives access to median values in the input: they comprise the top of the heaps!\r\n\r\n**Wait, what? How?**\r\n\r\nIf the following conditions are met:\r\n\r\n1. Both the heaps are balanced (or nearly balanced)\r\n2. The max-heap contains all the smaller numbers while the min-heap contains all the larger numbers\r\n\r\nthen we can say that:\r\n\r\n1. All the numbers in the max-heap are smaller or equal to the top element of the max-heap (let's call it $$x$$)\r\n2. All the numbers in the min-heap are larger or equal to the top element of the min-heap (let's call it $$y$$)\r\n\r\nThen $$x$$ and/or $$y$$ are smaller than (or equal to) almost half of the elements and larger than (or equal to) the other half. That is *the* definition of **median** elements.\r\n\r\nThis leads us to a huge point of pain in this approach: **balancing the two heaps!**\r\n\r\n**Algorithm**\r\n\r\n+ Two priority queues:\r\n\r\n    1. A max-heap `lo` to store the smaller half of the numbers\r\n    2. A min-heap `hi` to store the larger half of the numbers\r\n\r\n+ The max-heap `lo` is allowed to store, at worst, one more element more than the min-heap `hi`. Hence if we have processed $$k$$ elements:\r\n\r\n    + If $$k = 2*n + 1 \\quad (\\forall \\, n \\in \\mathbb{Z})$$, then `lo` is allowed to hold $$n+1$$ elements, while `hi` can hold $$n$$ elements.\r\n    + If $$k = 2*n \\quad (\\forall \\, n \\in \\mathbb{Z})$$, then both heaps are balanced and hold $$n$$ elements each.\r\n\r\n    This gives us the nice property that when the heaps are perfectly balanced, the median can be derived from the tops of both heaps. Otherwise, the top of the max-heap `lo` holds the legitimate median.\r\n\r\n+ Adding a number `num`:\r\n\r\n    + Add `num` to max-heap `lo`. Since `lo` received a new element, we must do a balancing step for `hi`. So remove the largest element from `lo` and offer it to `hi`.\r\n    + The min-heap `hi` might end holding more elements than the max-heap `lo`, after the previous operation. We fix that by removing the smallest element from `hi` and offering it to `lo`.\r\n\r\n    The above step ensures that we do not disturb the nice little size property we just mentioned.\r\n\r\nA little example will clear this up! Say we take input from the stream `[41, 35, 62, 5, 97, 108]`. The run-though of the algorithm looks like this:\r\n\r\n```r\r\nAdding number 41\r\nMaxHeap lo: [41]           // MaxHeap stores the largest value at the top (index 0)\r\nMinHeap hi: []             // MinHeap stores the smallest value at the top (index 0)\r\nMedian is 41\r\n=======================\r\nAdding number 35\r\nMaxHeap lo: [35]\r\nMinHeap hi: [41]\r\nMedian is 38\r\n=======================\r\nAdding number 62\r\nMaxHeap lo: [41, 35]\r\nMinHeap hi: [62]\r\nMedian is 41\r\n=======================\r\nAdding number 4\r\nMaxHeap lo: [35, 4]\r\nMinHeap hi: [41, 62]\r\nMedian is 38\r\n=======================\r\nAdding number 97\r\nMaxHeap lo: [41, 35, 4]\r\nMinHeap hi: [62, 97]\r\nMedian is 41\r\n=======================\r\nAdding number 108\r\nMaxHeap lo: [41, 35, 4]\r\nMinHeap hi: [62, 97, 108]\r\nMedian is 51.5\r\n```\r\n\r\n<iframe src=\"https://leetcode.com/playground/CZZ6m2wS/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"CZZ6m2wS\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(5 \\cdot \\log n) + O(1) \\approx O(\\log n)$$.\r\n\r\n    + At worst, there are three heap insertions and two heap deletions from the top. Each of these takes about $$O(\\log n)$$ time.\r\n    + Finding the median takes constant $$O(1)$$ time since the tops of heaps are directly accessible.\r\n\r\n* Space complexity: $$O(n)$$ linear space to hold input in containers.\r\n\r\n---\r\n#### Approach 4: Multiset and Two Pointers\r\n\r\n**Intuition**\r\n\r\nSelf-balancing Binary Search Trees (like an [AVL Tree](https://en.wikipedia.org/wiki/AVL_tree)) have some *very* interesting properties. They maintain the tree's height to a logarithmic bound. Thus inserting a new element has reasonably good time performance. The median **always** winds up in the root of the tree and/or one of its children. Solving this problem using the same approach as [Approach 3](#approach-3-two-heaps) but using a Self-balancing BST seems like a good choice. Except the fact that implementing such a tree is not trivial and prone to errors.\r\n\r\n*Why reinvent the wheel?* Most languages implement a `multiset` class which emulates such behavior. The only problem remains keeping track of the median elements. That is easily solved with **pointers!** [^note-2]\r\n\r\nWe maintain two pointers: one for the lower median element and the other for the higher median element. When the total number of elements is odd, both the pointers point to the same median element (since there is only one median in this case). When the number of elements is even, the pointers point to two consecutive elements, whose mean is the representative median of the input.\r\n\r\n**Algorithm**\r\n\r\n+ Two iterators/pointers `lo_median` and `hi_median`, which iterate over the `data` multiset.\r\n\r\n+ While adding a number `num`, three cases arise:\r\n\r\n    1. The container is currently **empty.** Hence we simply insert `num` and set both pointers to point to this element.\r\n    2. The container currently holds an **odd** number of elements. This means that both the pointers currently point to the same element.\r\n\r\n        + If `num` is not equal to the current median element, then `num` goes on either side of it. Whichever side it goes, the size of that part increases and hence the corresponding pointer is updated. For example, if `num` is less than the median element, the size of the lesser half of input increases by $$1$$ on inserting `num`. Thus it makes sense to decrement `lo_median`.\r\n        + If `num` is equal to the current median element, then the action taken is dependent on how `num` is inserted into `data`. **NOTE:** In our given C++ code example, `std::multiset::insert` inserts an element *after* all elements of equal value. Hence we increment `hi_median`.\r\n\r\n    3. The container currently holds an **even** number of elements. This means that the pointers currently point to consecutive elements.\r\n\r\n        + If `num` is a number between both median elements, then `num` becomes the new median. Both pointers must point to it.\r\n        + Otherwise, `num` increases the size of either the lesser or higher half of the input. We update the pointers accordingly. It is important to remember that both the pointers ***must*** point to the same element now.\r\n\r\n+ Finding the median is easy! It is simply the **mean** of the elements pointed to by the two pointers `lo_median` and `hi_median`.\r\n\r\n<iframe src=\"https://leetcode.com/playground/Pysp3Pmt/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Pysp3Pmt\"></iframe>\r\n\r\nA much shorter (but harder to understand), ***one*** *pointer* version [^note-3] of this solution is given below:\r\n\r\n<iframe src=\"https://leetcode.com/playground/D8xeecuy/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"D8xeecuy\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(\\log n) + O(1) \\approx O(\\log n)$$.\r\n\r\n    + Inserting a number takes $$O(\\log n)$$ time for a standard `multiset` scheme. [^note-4]\r\n    + Finding the mean takes constant $$O(1)$$ time since the median elements are directly accessible from the two pointers.\r\n\r\n* Space complexity: $$O(n)$$ linear space to hold input in container.\r\n\r\n---\r\n#### Further Thoughts\r\n\r\nThere are so many ways around this problem, that frankly, it is scary. Here are a few more that I came across:\r\n\r\n+ **Buckets!** If the numbers in the stream are statistically distributed, then it is easier to keep track of buckets where the median would land, than the entire array. Once you know the correct bucket, simply sort it find the median. If the bucket size is significantly smaller than the size of input processed, this results in huge time saving. [@mitbbs8080](https://leetcode.com/mitbbs8080/) has an interesting implementation [here.](https://leetcode.com/problems/find-median-from-data-stream/discuss/74057/Tired-of-TWO-HEAPSET-solutions-See-this-segment-dividing-solution-(c%2B%2B))\r\n\r\n+ **Reservoir Sampling.** Following along the lines of using buckets: if the stream is statistically distributed, you can rely on Reservoir Sampling. Basically, if you could maintain just one good bucket (or *reservoir*) which could hold a representative sample of the entire stream, you could estimate the median of the entire stream from just this one bucket. This means good time and memory performance. Reservoir Sampling lets you do just that. Determining a **\"good\"** size for your reservoir? *Now, that's a whole other challenge.* A good explanation for this can be found in [this StackOverflow answer.](http://stackoverflow.com/a/10693752/2844164)\r\n\r\n+ **Segment Trees** are a great data structure if you need to do a lot of insertions or a lot of read queries over a limited range of input values. They allow us to do all such operations *fast* and in roughly the *same amount of time*, **always.** The only problem is that they are far from trivial to implement. Take a look at my [introductory article on Segment Trees](https://leetcode.com/articles/a-recursive-approach-to-segment-trees-range-sum-queries-lazy-propagation/) if you are interested.\r\n\r\n+ **Order Statistic Trees** are data structures which seem to be tailor-made for this problem. They have all the nice features of a BST, but also let you find the $$k^{th}$$ order element stored in the tree. They are a pain to implement and no standard interview would require you to code these up. But they are fun to use if they are already implemented in the language of your choice. [^note-5]\r\n\r\n\r\n\r\n[^note-1]: Priority Queues queue out elements based on a predefined priority. They are an abstract concept and can, as such, be implemented in many different ways. Heaps are an efficient way to implement Priority Queues.\r\n[^note-2]: Shout-out to [@pharese](https://leetcode.com/pharese/) for this approach.\r\n[^note-3]: Inspired from [this post](https://leetcode.com/problems/sliding-window-median/discuss/96340/on-log-k-c-using-multiset-and-updating-middle-iterator) by [@StefanPochmann](https://leetcode.com/stefanpochmann).\r\n[^note-4]: [Hinting](http://en.cppreference.com/w/cpp/container/multiset/insert) can reduce that to amortized constant $$O(1)$$ time.\r\n[^note-5]: [**GNU** `libstdc++`](https://gcc.gnu.org/onlinedocs/libstdc++/manual/policy_based_data_structures_test.html) users are in luck! Take a look at [this StackOverflow answer.](http://stackoverflow.com/a/11228573/2844164)",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "find-median-from-data-stream",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.815,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "871",
                "title": "Range Sum Query 2D - Mutable",
                "type": 1,
                "info": "",
                "paidOnly": true,
                "chapterId": 122,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "308",
                    "questionFrontendId": "308",
                    "sessionId": "968792",
                    "questionTitle": "Range Sum Query 2D - Mutable",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/range-sum-query-2d-mutable/submit/",
                    "interpretUrl": "/problems/range-sum-query-2d-mutable/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class NumMatrix {\\npublic:\\n    NumMatrix(vector<vector<int>>& matrix) {\\n        \\n    }\\n    \\n    void update(int row, int col, int val) {\\n        \\n    }\\n    \\n    int sumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n};\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix* obj = new NumMatrix(matrix);\\n * obj->update(row,col,val);\\n * int param_2 = obj->sumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class NumMatrix {\\n\\n    public NumMatrix(int[][] matrix) {\\n        \\n    }\\n    \\n    public void update(int row, int col, int val) {\\n        \\n    }\\n    \\n    public int sumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix obj = new NumMatrix(matrix);\\n * obj.update(row,col,val);\\n * int param_2 = obj.sumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class NumMatrix(object):\\n\\n    def __init__(self, matrix):\\n        \\\"\\\"\\\"\\n        :type matrix: List[List[int]]\\n        \\\"\\\"\\\"\\n        \\n\\n    def update(self, row, col, val):\\n        \\\"\\\"\\\"\\n        :type row: int\\n        :type col: int\\n        :type val: int\\n        :rtype: None\\n        \\\"\\\"\\\"\\n        \\n\\n    def sumRegion(self, row1, col1, row2, col2):\\n        \\\"\\\"\\\"\\n        :type row1: int\\n        :type col1: int\\n        :type row2: int\\n        :type col2: int\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \\n\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix(matrix)\\n# obj.update(row,col,val)\\n# param_2 = obj.sumRegion(row1,col1,row2,col2)\"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class NumMatrix:\\n\\n    def __init__(self, matrix: List[List[int]]):\\n        \\n\\n    def update(self, row: int, col: int, val: int) -> None:\\n        \\n\\n    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:\\n        \\n\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix(matrix)\\n# obj.update(row,col,val)\\n# param_2 = obj.sumRegion(row1,col1,row2,col2)\"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n\\ntypedef struct {\\n    \\n} NumMatrix;\\n\\n\\nNumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {\\n    \\n}\\n\\nvoid numMatrixUpdate(NumMatrix* obj, int row, int col, int val) {\\n  \\n}\\n\\nint numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {\\n  \\n}\\n\\nvoid numMatrixFree(NumMatrix* obj) {\\n    \\n}\\n\\n/**\\n * Your NumMatrix struct will be instantiated and called as such:\\n * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);\\n * numMatrixUpdate(obj, row, col, val);\\n \\n * int param_2 = numMatrixSumRegion(obj, row1, col1, row2, col2);\\n \\n * numMatrixFree(obj);\\n*/\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class NumMatrix {\\n\\n    public NumMatrix(int[][] matrix) {\\n        \\n    }\\n    \\n    public void Update(int row, int col, int val) {\\n        \\n    }\\n    \\n    public int SumRegion(int row1, int col1, int row2, int col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * NumMatrix obj = new NumMatrix(matrix);\\n * obj.Update(row,col,val);\\n * int param_2 = obj.SumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} matrix\\n */\\nvar NumMatrix = function(matrix) {\\n    \\n};\\n\\n/** \\n * @param {number} row \\n * @param {number} col \\n * @param {number} val\\n * @return {void}\\n */\\nNumMatrix.prototype.update = function(row, col, val) {\\n    \\n};\\n\\n/** \\n * @param {number} row1 \\n * @param {number} col1 \\n * @param {number} row2 \\n * @param {number} col2\\n * @return {number}\\n */\\nNumMatrix.prototype.sumRegion = function(row1, col1, row2, col2) {\\n    \\n};\\n\\n/** \\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * obj.update(row,col,val)\\n * var param_2 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"class NumMatrix\\n\\n=begin\\n    :type matrix: Integer[][]\\n=end\\n    def initialize(matrix)\\n        \\n    end\\n\\n\\n=begin\\n    :type row: Integer\\n    :type col: Integer\\n    :type val: Integer\\n    :rtype: Void\\n=end\\n    def update(row, col, val)\\n        \\n    end\\n\\n\\n=begin\\n    :type row1: Integer\\n    :type col1: Integer\\n    :type row2: Integer\\n    :type col2: Integer\\n    :rtype: Integer\\n=end\\n    def sum_region(row1, col1, row2, col2)\\n        \\n    end\\n\\n\\nend\\n\\n# Your NumMatrix object will be instantiated and called as such:\\n# obj = NumMatrix.new(matrix)\\n# obj.update(row, col, val)\\n# param_2 = obj.sum_region(row1, col1, row2, col2)\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"\\nclass NumMatrix {\\n\\n    init(_ matrix: [[Int]]) {\\n        \\n    }\\n    \\n    func update(_ row: Int, _ col: Int, _ val: Int) {\\n        \\n    }\\n    \\n    func sumRegion(_ row1: Int, _ col1: Int, _ row2: Int, _ col2: Int) -> Int {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * let obj = NumMatrix(matrix)\\n * obj.update(row, col, val)\\n * let ret_2: Int = obj.sumRegion(row1, col1, row2, col2)\\n */\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"type NumMatrix struct {\\n    \\n}\\n\\n\\nfunc Constructor(matrix [][]int) NumMatrix {\\n    \\n}\\n\\n\\nfunc (this *NumMatrix) Update(row int, col int, val int)  {\\n    \\n}\\n\\n\\nfunc (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {\\n    \\n}\\n\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * obj := Constructor(matrix);\\n * obj.Update(row,col,val);\\n * param_2 := obj.SumRegion(row1,col1,row2,col2);\\n */\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"class NumMatrix(_matrix: Array[Array[Int]]) {\\n\\n    def update(row: Int, col: Int, `val`: Int) {\\n        \\n    }\\n\\n    def sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int = {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * obj.update(row,col,`val`)\\n * var param_2 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class NumMatrix(matrix: Array<IntArray>) {\\n\\n    fun update(row: Int, col: Int, `val`: Int) {\\n        \\n    }\\n\\n    fun sumRegion(row1: Int, col1: Int, row2: Int, col2: Int): Int {\\n        \\n    }\\n\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = NumMatrix(matrix)\\n * obj.update(row,col,`val`)\\n * var param_2 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"struct NumMatrix {\\n\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl NumMatrix {\\n\\n    fn new(matrix: Vec<Vec<i32>>) -> Self {\\n        \\n    }\\n    \\n    fn update(&self, row: i32, col: i32, val: i32) {\\n        \\n    }\\n    \\n    fn sum_region(&self, row1: i32, col1: i32, row2: i32, col2: i32) -> i32 {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * let obj = NumMatrix::new(matrix);\\n * obj.update(row, col, val);\\n * let ret_2: i32 = obj.sum_region(row1, col1, row2, col2);\\n */\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class NumMatrix {\\n    /**\\n     * @param Integer[][] $matrix\\n     */\\n    function __construct($matrix) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $row\\n     * @param Integer $col\\n     * @param Integer $val\\n     * @return NULL\\n     */\\n    function update($row, $col, $val) {\\n        \\n    }\\n  \\n    /**\\n     * @param Integer $row1\\n     * @param Integer $col1\\n     * @param Integer $row2\\n     * @param Integer $col2\\n     * @return Integer\\n     */\\n    function sumRegion($row1, $col1, $row2, $col2) {\\n        \\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * $obj = NumMatrix($matrix);\\n * $obj->update($row, $col, $val);\\n * $ret_2 = $obj->sumRegion($row1, $col1, $row2, $col2);\\n */\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"class NumMatrix {\\n    constructor(matrix: number[][]) {\\n\\n    }\\n\\n    update(row: number, col: number, val: number): void {\\n\\n    }\\n\\n    sumRegion(row1: number, col1: number, row2: number, col2: number): number {\\n\\n    }\\n}\\n\\n/**\\n * Your NumMatrix object will be instantiated and called as such:\\n * var obj = new NumMatrix(matrix)\\n * obj.update(row,col,val)\\n * var param_2 = obj.sumRegion(row1,col1,row2,col2)\\n */\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define num-matrix%\\n  (class object%\\n    (super-new)\\n\\n    ; matrix : (listof (listof exact-integer?))\\n    (init-field\\n      matrix)\\n    \\n    ; update : exact-integer? exact-integer? exact-integer? -> void?\\n    (define/public (update row col val)\\n\\n      )\\n    ; sum-region : exact-integer? exact-integer? exact-integer? exact-integer? -> exact-integer?\\n    (define/public (sum-region row1 col1 row2 col2)\\n\\n      )))\\n\\n;; Your num-matrix% object will be instantiated and called as such:\\n;; (define obj (new num-matrix% [matrix matrix]))\\n;; (send obj update row col val)\\n;; (define param_2 (send obj sum-region row1 col1 row2 col2))\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec num_matrix_init_(Matrix :: [[integer()]]) -> any().\\nnum_matrix_init_(Matrix) ->\\n  .\\n\\n-spec num_matrix_update(Row :: integer(), Col :: integer(), Val :: integer()) -> any().\\nnum_matrix_update(Row, Col, Val) ->\\n  .\\n\\n-spec num_matrix_sum_region(Row1 :: integer(), Col1 :: integer(), Row2 :: integer(), Col2 :: integer()) -> integer().\\nnum_matrix_sum_region(Row1, Col1, Row2, Col2) ->\\n  .\\n\\n\\n%% Your functions will be called as such:\\n%% num_matrix_init_(Matrix),\\n%% num_matrix_update(Row, Col, Val),\\n%% Param_2 = num_matrix_sum_region(Row1, Col1, Row2, Col2),\\n\\n%% num_matrix_init_ will be called before every test case, in which you can do some necessary initializations.\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule NumMatrix do\\n  @spec init_(matrix :: [[integer]]) :: any\\n  def init_(matrix) do\\n\\n  end\\n\\n  @spec update(row :: integer, col :: integer, val :: integer) :: any\\n  def update(row, col, val) do\\n\\n  end\\n\\n  @spec sum_region(row1 :: integer, col1 :: integer, row2 :: integer, col2 :: integer) :: integer\\n  def sum_region(row1, col1, row2, col2) do\\n\\n  end\\nend\\n\\n# Your functions will be called as such:\\n# NumMatrix.init_(matrix)\\n# NumMatrix.update(row, col, val)\\n# param_2 = NumMatrix.sum_region(row1, col1, row2, col2)\\n\\n# NumMatrix.init_ will be called before every test case, in which you can do some necessary initializations.\"}]",
                    "sampleTestCase": "[\"NumMatrix\",\"sumRegion\",\"update\",\"sumRegion\"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[3,2,2],[2,1,4,3]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n    \"classname\": \"NumMatrix\",\r\n    \"maxbytesperline\": 115000,\r\n    \"constructor\": {\r\n        \"params\": [\r\n            {\r\n                \"type\": \"integer[][]\",\r\n                \"name\": \"matrix\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"matrixRowSize\",\r\n                \"lang\": \"c\",\r\n                \"value\": \"size_1\"\r\n            },\r\n            {\r\n                \"type\": \"integer\",\r\n                \"name\": \"matrixColSize\",\r\n                \"lang\": \"c\",\r\n                \"value\": \"col_size_1\"\r\n            }\r\n        ]\r\n    },\r\n    \"methods\": [\r\n        {\r\n            \"name\" : \"update\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"row\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"col\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"val\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"void\"\r\n            }\r\n        },\r\n        {\r\n            \"name\" : \"sumRegion\",\r\n            \"params\": [\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"row1\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"col1\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"row2\"\r\n                },\r\n                {\r\n                    \"type\": \"integer\",\r\n                    \"name\": \"col2\"\r\n                }\r\n            ],\r\n            \"return\": {\r\n                \"type\": \"integer\"\r\n            }\r\n        }\r\n    ],\r\n    \"systemdesign\": true,\r\n    \"params\": [\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        },\r\n        {\r\n            \"name\": \"inputs\",\r\n            \"type\": \"integer[]\"\r\n        }\r\n    ],\r\n    \"return\": {\r\n        \"type\": \"list<String>\",\r\n        \"dealloc\": true\r\n    }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a 2D matrix <code>matrix</code>, handle multiple queries of the following types:</p>\n\n<ol>\n\t<li><strong>Update</strong> the value of a cell in <code>matrix</code>.</li>\n\t<li>Calculate the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ol>\n\n<p>Implement the NumMatrix class:</p>\n\n<ul>\n\t<li><code>NumMatrix(int[][] matrix)</code> Initializes the object with the integer matrix <code>matrix</code>.</li>\n\t<li><code>void update(int row, int col, int val)</code> <strong>Updates</strong> the value of <code>matrix[row][col]</code> to be <code>val</code>.</li>\n\t<li><code>int sumRegion(int row1, int col1, int row2, int col2)</code> Returns the <strong>sum</strong> of the elements of <code>matrix</code> inside the rectangle defined by its <strong>upper left corner</strong> <code>(row1, col1)</code> and <strong>lower right corner</strong> <code>(row2, col2)</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/03/14/summut-grid.jpg\" style=\"width: 500px; height: 222px;\" />\n<pre>\n<strong>Input</strong>\n[&quot;NumMatrix&quot;, &quot;sumRegion&quot;, &quot;update&quot;, &quot;sumRegion&quot;]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]]\n<strong>Output</strong>\n[null, 8, null, 10]\n\n<strong>Explanation</strong>\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e. sum of the left red rectangle)\nnumMatrix.update(3, 2, 2);       // matrix changes from left image to right image\nnumMatrix.sumRegion(2, 1, 4, 3); // return 10 (i.e. sum of the right red rectangle)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == matrix.length</code></li>\n\t<li><code>n == matrix[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= row &lt; m</code></li>\n\t<li><code>0 &lt;= col &lt; n</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= row1 &lt;= row2 &lt; m</code></li>\n\t<li><code>0 &lt;= col1 &lt;= col2 &lt; n</code></li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to <code>sumRegion</code> and <code>update</code>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Range Sum Query - 2D Mutable",
                        "content": "[TOC]\n\n## Solution\n\n---\n#### Approach 1: Brute Force\n\nWe use the same brute force method as we used in [2D Immutable version](https://leetcode.com/problems/range-sum-query-2d-immutable/solution/) to calculate the sum of region. In addition to the previous problem, here we have to update the value of the matrix as well, which we simply do with `data[row][col] = val`.\n\n**Algorithm**\n\nBelow is the implementation of this approach.\n\n<iframe src=\"https://leetcode.com/playground/P5cZWzhs/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"P5cZWzhs\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity\n\n    * **sumRegion** - $$O(MN)$$ per query. Where $$M$$ and $$N$$ represents the number of rows and columns respectively, each *sumRegion* query can go through at most $$M \\times N$$ elements.\n\n    * **update** -  $$O(1)$$ per query.\n\n* Space Complexity: $$O(1)$$.\n\n---\n\n#### Approach 2: Using Binary Indexed Tree\n\n**Intuition**\n\nThe problem differs than the [2D Immutable version](https://leetcode.com/problems/range-sum-query-2d-immutable/solution/) as there is an additional update method that changes the values present inside the matrix, hence it's not even a good choice to cache or pre-compute all the results. There is a special data structure called **Binary Indexed Tree** that we will use to solve this problem efficiently which is based on the idea of storing the *partial sums*. We then use these partial sums to obtain the overall sum in the *sumRegion* method. The way we store these partial sums in a Binary Indexed Tree (BIT), a.k.a. Fenwick Tree, allows us to achieve both the update and query to be done in logarithmic time.\n\nConsider the case of 1-D array. Assume we have an array `nums` of size 8 (`nums[1], nums[2] ... nums[8]`) (1-based indexing). We store the partial sums of the array `nums` in another array `bit` of size 8 (`bit[1], bit[2] ... bit[8]`). The idea is to compute each value of `bit` array in a way that allows us to \"quickly\" compute the sum as well as update the values for the array `nums`. We do it using the idea of bit manipulation.\n\nEach number can be represented as sum of power of two's and this is what will allow us to obtain the overall sum from the partial sums. For example, 7 can be represented as $$1 + 2 + 4 = (2^{0} + 2^{1} + 2^{2})$$ hence whenever we want to calculate the cumulative sum till 7th index in the **nums array**, we will utilize the values stored in the 1st, 2nd and 4th index in the **bit array**. Here in case of Binary Indexed Tree, the 1st, 2nd and 4th index of the `bit` array will store the **non-overlapping partial sums** which can be added up to obtain the cumulative sum till 7th index in the `nums` array. Hence, we have $$cum\\_sum(7) = bit[1] + bit[2] + bit[4] = a[1] + a[2] + ... + a[7]$$ (where cum_sum(7) refers to cumulative sum till 7th index of `nums` array). But how do we obtain the sum in such a manner? For this, consider the `bit` array as shown below (let's assume that we can efficiently obtain the below mentioned array, we'll discuss later how we can actually do it).\n\n```\nbit[1] = nums[1]\nbit[2] = nums[1] + nums[2]\nbit[3] = nums[3]\nbit[4] = nums[1] + nums[2] + nums[3] + nums[4]\nbit[5] = nums[5]\nbit[6] = nums[5] + nums[6]\nbit[7] = nums[7]\nbit[8] = nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8]\n```\n\nWhen we try to calculate cumulative sum till any index *n* the steps that we follow are.\n\n1. Decompose *n* as the sum of power of 2's. Let's say $$n = n_{1} + n_{2} + ... + n_{k}$$ where each of the number $$n_{i}$$ is a number which is a power of 2. For example, When $$n = 7$$, we have $$n_{1} = 1, n_{2} = 2, n_{3} = 4\\ (7 = 1 + 2 + 4)$$\n\n2. The cumulative sum till index `n` in the `nums` array can then be obtained with the help of `bit` array as $$cum\\_sum(n) = bit[n_{1}] + bit[n_{2}] + ... + bit[n_{k}]$$\n\nAs mentioned before, since we'll store the values in the bit array as **non-overlapping partial sums**, that's why step 2 is possible and gives us the cumulative sum as the sum of the values from the `bit` array. The question that we must ask now is - How can we build the `bit` array in such a manner? For this, we need to do two things.\n\n1. Understand lsb (least significant bit, non-zero) of a number.\n\n2. Observe the pattern of occurence of each number from `nums` array in the `bit` array.\n\n#### LSB (least significant bit)\n\nConsider the binary representation of 5 (`5 -> 101`). The least significant (non-zero) bit of a number is obtained by taking the right most non-zero bit from the binary representation and ignoring all the other bits (i.e. considering all the other bits as 0). Hence `lsb(5) = 001` (considering only the rightmost non-zero bit and ignoring all others). Similarly `lsb(6) = 010`. Why? Since `6 -> 110` and the right most set bit occurs at the second position.\n\nNext, let's notice the occurence of each element of nums array in the bit array as follows.\n\n```\nnums[1] isPresentIn -> bit[1], bit[2], bit[4], bit[8]\nnums[2] isPresentIn -> bit[2], bit[4], bit[8]\nnums[3] isPresentIn -> bit[3], bit[4], bit[8]\nnums[4] isPresentIn -> bit[4], bit[8]\nnums[5] isPresentIn -> bit[5], bit[6], bit[8]\nnums[6] isPresentIn -> bit[6], bit[8]\nnums[7] isPresentIn -> bit[7], bit[8]\nnums[8] isPresentIn -> bit[8]\n```\n\nLet's convert all the indices shown above into their binary representation. We then have (indices for nums array on the LHS and bit array on the RHS)\n\n```\nLHS        -> RHS\nnums[0001] -> bit[0001], bit[0010], bit[0100], bit[1000]\nnums[0010] -> bit[0010], bit[0100], bit[1000]\nnums[0011] -> bit[0011], bit[0100], bit[1000]\nnums[0100] -> bit[0100], bit[1000],\nnums[0101] -> bit[0101], bit[0110], bit[1000]\nnums[0110] -> bit[0110], bit[1000]\nnums[0111] -> bit[0111], bit[1000]\nnums[1000] -> bit[1000]\n```\n\nOn seeing the pattern above, we can notice that the sequence of indices on the RHS can be obtained by continuously adding the number to it's lsb, starting from the index on the LHS.\n\nExample\n\n```\n0101 -> (add 0001) -> 0110 -> (add 0010) -> 1000\n```\n\nWe can use this observation to build the bit array as we now know all the indices in the `bit` array where a particular value from the `nums` array occurs.\n\nNote: We have used 1-based indexing at all the places in the 1-D BIT explanation part.\n\n<iframe src=\"https://leetcode.com/playground/TfnVinxt/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"TfnVinxt\"></iframe>\n\nThe process of adding a particular number `val` to the appropriate locations in the `bit` array is what is known as the *update* process in a Binary Indexed Tree. Hence we can re-write the above code as.\n\n<iframe src=\"https://leetcode.com/playground/6esFhejf/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"6esFhejf\"></iframe>\n\nBelow is the animation of the `buildBIT` process for the array `[2, 3, 1, 2, 4, 1, 2, 3]`. We initialize all the elements of the `bit` array to zero and then build it.\n\n<div>\n    <center>\n        <video controls preload=\"none\" width=\"100%\" poster=\"../Figures/308/buildBIT-1D/poster.JPG\">\n            <source src=\"../Figures/308/buildBIT-1D/buildBIT.mp4\" type=\"video/mp4\">\n        </video>\n    </center>\n</div>\n\nHaving a separate update method also allows us to perform the \"updates\" in a Binary Indexed Tree, i.e. if we want to change the values of `nums[i]` from an old value `a` to new updated value `b`, we simply calculate the difference `b - a` and call the update function as `updateBIT(i, b - a)` (note that we do not change the actual `nums` array, only the `bit` array changes). We still haven't implemented the `sumRegion` for our 1-D example here. This is known as \"query\" method for a Binary Indexed Tree. When query method is called for a particular index `i` on the Binary Indexed Tree, it returns the cumulative sum till the index `i`. Similar to update method, where we kept adding the lsb of the index to itself, here, we'll keep subtracting the lsb of the index from itself to calculate the cumulative sum from partial sums stored in `bit` array. The code is as follows.\n\n<iframe src=\"https://leetcode.com/playground/J8vDrBju/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"J8vDrBju\"></iframe>\n\nBelow is the animation of the query process for the array `[2, 3, 1, 2, 4, 1, 2, 3]` in case of `index = 7`, i.e. we are trying to calculate the cumulative sum till the 7th index of the nums array.\n\n<div>\n    <center>\n        <video controls preload=\"none\" width=\"100%\" poster=\"../Figures/308/queryBIT-1D/poster.JPG\">\n            <source src=\"../Figures/308/queryBIT-1D/queryBIT.mp4\" type=\"video/mp4\">\n        </video>\n    </center>\n</div>\n\nWe can now use the `queryBIT` and `updateBIT` methods to obtain the sum between any two indices `(i, j)` and can update the value at any given index `i` as follows\n\n<iframe src=\"https://leetcode.com/playground/9XzxjJcW/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"9XzxjJcW\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity\n\n    * Update (1D) - $$O(\\log{N})$$\n\n    * Query (1D) - $$O(\\log{N})$$\n\n    * Build (1D) - $$O(N \\cdot \\log{N})$$\n\n    * Here N denotes the number of elements present in the array. Maximum number of steps that we'll have to iterate for update and query method is upper bounded by the number of bits in the binary representation of the size of the array (N).\n\n* Space Complexity\n\n    * $$O(N)$$ - Since we'll need an extra `bit` array to store the non-overlapping partial sums.\n\nWe now have the required pre-requisites to implement an efficient solution for the case of 2D arrays (or matrix), which we'll see next.\n\n**Note**: The build method can be optimized further and can be done in time $$O(N)$$. We do this by adding the entry from the nums array to the immediate next entry in the `bit` array, i.e. the next higher index that the value from the nums array contributes to. Below is the implementation for this\n\n<iframe src=\"https://leetcode.com/playground/GQbpSxk6/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"GQbpSxk6\"></iframe>\n\n#### 2D BIT\n\nTill now, we have seen how to perform \"query\" and \"update\" in case of 1-D example. We'll try to extend this to 2D array (matrix) now.\n\nIn case of 1D example, we were iterating directly over the indices of the array in 1 direction, but here in the case of a matrix, we have a 2-dimensional indices. Hence in order to use the concept of BIT for 2D case, we'll iterate in both the directions, i.e. over the rows and columns of the matrix to perform the update and query method. If `i` and `j` represents the indices corresponding to rows and columns that are used for iterating over the matrix, we simply increment these variables by `lsb(i)` and `lsb(j)` in the update operation and decrement by `lsb(i)` and `lsb(j)` in decrement operation. Another change that happens in the case of 2D bit is, the partial sums that we store now are corresponding to partial sum of the non-overlapping sub-rectangles or sub-matrix present in the matrix.\n\nThe update and the query for the 2D matrix then are as follows.\n\n<iframe src=\"https://leetcode.com/playground/5mp9yK7Y/shared\" frameBorder=\"0\" width=\"100%\" height=\"463\" name=\"5mp9yK7Y\"></iframe>\n\nThe build method in case of 2D array can be implemented as follows.\n\n<iframe src=\"https://leetcode.com/playground/6ed7oMQe/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"6ed7oMQe\"></iframe>\n\nWe can now use the `queryBIT` and `updateBIT` methods to obtain the sum for any rectangular region, denoted by `(row1, col1)` and `(row2, col2)` and can update the value at any given location `(row, col)` as follows\n\n<iframe src=\"https://leetcode.com/playground/SEbS2K5M/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"SEbS2K5M\"></iframe>\n\nThe overall solution code for 2D case is as follows.\n\nNote that there will be some minor modifications in the final implementation from the code snippets provided above as the input that we have here is based on 0-based indexing and not 1-based indexing. Hence we'll take that into account in the final implementation. \n\n<iframe src=\"https://leetcode.com/playground/Fr3EPYnJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Fr3EPYnJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity\n\n    * Update (2D) - $$O(\\log{N} \\cdot \\log{M})$$\n\n    * Query (2D) - $$O(\\log{N} \\cdot \\log{M})$$\n\n    * Build (2D) - $$O(N \\cdot M \\cdot \\log{N} \\cdot \\log{M})$$\n\n    * Here N denotes the number of rows and M denotes the number of columns.\n\n* Space Complexity\n\n    * $$O(NM)$$ - Since we'll need an extra `bit` matrix to store the non-overlapping partial sums",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "range-sum-query-2d-mutable",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "These problems may require you to implement a given interface of a class, and may involve using one or more data structures. These are great exercises to improve your data structure skills.\n\nWe recommend: LRU Cache, Implement Trie (Prefix Tree) and Find Median from Data Stream."
    },
    {
        "id": "123",
        "title": "Math",
        "slug": "math",
        "items": [
            {
                "id": "872",
                "title": "Largest Number",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 123,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "179",
                    "questionFrontendId": "179",
                    "sessionId": "968792",
                    "questionTitle": "Largest Number",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/largest-number/submit/",
                    "interpretUrl": "/problems/largest-number/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    string largestNumber(vector<int>& nums) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public String largestNumber(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def largestNumber(self, nums):\\n        \\\"\\\"\\\"\\n        :type nums: List[int]\\n        :rtype: str\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def largestNumber(self, nums: List[int]) -> str:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nchar * largestNumber(int* nums, int numsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public string LargestNumber(int[] nums) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} nums\\n * @return {string}\\n */\\nvar largestNumber = function(nums) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} nums\\n# @return {String}\\ndef largest_number(nums)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func largestNumber(_ nums: [Int]) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestNumber(nums []int) string {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def largestNumber(nums: Array[Int]): String = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun largestNumber(nums: IntArray): String {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn largest_number(nums: Vec<i32>) -> String {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $nums\\n     * @return String\\n     */\\n    function largestNumber($nums) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function largestNumber(nums: number[]): string {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (largest-number nums)\\n  (-> (listof exact-integer?) string?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec largest_number(Nums :: [integer()]) -> unicode:unicode_binary().\\nlargest_number(Nums) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec largest_number(nums :: [integer]) :: String.t\\n  def largest_number(nums) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[10,2]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"largestNumber\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"string\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given a list of non-negative integers <code>nums</code>, arrange them such that they form the largest number.</p>\n\n<p><strong>Note:</strong> The result may be very large, so you need to return a string instead of an integer.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10,2]\n<strong>Output:</strong> &quot;210&quot;\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,30,34,5,9]\n<strong>Output:</strong> &quot;9534330&quot;\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1]\n<strong>Output:</strong> &quot;1&quot;\n</pre>\n\n<p><strong>Example 4:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [10]\n<strong>Output:</strong> &quot;10&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Largest Number",
                        "content": "[TOC]\n\n#### Approach #1 Sorting via Custom Comparator [Accepted]\n\n**Intuition**\n\nTo construct the largest number, we want to ensure that the most significant\ndigits are occupied by the largest digits.\n\n**Algorithm**\n\nFirst, we convert each integer to a string. Then, we sort the array of strings.\n\nWhile it might be tempting to simply sort the numbers in descending order,\nthis causes problems for sets of numbers with the same leading digit. For\nexample, sorting the problem example in descending order would produce the\nnumber $$9534303$$, while the correct answer can be achieved by transposing\nthe $$3$$ and the $$30$$. Therefore, for each pairwise comparison during the\nsort, we compare the numbers achieved by concatenating the pair in both\norders. We can prove that this sorts into the proper order as follows: \n\nAssume that (without loss of generality), for some pair of integers $$a$$ and\n$$b$$, our comparator dictates that $$a$$ should precede $$b$$ in sorted\norder. This means that $$a\\frown b > b\\frown a$$ (where $$\\frown$$ represents\nconcatenation). For the sort to produce an incorrect ordering, there must be\nsome $$c$$ for which $$b$$ precedes $$c$$ and $$c$$ precedes $$a$$. This is a\ncontradiction because $$a\\frown b > b\\frown a$$ and $$b\\frown c > c\\frown b$$\nimplies $$a\\frown c > c\\frown a$$. In other words, our custom comparator\npreserves transitivity, so the sort is correct.\n\nOnce the array is sorted, the most \"signficant\" number will be at the front.\nThere is a minor edge case that comes up when the array consists of only\nzeroes, so if the most significant number is $$0$$, we can simply return\n$$0$$. Otherwise, we build a string out of the sorted array and return it.\n\n<iframe src=\"https://leetcode.com/playground/wVZb2DmS/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"wVZb2DmS\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(nlgn)$$\n\n    Although we are doing extra work in our comparator, it is only by a\n    constant factor. Therefore, the overall runtime is dominated by the\n    complexity of `sort`, which is $$\\mathcal{O}(nlgn)$$ in Python and Java.\n\n* Space complexity : $$\\mathcal{O}(n)$$\n\n    Here, we allocate $$\\mathcal{O}(n)$$ additional space to store the copy of `nums`.\n    Although we could do that work in place (if we decide that it is okay to\n    modify `nums`), we must allocate $$\\mathcal{O}(n)$$ space for the final return\n    string. Therefore, the overall memory footprint is linear in the length\n    of `nums`.\n\n---\n\nAnalysis and solutions written by: [@emptyset](https://leetcode.com/emptyset)",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "largest-number",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.788,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "873",
                "title": "Max Points on a Line",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 123,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "149",
                    "questionFrontendId": "149",
                    "sessionId": "968792",
                    "questionTitle": "Max Points on a Line",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/max-points-on-a-line/submit/",
                    "interpretUrl": "/problems/max-points-on-a-line/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int maxPoints(vector<vector<int>>& points) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int maxPoints(int[][] points) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def maxPoints(self, points):\\n        \\\"\\\"\\\"\\n        :type points: List[List[int]]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def maxPoints(self, points: List[List[int]]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint maxPoints(int** points, int pointsSize, int* pointsColSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int MaxPoints(int[][] points) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} points\\n * @return {number}\\n */\\nvar maxPoints = function(points) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} points\\n# @return {Integer}\\ndef max_points(points)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func maxPoints(_ points: [[Int]]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func maxPoints(points [][]int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def maxPoints(points: Array[Array[Int]]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun maxPoints(points: Array<IntArray>): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn max_points(points: Vec<Vec<i32>>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $points\\n     * @return Integer\\n     */\\n    function maxPoints($points) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function maxPoints(points: number[][]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (max-points points)\\n  (-> (listof (listof exact-integer?)) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec max_points(Points :: [[integer()]]) -> integer().\\nmax_points(Points) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec max_points(points :: [[integer]]) :: integer\\n  def max_points(points) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[1,1],[2,2],[3,3]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"maxPoints\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"points\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\" style=\"width: 300px; height: 294px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 300</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>All the <code>points</code> are <strong>unique</strong>.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Max points on a line",
                        "content": "[TOC]\r\n\r\n## Solution\r\n\r\n---\r\n\r\n#### Approach 1: Enumeration\r\n\r\n**Intuition**\r\n\r\nLet's simplify the problem and search the maximum number of points\r\non a line passing through the point `i`. \r\n\r\nOne could immediately notice that it's interesting to consider only\r\nthe next points `i + 1 .. N - 1` because the maximum number of points\r\ncontaining, for example, the point `i - 2` was already found\r\nduring the search of the maximum number of points\r\non a line passing through the point `i - 2`. \r\n\r\n<img src=\"../Figures/149/149_lines_i.png\" width=\"500\">\r\n\r\nThe idea is very simple : draw the lines \r\npassing through the point `i` and each of the next points.\r\nSave these lines is a hash table with a counter `2` = two points\r\non this line.  \r\nLet's imagine now that points `i < i + k < i + l` are on the same line.\r\nThen drawing a line through `i` and `i + l` one would discover that this \r\nline is already tracked and hence one has to update a counter \r\nof points on this line `count++`.\r\n\r\n>How to save a line? \r\n\r\nIf the line is horizontal, i.e. `y = c`,\r\none could use this constant `c` as a line key in a hash table of horizontal lines.\r\n\r\nThe other lines could be represented as `y = slope * x + c`. \r\n\r\nThe equation for the line passing through two points `1` and `2` \r\n[could be written through their coordinates](https://en.wikipedia.org/wiki/Line_(geometry)#On_the_Cartesian_plane)\r\nas\r\n\r\n$$\r\n\\frac{x - x_1}{x_2 - x_1} = \\frac{y - y_1}{y_2 - y_1}\r\n$$\r\n\r\nthat for the representation $$y = \\text{slope} \\times x + c$$ means \r\n\r\n$$\r\n\\text{slope} = \\frac{y_2 - y_1}{x_2 - x_1}\r\n$$\r\n\r\n>Since we are drawing a line between the starting point `i` and each of the following points, if all these lines share the same `slope` value, then we can be sure that all these points are aligned on the same line.\r\n\r\nHence, a `slope` value is sufficient to represent a unique line starting from a specific point `i`.\r\n\r\nOne might go ahead and use a float (or double) value to represent each unique slope.\r\nIndeed, this could work for most of the cases, but not all.\r\n\r\n\r\n**Slope Representation**\r\n\r\nOne of the cases that a float value would not cut for the slope variable is that when two points form a vertical line, (_i.e._ $$x_1 == x_2$$).\r\nAs we can see from the formula to calculate the slope value, we would encounter a divide-by-zero error.\r\n\r\nOne might argument we could treat this as a special case, and assign a special value (say, zero) to represent the horizontal slope.\r\n\r\nHowever, a bigger problem is that the float and double values are intrinsically **_inaccurate_**, due to how these values are [represented in the computer](https://en.wikipedia.org/wiki/Floating-point_arithmetic).\r\nA simple fact to comprehend this limitation is that we could have infinite number of digits for a fraction number (_i.e._ $$\\frac{1}{3}$$), we could only keep a limited number of digits as its float value in the computer.\r\n\r\nOne can run a fun experiment to calculate the result for the operation of $$1.2 - 1.0$$ in the Python shell.\r\n(_spoiler alert_: we would get the value of `0.19999999999999996` as the result.)\r\n\r\nTherefore, it is not wise to use the float/double value to represent a unique slope, since they are not accurate.\r\n\r\n>To circumvent the above issue, one could use a pair of [co-prime integers](https://en.wikipedia.org/wiki/Coprime_integers) to represent unique slope.\r\n\r\nAs a reminder, two integers are co-primes, if and only if their greatest common divisor is 1.\r\n\r\nAs one can see, due to the property of co-prime numbers, they can be used to represent the slope values of different lines.\r\nFor example, for the slope values of $$\\frac{1}{3}, \\frac{2}{6}, \\frac{3}{9}$$, they all can be represented with the co-prime numbers of $$(1, 3)$$.\r\n\r\n**Algorithm**\r\n\r\nWe now have the idea and even some important details (co-primes) to implement the algorithm:\r\n\r\n* Initiate the maximum number of points `max_count = 1`.\r\n\r\n* Iterate over all points `i` from `0` to `N - 2`.\r\n\r\n    * For each point `i` find a maximum number of points \r\n    `max_count_i`\r\n    on a line passing through the point `i` :\r\n        * Initiate the maximum number of points \r\n        on a line passing through the point `i` : `count = 1`.\r\n        * Iterate over next points `j` from `i + 1` to `N - 1`.\r\n            * If `j` is a duplicate of `i`, \r\n            update a number of duplicates for point `i`.\r\n            * If not:\r\n                * Save the line passing through the points `i` and `j`.\r\n                * Update `count` at each step.\r\n        * Return `max_count_i = count + duplicates`.\r\n            \r\n    * Update the result `max_count = max(max_count, max_count_i)`\r\n        \r\n!?!../Documents/149_LIS.json:1000,581!?!\r\n\r\n<iframe src=\"https://leetcode.com/playground/5NsCvrbQ/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"5NsCvrbQ\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity : $$\\mathcal{O}(N^2)$$ since one draws \r\nnot more than `N - 1` lines passing through the point `0`,\r\nnot more than `N - 2` lines for the point `1`, and\r\nthe only one line for the point `N - 2`. That results in\r\n`(N - 1) + (N - 2) + .. + 1 = N(N - 1)/2` operations, _i.e._ $$\\mathcal{O}(N^2)$$ time complexity.\r\n\r\n* Space complexity : $$\\mathcal{O}(N)$$ to track down not more than `N - 1` lines.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "max-points-on-a-line",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 2.848,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Most of the math questions asked in interviews do not require math knowledge beyond middle school level.\n\nWe recommend Max Points on a Line."
    },
    {
        "id": "124",
        "title": "Others",
        "slug": "others",
        "items": [
            {
                "id": "874",
                "title": "Queue Reconstruction by Height",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 124,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "406",
                    "questionFrontendId": "406",
                    "sessionId": "968792",
                    "questionTitle": "Queue Reconstruction by Height",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/queue-reconstruction-by-height/submit/",
                    "interpretUrl": "/problems/queue-reconstruction-by-height/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int[][] reconstructQueue(int[][] people) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def reconstructQueue(self, people):\\n        \\\"\\\"\\\"\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** reconstructQueue(int** people, int peopleSize, int* peopleColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int[][] ReconstructQueue(int[][] people) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} people\\n * @return {number[][]}\\n */\\nvar reconstructQueue = function(people) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} people\\n# @return {Integer[][]}\\ndef reconstruct_queue(people)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func reconstructQueue(people [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun reconstructQueue(people: Array<IntArray>): Array<IntArray> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn reconstruct_queue(people: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $people\\n     * @return Integer[][]\\n     */\\n    function reconstructQueue($people) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function reconstructQueue(people: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (reconstruct-queue people)\\n  (-> (listof (listof exact-integer?)) (listof (listof exact-integer?)))\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec reconstruct_queue(People :: [[integer()]]) -> [[integer()]].\\nreconstruct_queue(People) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec reconstruct_queue(people :: [[integer]]) :: [[integer]]\\n  def reconstruct_queue(people) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"reconstructQueue\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"people\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer[][]\",\r\n    \"colsize\": \"2\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> represents the <code>i<sup>th</sup></code> person of height <code>h<sub>i</sub></code> with <strong>exactly</strong> <code>k<sub>i</sub></code> other people in front who have a height greater than or equal to <code>h<sub>i</sub></code>.</p>\n\n<p>Reconstruct and return <em>the queue that is represented by the input array </em><code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> is the attributes of the <code>j<sup>th</sup></code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>Output:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>Explanation:</strong>\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>Output:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= people.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= h<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= k<sub>i</sub> &lt; people.length</code></li>\n\t<li>It is guaranteed that the queue can be reconstructed.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [
                        "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
                        "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
                    ],
                    "solution": {
                        "title": "Queue Reconstruction by Height",
                        "content": "[TOC]\n\n## Solution\n\n--- \n\n#### Approach 1: Greedy\n\n**Intuition**\n\nThe problem is to reconstruct the queue.\n\n![pic](../Figures/406/input.png)\n\nLet's start from the simplest case, \nwhen all guys (h, k) in the queue are of the same height h,\nand differ by their k values only (the number of people in front \nwho have a greater or the same height).\nThen the solution is simple: each guy's index is equal to his k value.\nThe guy with zero people in front takes the place number 0,\nthe guy with 1 person in front takes the place number 1, and \nso on and so forth.  \n\n![fig](../Figures/406/same.png)\n\nThis strategy could be used even in the case when not all people\nare of the same height. The smaller persons are \"invisible\" for the \ntaller ones, and hence one could first arrange the tallest guys as if \nthere was no one else.\n\nLet's now consider a queue with people of two different heights: 7 and 6.\nFor simplicity, let's have just one 6-height guy.\nFirst follow the strategy above and arrange guys of height 7. Now it's \ntime to find a place for the guy of height 6. \nSince he is \"invisible\" for the 7-height guys, he could take \nwhatever place without disturbing 7-height guys order. \nHowever, for him the others are visible, and hence he should \ntake the position equal to his k-value, in order to have his proper place. \n \n![fig](../Figures/406/two.png)\n\n> This idea is easy to extend for the case of numerous guys of height 6.\nJust sort them by k-values, as it was done before for 7-height guys,\nand insert them one by one on the positions equal to their k-values. \n\nThe following strategy could be continued recursively:\n\n- Sort the tallest guys in the ascending order by k-values \nand then insert them one by one into output queue at the \nindexes equal to their k-values.\n\n- Take the next height in the descending order. \nSort the guys of that height in the ascending order by k-values \nand then insert them one by one into output queue at the \nindexes equal to their k-values.\n\n- And so on and so forth.\n\n!?!../Documents/406_LIS.json:1000,612!?!\n\n**Algorithm**\n\n- Sort people: \n    - In the descending order by height. \n    - Among the guys of the same height, in the ascending order by k-values.\n\n- Take guys one by one, \nand place them in the output array at the indexes equal to their k-values.\n\n- Return output array.\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/p3kzy72R/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"p3kzy72R\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N^2)$$. To sort people takes \n$$\\mathcal{O}(N \\log N)$$ time. Then one proceeds to n insert\noperations, and each takes up to $$\\mathcal{O}(k)$$ time, \nwhere k is a current number of elements in the list. In total,\none needs up to \n$$\\mathcal{O}\\left({\\sum\\limits_{k = 0}^{N - 1}{k}}\\right)$$ time,\ni.e. up to $$\\mathcal{O}(N^2)$$ time.\n \n* Space complexity : $$\\mathcal{O}(N)$$ to keep the output.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "queue-reconstruction-by-height",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.607,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "875",
                "title": "Trapping Rain Water",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 124,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "42",
                    "questionFrontendId": "42",
                    "sessionId": "968792",
                    "questionTitle": "Trapping Rain Water",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/trapping-rain-water/submit/",
                    "interpretUrl": "/problems/trapping-rain-water/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int trap(vector<int>& height) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int trap(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def trap(self, height):\\n        \\\"\\\"\\\"\\n        :type height: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def trap(self, height: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint trap(int* height, int heightSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int Trap(int[] height) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} height\\n * @return {number}\\n */\\nvar trap = function(height) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} height\\n# @return {Integer}\\ndef trap(height)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func trap(_ height: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func trap(height []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def trap(height: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun trap(height: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn trap(height: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $height\\n     * @return Integer\\n     */\\n    function trap($height) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function trap(height: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (trap height)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec trap(Height :: [integer()]) -> integer().\\ntrap(Height) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec trap(height :: [integer]) :: integer\\n  def trap(height) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[0,1,0,2,1,0,1,3,2,1,2,1]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"trap\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"height\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\" style=\"width: 412px; height: 161px;\" />\n<pre>\n<strong>Input:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [4,2,0,3,2,5]\n<strong>Output:</strong> 9\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Trapping Rain Water",
                        "content": "[TOC]\n\n## Solution\n---\n#### Approach 1: Brute force\n\n**Intuition**\n\nDo as directed in question. For each element in the array, we find the maximum level of water it can trap after the rain, which is equal to the minimum of maximum height of bars on both the sides minus its own height.\n\n**Algorithm**\n\n* Initialize $$ans=0$$\n* Iterate the array from left to right:\n  + Initialize $$\\text{left\\_max}=0$$ and $$\\text{right\\_max}=0$$\n  + Iterate from the current element to the beginning of array updating:\n    * $$\\text{left\\_max}=\\max(\\text{left\\_max},\\text{height}[j])$$\n  + Iterate from the current element to the end of array updating:\n    * $$\\text{right\\_max}=\\max(\\text{right\\_max},\\text{height}[j])$$\n  + Add $$\\min(\\text{left\\_max},\\text{right\\_max}) - \\text{height}[i]$$ to $$\\text{ans}$$\n\n<iframe src=\"https://leetcode.com/playground/LnVLgsz6/shared\" frameBorder=\"0\" width=\"100%\" height=\"0\" name=\"LnVLgsz6\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n^2)$$. For each element of array, we iterate the left and right parts.\n\n* Space complexity: $$O(1)$$ extra space.\n<br />\n<br />\n---\n#### Approach 2: Dynamic Programming\n\n**Intuition**\n\nIn brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.\n\nThe concept is illustrated as shown:\n\n![Dynamic programming](../Figures/42/trapping_rain_water.png){:width=\"500px\"}\n{:align=\"center\"}\n\n**Algorithm**\n\n* Find maximum height of bar from the left end upto an index i in the array $$\\text{left\\_max}$$.\n* Find maximum height of bar from the right end upto an index i in the array $$\\text{right\\_max}$$.\n* Iterate over the $$\\text{height}$$ array and update ans:\n    + Add $$\\min(\\text{left\\_max}[i],\\text{right\\_max}[i]) - \\text{height}[i]$$ to $$\\text{ans}$$\n\n<iframe src=\"https://leetcode.com/playground/kyjATewE/shared\" frameBorder=\"0\" width=\"100%\" height=\"395\" name=\"kyjATewE\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$.\n    + We store the maximum heights upto a point using 2 iterations of $$O(n)$$ each.\n    + We finally update $$\\text{ans}$$ using the stored values in $$O(n)$$.\n\n* Space complexity: $$O(n)$$ extra space.\n    + Additional $$O(n)$$ space for $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$ arrays than in [Approach 1](#approach-1-brute-force).\n<br />\n<br />\n---\n#### Approach 3: Using stacks\n\n**Intuition**\n\nInstead of storing the largest bar upto an index as in [Approach 2](#approach-2-dynamic-programming), we can use stack to keep track of the bars that are bounded by longer bars and hence, may store water. Using the stack, we can do the calculations in only one iteration.\n\nWe keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting trapped water to $$\\text{ans}$$.\n\n**Algorithm**\n\n* Use stack to store the indices of the bars.\n* Iterate the array:\n    + While stack is not empty and $$\\text{height[current]}>\\text{height[st.top()]}$$\n        * It means that the stack element can be popped. Pop the top element as $$\\text{top}$$.\n        * Find the distance between the current element and the element at top of stack, which is to be filled.\n        $$\\text{distance} = \\text{current} - \\text{st.top}() - 1$$\n        * Find the bounded height\n        $$\\text{bounded\\_height} = \\min(\\text{height[current]}, \\text{height[st.top()]}) - \\text{height[top]}$$\n        * Add resulting trapped water to answer $$\\text{ans} \\mathrel{+}= \\text{distance} \\times \\text{bounded\\_height}$$\n    + Push current index to top of the stack\n    + Move $$\\text{current}$$ to the next position\n\n\n<iframe src=\"https://leetcode.com/playground/HcnNncFu/shared\" frameBorder=\"0\" width=\"100%\" height=\"361\" name=\"HcnNncFu\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$.\n    + Single iteration of $$O(n)$$ in which each bar can be touched at most twice(due to  insertion and deletion from stack) and insertion and deletion from stack takes $$O(1)$$ time.\n* Space complexity: $$O(n)$$. Stack can take upto $$O(n)$$ space in case of stairs-like or flat structure.\n<br />\n<br />\n\n---\n#### Approach 4: Using 2 pointers\n\n**Intuition**\n\nAs in [Approach 2](#approach-2-dynamic-programming), instead of computing the left and right parts seperately, we may think of some way to do it in one iteration.\nFrom the figure in dynamic programming approach, notice that as long as $$\\text{right\\_max}[i]>\\text{left\\_max}[i]$$ (from element 0 to 6), the water trapped depends upon the left_max, and similar is the case when $$\\text{left\\_max}[i]>\\text{right\\_max}[i]$$ (from element 8 to 11).\nSo, we can say that if there is a larger bar at one end (say right), we are assured that the water trapped would be dependant on height of bar in current direction (from left to right). As soon as we find the bar at other end (right) is smaller, we start iterating in opposite direction (from right to left).\nWe must maintain $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$ during the iteration, but now we can do it in one iteration using 2 pointers, switching between the two.\n\n**Algorithm**\n\n* Initialize $$\\text{left}$$ pointer to 0 and $$\\text{right}$$ pointer to size-1\n* While $$\\text{left}< \\text{right}$$, do:\n    + If $$\\text{height[left]}$$ is smaller than $$\\text{height[right]}$$\n        * If $$\\text{height[left]} \\geq \\text{left\\_max}$$, update $$\\text{left\\_max}$$\n        * Else add $$\\text{left\\_max}-\\text{height[left]}$$ to $$\\text{ans}$$\n        * Add 1 to $$\\text{left}$$.\n    + Else\n        * If $$\\text{height[right]} \\geq \\text{right\\_max}$$, update $$\\text{right\\_max}$$\n        * Else add $$\\text{right\\_max}-\\text{height[right]}$$ to $$\\text{ans}$$\n        * Subtract 1 from $$\\text{right}$$.\n\nRefer the example for better understanding:\n!?!../Documents/42/42_trapping_rain_water.json:1000,662!?!\n\n<iframe src=\"https://leetcode.com/playground/ak9pRdLp/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"ak9pRdLp\"></iframe>\n\n**Complexity analysis**\n\n* Time complexity: $$O(n)$$. Single iteration of $$O(n)$$.\n* Space complexity: $$O(1)$$ extra space. Only constant space required for $$\\text{left}$$, $$\\text{right}$$, $$\\text{left\\_max}$$ and $$\\text{right\\_max}$$.",
                        "canSeeDetail": true,
                        "paidOnly": false,
                        "titleSlug": "trapping-rain-water",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.671,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "876",
                "title": "The Skyline Problem",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 124,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "218",
                    "questionFrontendId": "218",
                    "sessionId": "968792",
                    "questionTitle": "The Skyline Problem",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/the-skyline-problem/submit/",
                    "interpretUrl": "/problems/the-skyline-problem/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public List<List<Integer>> getSkyline(int[][] buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def getSkyline(self, buildings):\\n        \\\"\\\"\\\"\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\n/**\\n * Return an array of arrays of size *returnSize.\\n * The sizes of the arrays are returned as *returnColumnSizes array.\\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\\n */\\nint** getSkyline(int** buildings, int buildingsSize, int* buildingsColSize, int* returnSize, int** returnColumnSizes){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public IList<IList<int>> GetSkyline(int[][] buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[][]} buildings\\n * @return {number[][]}\\n */\\nvar getSkyline = function(buildings) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[][]} buildings\\n# @return {Integer[][]}\\ndef get_skyline(buildings)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func getSkyline(_ buildings: [[Int]]) -> [[Int]] {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func getSkyline(buildings [][]int) [][]int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def getSkyline(buildings: Array[Array[Int]]): List[List[Int]] = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun getSkyline(buildings: Array<IntArray>): List<List<Int>> {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn get_skyline(buildings: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[][] $buildings\\n     * @return Integer[][]\\n     */\\n    function getSkyline($buildings) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function getSkyline(buildings: number[][]): number[][] {\\n\\n};\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec get_skyline(Buildings :: [[integer()]]) -> [[integer()]].\\nget_skyline(Buildings) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec get_skyline(buildings :: [[integer]]) :: [[integer]]\\n  def get_skyline(buildings) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"getSkyline\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"buildings\",\r\n      \"type\": \"integer[][]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<integer>>\",\r\n    \"colsize\": 2,\r\n    \"dealloc\": true\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>A city&#39;s <strong>skyline</strong> is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return <em>the <strong>skyline</strong> formed by these buildings collectively</em>.</p>\n\n<p>The geometric information of each building is given in the array <code>buildings</code> where <code>buildings[i] = [left<sub>i</sub>, right<sub>i</sub>, height<sub>i</sub>]</code>:</p>\n\n<ul>\n\t<li><code>left<sub>i</sub></code> is the x coordinate of the left edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>right<sub>i</sub></code> is the x coordinate of the right edge of the <code>i<sup>th</sup></code> building.</li>\n\t<li><code>height<sub>i</sub></code> is the height of the <code>i<sup>th</sup></code> building.</li>\n</ul>\n\n<p>You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height <code>0</code>.</p>\n\n<p>The <strong>skyline</strong> should be represented as a list of &quot;key points&quot; <strong>sorted by their x-coordinate</strong> in the form <code>[[x<sub>1</sub>,y<sub>1</sub>],[x<sub>2</sub>,y<sub>2</sub>],...]</code>. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate <code>0</code> and is used to mark the skyline&#39;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline&#39;s contour.</p>\n\n<p><b>Note:</b> There must be no consecutive horizontal lines of equal height in the output skyline. For instance, <code>[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]</code> is not acceptable; the three lines of height 5 should be merged into one in the final output as such: <code>[...,[2 3],[4 5],[12 7],...]</code></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/12/01/merged.jpg\" style=\"width: 800px; height: 331px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n<strong>Output:</strong> [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n<strong>Explanation:</strong>\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[0,2,3],[2,5,3]]\n<strong>Output:</strong> [[0,3],[5,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt; right<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>buildings</code> is sorted by <code>left<sub>i</sub></code> in&nbsp;non-decreasing order.</li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Skyline Problem",
                        "content": "[TOC]\n\n## Solution\n\n---\n\n#### Approach 1: Divide and Conquer\n\n**Solution Template**\n\nThe problem is a classical example of divide and conquer\napproach, and typically implemented exactly the same way as\nmerge sort algorithm.\n\nLet's follow here a solution template for divide and conquer\nproblems :\n\n- Define the base case(s).\n\n- Split the problem into subproblems and solve them recursively.\n\n- Merge the subproblems solutions into the problem solution.\n\n**Algorithm**\n\ngetSkyline for `n` buildings :\n\n- If `n == 0` : return an empty list.\n\n- If `n == 1` : return the skyline for one building (it's straightforward).\n\n- `leftSkyline` = getSkyline for the first n/2 buildings.\n\n- `rightSkyline` = getSkyline for the last n/2 buildings.\n\n- Merge `leftSkyline` and `rightSkyline`.\n\nNow let's discuss each step in more details.\n\n**Base Cases**\n\nThe first base case is an empty `buildings` list.\nThen the skyline is an empty list, too.\n\nThe second base case is the only one building in the list, when\nthe skyline construction is quite straightforward.\n\n![bla](../Figures/218/base5.png)\n\n**How to split the problem**\n\nThe idea is the same as for merge sort : at each step\nsplit the list exactly in two parts : from `0` to `n/2` and\n from `n/2` to `n`, and then construct\nthe skylines recursively for each part.\n\n![bla](../Figures/218/split5.png)\n\n**How to merge two skylines**\n\nThe algorithm for merge function is quite straightforward\nand based on the same merge sort logic : the height of an output skyline is\nalways a maximum between the left and right skylines.\n\n![bla](../Figures/218/merge5.png)\n\nLet's use here two\npointers `pR` and `pL` to track the current element index in both\nskylines, and three integers `leftY`, `rightY`, and `currY` to track the current height\nfor the `left` skyline, `right` skyline and the merged skyline.\n\nmergeSkylines (left, right) :\n\n- currY = leftY = rightY = 0\n\n- While we're in the region where both skylines are present\n(`pR < nR` and `pL < nL`) :\n\n    - Pick up the element with the smallest `x` coordinate. If it's\n    an element from the left skyline, move `pL` and update `leftY`.\n    If it's\n    an element from the right skyline, move `pR` and update `rightY`.\n\n    - Compute the largest height at the current point :\n    `maxY = max(leftY, rightY)`.\n\n    - Update an output skyline by `(x, maxY)` point, if `maxY` is not equal to `currY`.\n\n- While there are still elements in the left skyline (`pL < nL`),\nprocess them following the same logic as above.\n\n- While there are still elements in the right skyline (`pR < nR`),\nprocess them following the same logic as above.\n\n- Return output skyline.\n\n> Here are three usecases to illustrate the merge algorithm execution\n\n![bla](../Figures/218/merge3.png)\n\n![bla](../Figures/218/merge4.png)\n\n![bla](../Figures/218/merge7.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/KJU4KcvC/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"KJU4KcvC\"></iframe>\n\n* Time complexity : $$\\mathcal{O}(N \\log N)$$, where $$N$$ is number of\nbuildings. The problem is an example of\n[Master Theorem case II](https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms)#Case_2_example)\n : $$T(N) = 2 T(\\frac{N}{2}) + 2N$$, that results in $$\\mathcal{O}(N \\log N)$$\n time complexity.\n\n\n* Space complexity : $$\\mathcal{O}(N)$$.\n\n  - We use the `output` variable to keep track of the results.\n\n---",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "skyline-problem",
                        "hasVideoSolution": false,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 3.495,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            },
            {
                "id": "877",
                "title": "Largest Rectangle in Histogram",
                "type": 1,
                "info": "",
                "paidOnly": false,
                "chapterId": 124,
                "isEligibleForCompletion": true,
                "hasAppliedTimeTravelTicket": false,
                "completedWithTimeTravelTicket": false,
                "prerequisites": [],
                "__typename": "ItemNode",
                "questionData": {
                    "questionId": "84",
                    "questionFrontendId": "84",
                    "sessionId": "968792",
                    "questionTitle": "Largest Rectangle in Histogram",
                    "categoryTitle": "Algorithms",
                    "submitUrl": "/problems/largest-rectangle-in-histogram/submit/",
                    "interpretUrl": "/problems/largest-rectangle-in-histogram/interpret_solution/",
                    "codeDefinition": "[{\"value\": \"cpp\", \"text\": \"C++\", \"defaultCode\": \"class Solution {\\npublic:\\n    int largestRectangleArea(vector<int>& heights) {\\n        \\n    }\\n};\"}, {\"value\": \"java\", \"text\": \"Java\", \"defaultCode\": \"class Solution {\\n    public int largestRectangleArea(int[] heights) {\\n        \\n    }\\n}\"}, {\"value\": \"python\", \"text\": \"Python\", \"defaultCode\": \"class Solution(object):\\n    def largestRectangleArea(self, heights):\\n        \\\"\\\"\\\"\\n        :type heights: List[int]\\n        :rtype: int\\n        \\\"\\\"\\\"\\n        \"}, {\"value\": \"python3\", \"text\": \"Python3\", \"defaultCode\": \"class Solution:\\n    def largestRectangleArea(self, heights: List[int]) -> int:\\n        \"}, {\"value\": \"c\", \"text\": \"C\", \"defaultCode\": \"\\n\\nint largestRectangleArea(int* heights, int heightsSize){\\n\\n}\"}, {\"value\": \"csharp\", \"text\": \"C#\", \"defaultCode\": \"public class Solution {\\n    public int LargestRectangleArea(int[] heights) {\\n        \\n    }\\n}\"}, {\"value\": \"javascript\", \"text\": \"JavaScript\", \"defaultCode\": \"/**\\n * @param {number[]} heights\\n * @return {number}\\n */\\nvar largestRectangleArea = function(heights) {\\n    \\n};\"}, {\"value\": \"ruby\", \"text\": \"Ruby\", \"defaultCode\": \"# @param {Integer[]} heights\\n# @return {Integer}\\ndef largest_rectangle_area(heights)\\n    \\nend\"}, {\"value\": \"swift\", \"text\": \"Swift\", \"defaultCode\": \"class Solution {\\n    func largestRectangleArea(_ heights: [Int]) -> Int {\\n        \\n    }\\n}\"}, {\"value\": \"golang\", \"text\": \"Go\", \"defaultCode\": \"func largestRectangleArea(heights []int) int {\\n    \\n}\"}, {\"value\": \"scala\", \"text\": \"Scala\", \"defaultCode\": \"object Solution {\\n    def largestRectangleArea(heights: Array[Int]): Int = {\\n        \\n    }\\n}\"}, {\"value\": \"kotlin\", \"text\": \"Kotlin\", \"defaultCode\": \"class Solution {\\n    fun largestRectangleArea(heights: IntArray): Int {\\n        \\n    }\\n}\"}, {\"value\": \"rust\", \"text\": \"Rust\", \"defaultCode\": \"impl Solution {\\n    pub fn largest_rectangle_area(heights: Vec<i32>) -> i32 {\\n        \\n    }\\n}\"}, {\"value\": \"php\", \"text\": \"PHP\", \"defaultCode\": \"class Solution {\\n\\n    /**\\n     * @param Integer[] $heights\\n     * @return Integer\\n     */\\n    function largestRectangleArea($heights) {\\n        \\n    }\\n}\"}, {\"value\": \"typescript\", \"text\": \"TypeScript\", \"defaultCode\": \"function largestRectangleArea(heights: number[]): number {\\n\\n};\"}, {\"value\": \"racket\", \"text\": \"Racket\", \"defaultCode\": \"(define/contract (largest-rectangle-area heights)\\n  (-> (listof exact-integer?) exact-integer?)\\n\\n  )\"}, {\"value\": \"erlang\", \"text\": \"Erlang\", \"defaultCode\": \"-spec largest_rectangle_area(Heights :: [integer()]) -> integer().\\nlargest_rectangle_area(Heights) ->\\n  .\"}, {\"value\": \"elixir\", \"text\": \"Elixir\", \"defaultCode\": \"defmodule Solution do\\n  @spec largest_rectangle_area(heights :: [integer]) :: integer\\n  def largest_rectangle_area(heights) do\\n\\n  end\\nend\"}]",
                    "sampleTestCase": "[2,1,5,6,2,3]",
                    "enableTestMode": false,
                    "metaData": "{\r\n  \"name\": \"largestRectangleArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"heights\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}",
                    "enableRunCode": true,
                    "enableSubmit": true,
                    "judgerAvailable": true,
                    "infoVerified": true,
                    "envInfo": "{\"cpp\": [\"C++\", \"<p>Compiled with <code> clang 11 </code> using the latest C++ 17 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level two optimization (<code>-O2</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\"], \"java\": [\"Java\", \"<p><code>Java SE 13</code>.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n<p>Includes <code>Pair</code> class from https://docs.oracle.com/javase/8/javafx/api/javafx/util/Pair.html.</p>\"], \"python\": [\"Python\", \"<p><code>Python 2.7.12</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/2/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/2/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/2/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\\r\\n\\r\\n<p>Note that Python 2.7 <a href=\\\"https://www.python.org/dev/peps/pep-0373/\\\" target=\\\"_blank\\\">will not be maintained past 2020</a>. For the latest Python, please choose Python3 instead.</p>\"], \"c\": [\"C\", \"<p>Compiled with <code>gcc 8.2</code> using the gnu99 standard.</p>\\r\\n\\r\\n<p>Your code is compiled with level one optimization (<code>-O1</code>). <a href=\\\"https://github.com/google/sanitizers/wiki/AddressSanitizer\\\" target=\\\"_blank\\\">AddressSanitizer</a> is also enabled to help detect out-of-bounds and use-after-free bugs.</p>\\r\\n\\r\\n<p>Most standard library headers are already included automatically for your convenience.</p>\\r\\n\\r\\n<p>For hash table operations, you may use <a href=\\\"https://troydhanson.github.io/uthash/\\\" target=\\\"_blank\\\">uthash</a>. \\\"uthash.h\\\" is included by default. Below are some examples:</p>\\r\\n\\r\\n<p><b>1. Adding an item to a hash.</b>\\r\\n<pre>\\r\\nstruct hash_entry {\\r\\n    int id;            /* we'll use this field as the key */\\r\\n    char name[10];\\r\\n    UT_hash_handle hh; /* makes this structure hashable */\\r\\n};\\r\\n\\r\\nstruct hash_entry *users = NULL;\\r\\n\\r\\nvoid add_user(struct hash_entry *s) {\\r\\n    HASH_ADD_INT(users, id, s);\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>2. Looking up an item in a hash:</b>\\r\\n<pre>\\r\\nstruct hash_entry *find_user(int user_id) {\\r\\n    struct hash_entry *s;\\r\\n    HASH_FIND_INT(users, &user_id, s);\\r\\n    return s;\\r\\n}\\r\\n</pre>\\r\\n</p>\\r\\n\\r\\n<p><b>3. Deleting an item in a hash:</b>\\r\\n<pre>\\r\\nvoid delete_user(struct hash_entry *user) {\\r\\n    HASH_DEL(users, user);  \\r\\n}\\r\\n</pre>\\r\\n</p>\"], \"csharp\": [\"C#\", \"<p><a href=\\\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8\\\" target=\\\"_blank\\\">C# 8.0 </a></p>\\r\\n\\r\\n<p>Your code is compiled with debug flag enabled (<code>/debug</code>).</p>\"], \"javascript\": [\"JavaScript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES6 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\\r\\n\\r\\n<p>For Priority Queue / Queue data structures, you may use <a href=\\\"https://github.com/datastructures-js/priority-queue\\\" target=\\\"_blank\\\">datastructures-js/priority-queue</a> and <a href=\\\"https://github.com/datastructures-js/queue\\\" target=\\\"_blank\\\">datastructures-js/queue</a>.</p>\"], \"ruby\": [\"Ruby\", \"<p><code>Ruby 2.7.1</code></p>\\r\\n\\r\\n<p>Some common data structure implementations are provided in the Algorithms module: https://www.rubydoc.info/github/kanwei/algorithms/Algorithms</p>\"], \"swift\": [\"Swift\", \"<p><code>Swift 5.4.2</code>.</p>\"], \"golang\": [\"Go\", \"<p><code>Go 1.16.2</code>.</p>\\r\\n\\r\\n<p>Support <a href=\\\"https://godoc.org/github.com/emirpasic/gods\\\" target=\\\"_blank\\\">https://godoc.org/github.com/emirpasic/gods</a> library.</p>\"], \"python3\": [\"Python3\", \"<p><code>Python 3.9</code>.</p>\\r\\n\\r\\n<p>Most libraries are already imported automatically for your convenience, such as <a href=\\\"https://docs.python.org/3/library/array.html\\\" target=\\\"_blank\\\">array</a>, <a href=\\\"https://docs.python.org/3/library/bisect.html\\\" target=\\\"_blank\\\">bisect</a>, <a href=\\\"https://docs.python.org/3/library/collections.html\\\" target=\\\"_blank\\\">collections</a>. If you need more libraries, you can import it yourself.</p>\\r\\n\\r\\n<p>For Map/TreeMap data structure, you may use <a href=\\\"http://www.grantjenks.com/docs/sortedcontainers/\\\" target=\\\"_blank\\\">sortedcontainers</a> library.</p>\"], \"scala\": [\"Scala\", \"<p><code>Scala 2.13</code>.</p>\"], \"kotlin\": [\"Kotlin\", \"<p><code>Kotlin 1.3.10</code>.</p>\"], \"rust\": [\"Rust\", \"<p><code>Rust 1.45.2</code></p>\\r\\n\\r\\n<p>Supports <a href=\\\"https://crates.io/crates/rand\\\" target=\\\"_blank\\\">rand </a> v0.6\\u00a0from crates.io</p>\"], \"php\": [\"PHP\", \"<p><code>PHP 7.2</code>.</p>\\r\\n<p>With bcmath module</p>\"], \"typescript\": [\"Typescript\", \"<p><code>Node.js 14.8.0</code>.</p>\\r\\n\\r\\n<p>Your code is run with <code>--harmony</code> flag, enabling <a href=\\\"http://node.green/\\\" target=\\\"_blank\\\">new ES2020 features</a>.</p>\\r\\n\\r\\n<p><a href=\\\"https://lodash.com\\\" target=\\\"_blank\\\">lodash.js</a> library is included by default.</p>\"], \"racket\": [\"Racket\", \"<p>Run with <code>Racket 8.0</code>.</p>\"], \"erlang\": [\"Erlang\", \"Erlang/OTP 24.0.2\"], \"elixir\": [\"Elixir\", \"Elixir 1.12.0 with Erlang/OTP 24.0.2\"]}",
                    "content": "<p>Given an array of integers <code>heights</code> representing the histogram&#39;s bar height where the width of each bar is <code>1</code>, return <em>the area of the largest rectangle in the histogram</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg\" style=\"width: 522px; height: 242px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,1,5,6,2,3]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg\" style=\"width: 202px; height: 362px;\" />\n<pre>\n<strong>Input:</strong> heights = [2,4]\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= heights.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= heights[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
                    "translatedContent": null,
                    "urlManager": "{\"account_login\": \"/accounts/login/\", \"maintenance\": \"/maintenance/\", \"profile\": \"/profile/\"}",
                    "hints": [],
                    "solution": {
                        "title": "Largest Rectangle In Histogram",
                        "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div>\n    <div class=\"video-container\">\n        <iframe src=\"https://player.vimeo.com/video/495920363\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\n    </div>\n</div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\nWe need to find the rectangle of largest area that can be formed by using the given bars of histogram.\n\n\n---\n#### Approach 1: Brute Force\n\nFirstly, we need to take into account the fact that the height of the rectangle\nformed between any two bars will always be limited by the height of the shortest\nbar lying between them which can be understood by looking at the figure below:\n\n![Largest Rectangle](https://leetcode.com/media/original_images/84_Largest_Rectangle1.PNG)\n\nThus, we can simply start off by considering every possible\npair of bars and finding the area of the rectangle formed between them using the\nheight of the shortest bar lying between them as the height\n and the spacing between\nthem as the width of the rectangle. We can thus, find the required rectangle with the\n maximum area.\n\n\n <iframe src=\"https://leetcode.com/playground/9RnFo2tr/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"9RnFo2tr\"></iframe>\n\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^3)$$. We have to find the minimum height bar $$O(n)$$ lying\nbetween every pair $$O(n^2)$$.\n\n* Space complexity : $$O(1)$$. Constant space is used.\n<br />\n<br />\n---\n#### Approach 2: Better Brute Force\n\n**Algorithm**\n\nWe can do one slight modification in the previous approach to optimize it to some extent.\n Instead of taking every possible pair and then finding the bar of minimum height\n lying between them everytime, we can find the bar of minimum height for\n current pair by using the minimum height bar of the previous pair.\n\nIn mathematical terms, $$minheight=\\min(minheight, heights(j))$$, where $$heights(j)$$\n refers to the height of the $$j$$th bar.\n\n\n <iframe src=\"https://leetcode.com/playground/6rSztHK3/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"6rSztHK3\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n^2)$$. Every possible pair is considered\n\n* Space complexity : $$O(1)$$. No extra space is used.\n<br />\n<br />\n---\n#### Approach 3: Divide and Conquer Approach\n\n**Algorithm**\n\nThis approach relies on the observation that the rectangle with maximum area will be\nthe maximum of:\n\n1. The widest possible rectangle with height equal to the height of the shortest bar.\n\n2. The largest rectangle confined to the left of the shortest bar(subproblem).\n\n3. The largest rectangle confined to the right of the shortest bar(subproblem).\n\nLet's take an example:\n```\n[6, 4, 5, 2, 4, 3, 9]\n```\n\n Here, the shortest bar is of height 2. The area of the widest rectangle using this\n  bar as height is 2x8=16. Now, we need to look for cases 2 and 3 mentioned above.\n  Thus, we repeat the same process to the left and right of 2. In the left of 2, 4\n  is the minimum, forming an area of rectangle 4x3=12. Further, rectangles of area 6x1=6 and\n   5x1=5 exist in its left and right respectively. Similarly we find an area of 3x3=9, 4x1=4 and 9x1=9\n   to the left of 2. Thus, we get 16 as the correct maximum area. See the figure below for further clarification:\n\n   ![Divide and Conquer](https://leetcode.com/media/original_images/84_Largest_Rectangle2.PNG)\n\n\n<iframe src=\"https://leetcode.com/playground/8wCVdf7m/shared\" frameBorder=\"0\" width=\"100%\" height=\"429\" name=\"8wCVdf7m\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity :\n\n    Average Case: $$O\\big(n \\log n\\big)$$.\n\n    Worst Case: $$O(n^2)$$. If the numbers in the array are sorted, we don't gain the advantage of divide and conquer.\n\n* Space complexity : $$O(n)$$. Recursion with worst case depth $$n$$.\n<br />\n<br />\n---\n#### Approach 4: Better Divide and Conquer\n\n**Algorithm**\n\nYou can observe that in the Divide and Conquer Approach, we gain the advantage, since\n the large problem is divided into substantially smaller subproblems. But, we won't gain\n  much advantage with that approach if the array happens to be sorted in either\n  ascending or descending order, since every time we need to find the minimum number in a\n   large subarray $$O(n)$$. Thus, the overall complexity becomes $$O(n^2)$$ in the worst case.\n   We can reduce the time complexity by using a Segment Tree to find the minimum every time which\n   can be done in $$O\\big(\\log n\\big)$$ time.\n\n   For implementation, click [here](https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28941/segment-tree-solution-just-another-idea-onlogn-solution).\n\n**Complexity Analysis**\n\n* Time complexity : $$O\\big(n\\log n\\big)$$. Segment tree takes $$\\log n$$ for a total of $$n$$ times.\n\n* Space complexity : $$O(n)$$. Space required for Segment Tree.\n<br />\n<br />\n---\n#### Approach 5: Using Stack\n\n**Algorithm**\n\nIn this approach, we maintain a stack. Initially, we push a -1 onto the stack to mark the end.\nWe start with the leftmost bar and keep\npushing the current bar's index onto the stack until we get two successive numbers\n in descending order, i.e. until we get $$a[i]<a[i-1]$$. Now, we start popping the\n numbers from the stack until we hit a number $$stack[j]$$ on the stack such that $$a\\big[stack[j]\\big] \\leq a[i]$$.\n Every time we pop, we find out the area of rectangle formed using the current element as the height\n  of the rectangle and the difference between the the current element's index pointed to in the original array and the element $$stack[top-1] -1$$ as the width\n  i.e. if we pop an element $$stack[top]$$ and i is the current index to which we are pointing in the original array, the current area of the rectangle will be considered as:\n\n  $$\n  (i-stack[top-1]-1) \\times a\\big[stack[top]\\big].\n  $$\n\n  Further, if we reach the end of the array, we pop all the elements of the\n  stack and at every pop, this time we use the following equation to find the area:\n     $$(stack[top]-stack[top-1]) \\times a\\big[stack[top]\\big]$$, where $$stack[top]$$ refers to the\n      element just popped. Thus, we can get the area of the\n   of the largest rectangle by comparing the new area found everytime.\n\n   The following example will clarify the process further:\n   ```\n[6, 7, 5, 2, 4, 5, 9, 3]\n   ```\n\n!?!../Documents/84_Largest_Rectangle.json:1000,563!?!\n\n<iframe src=\"https://leetcode.com/playground/ALCTDhdJ/shared\" frameBorder=\"0\" width=\"100%\" height=\"480\" name=\"ALCTDhdJ\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$O(n)$$. $$n$$ numbers are pushed and popped.\n\n* Space complexity : $$O(n)$$. Stack is used.",
                        "canSeeDetail": true,
                        "paidOnly": true,
                        "titleSlug": "largest-rectangle-in-histogram",
                        "hasVideoSolution": true,
                        "paidOnlyVideo": true,
                        "rating": {
                            "average": 4.294,
                            "__typename": "RatingNode"
                        },
                        "__typename": "ArticleNode"
                    },
                    "__typename": "QuestionNode"
                }
            }
        ],
        "__typename": "ChapterNode",
        "descriptionText": "Here are some other questions that do not fit in other categories.\n\nWe recommend: Trapping Rain Water and The Skyline Problem.\n\nIf you'd like more challenge, we highly recommend you to solve the last two problems: The Skyline Problem and Largest Rectangle in Histogram. Both problems are very fun to solve and can be solved with many different approaches."
    }
]